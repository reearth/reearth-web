define(["./AttributeCompression-f7a901f9","./Matrix2-c6c16658","./ComponentDatatype-3d0a0aac","./createTaskProcessorWorker","./RuntimeError-5b082e8f","./when-4bbc8319","./WebGLConstants-508b9636"],(function(e,t,a,n,r,o,i){"use strict";const s=32767,c=new t.Cartographic,u=new t.Cartesian3,p=new t.Rectangle,l=new t.Ellipsoid,f={min:void 0,max:void 0};return n((function(n,r){const o=new Uint16Array(n.positions);!function(e){e=new Float64Array(e);let a=0;f.min=e[a++],f.max=e[a++],t.Rectangle.unpack(e,a,p),a+=t.Rectangle.packedLength,t.Ellipsoid.unpack(e,a,l)}(n.packedBuffer);const i=p,m=l,h=f.min,b=f.max,C=o.length/3,g=o.subarray(0,C),d=o.subarray(C,2*C),w=o.subarray(2*C,3*C);e.AttributeCompression.zigZagDeltaDecode(g,d,w);const k=new Float64Array(o.length);for(let e=0;e<C;++e){const n=g[e],r=d[e],o=w[e],p=a.CesiumMath.lerp(i.west,i.east,n/s),l=a.CesiumMath.lerp(i.south,i.north,r/s),f=a.CesiumMath.lerp(h,b,o/s),C=t.Cartographic.fromRadians(p,l,f,c),y=m.cartographicToCartesian(C,u);t.Cartesian3.pack(y,k,3*e)}return r.push(k.buffer),{positions:k.buffer}}))}));