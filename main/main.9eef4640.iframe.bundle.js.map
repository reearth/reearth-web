{"version":3,"file":"main.9eef4640.iframe.bundle.js","mappings":"AAGA","sources":["webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/ColorField/styles.css","webpack://reearth-web/./.storybook/generated-stories-entry.js","webpack://reearth-web/./src/locale/locale.ts","webpack://reearth-web/./src/locale/provider.tsx","webpack://reearth-web/./src/locale/publishedProvider.tsx","webpack://reearth-web/./.storybook/preview.tsx","webpack://reearth-web/./.storybook/preview.tsx-generated-config-entry.js","webpack://reearth-web/./src/components/atoms/Accordion/index.stories.tsx","webpack://reearth-web/./src/components/atoms/AdditionButton/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Balloon/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Box/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Button/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Check/index.stories.tsx","webpack://reearth-web/./src/components/atoms/CheckBox/index.tsx","webpack://reearth-web/./src/components/atoms/CheckBox/index.stories.tsx","webpack://reearth-web/./src/components/atoms/CheckGroup/index.stories.tsx","webpack://reearth-web/./src/components/atoms/ConfirmationModal/index.stories.tsx","webpack://reearth-web/./src/components/atoms/ContentPicker/index.tsx","webpack://reearth-web/./src/components/atoms/ContentPicker/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Divider/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Dropdown/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Flex/index.stories.tsx","webpack://reearth-web/./src/components/atoms/HelpButton/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Icon/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Loading/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Markdown/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Modal/ModalFrame/index.stories.tsx","webpack://reearth-web/./src/components/atoms/NotFound/index.tsx","webpack://reearth-web/./src/components/atoms/NotFound/index.stories.tsx","webpack://reearth-web/./src/components/atoms/NotificationBar/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Overlay/index.tsx","webpack://reearth-web/./src/components/atoms/Overlay/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Plugin/IFrame/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Plugin/index.stories.tsx","webpack://reearth-web/./src/components/atoms/PropertyGroup/index.stories.tsx","webpack://reearth-web/./src/components/atoms/PropertyPane/index.tsx","webpack://reearth-web/./src/components/atoms/PropertyPane/index.stories.tsx","webpack://reearth-web/./src/components/atoms/PublicationStatus/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Radio/index.stories.tsx","webpack://reearth-web/./src/components/atoms/RadioButton/index.stories.tsx","webpack://reearth-web/./src/components/atoms/RadioGroup/index.stories.tsx","webpack://reearth-web/./src/components/atoms/RadioLabel/index.stories.tsx","webpack://reearth-web/./src/components/atoms/RadioLabelGroup/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Resizable/hooks.ts","webpack://reearth-web/./src/components/atoms/Resizable/index.tsx","webpack://reearth-web/./src/components/atoms/Resizable/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Scroll/index.stories.tsx","webpack://reearth-web/./src/components/atoms/SearchBar/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Select/index.stories.tsx","webpack://reearth-web/./src/components/atoms/SelectBox/index.stories.tsx","webpack://reearth-web/./src/components/atoms/SelectOption/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Slide/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Slider/index.tsx","webpack://reearth-web/./src/components/atoms/Slider/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Text/index.stories.tsx","webpack://reearth-web/./src/components/atoms/TextBox/index.stories.tsx","webpack://reearth-web/./src/components/atoms/ToggleButton/index.stories.tsx","webpack://reearth-web/./src/components/atoms/TreeView/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Common/AssetModal/AssetCard/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Common/AssetModal/AssetListItem/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Common/AssetModal/AssetSelect/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Common/AssetModal/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Common/Header/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Common/ProjectCreationModal/index.tsx","webpack://reearth-web/./src/components/molecules/Common/ProjectCreationModal/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Common/WorkspaceCreationModal/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/DatasetPane/DatasetHeader/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/DatasetPane/DatasetHeader/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Card/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/DatasetPane/DatasetModal/Gdrive/hooks.ts","webpack://reearth-web/./src/components/molecules/EarthEditor/DatasetPane/DatasetModal/Gdrive/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/DatasetPane/DatasetModal/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/DatasetPane/DatasetModal/hooks.ts","webpack://reearth-web/./src/components/molecules/EarthEditor/DatasetPane/DatasetModal/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/DatasetPane/DatasetSchemaCell/hooks.ts","webpack://reearth-web/./src/components/molecules/EarthEditor/DatasetPane/DatasetSchemaCell/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/DatasetPane/DatasetSchemaCell/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Common/ProjectMenu/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/Header/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/Header/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/LayerMultipleSelectionModal/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/LayerSelectionModal/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/OutlinePane/hooks.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/OutlinePane/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/OutlinePane/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PrimitiveHeader/PrimitiveCell/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PrimitiveHeader/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PrimitiveHeader/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/CameraField/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/ColorField/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/LayerField/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/LocationField/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/PropertyTitle/PropertyLinkPanel/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/PropertyTitle/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/RadioField/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/SelectField/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/SwitchField/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/TextField/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/TypographyField/FontFamilyField/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/TypographyField/FontFormatField/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/TypographyField/FontSizeField/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/TypographyField/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyItem/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyItem/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyList/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/WidgetToggleSwitch/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/WidgetToggleSwitch/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PublicationModal/RadioLabelField/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PublicationModal/RadioLabelField/index.stories.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PublicationModal/InputField/index.tsx","webpack://reearth-web/./src/util/generate-random-string.ts","webpack://reearth-web/./src/components/molecules/EarthEditor/PublicationModal/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PublicationModal/hooks.ts","webpack://reearth-web/./src/components/molecules/EarthEditor/PublicationModal/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Published/Error/index.tsx","webpack://reearth-web/./src/components/molecules/Published/Error/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Settings/Avatar/index.tsx","webpack://reearth-web/./src/components/molecules/Settings/Avatar/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Settings/Project/Dataset/DatasetItem/index.tsx","webpack://reearth-web/./src/components/molecules/Settings/Project/Dataset/DatasetList/index.tsx","webpack://reearth-web/./src/components/molecules/Settings/Project/Dataset/DatasetList/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Settings/Project/Plugin/PluginAccordion/PluginAccordionItem/itemBody.tsx","webpack://reearth-web/./src/components/molecules/Settings/Project/Plugin/PluginAccordion/PluginAccordionItem/deleteModal.tsx","webpack://reearth-web/./src/components/molecules/Settings/Project/Plugin/PluginAccordion/PluginAccordionItem/itemHeader.tsx","webpack://reearth-web/./src/components/molecules/Settings/Project/Plugin/PluginAccordion/index.tsx","webpack://reearth-web/./src/components/molecules/Settings/Project/Plugin/PluginAccordion/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Settings/ProjectList/ProjectCell/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Settings/ProjectList/ProjectList/index.tsx","webpack://reearth-web/./src/components/molecules/Settings/ProjectList/ProjectList/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Settings/SelectField/index.tsx","webpack://reearth-web/./src/components/molecules/Settings/SelectField/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Block/DataList/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Block/Image/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Block/Location/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Block/Text/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Block/Video/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Block/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/Ellipsoid/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/Marker/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/Model/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/PhotoOverlay/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/Polygon/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/Polyline/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/Rect/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/Resource/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/TIleset/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Infobox/Field/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Infobox/Frame/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Infobox/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Plugin/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Widget/Menu/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Widget/SplashScreen/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Widget/Storytelling/index.stories.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Widget/index.stories.tsx","webpack://reearth-web/./src/components/atoms/Filled/index.ts","webpack://reearth-web/./src/components/atoms/DropHolder/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/api.ts","webpack://reearth-web/./src/components/molecules/Visualizer/hooks.ts","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Primitive/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/index.stories.tsx","webpack://reearth-web/./src/auth/hooks.ts","webpack://reearth-web/./src/components/atoms/Accordion/AccordionItem.tsx","webpack://reearth-web/./src/components/atoms/Accordion/index.tsx","webpack://reearth-web/./src/components/atoms/AdditionButton/index.tsx","webpack://reearth-web/./src/components/atoms/Balloon/index.tsx","webpack://reearth-web/./src/components/atoms/Box/index.tsx","webpack://reearth-web/./src/components/atoms/Button/index.tsx","webpack://reearth-web/./src/components/atoms/Check/index.tsx","webpack://reearth-web/./src/components/atoms/CheckGroup/index.tsx","webpack://reearth-web/./src/components/atoms/ConfirmationModal/index.tsx","webpack://reearth-web/./src/components/atoms/Divider/index.tsx","webpack://reearth-web/./src/components/atoms/Dropdown/index.tsx","webpack://reearth-web/./src/components/atoms/Flex/index.tsx","webpack://reearth-web/./src/components/atoms/HelpButton/index.tsx","webpack://reearth-web/./src/components/atoms/Icon/icons.ts","webpack://reearth-web/./src/components/atoms/Icon/index.tsx","webpack://reearth-web/./src/components/atoms/Loading/index.tsx","webpack://reearth-web/./src/components/atoms/Markdown/index.tsx","webpack://reearth-web/./src/components/atoms/Modal/ModalFrame/index.tsx","webpack://reearth-web/./src/components/atoms/Modal/index.tsx","webpack://reearth-web/./src/components/atoms/NotificationBar/index.tsx","webpack://reearth-web/./src/components/atoms/Plugin/IFrame/index.tsx","webpack://reearth-web/./src/components/atoms/Plugin/IFrame/hooks.ts","webpack://reearth-web/./src/components/atoms/Plugin/hooks.ts","webpack://reearth-web/./src/components/atoms/Plugin/index.tsx","webpack://reearth-web/./src/components/atoms/Portal/index.tsx","webpack://reearth-web/./src/components/atoms/PropertyGroup/index.tsx","webpack://reearth-web/./src/components/atoms/PublicationStatus/index.tsx","webpack://reearth-web/./src/components/atoms/Radio/index.tsx","webpack://reearth-web/./src/components/atoms/RadioButton/index.tsx","webpack://reearth-web/./src/components/atoms/RadioGroup/index.tsx","webpack://reearth-web/./src/components/atoms/RadioLabel/index.tsx","webpack://reearth-web/./src/components/atoms/RadioLabelGroup/index.tsx","webpack://reearth-web/./src/components/atoms/Scroll/index.tsx","webpack://reearth-web/./src/components/atoms/SearchBar/index.tsx","webpack://reearth-web/./src/components/atoms/Select/index.tsx","webpack://reearth-web/./src/components/atoms/SelectBox/index.tsx","webpack://reearth-web/./src/components/atoms/SelectOption/index.tsx","webpack://reearth-web/./src/components/atoms/Slide/index.tsx","webpack://reearth-web/./src/components/atoms/Text/index.tsx","webpack://reearth-web/./src/components/atoms/TextBox/index.tsx","webpack://reearth-web/./src/components/atoms/ToggleButton/index.tsx","webpack://reearth-web/./src/components/atoms/TreeView/Item.tsx","webpack://reearth-web/./src/components/atoms/TreeView/Items.tsx","webpack://reearth-web/./src/components/atoms/TreeView/index.tsx","webpack://reearth-web/./src/components/atoms/TreeView/hooks.ts","webpack://reearth-web/./src/components/atoms/TreeView/util.ts","webpack://reearth-web/./src/components/molecules/Common/AssetModal/AssetCard/index.tsx","webpack://reearth-web/./src/components/molecules/Common/AssetModal/AssetListItem/index.tsx","webpack://reearth-web/./src/components/molecules/Common/AssetModal/AssetSelect/index.tsx","webpack://reearth-web/./src/components/atoms/TabularModal/index.tsx","webpack://reearth-web/./src/components/molecules/Common/AssetModal/AssetDeleteModal/index.tsx","webpack://reearth-web/./src/components/molecules/Common/AssetModal/AssetContainer/index.tsx","webpack://reearth-web/./src/components/molecules/Common/AssetModal/AssetContainer/hooks.ts","webpack://reearth-web/./src/components/molecules/Common/AssetModal/index.tsx","webpack://reearth-web/./src/components/molecules/Common/TeamMenu/index.tsx","webpack://reearth-web/./src/components/molecules/Common/Header/profile.tsx","webpack://reearth-web/./src/components/molecules/Common/Header/index.tsx","webpack://reearth-web/./src/components/molecules/Common/MenuList/index.tsx","webpack://reearth-web/./src/components/molecules/Common/WorkspaceCreationModal/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/LayerMultipleSelectionModal/hooks.ts","webpack://reearth-web/./src/components/molecules/EarthEditor/LayerMultipleSelectionModal/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/LayerSelectionModal/index.tsx","webpack://reearth-web/./src/util/use-double-click.ts","webpack://reearth-web/./src/components/molecules/EarthEditor/LayerTreeViewItem/LayerActions/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/LayerTreeViewItem/LayerActions/hooks.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/LayerTreeViewItem/Layer.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/LayerTreeViewItem/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PrimitiveHeader/PrimitiveCell/hooks.ts","webpack://reearth-web/./src/components/molecules/EarthEditor/PrimitiveHeader/PrimitiveCell/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/CameraField/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/CameraField/hooks.ts","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/ColorField/styles.css?c9b1","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/ColorField/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/LayerField/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/LocationField/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/NumberField/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/PropertyTitle/PropertyLinkPanel/List.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/PropertyTitle/PropertyLinkPanel/Header.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/PropertyTitle/PropertyLinkPanel/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/PropertyTitle/PropertyLinkPanel/hooks.ts","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/PropertyTitle/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/RadioField/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/SelectField/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/SwitchField/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/TextField/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/TypographyField/FontFamilyField/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/TypographyField/FontFormatField/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/TypographyField/FontSizeField/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/TypographyField/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/URLField/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/NonEditableField/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyField/index.tsx","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyList/item.tsx","webpack://reearth-web/./src/util/arrayDiff.ts","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyList/hooks.ts","webpack://reearth-web/./src/components/molecules/EarthEditor/PropertyPane/PropertyList/index.tsx","webpack://reearth-web/./src/components/molecules/Settings/ProjectList/ProjectCell/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Block/DataList/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Block/Image/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Block/Location/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Block/Text/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Block/Video/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Block/common.ts","webpack://reearth-web/./src/components/molecules/Visualizer/Block/builtin.ts","webpack://reearth-web/./src/components/molecules/Visualizer/Block/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/Ellipsoid/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/Marker/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/Model/index.tsx","webpack://reearth-web/./src/util/use-delayed-count.ts","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/PhotoOverlay/hooks.ts","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/PhotoOverlay/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/Polygon/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/Polyline/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/Rect/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/Resource/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/TIleset/index.tsx","webpack://reearth-web/./src/util/image.ts","webpack://reearth-web/./src/util/raf.ts","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/common.ts","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/imagery.ts","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/builtin.ts","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/hooks.ts","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/useEngineRef.ts","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/CameraFlyTo.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Engine/Cesium/storybook.tsx","webpack://reearth-web/./src/components/atoms/InsertionBar/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Infobox/Field/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Infobox/Field/hooks.ts","webpack://reearth-web/./src/util/use-buffered.ts","webpack://reearth-web/./src/components/atoms/FloatedPanel/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Infobox/Frame/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Infobox/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Infobox/hooks.ts","webpack://reearth-web/./src/util/event.ts","webpack://reearth-web/./src/components/molecules/Visualizer/Plugin/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Plugin/hooks.ts","webpack://reearth-web/./src/components/molecules/Visualizer/Widget/Menu/MenuButton.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Widget/Menu/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Widget/SplashScreen/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Widget/Storytelling/hooks.ts","webpack://reearth-web/./src/components/molecules/Visualizer/Widget/Storytelling/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/Widget/builtin.ts","webpack://reearth-web/./src/components/molecules/Visualizer/Widget/index.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/context.tsx","webpack://reearth-web/./src/components/molecules/Visualizer/storybook.ts","webpack://reearth-web/./src/gql/graphql-client-api.tsx","webpack://reearth-web/./src/gql/provider.tsx","webpack://reearth-web/./src/sentry.ts","webpack://reearth-web/./src/state/reducer.ts","webpack://reearth-web/./src/state/store.ts","webpack://reearth-web/./src/state/provider.tsx","webpack://reearth-web/./src/theme/fonts.ts","webpack://reearth-web/./src/theme/colors.ts","webpack://reearth-web/./src/theme/theme.ts","webpack://reearth-web/./src/theme/z-index.ts","webpack://reearth-web/./src/theme/darkTheme.ts","webpack://reearth-web/./src/theme/lightheme.ts","webpack://reearth-web/./src/theme/globalstyle.tsx","webpack://reearth-web/./src/theme/provider.tsx","webpack://reearth-web/./src/theme/publishedAppProvider.tsx","webpack://reearth-web/./src/theme/metrics.ts","webpack://reearth-web/./src/theme/styled.ts","webpack://reearth-web/./src/util/deepFind.ts","webpack://reearth-web/./src/util/use-bind.ts","webpack://reearth-web/./src/util/use-dnd/drag.ts","webpack://reearth-web/./src/util/use-dnd/drop.ts","webpack://reearth-web/./src/util/use-dnd/index.tsx","webpack://reearth-web/./src/util/util.ts","webpack://reearth-web/./src/util/value.ts","webpack://reearth-web/./translations/en.yml","webpack://reearth-web/./translations/ja.yml","webpack://reearth-web/\\.)(","webpack://reearth-web/external \"Cesium\""],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".colorPicker {\\n    padding: 16px 16px 0 16px;\\n}\\n\\n.colorPicker .react-colorful__saturation-pointer {\\n    width: 15px;\\n    height: 15px;\\n    border-width: 2px;\\n}\\n\\n.colorPicker .react-colorful__hue-pointer,\\n.colorPicker .react-colorful__alpha-pointer {\\n  width: 1px;\\n  height: 10px;\\n  border: 3px solid white;\\n  border-radius: 2px;\\n  \\n}\\n\\n.colorPicker .react-colorful__saturation {\\n    margin-bottom: 10px;\\n    width: 256px;\\n    border-radius: 3px;\\n    border-bottom: none;\\n  }\\n\\n.colorPicker .react-colorful__hue,\\n.colorPicker .react-colorful__alpha {\\n  height: 10px;\\n  width: 250px;\\n  margin: 0 5px 10px 3px;\\n  border-radius: 3px;\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/molecules/EarthEditor/PropertyPane/PropertyField/ColorField/styles.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,yBAAyB;AAC7B;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,iBAAiB;AACrB;;AAEA;;EAEE,UAAU;EACV,YAAY;EACZ,uBAAuB;EACvB,kBAAkB;;AAEpB;;AAEA;IACI,mBAAmB;IACnB,YAAY;IACZ,kBAAkB;IAClB,mBAAmB;EACrB;;AAEF;;EAEE,YAAY;EACZ,YAAY;EACZ,sBAAsB;EACtB,kBAAkB;AACpB\",\"sourcesContent\":[\".colorPicker {\\n    padding: 16px 16px 0 16px;\\n}\\n\\n.colorPicker .react-colorful__saturation-pointer {\\n    width: 15px;\\n    height: 15px;\\n    border-width: 2px;\\n}\\n\\n.colorPicker .react-colorful__hue-pointer,\\n.colorPicker .react-colorful__alpha-pointer {\\n  width: 1px;\\n  height: 10px;\\n  border: 3px solid white;\\n  border-radius: 2px;\\n  \\n}\\n\\n.colorPicker .react-colorful__saturation {\\n    margin-bottom: 10px;\\n    width: 256px;\\n    border-radius: 3px;\\n    border-bottom: none;\\n  }\\n\\n.colorPicker .react-colorful__hue,\\n.colorPicker .react-colorful__alpha {\\n  height: 10px;\\n  width: 250px;\\n  margin: 0 5px 10px 3px;\\n  border-radius: 3px;\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\nvar _frameworkImportPath = require(\"@storybook/react\");\n\n/* eslint-disable import/no-unresolved */\n(0, _frameworkImportPath.configure)([require.context('../src', true, /^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.(js|ts|tsx|mdx))$/)], module, false);","import en from \"../../translations/en.yml\";\nimport ja from \"../../translations/ja.yml\";\nimport { createIntl, createIntlCache } from \"react-intl\";\n\nexport const locales = [\"en\", \"ja\"] as const;\n\nexport type Locale = typeof locales[number];\n\nexport const locale = navigator.language.split(\"_\")[0];\n\nexport const defaultLocale = locales.includes(locale as Locale) ? (locale as Locale) : \"en\";\n\nexport const messages = { en, ja } as Record<string, any>;\n\nconst cache = createIntlCache();\n\nexport const intl = createIntl(\n  {\n    locale: defaultLocale,\n    messages: messages[defaultLocale],\n  },\n  cache,\n);\n","import React, { PropsWithChildren } from \"react\";\nimport { IntlProvider } from \"react-intl\";\n\nimport { useLanguageQuery } from \"@reearth/gql\";\nimport { useAuth } from \"@reearth/auth\";\nimport { Locale, defaultLocale, locales, messages } from \"./locale\";\n\nexport default function Provider({ children }: PropsWithChildren<{}>) {\n  const { isAuthenticated } = useAuth();\n  const { data } = useLanguageQuery({ skip: !isAuthenticated });\n  const locale =\n    data?.me?.lang && locales.includes(data.me.lang as Locale) ? data.me.lang : defaultLocale;\n\n  return (\n    <IntlProvider locale={locale} defaultLocale={defaultLocale} messages={messages[locale]}>\n      {children}\n    </IntlProvider>\n  );\n}\n","import React, { PropsWithChildren } from \"react\";\nimport { IntlProvider } from \"react-intl\";\n\nimport { defaultLocale, messages } from \"./locale\";\n\nconst locale = navigator.language.split(\"_\")[0];\n\nexport default function PublishedProvider({ children }: PropsWithChildren<{}>) {\n  return (\n    <IntlProvider locale={locale} defaultLocale={defaultLocale} messages={messages[locale]}>\n      {children}\n    </IntlProvider>\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport {\n  ApolloProvider,\n  ApolloClient,\n  InMemoryCache,\n  ApolloLink,\n  Observable,\n} from \"@apollo/client\";\n\nimport { Provider as ThemeProvider } from \"../src/theme\";\nimport { Provider as IntlProvider } from \"../src/locale\";\nimport { Provider as DndProvider } from \"../src/util/use-dnd\";\nimport { Provider as LocalStateProvider } from \"../src/state\";\n\n// apollo client that does nothing\nconst mockClient = new ApolloClient({\n  link: new ApolloLink(\n    () =>\n      new Observable(observer => {\n        observer.complete();\n      }),\n  ),\n  cache: new InMemoryCache(),\n});\n\nexport const parameters = {\n  layout: \"fullscreen\",\n  controls: { expanded: true },\n};\n\nexport const decorators = [\n  (storyFn: () => ReactElement) => (\n    <ApolloProvider client={mockClient}>\n      <ThemeProvider>\n        <LocalStateProvider>\n          <IntlProvider>\n            <DndProvider>{storyFn()}</DndProvider>\n          </IntlProvider>\n        </LocalStateProvider>\n      </ThemeProvider>\n    </ApolloProvider>\n  ),\n];\n","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable import/no-unresolved */\nimport { addDecorator, addParameters, addLoader, addArgsEnhancer, addArgTypesEnhancer, setGlobalRender } from '/home/runner/work/reearth-web/reearth-web/node_modules/@storybook/builder-webpack5/node_modules/@storybook/client-api';\nimport { logger } from '/home/runner/work/reearth-web/reearth-web/node_modules/@storybook/builder-webpack5/node_modules/@storybook/client-logger';\nimport * as config from '/home/runner/work/reearth-web/reearth-web/.storybook/preview.tsx';\nObject.keys(config).forEach(function (key) {\n  var value = config[key];\n\n  switch (key) {\n    case 'args':\n    case 'argTypes':\n      {\n        return logger.warn('Invalid args/argTypes in config, ignoring.', JSON.stringify(value));\n      }\n\n    case 'decorators':\n      {\n        return value.forEach(function (decorator) {\n          return addDecorator(decorator, false);\n        });\n      }\n\n    case 'loaders':\n      {\n        return value.forEach(function (loader) {\n          return addLoader(loader, false);\n        });\n      }\n\n    case 'parameters':\n      {\n        return addParameters(_objectSpread({}, value), false);\n      }\n\n    case 'argTypesEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgTypesEnhancer(enhancer);\n        });\n      }\n\n    case 'argsEnhancers':\n      {\n        return value.forEach(function (enhancer) {\n          return addArgsEnhancer(enhancer);\n        });\n      }\n\n    case 'render':\n      {\n        return setGlobalRender(value);\n      }\n\n    case 'globals':\n    case 'globalTypes':\n      {\n        var v = {};\n        v[key] = value;\n        return addParameters(v, false);\n      }\n\n    default:\n      {\n        // eslint-disable-next-line prefer-template\n        return console.log(key + ' was not supported :( !');\n      }\n  }\n});","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\n\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport Component, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/accordion\\\",\\n  component: Component,\\n} as Meta;\\n\\nconst SampleHeading = <div style={{ color: \\\"white\\\", background: \\\"black\\\" }}>heading</div>;\\n\\nconst SampleContent = (\\n  <div style={{ color: \\\"white\\\", background: \\\"black\\\", padding: \\\"20px\\\" }}>hoge</div>\\n);\\n\\nexport const Default: Story<Props> = args => <Component {...args} />;\\n\\nDefault.args = {\\n  items: [\\n    {\\n      id: \\\"hoge\\\",\\n      heading: SampleHeading,\\n      content: SampleContent,\\n    },\\n    {\\n      id: \\\"hogefuga\\\",\\n      heading: SampleHeading,\\n      content: SampleContent,\\n    },\\n  ],\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":17},\"endLoc\":{\"col\":68,\"line\":17},\"startBody\":{\"col\":37,\"line\":17},\"endBody\":{\"col\":68,\"line\":17}}};\n    \nimport React from \"react\";\n\nimport { Meta, Story } from \"@storybook/react\";\nimport Component, { Props } from \".\";\n\nexport default {\n  title: \"atoms/accordion\",\n  component: Component,\n} as Meta;\n\nconst SampleHeading = <div style={{ color: \"white\", background: \"black\" }}>heading</div>;\n\nconst SampleContent = (\n  <div style={{ color: \"white\", background: \"black\", padding: \"20px\" }}>hoge</div>\n);\n\nexport const Default: Story<Props> = args => <Component {...args} />;\n\nDefault.args = {\n  items: [\n    {\n      id: \"hoge\",\n      heading: SampleHeading,\n      content: SampleContent,\n    },\n    {\n      id: \"hogefuga\",\n      heading: SampleHeading,\n      content: SampleContent,\n    },\n  ],\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { Component } from \\\"react\\\";\\nimport { Story, Meta } from \\\"@storybook/react\\\";\\nimport AdditionButton, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/Buttons/AdditionButton\\\",\\n  component: AdditionButton,\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => <Component {...args} />;\\n\\nDefault.args = {};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":10},\"endLoc\":{\"col\":68,\"line\":10},\"startBody\":{\"col\":37,\"line\":10},\"endBody\":{\"col\":68,\"line\":10}}};\n    \nimport React, { Component } from \"react\";\nimport { Story, Meta } from \"@storybook/react\";\nimport AdditionButton, { Props } from \".\";\n\nexport default {\n  title: \"atoms/Buttons/AdditionButton\",\n  component: AdditionButton,\n} as Meta;\n\nexport const Default: Story<Props> = args => <Component {...args} />;\n\nDefault.args = {};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { storiesOf } from \\\"@storybook/react\\\";\\nimport Balloon from \\\".\\\";\\n\\nconst descriptionTitle = \\\"Title\\\";\\nconst descriptionText = \\\"Description\\\";\\nconst img = {\\n  imagePath: `${process.env.PUBLIC_URL}/sample.svg`,\\n  alt: \\\"sample image\\\",\\n};\\n\\nstoriesOf(\\\"atoms/Balloon\\\", module).add(\\\"default\\\", () => (\\n  <Balloon title={descriptionTitle} description={descriptionText} img={img} />\\n));\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"default\":{\"startLoc\":{\"col\":39,\"line\":12},\"endLoc\":{\"col\":1,\"line\":14},\"startBody\":{\"col\":50,\"line\":12},\"endBody\":{\"col\":1,\"line\":14}}};\n    \nimport React from \"react\";\nimport { storiesOf } from \"@storybook/react\";\nimport Balloon from \".\";\n\nconst descriptionTitle = \"Title\";\nconst descriptionText = \"Description\";\nconst img = {\n  imagePath: `${process.env.PUBLIC_URL}/sample.svg`,\n  alt: \"sample image\",\n};\n\nstoriesOf(\"atoms/Balloon\", module).addParameters({ storySource: { source: __STORY__, locationsMap: __LOCATIONS_MAP__ } }).add(\"default\", () => (\n  <Balloon title={descriptionTitle} description={descriptionText} img={img} />\n));\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\n\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport Component, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/Box\\\",\\n  component: Component,\\n} as Meta;\\n\\nexport const Margin: Story<Props> = () => (\\n  <Component m=\\\"l\\\">\\n    <div>Margin</div>\\n  </Component>\\n);\\nexport const Padding: Story<Props> = () => (\\n  <Component p=\\\"l\\\">\\n    <div>Padding</div>\\n  </Component>\\n);\\nexport const Border: Story<Props> = () => (\\n  <Component border=\\\"solid 5px red\\\">\\n    <div>Border</div>\\n  </Component>\\n);\\nexport const Bg: Story<Props> = () => (\\n  <Component bg=\\\"red\\\">\\n    <div>Bg</div>\\n  </Component>\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Margin\":{\"startLoc\":{\"col\":36,\"line\":11},\"endLoc\":{\"col\":1,\"line\":15},\"startBody\":{\"col\":36,\"line\":11},\"endBody\":{\"col\":1,\"line\":15}},\"Padding\":{\"startLoc\":{\"col\":37,\"line\":16},\"endLoc\":{\"col\":1,\"line\":20},\"startBody\":{\"col\":37,\"line\":16},\"endBody\":{\"col\":1,\"line\":20}},\"Border\":{\"startLoc\":{\"col\":36,\"line\":21},\"endLoc\":{\"col\":1,\"line\":25},\"startBody\":{\"col\":36,\"line\":21},\"endBody\":{\"col\":1,\"line\":25}},\"Bg\":{\"startLoc\":{\"col\":32,\"line\":26},\"endLoc\":{\"col\":1,\"line\":30},\"startBody\":{\"col\":32,\"line\":26},\"endBody\":{\"col\":1,\"line\":30}}};\n    \nimport React from \"react\";\n\nimport { Meta, Story } from \"@storybook/react\";\nimport Component, { Props } from \".\";\n\nexport default {\n  title: \"atoms/Box\",\n  component: Component,\n} as Meta;\n\nexport const Margin: Story<Props> = () => (\n  <Component m=\"l\">\n    <div>Margin</div>\n  </Component>\n);;\nexport const Padding: Story<Props> = () => (\n  <Component p=\"l\">\n    <div>Padding</div>\n  </Component>\n);;\nexport const Border: Story<Props> = () => (\n  <Component border=\"solid 5px red\">\n    <div>Border</div>\n  </Component>\n);;\nexport const Bg: Story<Props> = () => (\n  <Component bg=\"red\">\n    <div>Bg</div>\n  </Component>\n);\n\n\n\nMargin.parameters = { storySource: { source: \"() => (\\n  <Component m=\\\"l\\\">\\n    <div>Margin</div>\\n  </Component>\\n)\" }, ...Margin.parameters };\nPadding.parameters = { storySource: { source: \"() => (\\n  <Component p=\\\"l\\\">\\n    <div>Padding</div>\\n  </Component>\\n)\" }, ...Padding.parameters };\nBorder.parameters = { storySource: { source: \"() => (\\n  <Component border=\\\"solid 5px red\\\">\\n    <div>Border</div>\\n  </Component>\\n)\" }, ...Border.parameters };\nBg.parameters = { storySource: { source: \"() => (\\n  <Component bg=\\\"red\\\">\\n    <div>Bg</div>\\n  </Component>\\n)\" }, ...Bg.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport Button from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/Buttons/Button\\\",\\n  component: Button,\\n} as Meta;\\n\\nexport const PrimarySmall = () => <Button buttonType=\\\"primary\\\" text=\\\"Primary\\\" />;\\nexport const PrimaryLarge = () => <Button buttonType=\\\"primary\\\" text=\\\"Primary\\\" large />;\\nexport const SecondarySmall = () => <Button buttonType=\\\"secondary\\\" text=\\\"secondary\\\" />;\\nexport const SecondaryLarge = () => <Button buttonType=\\\"secondary\\\" text=\\\"secondary\\\" large />;\\nexport const DangerSmall = () => <Button buttonType=\\\"danger\\\" text=\\\"danger\\\" />;\\nexport const DangerLarge = () => <Button buttonType=\\\"danger\\\" text=\\\"danger\\\" large />;\\nexport const Disabled = () => (\\n  <Button buttonType=\\\"primary\\\" text=\\\"disabled\\\" icon=\\\"datasetAdd\\\" disabled />\\n);\\n\\nexport const WithIcon = () => <Button buttonType=\\\"primary\\\" text=\\\"Primary\\\" icon=\\\"datasetAdd\\\" />;\\nexport const WithIconRight = () => (\\n  <Button buttonType=\\\"secondary\\\" text=\\\"secondary\\\" icon=\\\"datasetAdd\\\" iconRight />\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"PrimarySmall\":{\"startLoc\":{\"col\":28,\"line\":10},\"endLoc\":{\"col\":80,\"line\":10},\"startBody\":{\"col\":28,\"line\":10},\"endBody\":{\"col\":80,\"line\":10}},\"PrimaryLarge\":{\"startLoc\":{\"col\":28,\"line\":11},\"endLoc\":{\"col\":86,\"line\":11},\"startBody\":{\"col\":28,\"line\":11},\"endBody\":{\"col\":86,\"line\":11}},\"SecondarySmall\":{\"startLoc\":{\"col\":30,\"line\":12},\"endLoc\":{\"col\":86,\"line\":12},\"startBody\":{\"col\":30,\"line\":12},\"endBody\":{\"col\":86,\"line\":12}},\"SecondaryLarge\":{\"startLoc\":{\"col\":30,\"line\":13},\"endLoc\":{\"col\":92,\"line\":13},\"startBody\":{\"col\":30,\"line\":13},\"endBody\":{\"col\":92,\"line\":13}},\"DangerSmall\":{\"startLoc\":{\"col\":27,\"line\":14},\"endLoc\":{\"col\":77,\"line\":14},\"startBody\":{\"col\":27,\"line\":14},\"endBody\":{\"col\":77,\"line\":14}},\"DangerLarge\":{\"startLoc\":{\"col\":27,\"line\":15},\"endLoc\":{\"col\":83,\"line\":15},\"startBody\":{\"col\":27,\"line\":15},\"endBody\":{\"col\":83,\"line\":15}},\"Disabled\":{\"startLoc\":{\"col\":24,\"line\":16},\"endLoc\":{\"col\":1,\"line\":18},\"startBody\":{\"col\":24,\"line\":16},\"endBody\":{\"col\":1,\"line\":18}},\"WithIcon\":{\"startLoc\":{\"col\":24,\"line\":20},\"endLoc\":{\"col\":94,\"line\":20},\"startBody\":{\"col\":24,\"line\":20},\"endBody\":{\"col\":94,\"line\":20}},\"WithIconRight\":{\"startLoc\":{\"col\":29,\"line\":21},\"endLoc\":{\"col\":1,\"line\":23},\"startBody\":{\"col\":29,\"line\":21},\"endBody\":{\"col\":1,\"line\":23}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport Button from \".\";\n\nexport default {\n  title: \"atoms/Buttons/Button\",\n  component: Button,\n} as Meta;\n\nexport const PrimarySmall = () => <Button buttonType=\"primary\" text=\"Primary\" />;;\nexport const PrimaryLarge = () => <Button buttonType=\"primary\" text=\"Primary\" large />;;\nexport const SecondarySmall = () => <Button buttonType=\"secondary\" text=\"secondary\" />;;\nexport const SecondaryLarge = () => <Button buttonType=\"secondary\" text=\"secondary\" large />;;\nexport const DangerSmall = () => <Button buttonType=\"danger\" text=\"danger\" />;;\nexport const DangerLarge = () => <Button buttonType=\"danger\" text=\"danger\" large />;;\nexport const Disabled = () => (\n  <Button buttonType=\"primary\" text=\"disabled\" icon=\"datasetAdd\" disabled />\n);;\n\nexport const WithIcon = () => <Button buttonType=\"primary\" text=\"Primary\" icon=\"datasetAdd\" />;;\nexport const WithIconRight = () => (\n  <Button buttonType=\"secondary\" text=\"secondary\" icon=\"datasetAdd\" iconRight />\n);\n\n\n\nPrimarySmall.parameters = { storySource: { source: \"() => <Button buttonType=\\\"primary\\\" text=\\\"Primary\\\" />\" }, ...PrimarySmall.parameters };\nPrimaryLarge.parameters = { storySource: { source: \"() => <Button buttonType=\\\"primary\\\" text=\\\"Primary\\\" large />\" }, ...PrimaryLarge.parameters };\nSecondarySmall.parameters = { storySource: { source: \"() => <Button buttonType=\\\"secondary\\\" text=\\\"secondary\\\" />\" }, ...SecondarySmall.parameters };\nSecondaryLarge.parameters = { storySource: { source: \"() => <Button buttonType=\\\"secondary\\\" text=\\\"secondary\\\" large />\" }, ...SecondaryLarge.parameters };\nDangerSmall.parameters = { storySource: { source: \"() => <Button buttonType=\\\"danger\\\" text=\\\"danger\\\" />\" }, ...DangerSmall.parameters };\nDangerLarge.parameters = { storySource: { source: \"() => <Button buttonType=\\\"danger\\\" text=\\\"danger\\\" large />\" }, ...DangerLarge.parameters };\nDisabled.parameters = { storySource: { source: \"() => (\\n  <Button buttonType=\\\"primary\\\" text=\\\"disabled\\\" icon=\\\"datasetAdd\\\" disabled />\\n)\" }, ...Disabled.parameters };\nWithIcon.parameters = { storySource: { source: \"() => <Button buttonType=\\\"primary\\\" text=\\\"Primary\\\" icon=\\\"datasetAdd\\\" />\" }, ...WithIcon.parameters };\nWithIconRight.parameters = { storySource: { source: \"() => (\\n  <Button buttonType=\\\"secondary\\\" text=\\\"secondary\\\" icon=\\\"datasetAdd\\\" iconRight />\\n)\" }, ...WithIconRight.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport Check from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/Check\\\",\\n  component: Check,\\n} as Meta;\\n\\nexport const Default = () => <Check value=\\\"value\\\">Check</Check>;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":63,\"line\":10},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":63,\"line\":10}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport Check from \".\";\n\nexport default {\n  title: \"atoms/Check\",\n  component: Check,\n} as Meta;\n\nexport const Default = () => <Check value=\"value\">Check</Check>;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <Check value=\\\"value\\\">Check</Check>\" }, ...Default.parameters };","import React from \"react\";\n\n// Theme\nimport { styled } from \"@reearth/theme\";\n\ninterface CheckBoxProps {\n  checked?: boolean;\n  onChange?: (value: boolean) => void;\n  disabled?: boolean;\n}\n\nconst CheckBox: React.FC<CheckBoxProps> = ({ checked, onChange, disabled }) => {\n  return (\n    <Wrapper>\n      <StyledInput\n        type=\"checkbox\"\n        checked={checked}\n        onChange={e => onChange?.(e.currentTarget.checked)}\n        disabled={disabled}\n      />\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 5px 0;\n`;\n\nconst StyledInput = styled.input`\n  border: none;\n  outline: none;\n  margin: 5px;\n`;\n\nexport default CheckBox;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport CheckBox from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/CheckBox\\\",\\n  component: CheckBox,\\n} as Meta;\\n\\nexport const Default = () => <CheckBox checked onChange={action(\\\"onchange\\\")} />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":11},\"endLoc\":{\"col\":79,\"line\":11},\"startBody\":{\"col\":23,\"line\":11},\"endBody\":{\"col\":79,\"line\":11}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport CheckBox from \".\";\n\nexport default {\n  title: \"atoms/CheckBox\",\n  component: CheckBox,\n} as Meta;\n\nexport const Default = () => <CheckBox checked onChange={action(\"onchange\")} />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <CheckBox checked onChange={action(\\\"onchange\\\")} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport { styled } from \\\"@reearth/theme\\\";\\nimport CheckGroup from \\\".\\\";\\n\\nconst items: { value: string; label: string }[] = [\\n  { value: \\\"0\\\", label: \\\"A\\\" },\\n  { value: \\\"1\\\", label: \\\"B\\\" },\\n  { value: \\\"2\\\", label: \\\"C\\\" },\\n];\\n\\nconst Check = styled.div<{ value: string; label: string }>``;\\n\\nexport default {\\n  title: \\\"atoms/CheckGroup\\\",\\n  component: CheckGroup,\\n} as Meta;\\n\\nexport const Default = () => (\\n  <CheckGroup values={[\\\"0\\\"]} onChange={action(\\\"onchange\\\")}>\\n    {items.map(({ value, label }) => (\\n      <Check key={value} value={value} label={label}>\\n        {label}\\n      </Check>\\n    ))}\\n  </CheckGroup>\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":20},\"endLoc\":{\"col\":1,\"line\":28},\"startBody\":{\"col\":23,\"line\":20},\"endBody\":{\"col\":1,\"line\":28}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport { styled } from \"@reearth/theme\";\nimport CheckGroup from \".\";\n\nconst items: { value: string; label: string }[] = [\n  { value: \"0\", label: \"A\" },\n  { value: \"1\", label: \"B\" },\n  { value: \"2\", label: \"C\" },\n];\n\nconst Check = styled.div<{ value: string; label: string }>``;\n\nexport default {\n  title: \"atoms/CheckGroup\",\n  component: CheckGroup,\n} as Meta;\n\nexport const Default = () => (\n  <CheckGroup values={[\"0\"]} onChange={action(\"onchange\")}>\n    {items.map(({ value, label }) => (\n      <Check key={value} value={value} label={label}>\n        {label}\n      </Check>\n    ))}\n  </CheckGroup>\n);\n\n\n\nDefault.parameters = { storySource: { source: \"() => (\\n  <CheckGroup values={[\\\"0\\\"]} onChange={action(\\\"onchange\\\")}>\\n    {items.map(({ value, label }) => (\\n      <Check key={value} value={value} label={label}>\\n        {label}\\n      </Check>\\n    ))}\\n  </CheckGroup>\\n)\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useState } from \\\"react\\\";\\n\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport ConfirmationModal, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/Modal/ConfirmationModal\\\",\\n  component: ConfirmationModal,\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => {\\n  const [isOpen, setOpen] = useState(false);\\n  return (\\n    <>\\n      <ConfirmationModal\\n        {...args}\\n        isOpen={isOpen}\\n        onClose={() => setOpen(false)}\\n        onCancel={() => setOpen(false)}\\n      />\\n      <button onClick={() => setOpen(true)}>click</button>\\n    </>\\n  );\\n};\\n\\nDefault.args = {\\n  body: <div>Are you sure to delete this</div>,\\n  title: \\\"Delete Sample\\\",\\n  onProceed: () => console.log(\\\"Proceed\\\"),\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":11},\"endLoc\":{\"col\":1,\"line\":24},\"startBody\":{\"col\":37,\"line\":11},\"endBody\":{\"col\":1,\"line\":24}}};\n    \nimport React, { useState } from \"react\";\n\nimport { Meta, Story } from \"@storybook/react\";\nimport ConfirmationModal, { Props } from \".\";\n\nexport default {\n  title: \"atoms/Modal/ConfirmationModal\",\n  component: ConfirmationModal,\n} as Meta;\n\nexport const Default: Story<Props> = args => {\n  const [isOpen, setOpen] = useState(false);\n  return (\n    <>\n      <ConfirmationModal\n        {...args}\n        isOpen={isOpen}\n        onClose={() => setOpen(false)}\n        onCancel={() => setOpen(false)}\n      />\n      <button onClick={() => setOpen(true)}>click</button>\n    </>\n  );\n};\n\nDefault.args = {\n  body: <div>Are you sure to delete this</div>,\n  title: \"Delete Sample\",\n  onProceed: () => console.log(\"Proceed\"),\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => {\\n  const [isOpen, setOpen] = useState(false);\\n  return (\\n    <>\\n      <ConfirmationModal\\n        {...args}\\n        isOpen={isOpen}\\n        onClose={() => setOpen(false)}\\n        onCancel={() => setOpen(false)}\\n      />\\n      <button onClick={() => setOpen(true)}>click</button>\\n    </>\\n  );\\n}\" }, ...Default.parameters };","import React, { useRef } from \"react\";\nimport { useClickAway } from \"react-use\";\n\nimport { styled } from \"@reearth/theme\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Text from \"@reearth/components/atoms/Text\";\n\nexport interface Item {\n  id: string;\n  name: string;\n  icon?: string;\n}\n\nexport interface ContentsPickerProps {\n  className?: string;\n  items?: Item[];\n  onClickAway?: () => void;\n  onSelect?: (index: number) => void;\n}\n\nconst ContentPicker: React.FC<ContentsPickerProps> = ({\n  className,\n  items: items,\n  onSelect,\n  onClickAway,\n}) => {\n  const ref = useRef(null);\n  useClickAway(ref, () => onClickAway?.());\n  return (\n    <Wrapper className={className} ref={ref}>\n      <ContentsList>\n        {items?.map((item, i) => (\n          <ContentItem key={item.id}>\n            <ContentButton onClick={() => onSelect?.(i)}>\n              <StyledIcon icon={item.icon} size={20} />\n              <ButtonText size=\"xs\">{item.name}</ButtonText>\n            </ContentButton>\n          </ContentItem>\n        ))}\n        {new Array((items ?? []).length % 3).fill(undefined).map((_, i) => (\n          <GhostButton key={i} />\n        ))}\n      </ContentsList>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  background: ${props => props.theme.infoBox.bg};\n  margin-top: 5px;\n  padding: 10px;\n  box-sizing: border-box;\n  border-radius: 3px;\n  width: 288px;\n  height: 160px;\n  color: ${props => props.theme.infoBox.mainText};\n  box-shadow: 0 0 5px ${props => props.theme.infoBox.deepBg};\n  &:after {\n    content: \"\";\n    position: absolute;\n    right: 0;\n    top: -5px;\n    left: 0;\n    width: 0px;\n    height: 0px;\n    margin: auto;\n    border-style: solid;\n    border-color: transparent transparent ${props => props.theme.infoBox.bg} transparent;\n    border-width: 0 10px 10px 10px;\n  }\n`;\n\nconst ContentsList = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: 100%;\n`;\n\nconst ContentItem = styled.div`\n  flex: 0 0 33.33333%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst ContentButton = styled.div`\n  padding: 5px;\n  width: 60px;\n  border: solid 0.5px transparent;\n  box-sizing: border-box;\n  text-align: center;\n  cursor: pointer;\n\n  &:hover {\n    border-radius: 6px;\n    border: solid 0.5px ${props => props.theme.main.select};\n  }\n`;\n\nconst GhostButton = styled.div`\n  width: 30%;\n`;\n\nconst ButtonText = styled(Text)`\n  margin: 3px 0;\n  user-select: none;\n`;\n\nconst StyledIcon = styled(Icon)`\n  display: block;\n  margin: 0 auto;\n`;\n\nexport default ContentPicker;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport ContentPicker from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/Pickers/ContentPicker\\\",\\n  component: ContentPicker,\\n} as Meta;\\n\\nexport const Default = () => <ContentPicker />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":46,\"line\":10},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":46,\"line\":10}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport ContentPicker from \".\";\n\nexport default {\n  title: \"atoms/Pickers/ContentPicker\",\n  component: ContentPicker,\n} as Meta;\n\nexport const Default = () => <ContentPicker />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <ContentPicker />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport Divider from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/Divider\\\",\\n  component: Divider,\\n} as Meta;\\n\\nexport const Default = () => <Divider />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":40,\"line\":10},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":40,\"line\":10}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport Divider from \".\";\n\nexport default {\n  title: \"atoms/Divider\",\n  component: Divider,\n} as Meta;\n\nexport const Default = () => <Divider />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <Divider />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport Dropdown from \\\".\\\";\\n\\nconst Wrapper: React.FC = props => (\\n  <div style={{ width: \\\"100px\\\", height: \\\"60px\\\" }}>{props.children}</div>\\n);\\n\\nexport default {\\n  title: \\\"atoms/Dropdown\\\",\\n  component: Dropdown,\\n} as Meta;\\n\\nexport const Default = () => (\\n  <Wrapper>\\n    <Dropdown isOpen label=\\\"Sample\\\">\\n      <ul>\\n        <li>Apple</li>\\n        <li>Banana</li>\\n        <li>Orange</li>\\n      </ul>\\n    </Dropdown>\\n  </Wrapper>\\n);\\n\\nexport const DirectionRight = () => (\\n  <Wrapper>\\n    <Dropdown isOpen label=\\\"Sample\\\" direction=\\\"right\\\">\\n      <ul>\\n        <li>Apple</li>\\n        <li>Banana</li>\\n        <li>Orange</li>\\n      </ul>\\n    </Dropdown>\\n  </Wrapper>\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":14},\"endLoc\":{\"col\":1,\"line\":24},\"startBody\":{\"col\":23,\"line\":14},\"endBody\":{\"col\":1,\"line\":24}},\"DirectionRight\":{\"startLoc\":{\"col\":30,\"line\":26},\"endLoc\":{\"col\":1,\"line\":36},\"startBody\":{\"col\":30,\"line\":26},\"endBody\":{\"col\":1,\"line\":36}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport Dropdown from \".\";\n\nconst Wrapper: React.FC = props => (\n  <div style={{ width: \"100px\", height: \"60px\" }}>{props.children}</div>\n);\n\nexport default {\n  title: \"atoms/Dropdown\",\n  component: Dropdown,\n} as Meta;\n\nexport const Default = () => (\n  <Wrapper>\n    <Dropdown isOpen label=\"Sample\">\n      <ul>\n        <li>Apple</li>\n        <li>Banana</li>\n        <li>Orange</li>\n      </ul>\n    </Dropdown>\n  </Wrapper>\n);;\n\nexport const DirectionRight = () => (\n  <Wrapper>\n    <Dropdown isOpen label=\"Sample\" direction=\"right\">\n      <ul>\n        <li>Apple</li>\n        <li>Banana</li>\n        <li>Orange</li>\n      </ul>\n    </Dropdown>\n  </Wrapper>\n);\n\n\n\nDefault.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <Dropdown isOpen label=\\\"Sample\\\">\\n      <ul>\\n        <li>Apple</li>\\n        <li>Banana</li>\\n        <li>Orange</li>\\n      </ul>\\n    </Dropdown>\\n  </Wrapper>\\n)\" }, ...Default.parameters };\nDirectionRight.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <Dropdown isOpen label=\\\"Sample\\\" direction=\\\"right\\\">\\n      <ul>\\n        <li>Apple</li>\\n        <li>Banana</li>\\n        <li>Orange</li>\\n      </ul>\\n    </Dropdown>\\n  </Wrapper>\\n)\" }, ...DirectionRight.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\n\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport Component, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/flex\\\",\\n  component: Component,\\n} as Meta;\\n\\nconst ExampleDiv = () => (\\n  <>\\n    <div>hoge</div>\\n    <div>fuga</div>\\n  </>\\n);\\n\\nexport const SpaceBetween: Story<Props> = args => (\\n  <Component {...args}>\\n    <ExampleDiv />\\n  </Component>\\n);\\nexport const GapChildren: Story<Props> = args => (\\n  <Component {...args}>\\n    <div>hoge</div>\\n    <div>fuga</div>\\n  </Component>\\n);\\nexport const DirectionVertical: Story<Props> = args => (\\n  <Component {...args}>\\n    <ExampleDiv />\\n  </Component>\\n);\\n\\nSpaceBetween.args = {\\n  justify: \\\"space-between\\\",\\n};\\n\\nGapChildren.args = {\\n  gap: \\\"20px\\\",\\n};\\n\\nDirectionVertical.args = {\\n  direction: \\\"column\\\",\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"SpaceBetween\":{\"startLoc\":{\"col\":42,\"line\":18},\"endLoc\":{\"col\":1,\"line\":22},\"startBody\":{\"col\":42,\"line\":18},\"endBody\":{\"col\":1,\"line\":22}},\"GapChildren\":{\"startLoc\":{\"col\":41,\"line\":23},\"endLoc\":{\"col\":1,\"line\":28},\"startBody\":{\"col\":41,\"line\":23},\"endBody\":{\"col\":1,\"line\":28}},\"DirectionVertical\":{\"startLoc\":{\"col\":47,\"line\":29},\"endLoc\":{\"col\":1,\"line\":33},\"startBody\":{\"col\":47,\"line\":29},\"endBody\":{\"col\":1,\"line\":33}}};\n    \nimport React from \"react\";\n\nimport { Meta, Story } from \"@storybook/react\";\nimport Component, { Props } from \".\";\n\nexport default {\n  title: \"atoms/flex\",\n  component: Component,\n} as Meta;\n\nconst ExampleDiv = () => (\n  <>\n    <div>hoge</div>\n    <div>fuga</div>\n  </>\n);\n\nexport const SpaceBetween: Story<Props> = args => (\n  <Component {...args}>\n    <ExampleDiv />\n  </Component>\n);;\nexport const GapChildren: Story<Props> = args => (\n  <Component {...args}>\n    <div>hoge</div>\n    <div>fuga</div>\n  </Component>\n);;\nexport const DirectionVertical: Story<Props> = args => (\n  <Component {...args}>\n    <ExampleDiv />\n  </Component>\n);\n\nSpaceBetween.args = {\n  justify: \"space-between\",\n};\n\nGapChildren.args = {\n  gap: \"20px\",\n};\n\nDirectionVertical.args = {\n  direction: \"column\",\n};\n\n\n\nSpaceBetween.parameters = { storySource: { source: \"args => (\\n  <Component {...args}>\\n    <ExampleDiv />\\n  </Component>\\n)\" }, ...SpaceBetween.parameters };\nGapChildren.parameters = { storySource: { source: \"args => (\\n  <Component {...args}>\\n    <div>hoge</div>\\n    <div>fuga</div>\\n  </Component>\\n)\" }, ...GapChildren.parameters };\nDirectionVertical.parameters = { storySource: { source: \"args => (\\n  <Component {...args}>\\n    <ExampleDiv />\\n  </Component>\\n)\" }, ...DirectionVertical.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Story, Meta } from \\\"@storybook/react\\\";\\nimport Component, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/HelpButton\\\",\\n  component: Component,\\n} as Meta;\\n\\nconst descriptionTitle = \\\"Title\\\";\\nconst description = \\\"Description\\\";\\nconst img = {\\n  imagePath: `${process.env.PUBLIC_URL}/sample.svg`,\\n  alt: \\\"sample image\\\",\\n};\\n\\nexport const Default: Story<Props> = args => <Component {...args} />;\\n\\nDefault.args = {\\n  description: description,\\n  descriptionTitle: descriptionTitle,\\n  img: img,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":17},\"endLoc\":{\"col\":68,\"line\":17},\"startBody\":{\"col\":37,\"line\":17},\"endBody\":{\"col\":68,\"line\":17}}};\n    \nimport React from \"react\";\nimport { Story, Meta } from \"@storybook/react\";\nimport Component, { Props } from \".\";\n\nexport default {\n  title: \"atoms/HelpButton\",\n  component: Component,\n} as Meta;\n\nconst descriptionTitle = \"Title\";\nconst description = \"Description\";\nconst img = {\n  imagePath: `${process.env.PUBLIC_URL}/sample.svg`,\n  alt: \"sample image\",\n};\n\nexport const Default: Story<Props> = args => <Component {...args} />;\n\nDefault.args = {\n  description: description,\n  descriptionTitle: descriptionTitle,\n  img: img,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport Icon from \\\".\\\";\\n\\nconst icon =\\n  '<svg stroke=\\\"white\\\" fill=\\\"#00A0E8\\\" stroke-width=\\\"2\\\" viewBox=\\\"0 0 24 24\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" class=\\\"css-1t9xarj\\\" height=\\\"1em\\\" width=\\\"1em\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\\\"></path><circle cx=\\\"12\\\" cy=\\\"10\\\" r=\\\"3\\\"></circle></svg>';\\n\\nexport default {\\n  title: \\\"atoms/Icon\\\",\\n  component: Icon,\\n} as Meta;\\n\\nexport const Default = () => <Icon icon=\\\"layer\\\" alt=\\\"icon\\\" size={20} />;\\nexport const Image = () => <Icon icon=\\\"textIcon.png\\\" alt=\\\"icon\\\" size={20} />;\\nexport const Svg = () => <Icon icon={icon} alt=\\\"icon\\\" size={20} />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":13},\"endLoc\":{\"col\":71,\"line\":13},\"startBody\":{\"col\":23,\"line\":13},\"endBody\":{\"col\":71,\"line\":13}},\"Image\":{\"startLoc\":{\"col\":21,\"line\":14},\"endLoc\":{\"col\":76,\"line\":14},\"startBody\":{\"col\":21,\"line\":14},\"endBody\":{\"col\":76,\"line\":14}},\"Svg\":{\"startLoc\":{\"col\":19,\"line\":15},\"endLoc\":{\"col\":66,\"line\":15},\"startBody\":{\"col\":19,\"line\":15},\"endBody\":{\"col\":66,\"line\":15}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport Icon from \".\";\n\nconst icon =\n  '<svg stroke=\"white\" fill=\"#00A0E8\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"css-1t9xarj\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\"></path><circle cx=\"12\" cy=\"10\" r=\"3\"></circle></svg>';\n\nexport default {\n  title: \"atoms/Icon\",\n  component: Icon,\n} as Meta;\n\nexport const Default = () => <Icon icon=\"layer\" alt=\"icon\" size={20} />;;\nexport const Image = () => <Icon icon=\"textIcon.png\" alt=\"icon\" size={20} />;;\nexport const Svg = () => <Icon icon={icon} alt=\"icon\" size={20} />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <Icon icon=\\\"layer\\\" alt=\\\"icon\\\" size={20} />\" }, ...Default.parameters };\nImage.parameters = { storySource: { source: \"() => <Icon icon=\\\"textIcon.png\\\" alt=\\\"icon\\\" size={20} />\" }, ...Image.parameters };\nSvg.parameters = { storySource: { source: \"() => <Icon icon={icon} alt=\\\"icon\\\" size={20} />\" }, ...Svg.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport Loading from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/Loading\\\",\\n  component: Loading,\\n} as Meta;\\n\\nexport const Default = () => <Loading />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":40,\"line\":10},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":40,\"line\":10}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport Loading from \".\";\n\nexport default {\n  title: \"atoms/Loading\",\n  component: Loading,\n} as Meta;\n\nexport const Default = () => <Loading />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <Loading />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\n\\nimport Component, { Props } from \\\".\\\";\\n\\nconst markdown = `\\n> A block quote with ~strikethrough~ and a URL: https://reactjs.org.\\n\\n* Lists\\n* [ ] todo\\n* [x] done\\n\\nA table:\\n\\n| a | b |\\n| - | - |\\n`;\\n\\nexport default {\\n  title: \\\"atoms/Markdown\\\",\\n  component: Component,\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => <Component {...args} />;\\n\\nDefault.args = {\\n  children: markdown,\\n  backgroundColor: \\\"#fff\\\",\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":25},\"endLoc\":{\"col\":68,\"line\":25},\"startBody\":{\"col\":37,\"line\":25},\"endBody\":{\"col\":68,\"line\":25}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\n\nimport Component, { Props } from \".\";\n\nconst markdown = `\n> A block quote with ~strikethrough~ and a URL: https://reactjs.org.\n\n* Lists\n* [ ] todo\n* [x] done\n\nA table:\n\n| a | b |\n| - | - |\n`;\n\nexport default {\n  title: \"atoms/Markdown\",\n  component: Component,\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nexport const Default: Story<Props> = args => <Component {...args} />;\n\nDefault.args = {\n  children: markdown,\n  backgroundColor: \"#fff\",\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\n\\nimport Modal, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/Modal\\\",\\n  component: Modal,\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => <Modal {...args} />;\\n\\nDefault.args = {\\n  title: \\\"Title\\\",\\n  size: \\\"sm\\\",\\n  isVisible: true,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":12},\"endLoc\":{\"col\":64,\"line\":12},\"startBody\":{\"col\":37,\"line\":12},\"endBody\":{\"col\":64,\"line\":12}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\n\nimport Modal, { Props } from \".\";\n\nexport default {\n  title: \"atoms/Modal\",\n  component: Modal,\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nexport const Default: Story<Props> = args => <Modal {...args} />;\n\nDefault.args = {\n  title: \"Title\",\n  size: \"sm\",\n  isVisible: true,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Modal {...args} />\" }, ...Default.parameters };","import React from \"react\";\nimport { useIntl } from \"react-intl\";\n\nconst NotFound: React.FC = () => {\n  const intl = useIntl();\n  return <div>{intl.formatMessage({ defaultMessage: \"Notfound\" })}</div>;\n};\n\nexport default NotFound;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport NotFound from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/NotFound\\\",\\n  component: NotFound,\\n} as Meta;\\n\\nexport const Default = () => <NotFound />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":41,\"line\":10},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":41,\"line\":10}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport NotFound from \".\";\n\nexport default {\n  title: \"atoms/NotFound\",\n  component: NotFound,\n} as Meta;\n\nexport const Default = () => <NotFound />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <NotFound />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport NotificationBar from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/NotificationBar\\\",\\n  component: NotificationBar,\\n} as Meta;\\n\\nexport const Info = () => <NotificationBar text=\\\"Successfully done\\\" />;\\nexport const Error = () => <NotificationBar type={\\\"error\\\"} text=\\\"Error!\\\" />;\\nexport const Warning = () => <NotificationBar type={\\\"warning\\\"} text=\\\"This API is deprecated!!\\\" />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Info\":{\"startLoc\":{\"col\":20,\"line\":10},\"endLoc\":{\"col\":70,\"line\":10},\"startBody\":{\"col\":20,\"line\":10},\"endBody\":{\"col\":70,\"line\":10}},\"Error\":{\"startLoc\":{\"col\":21,\"line\":11},\"endLoc\":{\"col\":75,\"line\":11},\"startBody\":{\"col\":21,\"line\":11},\"endBody\":{\"col\":75,\"line\":11}},\"Warning\":{\"startLoc\":{\"col\":23,\"line\":12},\"endLoc\":{\"col\":97,\"line\":12},\"startBody\":{\"col\":23,\"line\":12},\"endBody\":{\"col\":97,\"line\":12}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport NotificationBar from \".\";\n\nexport default {\n  title: \"atoms/NotificationBar\",\n  component: NotificationBar,\n} as Meta;\n\nexport const Info = () => <NotificationBar text=\"Successfully done\" />;;\nexport const Error = () => <NotificationBar type={\"error\"} text=\"Error!\" />;;\nexport const Warning = () => <NotificationBar type={\"warning\"} text=\"This API is deprecated!!\" />;\n\n\n\nInfo.parameters = { storySource: { source: \"() => <NotificationBar text=\\\"Successfully done\\\" />\" }, ...Info.parameters };\nError.parameters = { storySource: { source: \"() => <NotificationBar type={\\\"error\\\"} text=\\\"Error!\\\" />\" }, ...Error.parameters };\nWarning.parameters = { storySource: { source: \"() => <NotificationBar type={\\\"warning\\\"} text=\\\"This API is deprecated!!\\\" />\" }, ...Warning.parameters };","import { styled } from \"@reearth/theme\";\n\ntype Props = {\n  show?: boolean;\n};\n\nconst Overlay = styled.div<Props>`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background: ${props => props.theme.modal.overlayBg};\n  opacity: ${({ show }) => (show ? 0.3 : 0)};\n  visibility: ${({ show }) => (show ? \"visible\" : \"hidden\")};\n  transition: all 0.2s;\n  transition-timing-function: ${({ show }) => (show ? \"ease-in\" : \"ease-out\")};\n  z-index: ${props => props.theme.zIndexes.base};\n  top: 0;\n  left: 0;\n`;\n\nexport default Overlay;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport Overlay from \\\".\\\";\\n\\nconst Container: React.FC = ({ children }) => (\\n  <div style={{ position: \\\"relative\\\", width: 200, height: 200, background: \\\"#ffffff\\\" }}>\\n    {children}\\n  </div>\\n);\\n\\nexport default {\\n  title: \\\"atoms/Overlay\\\",\\n  component: Overlay,\\n} as Meta;\\n\\nexport const Show = () => (\\n  <Container>\\n    <Overlay show />\\n  </Container>\\n);\\nexport const Hide = () => (\\n  <Container>\\n    <Overlay />\\n  </Container>\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Show\":{\"startLoc\":{\"col\":20,\"line\":16},\"endLoc\":{\"col\":1,\"line\":20},\"startBody\":{\"col\":20,\"line\":16},\"endBody\":{\"col\":1,\"line\":20}},\"Hide\":{\"startLoc\":{\"col\":20,\"line\":21},\"endLoc\":{\"col\":1,\"line\":25},\"startBody\":{\"col\":20,\"line\":21},\"endBody\":{\"col\":1,\"line\":25}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport Overlay from \".\";\n\nconst Container: React.FC = ({ children }) => (\n  <div style={{ position: \"relative\", width: 200, height: 200, background: \"#ffffff\" }}>\n    {children}\n  </div>\n);\n\nexport default {\n  title: \"atoms/Overlay\",\n  component: Overlay,\n} as Meta;\n\nexport const Show = () => (\n  <Container>\n    <Overlay show />\n  </Container>\n);;\nexport const Hide = () => (\n  <Container>\n    <Overlay />\n  </Container>\n);\n\n\n\nShow.parameters = { storySource: { source: \"() => (\\n  <Container>\\n    <Overlay show />\\n  </Container>\\n)\" }, ...Show.parameters };\nHide.parameters = { storySource: { source: \"() => (\\n  <Container>\\n    <Overlay />\\n  </Container>\\n)\" }, ...Hide.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useRef } from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\n\\nimport Component, { Props, Ref } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/Plugin/IFrame\\\",\\n  component: Component,\\n  argTypes: {\\n    onLoad: { action: \\\"onLoad\\\" },\\n    onMessage: { action: \\\"onMessage\\\" },\\n  },\\n  // parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => {\\n  const ref = useRef<Ref>(null);\\n  const postMessage = () => {\\n    ref.current?.postMessage({ foo: new Date().toISOString() });\\n  };\\n  return (\\n    <div style={{ background: \\\"#fff\\\" }}>\\n      <Component {...args} ref={ref} />\\n      <p>\\n        <button onClick={postMessage}>postMessage</button>\\n      </p>\\n    </div>\\n  );\\n};\\n\\nDefault.args = {\\n  autoResize: false,\\n  visible: true,\\n  style: {\\n    width: \\\"400px\\\",\\n    height: \\\"300px\\\",\\n  },\\n  html: `<h1>iframe</h1><script>\\n  window.addEventListener(\\\"message\\\", ev => {\\n    if (ev.source !== parent) return;\\n    const p = document.createElement(\\\"p\\\");\\n    p.textContent = JSON.stringify(ev.data);\\n    document.body.appendChild(p);\\n    parent.postMessage(ev.data, \\\"*\\\");\\n  });\\n  parent.postMessage(\\\"loaded\\\", \\\"*\\\");\\n</script>`,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":16},\"endLoc\":{\"col\":1,\"line\":29},\"startBody\":{\"col\":37,\"line\":16},\"endBody\":{\"col\":1,\"line\":29}}};\n    \nimport React, { useRef } from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\n\nimport Component, { Props, Ref } from \".\";\n\nexport default {\n  title: \"atoms/Plugin/IFrame\",\n  component: Component,\n  argTypes: {\n    onLoad: { action: \"onLoad\" },\n    onMessage: { action: \"onMessage\" },\n  },\n  // parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nexport const Default: Story<Props> = args => {\n  const ref = useRef<Ref>(null);\n  const postMessage = () => {\n    ref.current?.postMessage({ foo: new Date().toISOString() });\n  };\n  return (\n    <div style={{ background: \"#fff\" }}>\n      <Component {...args} ref={ref} />\n      <p>\n        <button onClick={postMessage}>postMessage</button>\n      </p>\n    </div>\n  );\n};\n\nDefault.args = {\n  autoResize: false,\n  visible: true,\n  style: {\n    width: \"400px\",\n    height: \"300px\",\n  },\n  html: `<h1>iframe</h1><script>\n  window.addEventListener(\"message\", ev => {\n    if (ev.source !== parent) return;\n    const p = document.createElement(\"p\");\n    p.textContent = JSON.stringify(ev.data);\n    document.body.appendChild(p);\n    parent.postMessage(ev.data, \"*\");\n  });\n  parent.postMessage(\"loaded\", \"*\");\n</script>`,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => {\\n  const ref = useRef<Ref>(null);\\n  const postMessage = () => {\\n    ref.current?.postMessage({ foo: new Date().toISOString() });\\n  };\\n  return (\\n    <div style={{ background: \\\"#fff\\\" }}>\\n      <Component {...args} ref={ref} />\\n      <p>\\n        <button onClick={postMessage}>postMessage</button>\\n      </p>\\n    </div>\\n  );\\n}\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\n\\nimport Component, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/Plugin\\\",\\n  component: Component,\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => <Component {...args} />;\\n\\nlet cb: (message: any) => void | undefined;\\n\\nDefault.args = {\\n  src: `${process.env.PUBLIC_URL}/plugins/plugin.js`,\\n  canBeVisible: true,\\n  style: {\\n    width: \\\"300px\\\",\\n    height: \\\"300px\\\",\\n    backgroundColor: \\\"#fff\\\",\\n  },\\n  exposed: {\\n    \\\"console.log\\\": action(\\\"console.log\\\"),\\n  },\\n  staticExposed: ({ render, postMessage }) => ({\\n    reearth: {\\n      on(type: string, value: (message: any) => void | undefined) {\\n        if (type === \\\"message\\\") {\\n          cb = value;\\n        }\\n      },\\n      ui: {\\n        show: render,\\n        postMessage,\\n      },\\n    },\\n  }),\\n  onMessage: (message: any) => {\\n    action(\\\"onMessage\\\")(message);\\n    return cb?.(message);\\n  },\\n};\\n\\nexport const HiddenIFrame: Story<Props> = args => <Component {...args} />;\\n\\nHiddenIFrame.args = {\\n  src: `${process.env.PUBLIC_URL}/plugins/hidden.js`,\\n  canBeVisible: true,\\n  style: {\\n    width: \\\"300px\\\",\\n    height: \\\"300px\\\",\\n    backgroundColor: \\\"#fff\\\",\\n  },\\n  exposed: {\\n    \\\"console.log\\\": action(\\\"console.log\\\"),\\n  },\\n  staticExposed: ({ render, postMessage }) => ({\\n    reearth: {\\n      on(type: string, value: (message: any) => void | undefined) {\\n        if (type === \\\"message\\\") {\\n          cb = value;\\n        }\\n      },\\n      ui: {\\n        show: render,\\n        postMessage,\\n      },\\n    },\\n  }),\\n  onMessage: (message: any) => {\\n    action(\\\"onMessage\\\")(message);\\n    return cb?.(message);\\n  },\\n};\\n\\nexport const SourceCode: Story<Props> = args => <Component {...args} />;\\n\\nSourceCode.args = {\\n  sourceCode: `console.log(\\\"Hello\\\")`,\\n  exposed: {\\n    \\\"console.log\\\": action(\\\"console.log\\\"),\\n  },\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":13},\"endLoc\":{\"col\":68,\"line\":13},\"startBody\":{\"col\":37,\"line\":13},\"endBody\":{\"col\":68,\"line\":13}},\"HiddenIFrame\":{\"startLoc\":{\"col\":42,\"line\":47},\"endLoc\":{\"col\":73,\"line\":47},\"startBody\":{\"col\":42,\"line\":47},\"endBody\":{\"col\":73,\"line\":47}},\"SourceCode\":{\"startLoc\":{\"col\":40,\"line\":79},\"endLoc\":{\"col\":71,\"line\":79},\"startBody\":{\"col\":40,\"line\":79},\"endBody\":{\"col\":71,\"line\":79}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\n\nimport Component, { Props } from \".\";\n\nexport default {\n  title: \"atoms/Plugin\",\n  component: Component,\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nexport const Default: Story<Props> = args => <Component {...args} />;;\n\nlet cb: (message: any) => void | undefined;\n\nDefault.args = {\n  src: `${process.env.PUBLIC_URL}/plugins/plugin.js`,\n  canBeVisible: true,\n  style: {\n    width: \"300px\",\n    height: \"300px\",\n    backgroundColor: \"#fff\",\n  },\n  exposed: {\n    \"console.log\": action(\"console.log\"),\n  },\n  staticExposed: ({ render, postMessage }) => ({\n    reearth: {\n      on(type: string, value: (message: any) => void | undefined) {\n        if (type === \"message\") {\n          cb = value;\n        }\n      },\n      ui: {\n        show: render,\n        postMessage,\n      },\n    },\n  }),\n  onMessage: (message: any) => {\n    action(\"onMessage\")(message);\n    return cb?.(message);\n  },\n};\n\nexport const HiddenIFrame: Story<Props> = args => <Component {...args} />;;\n\nHiddenIFrame.args = {\n  src: `${process.env.PUBLIC_URL}/plugins/hidden.js`,\n  canBeVisible: true,\n  style: {\n    width: \"300px\",\n    height: \"300px\",\n    backgroundColor: \"#fff\",\n  },\n  exposed: {\n    \"console.log\": action(\"console.log\"),\n  },\n  staticExposed: ({ render, postMessage }) => ({\n    reearth: {\n      on(type: string, value: (message: any) => void | undefined) {\n        if (type === \"message\") {\n          cb = value;\n        }\n      },\n      ui: {\n        show: render,\n        postMessage,\n      },\n    },\n  }),\n  onMessage: (message: any) => {\n    action(\"onMessage\")(message);\n    return cb?.(message);\n  },\n};\n\nexport const SourceCode: Story<Props> = args => <Component {...args} />;\n\nSourceCode.args = {\n  sourceCode: `console.log(\"Hello\")`,\n  exposed: {\n    \"console.log\": action(\"console.log\"),\n  },\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Default.parameters };\nHiddenIFrame.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...HiddenIFrame.parameters };\nSourceCode.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...SourceCode.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport PropertyGroup from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/PropertyGroup\\\",\\n  component: PropertyGroup,\\n} as Meta;\\n\\nexport const Default = () => <PropertyGroup />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":46,\"line\":10},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":46,\"line\":10}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport PropertyGroup from \".\";\n\nexport default {\n  title: \"atoms/PropertyGroup\",\n  component: PropertyGroup,\n} as Meta;\n\nexport const Default = () => <PropertyGroup />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <PropertyGroup />\" }, ...Default.parameters };","import React from \"react\";\n\nimport { styled } from \"@reearth/theme\";\n\nexport interface Props {\n  className?: string;\n}\n\nconst PropertyPane: React.FC<Props> = ({ className, children }) => {\n  return <Wrapper className={className}>{children}</Wrapper>;\n};\n\nconst Wrapper = styled.div`\n  background: ${props => props.theme.properties};\n  margin: 14px 0;\n`;\n\nexport default PropertyPane;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport PropertyPane from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/PropertyPane\\\",\\n  component: PropertyPane,\\n} as Meta;\\n\\nexport const Default = () => <PropertyPane />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":45,\"line\":10},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":45,\"line\":10}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport PropertyPane from \".\";\n\nexport default {\n  title: \"atoms/PropertyPane\",\n  component: PropertyPane,\n} as Meta;\n\nexport const Default = () => <PropertyPane />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <PropertyPane />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport PublicationStatus from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/PublicationStatus\\\",\\n  component: PublicationStatus,\\n} as Meta;\\n\\nexport const Published = () => <PublicationStatus status=\\\"published\\\" />;\\nexport const Limited = () => <PublicationStatus status=\\\"limited\\\" />;\\nexport const Unpublished = () => <PublicationStatus status=\\\"unpublished\\\" />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Published\":{\"startLoc\":{\"col\":25,\"line\":10},\"endLoc\":{\"col\":71,\"line\":10},\"startBody\":{\"col\":25,\"line\":10},\"endBody\":{\"col\":71,\"line\":10}},\"Limited\":{\"startLoc\":{\"col\":23,\"line\":11},\"endLoc\":{\"col\":67,\"line\":11},\"startBody\":{\"col\":23,\"line\":11},\"endBody\":{\"col\":67,\"line\":11}},\"Unpublished\":{\"startLoc\":{\"col\":27,\"line\":12},\"endLoc\":{\"col\":75,\"line\":12},\"startBody\":{\"col\":27,\"line\":12},\"endBody\":{\"col\":75,\"line\":12}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport PublicationStatus from \".\";\n\nexport default {\n  title: \"atoms/PublicationStatus\",\n  component: PublicationStatus,\n} as Meta;\n\nexport const Published = () => <PublicationStatus status=\"published\" />;;\nexport const Limited = () => <PublicationStatus status=\"limited\" />;;\nexport const Unpublished = () => <PublicationStatus status=\"unpublished\" />;\n\n\n\nPublished.parameters = { storySource: { source: \"() => <PublicationStatus status=\\\"published\\\" />\" }, ...Published.parameters };\nLimited.parameters = { storySource: { source: \"() => <PublicationStatus status=\\\"limited\\\" />\" }, ...Limited.parameters };\nUnpublished.parameters = { storySource: { source: \"() => <PublicationStatus status=\\\"unpublished\\\" />\" }, ...Unpublished.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport Radio from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/Radio\\\",\\n  component: Radio,\\n} as Meta;\\n\\nexport const Default = () => <Radio value=\\\"value\\\">Radio</Radio>;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":63,\"line\":10},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":63,\"line\":10}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport Radio from \".\";\n\nexport default {\n  title: \"atoms/Radio\",\n  component: Radio,\n} as Meta;\n\nexport const Default = () => <Radio value=\"value\">Radio</Radio>;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <Radio value=\\\"value\\\">Radio</Radio>\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport RadioButton from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/Buttons/RadioButton\\\",\\n  component: RadioButton,\\n} as Meta;\\n\\nexport const Default = () => <RadioButton value=\\\"default\\\" checked={false} />;\\nexport const Checked = () => <RadioButton value=\\\"checked\\\" checked />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":76,\"line\":10},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":76,\"line\":10}},\"Checked\":{\"startLoc\":{\"col\":23,\"line\":11},\"endLoc\":{\"col\":68,\"line\":11},\"startBody\":{\"col\":23,\"line\":11},\"endBody\":{\"col\":68,\"line\":11}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport RadioButton from \".\";\n\nexport default {\n  title: \"atoms/Buttons/RadioButton\",\n  component: RadioButton,\n} as Meta;\n\nexport const Default = () => <RadioButton value=\"default\" checked={false} />;;\nexport const Checked = () => <RadioButton value=\"checked\" checked />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <RadioButton value=\\\"default\\\" checked={false} />\" }, ...Default.parameters };\nChecked.parameters = { storySource: { source: \"() => <RadioButton value=\\\"checked\\\" checked />\" }, ...Checked.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport { styled } from \\\"@reearth/theme\\\";\\nimport RadioGroup from \\\".\\\";\\n\\nconst items: { value: string; label: string }[] = [\\n  { value: \\\"0\\\", label: \\\"A\\\" },\\n  { value: \\\"1\\\", label: \\\"B\\\" },\\n  { value: \\\"2\\\", label: \\\"C\\\" },\\n];\\n\\nconst Radio = styled.div<{ value: string; label: string }>``;\\n\\nexport default {\\n  title: \\\"atoms/RadioGroup\\\",\\n  component: RadioGroup,\\n} as Meta;\\n\\nexport const Default = () => (\\n  <RadioGroup value=\\\"0\\\" onChange={action(\\\"onchange\\\")}>\\n    {items.map(({ value, label }) => (\\n      <Radio key={value} value={value} label={label}>\\n        {label}\\n      </Radio>\\n    ))}\\n  </RadioGroup>\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":20},\"endLoc\":{\"col\":1,\"line\":28},\"startBody\":{\"col\":23,\"line\":20},\"endBody\":{\"col\":1,\"line\":28}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport { styled } from \"@reearth/theme\";\nimport RadioGroup from \".\";\n\nconst items: { value: string; label: string }[] = [\n  { value: \"0\", label: \"A\" },\n  { value: \"1\", label: \"B\" },\n  { value: \"2\", label: \"C\" },\n];\n\nconst Radio = styled.div<{ value: string; label: string }>``;\n\nexport default {\n  title: \"atoms/RadioGroup\",\n  component: RadioGroup,\n} as Meta;\n\nexport const Default = () => (\n  <RadioGroup value=\"0\" onChange={action(\"onchange\")}>\n    {items.map(({ value, label }) => (\n      <Radio key={value} value={value} label={label}>\n        {label}\n      </Radio>\n    ))}\n  </RadioGroup>\n);\n\n\n\nDefault.parameters = { storySource: { source: \"() => (\\n  <RadioGroup value=\\\"0\\\" onChange={action(\\\"onchange\\\")}>\\n    {items.map(({ value, label }) => (\\n      <Radio key={value} value={value} label={label}>\\n        {label}\\n      </Radio>\\n    ))}\\n  </RadioGroup>\\n)\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport RadioLabel from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/RadioLabel\\\",\\n  component: RadioLabel,\\n} as Meta;\\n\\nexport const Default = () => <RadioLabel label=\\\"default\\\" value=\\\"default\\\" checked={false} />;\\nexport const Checked = () => <RadioLabel label=\\\"checked\\\" value=\\\"checked\\\" checked />;\\nexport const Disabled = () => <RadioLabel label=\\\"checked\\\" value=\\\"checked\\\" disabled />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":91,\"line\":10},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":91,\"line\":10}},\"Checked\":{\"startLoc\":{\"col\":23,\"line\":11},\"endLoc\":{\"col\":83,\"line\":11},\"startBody\":{\"col\":23,\"line\":11},\"endBody\":{\"col\":83,\"line\":11}},\"Disabled\":{\"startLoc\":{\"col\":24,\"line\":12},\"endLoc\":{\"col\":85,\"line\":12},\"startBody\":{\"col\":24,\"line\":12},\"endBody\":{\"col\":85,\"line\":12}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport RadioLabel from \".\";\n\nexport default {\n  title: \"atoms/RadioLabel\",\n  component: RadioLabel,\n} as Meta;\n\nexport const Default = () => <RadioLabel label=\"default\" value=\"default\" checked={false} />;;\nexport const Checked = () => <RadioLabel label=\"checked\" value=\"checked\" checked />;;\nexport const Disabled = () => <RadioLabel label=\"checked\" value=\"checked\" disabled />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <RadioLabel label=\\\"default\\\" value=\\\"default\\\" checked={false} />\" }, ...Default.parameters };\nChecked.parameters = { storySource: { source: \"() => <RadioLabel label=\\\"checked\\\" value=\\\"checked\\\" checked />\" }, ...Checked.parameters };\nDisabled.parameters = { storySource: { source: \"() => <RadioLabel label=\\\"checked\\\" value=\\\"checked\\\" disabled />\" }, ...Disabled.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport RadioLabelGroup from \\\".\\\";\\nimport RadioLabel, { RadioLabelProps } from \\\"../RadioLabel\\\";\\n\\nconst items: RadioLabelProps[] = [\\n  { label: \\\"default\\\", value: \\\"default\\\" },\\n  { label: \\\"checked\\\", value: \\\"checked\\\" },\\n];\\n\\nexport default {\\n  title: \\\"atoms/RadioLabelGroup\\\",\\n  component: RadioLabelGroup,\\n} as Meta;\\n\\nexport const Default = () => (\\n  <RadioLabelGroup selectedValue={\\\"default\\\"} onChange={action(\\\"onchange\\\")}>\\n    {items.map(item => (\\n      <RadioLabel key={item.value} value={item.value} label={item.label} />\\n    ))}\\n  </RadioLabelGroup>\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":17},\"endLoc\":{\"col\":1,\"line\":23},\"startBody\":{\"col\":23,\"line\":17},\"endBody\":{\"col\":1,\"line\":23}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport RadioLabelGroup from \".\";\nimport RadioLabel, { RadioLabelProps } from \"../RadioLabel\";\n\nconst items: RadioLabelProps[] = [\n  { label: \"default\", value: \"default\" },\n  { label: \"checked\", value: \"checked\" },\n];\n\nexport default {\n  title: \"atoms/RadioLabelGroup\",\n  component: RadioLabelGroup,\n} as Meta;\n\nexport const Default = () => (\n  <RadioLabelGroup selectedValue={\"default\"} onChange={action(\"onchange\")}>\n    {items.map(item => (\n      <RadioLabel key={item.value} value={item.value} label={item.label} />\n    ))}\n  </RadioLabelGroup>\n);\n\n\n\nDefault.parameters = { storySource: { source: \"() => (\\n  <RadioLabelGroup selectedValue={\\\"default\\\"} onChange={action(\\\"onchange\\\")}>\\n    {items.map(item => (\\n      <RadioLabel key={item.value} value={item.value} label={item.label} />\\n    ))}\\n  </RadioLabelGroup>\\n)\" }, ...Default.parameters };","import React, { useCallback, useState, useEffect, useMemo } from \"react\";\n\ntype Direction = \"vertical\" | \"horizontal\";\ntype Gutter = \"start\" | \"end\";\n\nconst getPositionFromEvent = (e: React.MouseEvent | React.TouchEvent) => {\n  const { nativeEvent } = e;\n  if (nativeEvent instanceof MouseEvent) {\n    const { clientX: x, clientY: y, which } = nativeEvent;\n\n    // When user click with right button the resize is stuck in resizing mode until users clicks again, dont continue if right click is used.\n    // https://github.com/bokuweb/re-resizable/blob/06dd269f835a201b03b4f62f37533784d855fdd2/src/index.tsx#L611\n    if (which === 3) return;\n\n    return { x, y };\n  }\n\n  if (nativeEvent instanceof TouchEvent) {\n    const touch = nativeEvent.touches[0];\n    const { clientX: x, clientY: y } = touch;\n\n    return { x, y };\n  }\n\n  return;\n};\n\nconst getDelta = (direction: Direction, deltaX: number, deltaY: number) =>\n  direction === \"vertical\" ? deltaX : deltaY;\n\nconst getSize = (size: number, delta: number, minSize?: number, maxSize?: number) => {\n  if (minSize !== undefined && size + delta < minSize) return minSize;\n  if (maxSize !== undefined && size + delta > maxSize) return maxSize;\n  return size + delta;\n};\n\nexport default (\n  direction: Direction,\n  gutter: Gutter,\n  initialSize: number,\n  minSize?: number,\n  maxSize?: number,\n) => {\n  const [isResizing, setIsResizing] = useState(false);\n  const [size, setSize] = useState(initialSize);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n\n  const onResizeStart = useCallback(\n    (e: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>) => {\n      const position = getPositionFromEvent(e);\n      if (!position) return;\n\n      setIsResizing(true);\n      setPosition(position);\n    },\n    [],\n  );\n\n  const onResize = useCallback(\n    (e: MouseEvent | TouchEvent) => {\n      if (!isResizing) return;\n\n      const { clientX: x, clientY: y } = e instanceof MouseEvent ? e : e.touches[0];\n      const deltaX = gutter === \"start\" ? position.x - x : x - position.x;\n      const deltaY = gutter === \"start\" ? position.y - y : y - position.y;\n      const delta = getDelta(direction, deltaX, deltaY);\n\n      setSize(getSize(size, delta, minSize, maxSize));\n      setPosition({ x, y });\n    },\n    [isResizing, position, direction, gutter, size, minSize, maxSize],\n  );\n\n  let unbind = () => {}; // eslint-disable-line @typescript-eslint/no-empty-function\n\n  const onResizeEnd = useCallback(() => {\n    if (!isResizing) return;\n\n    setIsResizing(false);\n    setPosition({ x: 0, y: 0 });\n    unbind();\n  }, [isResizing]);\n\n  const bindEventListeners = useCallback(() => {\n    if (typeof window === \"undefined\") return;\n    window.addEventListener(\"mouseup\", onResizeEnd);\n    window.addEventListener(\"mousemove\", onResize);\n    window.addEventListener(\"mouseleave\", onResizeEnd);\n    window.addEventListener(\"touchmove\", onResize);\n    window.addEventListener(\"touchend\", onResizeEnd);\n  }, [onResize, onResizeEnd]);\n\n  const unbindEventListeners = useCallback(() => {\n    if (typeof window === \"undefined\") return;\n    window.removeEventListener(\"mouseup\", onResizeEnd);\n    window.removeEventListener(\"mousemove\", onResize);\n    window.removeEventListener(\"mouseleave\", onResizeEnd);\n    window.removeEventListener(\"touchmove\", onResize);\n    window.removeEventListener(\"touchend\", onResizeEnd);\n  }, [onResize, onResizeEnd]);\n\n  unbind = unbindEventListeners;\n\n  useEffect(() => {\n    bindEventListeners();\n    return () => unbindEventListeners();\n  });\n\n  const gutterProps = useMemo(\n    () => ({\n      onMouseDown: (e: React.MouseEvent<HTMLDivElement>) => onResizeStart(e),\n      onTouchStart: (e: React.TouchEvent<HTMLDivElement>) => onResizeStart(e),\n    }),\n    [onResizeStart],\n  );\n\n  return { size, gutterProps };\n};\n","import React from \"react\";\nimport { styled } from \"@reearth/theme\";\nimport useHooks from \"./hooks\";\n\ninterface Props {\n  direction: \"vertical\" | \"horizontal\";\n  gutter: \"start\" | \"end\";\n  size: number;\n  minSize?: number;\n  maxSize?: number;\n}\n\nconst Resizable: React.FC<Props> = ({\n  direction,\n  gutter,\n  size: initialSize,\n  minSize,\n  maxSize,\n  children,\n}) => {\n  const { size, gutterProps } = useHooks(direction, gutter, initialSize, minSize, maxSize);\n\n  const showTopGutter = direction === \"horizontal\" && gutter === \"start\";\n  const showRightGutter = direction === \"vertical\" && gutter === \"end\";\n  const showBottomGutter = direction === \"horizontal\" && gutter === \"end\";\n  const showLeftGutter = direction === \"vertical\" && gutter === \"start\";\n\n  const TopGutter = showTopGutter ? <HorizontalGutter {...gutterProps} /> : null;\n  const RightGutter = showRightGutter ? <VerticalGutter {...gutterProps} /> : null;\n  const BottomGutter = showBottomGutter ? <HorizontalGutter {...gutterProps} /> : null;\n  const LeftGutter = showLeftGutter ? <VerticalGutter {...gutterProps} /> : null;\n\n  return (\n    <StyledResizable direction={direction} size={size}>\n      {TopGutter}\n      {LeftGutter}\n      <Wrapper>{children}</Wrapper>\n      {RightGutter}\n      {BottomGutter}\n    </StyledResizable>\n  );\n};\n\nconst StyledResizable = styled.div<Pick<Props, \"direction\" | \"size\">>`\n  display: flex;\n  align-items: stretch;\n  flex-direction: ${({ direction }) => (direction === \"vertical\" ? \"row\" : \"column\")};\n  width: ${({ direction, size }) => (direction === \"horizontal\" ? null : `${size}px`)};\n  height: ${({ direction, size }) => (direction === \"vertical\" ? null : `${size}px`)};\n`;\n\nconst Wrapper = styled.div`\n  width: calc(100% - 6px);\n  padding: 6px 0;\n  background: ${props => props.theme.main.deepestBg};\n`;\n\nconst Gutter = styled.div`\n  background: #000000;\n  user-select: none;\n  background: ${props => props.theme.main.deepestBg};\n`;\n\nconst HorizontalGutter = styled(Gutter)`\n  height: 6px;\n  cursor: row-resize;\n`;\n\nconst VerticalGutter = styled(Gutter)`\n  width: 6px;\n  cursor: col-resize;\n`;\n\nexport default Resizable;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { CSSProperties } from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport Resizable from \\\".\\\";\\n\\nconst Container: React.FC<{ style?: CSSProperties }> = ({ children, style }) => (\\n  <div style={{ display: \\\"flex\\\", height: 400, ...style }}>{children}</div>\\n);\\nconst Pane = <div style={{ flex: 1, background: \\\"#ffffff\\\" }} />;\\nconst Content = <div style={{ width: \\\"100%\\\", height: \\\"100%\\\", background: \\\"#ffffff\\\" }}></div>;\\n\\nexport default {\\n  title: \\\"atoms/Resizable\\\",\\n  component: Resizable,\\n} as Meta;\\n\\nexport const Vertical = () => (\\n  <Container style={{ flexDirection: \\\"row\\\" }}>\\n    <Resizable direction=\\\"vertical\\\" gutter=\\\"end\\\" size={400} minSize={300} maxSize={500}>\\n      {Content}\\n    </Resizable>\\n    {Pane}\\n  </Container>\\n);\\nexport const Horizontal = () => (\\n  <Container style={{ flexDirection: \\\"column\\\" }}>\\n    <Resizable direction=\\\"horizontal\\\" gutter=\\\"end\\\" size={200} minSize={100} maxSize={300}>\\n      {Content}\\n    </Resizable>\\n    {Pane}\\n  </Container>\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Vertical\":{\"startLoc\":{\"col\":24,\"line\":16},\"endLoc\":{\"col\":1,\"line\":23},\"startBody\":{\"col\":24,\"line\":16},\"endBody\":{\"col\":1,\"line\":23}},\"Horizontal\":{\"startLoc\":{\"col\":26,\"line\":24},\"endLoc\":{\"col\":1,\"line\":31},\"startBody\":{\"col\":26,\"line\":24},\"endBody\":{\"col\":1,\"line\":31}}};\n    \nimport React, { CSSProperties } from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport Resizable from \".\";\n\nconst Container: React.FC<{ style?: CSSProperties }> = ({ children, style }) => (\n  <div style={{ display: \"flex\", height: 400, ...style }}>{children}</div>\n);\nconst Pane = <div style={{ flex: 1, background: \"#ffffff\" }} />;\nconst Content = <div style={{ width: \"100%\", height: \"100%\", background: \"#ffffff\" }}></div>;\n\nexport default {\n  title: \"atoms/Resizable\",\n  component: Resizable,\n} as Meta;\n\nexport const Vertical = () => (\n  <Container style={{ flexDirection: \"row\" }}>\n    <Resizable direction=\"vertical\" gutter=\"end\" size={400} minSize={300} maxSize={500}>\n      {Content}\n    </Resizable>\n    {Pane}\n  </Container>\n);;\nexport const Horizontal = () => (\n  <Container style={{ flexDirection: \"column\" }}>\n    <Resizable direction=\"horizontal\" gutter=\"end\" size={200} minSize={100} maxSize={300}>\n      {Content}\n    </Resizable>\n    {Pane}\n  </Container>\n);\n\n\n\nVertical.parameters = { storySource: { source: \"() => (\\n  <Container style={{ flexDirection: \\\"row\\\" }}>\\n    <Resizable direction=\\\"vertical\\\" gutter=\\\"end\\\" size={400} minSize={300} maxSize={500}>\\n      {Content}\\n    </Resizable>\\n    {Pane}\\n  </Container>\\n)\" }, ...Vertical.parameters };\nHorizontal.parameters = { storySource: { source: \"() => (\\n  <Container style={{ flexDirection: \\\"column\\\" }}>\\n    <Resizable direction=\\\"horizontal\\\" gutter=\\\"end\\\" size={200} minSize={100} maxSize={300}>\\n      {Content}\\n    </Resizable>\\n    {Pane}\\n  </Container>\\n)\" }, ...Horizontal.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\n\\nimport Component, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/Scroll\\\",\\n  component: Component,\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => (\\n  <div\\n    style={{\\n      width: \\\"300px\\\",\\n      height: \\\"300px\\\",\\n      border: \\\"1px solid #fff\\\",\\n      background: \\\"#000\\\",\\n      color: \\\"#fff\\\",\\n    }}>\\n    <Component {...args}>\\n      {new Array(100).fill(\\\"hogehoge\\\").map((t, i) => (\\n        <div style={{ padding: \\\"10px\\\" }} key={i}>\\n          {t}\\n        </div>\\n      ))}\\n    </Component>\\n  </div>\\n);\\n\\nDefault.args = {};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":12},\"endLoc\":{\"col\":1,\"line\":29},\"startBody\":{\"col\":37,\"line\":12},\"endBody\":{\"col\":1,\"line\":29}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\n\nimport Component, { Props } from \".\";\n\nexport default {\n  title: \"atoms/Scroll\",\n  component: Component,\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nexport const Default: Story<Props> = args => (\n  <div\n    style={{\n      width: \"300px\",\n      height: \"300px\",\n      border: \"1px solid #fff\",\n      background: \"#000\",\n      color: \"#fff\",\n    }}>\n    <Component {...args}>\n      {new Array(100).fill(\"hogehoge\").map((t, i) => (\n        <div style={{ padding: \"10px\" }} key={i}>\n          {t}\n        </div>\n      ))}\n    </Component>\n  </div>\n);\n\nDefault.args = {};\n\n\n\nDefault.parameters = { storySource: { source: \"args => (\\n  <div\\n    style={{\\n      width: \\\"300px\\\",\\n      height: \\\"300px\\\",\\n      border: \\\"1px solid #fff\\\",\\n      background: \\\"#000\\\",\\n      color: \\\"#fff\\\",\\n    }}>\\n    <Component {...args}>\\n      {new Array(100).fill(\\\"hogehoge\\\").map((t, i) => (\\n        <div style={{ padding: \\\"10px\\\" }} key={i}>\\n          {t}\\n        </div>\\n      ))}\\n    </Component>\\n  </div>\\n)\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\n\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport Component, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/SearchBar\\\",\\n  component: Component,\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => <Component {...args} />;\\n\\nDefault.args = {\\n  iconPos: \\\"right\\\",\\n  placeHolder: \\\"search plugins\\\",\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":11},\"endLoc\":{\"col\":68,\"line\":11},\"startBody\":{\"col\":37,\"line\":11},\"endBody\":{\"col\":68,\"line\":11}}};\n    \nimport React from \"react\";\n\nimport { Meta, Story } from \"@storybook/react\";\nimport Component, { Props } from \".\";\n\nexport default {\n  title: \"atoms/SearchBar\",\n  component: Component,\n} as Meta;\n\nexport const Default: Story<Props> = args => <Component {...args} />;\n\nDefault.args = {\n  iconPos: \"right\",\n  placeHolder: \"search plugins\",\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport Select from \\\".\\\";\\n\\nconst items: { value: string; label: string }[] = [\\n  { value: \\\"0\\\", label: \\\"120\\\" },\\n  { value: \\\"1\\\", label: \\\"2000\\\" },\\n];\\n\\nexport default {\\n  title: \\\"atoms/Select\\\",\\n  component: Select,\\n} as Meta;\\n\\nexport const Default = () => (\\n  <Select value=\\\"0\\\" onChange={action(\\\"onchange\\\")}>\\n    {items.map(({ value, label }) => (\\n      <li key={value} value={value}>\\n        {label}\\n      </li>\\n    ))}\\n  </Select>\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":16},\"endLoc\":{\"col\":1,\"line\":24},\"startBody\":{\"col\":23,\"line\":16},\"endBody\":{\"col\":1,\"line\":24}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport Select from \".\";\n\nconst items: { value: string; label: string }[] = [\n  { value: \"0\", label: \"120\" },\n  { value: \"1\", label: \"2000\" },\n];\n\nexport default {\n  title: \"atoms/Select\",\n  component: Select,\n} as Meta;\n\nexport const Default = () => (\n  <Select value=\"0\" onChange={action(\"onchange\")}>\n    {items.map(({ value, label }) => (\n      <li key={value} value={value}>\n        {label}\n      </li>\n    ))}\n  </Select>\n);\n\n\n\nDefault.parameters = { storySource: { source: \"() => (\\n  <Select value=\\\"0\\\" onChange={action(\\\"onchange\\\")}>\\n    {items.map(({ value, label }) => (\\n      <li key={value} value={value}>\\n        {label}\\n      </li>\\n    ))}\\n  </Select>\\n)\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\n\\nimport Component, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/SelectBox\\\",\\n  component: Component,\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => <Component {...args} />;\\n\\nDefault.args = {\\n  selected: \\\"a\\\",\\n  items: [\\n    { key: \\\"a\\\", label: \\\"A\\\" },\\n    { key: \\\"b\\\", label: \\\"B\\\" },\\n  ],\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":12},\"endLoc\":{\"col\":68,\"line\":12},\"startBody\":{\"col\":37,\"line\":12},\"endBody\":{\"col\":68,\"line\":12}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\n\nimport Component, { Props } from \".\";\n\nexport default {\n  title: \"atoms/SelectBox\",\n  component: Component,\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nexport const Default: Story<Props> = args => <Component {...args} />;\n\nDefault.args = {\n  selected: \"a\",\n  items: [\n    { key: \"a\", label: \"A\" },\n    { key: \"b\", label: \"B\" },\n  ],\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport Option from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/SelectOption\\\",\\n  component: Option,\\n} as Meta;\\n\\nexport const Default = () => (\\n  <Option value=\\\"value\\\" label=\\\"label\\\">\\n    Option\\n  </Option>\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":1,\"line\":14},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":1,\"line\":14}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport Option from \".\";\n\nexport default {\n  title: \"atoms/SelectOption\",\n  component: Option,\n} as Meta;\n\nexport const Default = () => (\n  <Option value=\"value\" label=\"label\">\n    Option\n  </Option>\n);\n\n\n\nDefault.parameters = { storySource: { source: \"() => (\\n  <Option value=\\\"value\\\" label=\\\"label\\\">\\n    Option\\n  </Option>\\n)\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useState } from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport Slide from \\\".\\\";\\nimport { styled } from \\\"@reearth/theme\\\";\\n\\nconst Wrapper = styled.div`\\n  width: 200px;\\n  height: 200px;\\n`;\\n\\nconst Page = styled.div`\\n  width: 100%;\\n  height: 100%;\\n  background-color: ${({ color }) => color};\\n`;\\n\\nexport default {\\n  title: \\\"atoms/Slide\\\",\\n  component: Slide,\\n} as Meta;\\n\\nexport const Default = () => {\\n  const [pos, setPos] = useState(0);\\n  return (\\n    <Wrapper>\\n      <Slide pos={pos}>\\n        <Page key=\\\"1\\\" color=\\\"red\\\" onClick={() => setPos(1)} />\\n        <Page key=\\\"2\\\" color=\\\"yellow\\\" onClick={() => setPos(2)} />\\n        <Page key=\\\"3\\\" color=\\\"green\\\" onClick={() => setPos(0)} />\\n      </Slide>\\n    </Wrapper>\\n  );\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":22},\"endLoc\":{\"col\":1,\"line\":33},\"startBody\":{\"col\":23,\"line\":22},\"endBody\":{\"col\":1,\"line\":33}}};\n    \nimport React, { useState } from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport Slide from \".\";\nimport { styled } from \"@reearth/theme\";\n\nconst Wrapper = styled.div`\n  width: 200px;\n  height: 200px;\n`;\n\nconst Page = styled.div`\n  width: 100%;\n  height: 100%;\n  background-color: ${({ color }) => color};\n`;\n\nexport default {\n  title: \"atoms/Slide\",\n  component: Slide,\n} as Meta;\n\nexport const Default = () => {\n  const [pos, setPos] = useState(0);\n  return (\n    <Wrapper>\n      <Slide pos={pos}>\n        <Page key=\"1\" color=\"red\" onClick={() => setPos(1)} />\n        <Page key=\"2\" color=\"yellow\" onClick={() => setPos(2)} />\n        <Page key=\"3\" color=\"green\" onClick={() => setPos(0)} />\n      </Slide>\n    </Wrapper>\n  );\n};\n\n\n\nDefault.parameters = { storySource: { source: \"() => {\\n  const [pos, setPos] = useState(0);\\n  return (\\n    <Wrapper>\\n      <Slide pos={pos}>\\n        <Page key=\\\"1\\\" color=\\\"red\\\" onClick={() => setPos(1)} />\\n        <Page key=\\\"2\\\" color=\\\"yellow\\\" onClick={() => setPos(2)} />\\n        <Page key=\\\"3\\\" color=\\\"green\\\" onClick={() => setPos(0)} />\\n      </Slide>\\n    </Wrapper>\\n  );\\n}\" }, ...Default.parameters };","import React, { ComponentProps } from \"react\";\nimport { styled, css } from \"@reearth/theme\";\nimport RCSlider from \"rc-slider\";\n\n// Assets\nimport \"rc-slider/assets/index.css\";\n\ntype Props = {\n  min: number;\n  max: number;\n  frame?: boolean;\n} & Omit<ComponentProps<typeof RCSlider>, \"defaultValue\">;\n\nconst Slider: React.FC<Props> = ({ frame = false, ...props }) => (\n  <Wrapper frame={frame}>\n    <StyledSlider {...props} />\n  </Wrapper>\n);\n\nconst Wrapper = styled.div<{ frame: boolean }>`\n  display: flex;\n  align-items: center;\n  border: ${({ frame, theme }) => (frame ? `solid 1px ${theme.properties.border}` : \"none\")};\n  border-radius: 3px;\n  background: ${({ frame, theme }) => (frame ? theme.properties.bg : \"transparent\")};\n  width: 100%;\n  flex: 1;\n  box-sizing: border-box;\n  ${({ frame }) =>\n    frame &&\n    css`\n      padding: 6px 12px;\n      margin-right: 5px;\n    `};\n`;\n\nconst StyledSlider = styled(RCSlider)`\n  .rc-slider-handle {\n    background-color: ${({ theme }) => theme.slider.handle};\n    border: ${({ theme }) => theme.slider.border};\n  }\n\n  .rc-slider-track {\n    background-color: ${({ theme }) => theme.slider.track};\n  }\n\n  .rc-slider-handle:focus {\n    box-shadow: none;\n  }\n`;\n\nexport default Slider;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport Slider from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/Slider\\\",\\n  component: Slider,\\n} as Meta;\\n\\nexport const Default = () => <Slider value={120} min={0} max={100} onChange={action(\\\"onchange\\\")} />;\\nexport const Frame = () => (\\n  <Slider value={120} min={0} max={100} onChange={action(\\\"onchange\\\")} frame />\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":11},\"endLoc\":{\"col\":99,\"line\":11},\"startBody\":{\"col\":23,\"line\":11},\"endBody\":{\"col\":99,\"line\":11}},\"Frame\":{\"startLoc\":{\"col\":21,\"line\":12},\"endLoc\":{\"col\":1,\"line\":14},\"startBody\":{\"col\":21,\"line\":12},\"endBody\":{\"col\":1,\"line\":14}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport Slider from \".\";\n\nexport default {\n  title: \"atoms/Slider\",\n  component: Slider,\n} as Meta;\n\nexport const Default = () => <Slider value={120} min={0} max={100} onChange={action(\"onchange\")} />;;\nexport const Frame = () => (\n  <Slider value={120} min={0} max={100} onChange={action(\"onchange\")} frame />\n);\n\n\n\nDefault.parameters = { storySource: { source: \"() => <Slider value={120} min={0} max={100} onChange={action(\\\"onchange\\\")} />\" }, ...Default.parameters };\nFrame.parameters = { storySource: { source: \"() => (\\n  <Slider value={120} min={0} max={100} onChange={action(\\\"onchange\\\")} frame />\\n)\" }, ...Frame.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport Text, { TextProps } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/Text\\\",\\n  component: Text,\\n} as Meta;\\n\\nexport const LBold: Story<TextProps> = () => (\\n  <Text size=\\\"l\\\" weight=\\\"bold\\\">\\n    LBold\\n  </Text>\\n);\\nexport const MParagraph: Story<TextProps> = () => (\\n  <Text size=\\\"m\\\" isParagraph>\\n    MParagraph\\n  </Text>\\n);\\nexport const MRegularRed: Story<TextProps> = () => (\\n  <Text size=\\\"m\\\" color=\\\"red\\\">\\n    MRegular red\\n  </Text>\\n);\\nexport const MRegularRedBgBlue: Story<TextProps> = () => (\\n  <Text size=\\\"m\\\" color=\\\"red\\\" otherProperties={{ background: \\\"blue\\\", border: \\\"solid 2px red\\\" }}>\\n    MRegular red blue\\n  </Text>\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"LBold\":{\"startLoc\":{\"col\":39,\"line\":10},\"endLoc\":{\"col\":1,\"line\":14},\"startBody\":{\"col\":39,\"line\":10},\"endBody\":{\"col\":1,\"line\":14}},\"MParagraph\":{\"startLoc\":{\"col\":44,\"line\":15},\"endLoc\":{\"col\":1,\"line\":19},\"startBody\":{\"col\":44,\"line\":15},\"endBody\":{\"col\":1,\"line\":19}},\"MRegularRed\":{\"startLoc\":{\"col\":45,\"line\":20},\"endLoc\":{\"col\":1,\"line\":24},\"startBody\":{\"col\":45,\"line\":20},\"endBody\":{\"col\":1,\"line\":24}},\"MRegularRedBgBlue\":{\"startLoc\":{\"col\":51,\"line\":25},\"endLoc\":{\"col\":1,\"line\":29},\"startBody\":{\"col\":51,\"line\":25},\"endBody\":{\"col\":1,\"line\":29}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport Text, { TextProps } from \".\";\n\nexport default {\n  title: \"atoms/Text\",\n  component: Text,\n} as Meta;\n\nexport const LBold: Story<TextProps> = () => (\n  <Text size=\"l\" weight=\"bold\">\n    LBold\n  </Text>\n);;\nexport const MParagraph: Story<TextProps> = () => (\n  <Text size=\"m\" isParagraph>\n    MParagraph\n  </Text>\n);;\nexport const MRegularRed: Story<TextProps> = () => (\n  <Text size=\"m\" color=\"red\">\n    MRegular red\n  </Text>\n);;\nexport const MRegularRedBgBlue: Story<TextProps> = () => (\n  <Text size=\"m\" color=\"red\" otherProperties={{ background: \"blue\", border: \"solid 2px red\" }}>\n    MRegular red blue\n  </Text>\n);\n\n\n\nLBold.parameters = { storySource: { source: \"() => (\\n  <Text size=\\\"l\\\" weight=\\\"bold\\\">\\n    LBold\\n  </Text>\\n)\" }, ...LBold.parameters };\nMParagraph.parameters = { storySource: { source: \"() => (\\n  <Text size=\\\"m\\\" isParagraph>\\n    MParagraph\\n  </Text>\\n)\" }, ...MParagraph.parameters };\nMRegularRed.parameters = { storySource: { source: \"() => (\\n  <Text size=\\\"m\\\" color=\\\"red\\\">\\n    MRegular red\\n  </Text>\\n)\" }, ...MRegularRed.parameters };\nMRegularRedBgBlue.parameters = { storySource: { source: \"() => (\\n  <Text size=\\\"m\\\" color=\\\"red\\\" otherProperties={{ background: \\\"blue\\\", border: \\\"solid 2px red\\\" }}>\\n    MRegular red blue\\n  </Text>\\n)\" }, ...MRegularRedBgBlue.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Story, Meta } from \\\"@storybook/react\\\";\\n\\nimport Component, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/TextBox\\\",\\n  component: Component,\\n  argTypes: {\\n    color: { control: \\\"color\\\" },\\n    backgroundColor: { control: \\\"color\\\" },\\n    borderColor: { control: \\\"color\\\" },\\n    floatedTextColor: { control: \\\"color\\\" },\\n  },\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nexport const Basic: Story<Props> = args => <Component {...args} />;\\n\\nBasic.args = {\\n  color: \\\"#fff\\\",\\n  backgroundColor: \\\"#000\\\",\\n  borderColor: \\\"#fff\\\",\\n  floatedTextColor: \\\"#ccc\\\",\\n  disabled: false,\\n  placeholder: \\\"\\\",\\n  prefix: \\\"\\\",\\n  suffix: \\\"\\\",\\n  multiline: false,\\n  throttle: false,\\n  throttleTimeout: 1000,\\n  value: \\\"\\\",\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Basic\":{\"startLoc\":{\"col\":35,\"line\":18},\"endLoc\":{\"col\":66,\"line\":18},\"startBody\":{\"col\":35,\"line\":18},\"endBody\":{\"col\":66,\"line\":18}}};\n    \nimport React from \"react\";\nimport { Story, Meta } from \"@storybook/react\";\n\nimport Component, { Props } from \".\";\n\nexport default {\n  title: \"atoms/TextBox\",\n  component: Component,\n  argTypes: {\n    color: { control: \"color\" },\n    backgroundColor: { control: \"color\" },\n    borderColor: { control: \"color\" },\n    floatedTextColor: { control: \"color\" },\n  },\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nexport const Basic: Story<Props> = args => <Component {...args} />;\n\nBasic.args = {\n  color: \"#fff\",\n  backgroundColor: \"#000\",\n  borderColor: \"#fff\",\n  floatedTextColor: \"#ccc\",\n  disabled: false,\n  placeholder: \"\",\n  prefix: \"\",\n  suffix: \"\",\n  multiline: false,\n  throttle: false,\n  throttleTimeout: 1000,\n  value: \"\",\n};\n\n\n\nBasic.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Basic.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport ToggleButton from \\\".\\\";\\n\\nexport default {\\n  title: \\\"atoms/Buttons/ToggleButton\\\",\\n  component: ToggleButton,\\n} as Meta;\\n\\nexport const Default = () => <ToggleButton checked={false} />;\\nexport const Checked = () => <ToggleButton checked />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":61,\"line\":10},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":61,\"line\":10}},\"Checked\":{\"startLoc\":{\"col\":23,\"line\":11},\"endLoc\":{\"col\":53,\"line\":11},\"startBody\":{\"col\":23,\"line\":11},\"endBody\":{\"col\":53,\"line\":11}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport ToggleButton from \".\";\n\nexport default {\n  title: \"atoms/Buttons/ToggleButton\",\n  component: ToggleButton,\n} as Meta;\n\nexport const Default = () => <ToggleButton checked={false} />;;\nexport const Checked = () => <ToggleButton checked />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <ToggleButton checked={false} />\" }, ...Default.parameters };\nChecked.parameters = { storySource: { source: \"() => <ToggleButton checked />\" }, ...Checked.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { forwardRef, PropsWithChildren, Ref, useState } from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\n\\nimport Component, { Props, Item } from \\\".\\\";\\nimport { ItemProps } from \\\"./types\\\";\\n\\nexport default {\\n  title: \\\"atoms/TreeView\\\",\\n  component: Component,\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\ntype Content = {\\n  title: string;\\n};\\n\\nconst item: Item<Content> = {\\n  id: \\\"root\\\",\\n  content: { title: \\\"\\\" },\\n  children: [\\n    { id: \\\"x\\\", content: { title: \\\"X\\\" }, draggable: true, droppable: true, selectable: false },\\n    {\\n      id: \\\"y\\\",\\n      content: { title: \\\"Y\\\" },\\n      draggable: true,\\n      droppable: true,\\n      selectable: true,\\n      expandable: true,\\n      droppableIntoChildren: true,\\n      children: [\\n        { id: \\\"a\\\", content: { title: \\\"A\\\" }, draggable: true, droppable: true, selectable: true },\\n        { id: \\\"b\\\", content: { title: \\\"b\\\" }, draggable: true, droppable: true, selectable: true },\\n        {\\n          id: \\\"c\\\",\\n          content: { title: \\\"C\\\" },\\n          draggable: true,\\n          droppable: true,\\n          selectable: true,\\n          expandable: true,\\n          children: [\\n            {\\n              id: \\\"g\\\",\\n              content: { title: \\\"G\\\" },\\n              draggable: true,\\n              droppable: true,\\n              selectable: true,\\n            },\\n            {\\n              id: \\\"h\\\",\\n              content: { title: \\\"H\\\" },\\n              draggable: true,\\n              droppable: true,\\n              selectable: true,\\n            },\\n            {\\n              id: \\\"i\\\",\\n              content: { title: \\\"I\\\" },\\n              draggable: true,\\n              droppable: true,\\n              selectable: true,\\n            },\\n          ],\\n        },\\n        { id: \\\"d\\\", content: { title: \\\"d\\\" }, draggable: true, droppable: true, selectable: true },\\n        {\\n          id: \\\"e\\\",\\n          content: { title: \\\"e\\\" },\\n          draggable: true,\\n          droppable: true,\\n          selectable: true,\\n          expandable: true,\\n          droppableIntoChildren: true,\\n          children: [],\\n        },\\n        {\\n          id: \\\"f\\\",\\n          content: { title: \\\"f\\\" },\\n          draggable: true,\\n          droppable: true,\\n          selectable: true,\\n          expandable: true,\\n          droppableIntoChildren: false,\\n          children: [\\n            {\\n              id: \\\"j\\\",\\n              content: { title: \\\"J\\\" },\\n              draggable: false,\\n              droppable: false,\\n              selectable: true,\\n            },\\n          ],\\n        },\\n      ],\\n    },\\n    { id: \\\"z\\\", content: { title: \\\"Z\\\" }, draggable: true, droppable: true, selectable: true },\\n  ],\\n};\\n\\nfunction ItemInnerComponent(\\n  {\\n    item,\\n    depth,\\n    onSelect,\\n    onExpand,\\n    selected,\\n    expanded,\\n    expandable,\\n    canDrop,\\n    isDropping,\\n    dropType,\\n    shown,\\n    children,\\n  }: PropsWithChildren<ItemProps<Content>>,\\n  ref: Ref<HTMLDivElement>,\\n) {\\n  return (\\n    <>\\n      <div\\n        ref={ref}\\n        style={{\\n          display: shown ? \\\"block\\\" : \\\"none\\\",\\n          color: \\\"#fff\\\",\\n          backgroundColor: selected ? \\\"#cc0\\\" : \\\"#666\\\",\\n          padding: \\\"10px\\\",\\n          marginLeft: depth * 20 + \\\"px\\\",\\n          userSelect: \\\"none\\\",\\n          borderWidth: \\\"3px\\\",\\n          borderStyle: \\\"solid\\\",\\n          borderColor:\\n            canDrop && isDropping && dropType\\n              ? {\\n                  top: \\\"red transparent transparent transparent\\\",\\n                  bottom: \\\"transparent transparent red transparent\\\",\\n                  topOfChildren: \\\"transparent transparent orange transparent\\\",\\n                  bottomOfChildren: \\\"red\\\",\\n                }[dropType] || \\\"transparent\\\"\\n              : \\\"transparent\\\",\\n        }}\\n        onClick={() => {\\n          onExpand();\\n          onSelect();\\n        }}>\\n        {expandable ? (expanded ? \\\"⬇️ \\\" : \\\"➡️ \\\") : null}\\n        {item.content?.title} {dropType}\\n      </div>\\n      {shown ? children : null}\\n    </>\\n  );\\n}\\n\\nconst ItemComponent = forwardRef(ItemInnerComponent);\\n\\nexport const Default: Story<Props> = args => {\\n  const [item2, setItem] = useState(item);\\n  return (\\n    <Component\\n      {...args}\\n      item={item2}\\n      renderItem={ItemComponent}\\n      onDrop={(src, dest, srcIndex, index, parent) => {\\n        action(\\\"onDrop\\\")(src, dest, srcIndex, index, parent);\\n\\n        parent.children?.splice(srcIndex[srcIndex.length - 1], 1);\\n        dest.children = [\\n          ...(dest.children?.slice(0, index[index.length - 1]) ?? []),\\n          src,\\n          ...(dest.children?.slice(index[index.length - 1]) ?? []),\\n        ];\\n        setItem({\\n          ...item2,\\n        });\\n      }}\\n    />\\n  );\\n};\\n\\nDefault.args = {\\n  dragItemType: \\\"test\\\",\\n  expandable: true,\\n  selectable: true,\\n  draggable: true,\\n  droppable: true,\\n  multiple: false,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":154},\"endLoc\":{\"col\":1,\"line\":176},\"startBody\":{\"col\":37,\"line\":154},\"endBody\":{\"col\":1,\"line\":176}}};\n    \nimport React, { forwardRef, PropsWithChildren, Ref, useState } from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\n\nimport Component, { Props, Item } from \".\";\nimport { ItemProps } from \"./types\";\n\nexport default {\n  title: \"atoms/TreeView\",\n  component: Component,\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\ntype Content = {\n  title: string;\n};\n\nconst item: Item<Content> = {\n  id: \"root\",\n  content: { title: \"\" },\n  children: [\n    { id: \"x\", content: { title: \"X\" }, draggable: true, droppable: true, selectable: false },\n    {\n      id: \"y\",\n      content: { title: \"Y\" },\n      draggable: true,\n      droppable: true,\n      selectable: true,\n      expandable: true,\n      droppableIntoChildren: true,\n      children: [\n        { id: \"a\", content: { title: \"A\" }, draggable: true, droppable: true, selectable: true },\n        { id: \"b\", content: { title: \"b\" }, draggable: true, droppable: true, selectable: true },\n        {\n          id: \"c\",\n          content: { title: \"C\" },\n          draggable: true,\n          droppable: true,\n          selectable: true,\n          expandable: true,\n          children: [\n            {\n              id: \"g\",\n              content: { title: \"G\" },\n              draggable: true,\n              droppable: true,\n              selectable: true,\n            },\n            {\n              id: \"h\",\n              content: { title: \"H\" },\n              draggable: true,\n              droppable: true,\n              selectable: true,\n            },\n            {\n              id: \"i\",\n              content: { title: \"I\" },\n              draggable: true,\n              droppable: true,\n              selectable: true,\n            },\n          ],\n        },\n        { id: \"d\", content: { title: \"d\" }, draggable: true, droppable: true, selectable: true },\n        {\n          id: \"e\",\n          content: { title: \"e\" },\n          draggable: true,\n          droppable: true,\n          selectable: true,\n          expandable: true,\n          droppableIntoChildren: true,\n          children: [],\n        },\n        {\n          id: \"f\",\n          content: { title: \"f\" },\n          draggable: true,\n          droppable: true,\n          selectable: true,\n          expandable: true,\n          droppableIntoChildren: false,\n          children: [\n            {\n              id: \"j\",\n              content: { title: \"J\" },\n              draggable: false,\n              droppable: false,\n              selectable: true,\n            },\n          ],\n        },\n      ],\n    },\n    { id: \"z\", content: { title: \"Z\" }, draggable: true, droppable: true, selectable: true },\n  ],\n};\n\nfunction ItemInnerComponent(\n  {\n    item,\n    depth,\n    onSelect,\n    onExpand,\n    selected,\n    expanded,\n    expandable,\n    canDrop,\n    isDropping,\n    dropType,\n    shown,\n    children,\n  }: PropsWithChildren<ItemProps<Content>>,\n  ref: Ref<HTMLDivElement>,\n) {\n  return (\n    <>\n      <div\n        ref={ref}\n        style={{\n          display: shown ? \"block\" : \"none\",\n          color: \"#fff\",\n          backgroundColor: selected ? \"#cc0\" : \"#666\",\n          padding: \"10px\",\n          marginLeft: depth * 20 + \"px\",\n          userSelect: \"none\",\n          borderWidth: \"3px\",\n          borderStyle: \"solid\",\n          borderColor:\n            canDrop && isDropping && dropType\n              ? {\n                  top: \"red transparent transparent transparent\",\n                  bottom: \"transparent transparent red transparent\",\n                  topOfChildren: \"transparent transparent orange transparent\",\n                  bottomOfChildren: \"red\",\n                }[dropType] || \"transparent\"\n              : \"transparent\",\n        }}\n        onClick={() => {\n          onExpand();\n          onSelect();\n        }}>\n        {expandable ? (expanded ? \"⬇️ \" : \"➡️ \") : null}\n        {item.content?.title} {dropType}\n      </div>\n      {shown ? children : null}\n    </>\n  );\n}\n\nconst ItemComponent = forwardRef(ItemInnerComponent);\n\nexport const Default: Story<Props> = args => {\n  const [item2, setItem] = useState(item);\n  return (\n    <Component\n      {...args}\n      item={item2}\n      renderItem={ItemComponent}\n      onDrop={(src, dest, srcIndex, index, parent) => {\n        action(\"onDrop\")(src, dest, srcIndex, index, parent);\n\n        parent.children?.splice(srcIndex[srcIndex.length - 1], 1);\n        dest.children = [\n          ...(dest.children?.slice(0, index[index.length - 1]) ?? []),\n          src,\n          ...(dest.children?.slice(index[index.length - 1]) ?? []),\n        ];\n        setItem({\n          ...item2,\n        });\n      }}\n    />\n  );\n};\n\nDefault.args = {\n  dragItemType: \"test\",\n  expandable: true,\n  selectable: true,\n  draggable: true,\n  droppable: true,\n  multiple: false,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => {\\n  const [item2, setItem] = useState(item);\\n  return (\\n    <Component\\n      {...args}\\n      item={item2}\\n      renderItem={ItemComponent}\\n      onDrop={(src, dest, srcIndex, index, parent) => {\\n        action(\\\"onDrop\\\")(src, dest, srcIndex, index, parent);\\n\\n        parent.children?.splice(srcIndex[srcIndex.length - 1], 1);\\n        dest.children = [\\n          ...(dest.children?.slice(0, index[index.length - 1]) ?? []),\\n          src,\\n          ...(dest.children?.slice(index[index.length - 1]) ?? []),\\n        ];\\n        setItem({\\n          ...item2,\\n        });\\n      }}\\n    />\\n  );\\n}\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\n\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport Component, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/AssetsModal/AssetCard\\\",\\n  component: Component,\\n} as Meta;\\n\\nexport const DefaultMedium: Story<Props> = args => <Component {...args} />;\\nexport const MediumChecked: Story<Props> = args => <Component {...args} />;\\nexport const SmallChecked: Story<Props> = args => <Component {...args} />;\\nexport const LargeCheckedAndSelected: Story<Props> = args => <Component {...args} />;\\n\\nDefaultMedium.args = {\\n  checked: false,\\n  cardSize: \\\"medium\\\",\\n  url: `${process.env.PUBLIC_URL}/sample.svg`,\\n  name: \\\"hoge\\\",\\n};\\n\\nMediumChecked.args = {\\n  checked: true,\\n  cardSize: \\\"medium\\\",\\n  url: `${process.env.PUBLIC_URL}/sample.svg`,\\n  name: \\\"hoge\\\",\\n};\\n\\nSmallChecked.args = {\\n  checked: true,\\n  cardSize: \\\"small\\\",\\n  url: `${process.env.PUBLIC_URL}/sample.svg`,\\n  name: \\\"hoge\\\",\\n};\\n\\nLargeCheckedAndSelected.args = {\\n  checked: true,\\n  cardSize: \\\"large\\\",\\n  url: `${process.env.PUBLIC_URL}/sample.svg`,\\n  name: \\\"hoge\\\",\\n  selected: true,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"DefaultMedium\":{\"startLoc\":{\"col\":43,\"line\":11},\"endLoc\":{\"col\":74,\"line\":11},\"startBody\":{\"col\":43,\"line\":11},\"endBody\":{\"col\":74,\"line\":11}},\"MediumChecked\":{\"startLoc\":{\"col\":43,\"line\":12},\"endLoc\":{\"col\":74,\"line\":12},\"startBody\":{\"col\":43,\"line\":12},\"endBody\":{\"col\":74,\"line\":12}},\"SmallChecked\":{\"startLoc\":{\"col\":42,\"line\":13},\"endLoc\":{\"col\":73,\"line\":13},\"startBody\":{\"col\":42,\"line\":13},\"endBody\":{\"col\":73,\"line\":13}},\"LargeCheckedAndSelected\":{\"startLoc\":{\"col\":53,\"line\":14},\"endLoc\":{\"col\":84,\"line\":14},\"startBody\":{\"col\":53,\"line\":14},\"endBody\":{\"col\":84,\"line\":14}}};\n    \nimport React from \"react\";\n\nimport { Meta, Story } from \"@storybook/react\";\nimport Component, { Props } from \".\";\n\nexport default {\n  title: \"molecules/EarthEditor/AssetsModal/AssetCard\",\n  component: Component,\n} as Meta;\n\nexport const DefaultMedium: Story<Props> = args => <Component {...args} />;;\nexport const MediumChecked: Story<Props> = args => <Component {...args} />;;\nexport const SmallChecked: Story<Props> = args => <Component {...args} />;;\nexport const LargeCheckedAndSelected: Story<Props> = args => <Component {...args} />;\n\nDefaultMedium.args = {\n  checked: false,\n  cardSize: \"medium\",\n  url: `${process.env.PUBLIC_URL}/sample.svg`,\n  name: \"hoge\",\n};\n\nMediumChecked.args = {\n  checked: true,\n  cardSize: \"medium\",\n  url: `${process.env.PUBLIC_URL}/sample.svg`,\n  name: \"hoge\",\n};\n\nSmallChecked.args = {\n  checked: true,\n  cardSize: \"small\",\n  url: `${process.env.PUBLIC_URL}/sample.svg`,\n  name: \"hoge\",\n};\n\nLargeCheckedAndSelected.args = {\n  checked: true,\n  cardSize: \"large\",\n  url: `${process.env.PUBLIC_URL}/sample.svg`,\n  name: \"hoge\",\n  selected: true,\n};\n\n\n\nDefaultMedium.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...DefaultMedium.parameters };\nMediumChecked.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...MediumChecked.parameters };\nSmallChecked.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...SmallChecked.parameters };\nLargeCheckedAndSelected.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...LargeCheckedAndSelected.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\n\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport Component, { Props } from \\\".\\\";\\n\\nconst imageAsset = {\\n  url: `${process.env.PUBLIC_URL}/sample.svg`,\\n  name: \\\"hoge\\\",\\n  id: \\\"hoge\\\",\\n  teamId: \\\"hoge\\\",\\n  size: 4300,\\n  contentType: \\\"asset-image\\\",\\n};\\n\\nconst fileAsset = {\\n  url: `somewhere/sample.kml`,\\n  name: \\\"hoge.kml\\\",\\n  id: \\\"hoge\\\",\\n  teamId: \\\"hoge\\\",\\n  size: 4300,\\n  contentType: \\\"asset-image\\\",\\n};\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/AssetsModal/AssetListItem\\\",\\n  component: Component,\\n} as Meta;\\n\\nexport const Image: Story<Props> = args => <Component {...args} />;\\nexport const File: Story<Props> = args => <Component {...args} />;\\nexport const CheckedAndSelected: Story<Props> = args => <Component {...args} />;\\n\\nImage.args = {\\n  checked: false,\\n  asset: imageAsset,\\n};\\n\\nFile.args = {\\n  checked: false,\\n  asset: fileAsset,\\n};\\n\\nCheckedAndSelected.args = {\\n  checked: true,\\n  asset: imageAsset,\\n  selected: true,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Image\":{\"startLoc\":{\"col\":35,\"line\":29},\"endLoc\":{\"col\":66,\"line\":29},\"startBody\":{\"col\":35,\"line\":29},\"endBody\":{\"col\":66,\"line\":29}},\"File\":{\"startLoc\":{\"col\":34,\"line\":30},\"endLoc\":{\"col\":65,\"line\":30},\"startBody\":{\"col\":34,\"line\":30},\"endBody\":{\"col\":65,\"line\":30}},\"CheckedAndSelected\":{\"startLoc\":{\"col\":48,\"line\":31},\"endLoc\":{\"col\":79,\"line\":31},\"startBody\":{\"col\":48,\"line\":31},\"endBody\":{\"col\":79,\"line\":31}}};\n    \nimport React from \"react\";\n\nimport { Meta, Story } from \"@storybook/react\";\nimport Component, { Props } from \".\";\n\nconst imageAsset = {\n  url: `${process.env.PUBLIC_URL}/sample.svg`,\n  name: \"hoge\",\n  id: \"hoge\",\n  teamId: \"hoge\",\n  size: 4300,\n  contentType: \"asset-image\",\n};\n\nconst fileAsset = {\n  url: `somewhere/sample.kml`,\n  name: \"hoge.kml\",\n  id: \"hoge\",\n  teamId: \"hoge\",\n  size: 4300,\n  contentType: \"asset-image\",\n};\n\nexport default {\n  title: \"molecules/EarthEditor/AssetsModal/AssetListItem\",\n  component: Component,\n} as Meta;\n\nexport const Image: Story<Props> = args => <Component {...args} />;;\nexport const File: Story<Props> = args => <Component {...args} />;;\nexport const CheckedAndSelected: Story<Props> = args => <Component {...args} />;\n\nImage.args = {\n  checked: false,\n  asset: imageAsset,\n};\n\nFile.args = {\n  checked: false,\n  asset: fileAsset,\n};\n\nCheckedAndSelected.args = {\n  checked: true,\n  asset: imageAsset,\n  selected: true,\n};\n\n\n\nImage.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Image.parameters };\nFile.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...File.parameters };\nCheckedAndSelected.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...CheckedAndSelected.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\n\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport Component, { Props } from \\\".\\\";\\n\\nconst filterOptions: { key: string; label: string }[] = [\\n  { key: \\\"time\\\", label: \\\"Time\\\" },\\n  { key: \\\"size\\\", label: \\\"File size\\\" },\\n  { key: \\\"name\\\", label: \\\"Alphabetical\\\" },\\n];\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/AssetsModal/AssetSelect\\\",\\n  component: Component,\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => <Component {...args} />;\\n\\nDefault.args = {\\n  items: filterOptions,\\n  value: \\\"time\\\",\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":17},\"endLoc\":{\"col\":68,\"line\":17},\"startBody\":{\"col\":37,\"line\":17},\"endBody\":{\"col\":68,\"line\":17}}};\n    \nimport React from \"react\";\n\nimport { Meta, Story } from \"@storybook/react\";\nimport Component, { Props } from \".\";\n\nconst filterOptions: { key: string; label: string }[] = [\n  { key: \"time\", label: \"Time\" },\n  { key: \"size\", label: \"File size\" },\n  { key: \"name\", label: \"Alphabetical\" },\n];\n\nexport default {\n  title: \"molecules/EarthEditor/AssetsModal/AssetSelect\",\n  component: Component,\n} as Meta;\n\nexport const Default: Story<Props> = args => <Component {...args} />;\n\nDefault.args = {\n  items: filterOptions,\n  value: \"time\",\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useState } from \\\"react\\\";\\n\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport Component, { Props, Asset } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/AssetsModal\\\",\\n  component: Component,\\n} as Meta;\\n\\nconst assets: Asset[] = [\\n  {\\n    url: `${process.env.PUBLIC_URL}/sample.svg`,\\n    name: \\\"hoge\\\",\\n    id: \\\"hoge\\\",\\n    teamId: \\\"hoge\\\",\\n    size: 4300,\\n    contentType: \\\"asset-image\\\",\\n  },\\n  {\\n    url: `${process.env.PUBLIC_URL}/sample.svg`,\\n    name: \\\"hoge\\\",\\n    id: \\\"hoge\\\",\\n    teamId: \\\"hoge\\\",\\n    size: 1010,\\n    contentType: \\\"asset-image\\\",\\n  },\\n  {\\n    url: `${process.env.PUBLIC_URL}/sample.svg`,\\n    name: \\\"hoge\\\",\\n    id: \\\"hoge\\\",\\n    teamId: \\\"hoge\\\",\\n    size: 100,\\n    contentType: \\\"asset-image\\\",\\n  },\\n  {\\n    url: `${process.env.PUBLIC_URL}/sample.svg`,\\n    name: \\\"hoge\\\",\\n    id: \\\"hoge\\\",\\n    teamId: \\\"hoge\\\",\\n    size: 2400,\\n    contentType: \\\"asset-image\\\",\\n  },\\n  {\\n    url: `${process.env.PUBLIC_URL}/sample.svg`,\\n    name: \\\"hoge\\\",\\n    id: \\\"hoge\\\",\\n    teamId: \\\"hoge\\\",\\n    size: 1300,\\n    contentType: \\\"asset-image\\\",\\n  },\\n  {\\n    url: `${process.env.PUBLIC_URL}/sample.svg`,\\n    name: \\\"hoge\\\",\\n    id: \\\"hoge\\\",\\n    teamId: \\\"hoge\\\",\\n    size: 100,\\n    contentType: \\\"asset-image\\\",\\n  },\\n  {\\n    url: \\\"www.filelocation.com/maps.kml\\\",\\n    name: \\\"hoge.kml\\\",\\n    id: \\\"hoge\\\",\\n    teamId: \\\"hoge\\\",\\n    size: 100,\\n    contentType: \\\"asset-file\\\",\\n  },\\n  {\\n    url: `${process.env.PUBLIC_URL}/sample.svg`,\\n    name: \\\"hoge\\\",\\n    id: \\\"hoge\\\",\\n    teamId: \\\"hoge\\\",\\n    size: 4300,\\n    contentType: \\\"asset-image\\\",\\n  },\\n  {\\n    url: `${process.env.PUBLIC_URL}/sample.svg`,\\n    name: \\\"hoge\\\",\\n    id: \\\"hoge\\\",\\n    teamId: \\\"hoge\\\",\\n    size: 1010,\\n    contentType: \\\"asset-image\\\",\\n  },\\n];\\n\\nexport const Default: Story<Props> = args => {\\n  const [isOpen, open] = useState(true);\\n  return <Component {...args} isOpen={isOpen} onClose={() => open(!isOpen)} />;\\n};\\nexport const Selected: Story<Props> = args => {\\n  const [isOpen, open] = useState(true);\\n  return <Component {...args} isOpen={isOpen} onClose={() => open(!isOpen)} />;\\n};\\nexport const File: Story<Props> = args => {\\n  const [isOpen, open] = useState(true);\\n  return <Component {...args} isOpen={isOpen} onClose={() => open(!isOpen)} />;\\n};\\nexport const Video: Story<Props> = args => {\\n  const [isOpen, open] = useState(true);\\n  return <Component {...args} isOpen={isOpen} onClose={() => open(!isOpen)} />;\\n};\\n\\nDefault.args = {\\n  assets: assets,\\n  fileType: \\\"image\\\",\\n};\\n\\nSelected.args = {\\n  assets: assets,\\n  value: `${process.env.PUBLIC_URL}/sample.svg`,\\n  fileType: \\\"image\\\",\\n};\\n\\nFile.args = {\\n  assets: assets,\\n};\\n\\nVideo.args = {\\n  assets: assets,\\n  fileType: \\\"video\\\",\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":86},\"endLoc\":{\"col\":1,\"line\":89},\"startBody\":{\"col\":37,\"line\":86},\"endBody\":{\"col\":1,\"line\":89}},\"Selected\":{\"startLoc\":{\"col\":38,\"line\":90},\"endLoc\":{\"col\":1,\"line\":93},\"startBody\":{\"col\":38,\"line\":90},\"endBody\":{\"col\":1,\"line\":93}},\"File\":{\"startLoc\":{\"col\":34,\"line\":94},\"endLoc\":{\"col\":1,\"line\":97},\"startBody\":{\"col\":34,\"line\":94},\"endBody\":{\"col\":1,\"line\":97}},\"Video\":{\"startLoc\":{\"col\":35,\"line\":98},\"endLoc\":{\"col\":1,\"line\":101},\"startBody\":{\"col\":35,\"line\":98},\"endBody\":{\"col\":1,\"line\":101}}};\n    \nimport React, { useState } from \"react\";\n\nimport { Meta, Story } from \"@storybook/react\";\nimport Component, { Props, Asset } from \".\";\n\nexport default {\n  title: \"molecules/EarthEditor/AssetsModal\",\n  component: Component,\n} as Meta;\n\nconst assets: Asset[] = [\n  {\n    url: `${process.env.PUBLIC_URL}/sample.svg`,\n    name: \"hoge\",\n    id: \"hoge\",\n    teamId: \"hoge\",\n    size: 4300,\n    contentType: \"asset-image\",\n  },\n  {\n    url: `${process.env.PUBLIC_URL}/sample.svg`,\n    name: \"hoge\",\n    id: \"hoge\",\n    teamId: \"hoge\",\n    size: 1010,\n    contentType: \"asset-image\",\n  },\n  {\n    url: `${process.env.PUBLIC_URL}/sample.svg`,\n    name: \"hoge\",\n    id: \"hoge\",\n    teamId: \"hoge\",\n    size: 100,\n    contentType: \"asset-image\",\n  },\n  {\n    url: `${process.env.PUBLIC_URL}/sample.svg`,\n    name: \"hoge\",\n    id: \"hoge\",\n    teamId: \"hoge\",\n    size: 2400,\n    contentType: \"asset-image\",\n  },\n  {\n    url: `${process.env.PUBLIC_URL}/sample.svg`,\n    name: \"hoge\",\n    id: \"hoge\",\n    teamId: \"hoge\",\n    size: 1300,\n    contentType: \"asset-image\",\n  },\n  {\n    url: `${process.env.PUBLIC_URL}/sample.svg`,\n    name: \"hoge\",\n    id: \"hoge\",\n    teamId: \"hoge\",\n    size: 100,\n    contentType: \"asset-image\",\n  },\n  {\n    url: \"www.filelocation.com/maps.kml\",\n    name: \"hoge.kml\",\n    id: \"hoge\",\n    teamId: \"hoge\",\n    size: 100,\n    contentType: \"asset-file\",\n  },\n  {\n    url: `${process.env.PUBLIC_URL}/sample.svg`,\n    name: \"hoge\",\n    id: \"hoge\",\n    teamId: \"hoge\",\n    size: 4300,\n    contentType: \"asset-image\",\n  },\n  {\n    url: `${process.env.PUBLIC_URL}/sample.svg`,\n    name: \"hoge\",\n    id: \"hoge\",\n    teamId: \"hoge\",\n    size: 1010,\n    contentType: \"asset-image\",\n  },\n];\n\nexport const Default: Story<Props> = args => {\n  const [isOpen, open] = useState(true);\n  return <Component {...args} isOpen={isOpen} onClose={() => open(!isOpen)} />;\n};;\nexport const Selected: Story<Props> = args => {\n  const [isOpen, open] = useState(true);\n  return <Component {...args} isOpen={isOpen} onClose={() => open(!isOpen)} />;\n};;\nexport const File: Story<Props> = args => {\n  const [isOpen, open] = useState(true);\n  return <Component {...args} isOpen={isOpen} onClose={() => open(!isOpen)} />;\n};;\nexport const Video: Story<Props> = args => {\n  const [isOpen, open] = useState(true);\n  return <Component {...args} isOpen={isOpen} onClose={() => open(!isOpen)} />;\n};\n\nDefault.args = {\n  assets: assets,\n  fileType: \"image\",\n};\n\nSelected.args = {\n  assets: assets,\n  value: `${process.env.PUBLIC_URL}/sample.svg`,\n  fileType: \"image\",\n};\n\nFile.args = {\n  assets: assets,\n};\n\nVideo.args = {\n  assets: assets,\n  fileType: \"video\",\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => {\\n  const [isOpen, open] = useState(true);\\n  return <Component {...args} isOpen={isOpen} onClose={() => open(!isOpen)} />;\\n}\" }, ...Default.parameters };\nSelected.parameters = { storySource: { source: \"args => {\\n  const [isOpen, open] = useState(true);\\n  return <Component {...args} isOpen={isOpen} onClose={() => open(!isOpen)} />;\\n}\" }, ...Selected.parameters };\nFile.parameters = { storySource: { source: \"args => {\\n  const [isOpen, open] = useState(true);\\n  return <Component {...args} isOpen={isOpen} onClose={() => open(!isOpen)} />;\\n}\" }, ...File.parameters };\nVideo.parameters = { storySource: { source: \"args => {\\n  const [isOpen, open] = useState(true);\\n  return <Component {...args} isOpen={isOpen} onClose={() => open(!isOpen)} />;\\n}\" }, ...Video.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport Header, { Props } from \\\".\\\";\\n\\nconst defaultProps: Props = {\\n  user: {\\n    name: \\\"Shinnosuke Komiya\\\",\\n  },\\n  currentTeam: {\\n    id: \\\"1\\\",\\n    name: \\\"Darwin Education\\\",\\n  },\\n  teams: [\\n    {\\n      id: \\\"A\\\",\\n      name: \\\"Team A\\\",\\n    },\\n    {\\n      id: \\\"B\\\",\\n      name: \\\"Team B\\\",\\n    },\\n  ],\\n  onBack: () => action(\\\"onBack\\\"),\\n  onForward: () => action(\\\"onForward\\\"),\\n  onSignOut: () => action(\\\"signOut\\\"),\\n};\\n\\nexport default {\\n  title: \\\"molecules/Common/Header\\\",\\n  component: Header,\\n} as Meta;\\n\\nexport const Default = () => <Header {...defaultProps} />;\\nexport const WithNoTeams = () => <Header {...{ ...defaultProps, teams: [] }} />;\\nexport const NoLogin = () => (\\n  <Header {...{ ...defaultProps, onSignOut: undefined, user: undefined }} />\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":34},\"endLoc\":{\"col\":57,\"line\":34},\"startBody\":{\"col\":23,\"line\":34},\"endBody\":{\"col\":57,\"line\":34}},\"WithNoTeams\":{\"startLoc\":{\"col\":27,\"line\":35},\"endLoc\":{\"col\":79,\"line\":35},\"startBody\":{\"col\":27,\"line\":35},\"endBody\":{\"col\":79,\"line\":35}},\"NoLogin\":{\"startLoc\":{\"col\":23,\"line\":36},\"endLoc\":{\"col\":1,\"line\":38},\"startBody\":{\"col\":23,\"line\":36},\"endBody\":{\"col\":1,\"line\":38}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport Header, { Props } from \".\";\n\nconst defaultProps: Props = {\n  user: {\n    name: \"Shinnosuke Komiya\",\n  },\n  currentTeam: {\n    id: \"1\",\n    name: \"Darwin Education\",\n  },\n  teams: [\n    {\n      id: \"A\",\n      name: \"Team A\",\n    },\n    {\n      id: \"B\",\n      name: \"Team B\",\n    },\n  ],\n  onBack: () => action(\"onBack\"),\n  onForward: () => action(\"onForward\"),\n  onSignOut: () => action(\"signOut\"),\n};\n\nexport default {\n  title: \"molecules/Common/Header\",\n  component: Header,\n} as Meta;\n\nexport const Default = () => <Header {...defaultProps} />;;\nexport const WithNoTeams = () => <Header {...{ ...defaultProps, teams: [] }} />;;\nexport const NoLogin = () => (\n  <Header {...{ ...defaultProps, onSignOut: undefined, user: undefined }} />\n);\n\n\n\nDefault.parameters = { storySource: { source: \"() => <Header {...defaultProps} />\" }, ...Default.parameters };\nWithNoTeams.parameters = { storySource: { source: \"() => <Header {...{ ...defaultProps, teams: [] }} />\" }, ...WithNoTeams.parameters };\nNoLogin.parameters = { storySource: { source: \"() => (\\n  <Header {...{ ...defaultProps, onSignOut: undefined, user: undefined }} />\\n)\" }, ...NoLogin.parameters };","import React, { useState, useCallback } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { useFormik } from \"formik\";\n\nimport Modal from \"@reearth/components/atoms/Modal\";\nimport AssetModal from \"@reearth/components/molecules/Common/AssetModal\";\nimport Button from \"@reearth/components/atoms/Button\";\nimport Divider from \"@reearth/components/atoms/Divider\";\nimport Loading from \"@reearth/components/atoms/Loading\";\n\nimport { Asset } from \"@reearth/components/molecules/Common/AssetModal/AssetContainer\";\nimport { styled, useTheme } from \"@reearth/theme\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport defaultProjectImage from \"@reearth/components/molecules/Dashboard/defaultProjectImage.jpg\";\nimport fonts from \"@reearth/theme/fonts\";\n\nexport interface FormValues {\n  name: string;\n  description: string;\n  imageUrl: string;\n}\n\nexport interface Props {\n  open?: boolean;\n  onClose?: (refetch?: boolean) => void;\n  onSubmit?: (values: FormValues) => Promise<void> | void;\n  assets?: Asset[];\n  createAssets?: (files: FileList) => Promise<void>;\n}\n\nconst initialValues: FormValues = {\n  name: \"\",\n  description: \"\",\n  imageUrl: \"\",\n};\n\nconst ProjectCreationModal: React.FC<Props> = ({\n  open,\n  onClose,\n  onSubmit,\n  assets,\n  createAssets,\n}) => {\n  const intl = useIntl();\n  const [openAssets, setOpenAssets] = useState(false);\n  const formik = useFormik({\n    initialValues,\n    onSubmit: useCallback(\n      async (data: FormValues) => {\n        await onSubmit?.(data);\n      },\n      [onSubmit],\n    ),\n  });\n\n  const handleClose = useCallback(() => {\n    if (!formik.isSubmitting) {\n      onClose?.();\n      formik.resetForm();\n    }\n  }, [formik, onClose]);\n\n  const handleSelect = useCallback(\n    (value: string | null) => {\n      formik.setFieldValue(\"imageUrl\", value);\n    },\n    [formik],\n  );\n\n  const handleCreate = useCallback(async () => {\n    await formik.submitForm();\n    handleClose();\n  }, [formik, handleClose]);\n\n  const theme = useTheme();\n\n  return (\n    <Modal\n      title={intl.formatMessage({ defaultMessage: \"Create New Project\" })}\n      isVisible={open}\n      onClose={handleClose}\n      button1={\n        <Button\n          large\n          buttonType=\"primary\"\n          text={intl.formatMessage({ defaultMessage: \"Create\" })}\n          disabled={!formik.values.name}\n          onClick={handleCreate}\n        />\n      }\n      button2={\n        <Button\n          large\n          buttonType=\"secondary\"\n          text={intl.formatMessage({ defaultMessage: \"Cancel\" })}\n          onClick={handleClose}\n        />\n      }>\n      {formik.isSubmitting && <Loading overlay />}\n      <Divider margin=\"20px\" />\n      <NewProjectForm onSubmit={formik.handleSubmit}>\n        <FormInputWrapper>\n          <Text size=\"s\" color={theme.main.text} otherProperties={{ margin: \"14px 0\" }}>\n            {intl.formatMessage({ defaultMessage: \"Project Name\" })}\n          </Text>\n          <StyledInput\n            type=\"text\"\n            {...formik.getFieldProps(\"name\")}\n            onBlur={e => {\n              formik.handleBlur(e);\n            }}\n          />\n        </FormInputWrapper>\n        <FormInputWrapper>\n          <Text size=\"s\" color={theme.main.text} otherProperties={{ margin: \"14px 0\" }}>\n            {intl.formatMessage({ defaultMessage: \"Description\" })}\n          </Text>\n          <StyledTextArea\n            rows={5}\n            {...formik.getFieldProps(\"description\")}\n            onBlur={e => {\n              formik.handleBlur(e);\n            }}\n          />\n        </FormInputWrapper>\n        <FormInputWrapper>\n          <Text size=\"s\" color={theme.main.text} otherProperties={{ margin: \"14px 0\" }}>\n            {intl.formatMessage({ defaultMessage: \"Select thumbnail image\" })}\n          </Text>\n          <Thumbnail url={formik.values.imageUrl} onClick={() => setOpenAssets(true)} />\n        </FormInputWrapper>\n      </NewProjectForm>\n      <AssetModal\n        isOpen={openAssets}\n        onClose={() => setOpenAssets(false)}\n        assets={assets}\n        fileType=\"image\"\n        onCreateAsset={createAssets}\n        onSelect={handleSelect}\n      />\n    </Modal>\n  );\n};\n\nconst NewProjectForm = styled.form`\n  width: 100%;\n`;\n\nconst FormInputWrapper = styled.div`\n  margin: 15px auto;\n`;\n\nconst StyledInput = styled.input`\n  width: calc(100% - 12px);\n  color: ${props => props.theme.main.text};\n  background: ${props => props.theme.main.deepBg};\n  border: 1px solid #3f3d45;\n  font-size: ${fonts.sizes.s}px;\n  outline: none;\n  cursor: text;\n  padding: 5px;\n`;\n\nconst StyledTextArea = styled.textarea`\n  width: calc(100% - 12px);\n  resize: none;\n  color: ${props => props.theme.main.text};\n  background: ${props => props.theme.main.deepBg};\n  border: 1px solid #3f3d45;\n  font-size: ${fonts.sizes.s}px;\n  outline: none;\n  cursor: text;\n  padding: 5px;\n`;\n\nconst Thumbnail = styled.div<{ url: string }>`\n  background-image: ${props => (props.url ? `url(${props.url})` : `url(${defaultProjectImage})`)};\n  background-size: cover;\n  background-position: center;\n  height: 242px;\n  margin: 0 auto;\n  width: 100%;\n  cursor: pointer;\n`;\n\nexport default ProjectCreationModal;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport ProjectCreationModal, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/ProjectList/ProjectCreationModal\\\",\\n  component: ProjectCreationModal,\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => (\\n  <ProjectCreationModal {...args} open onClose={action(\\\"onClose\\\")} onSubmit={action(\\\"onSubmit\\\")} />\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":11},\"endLoc\":{\"col\":1,\"line\":13},\"startBody\":{\"col\":37,\"line\":11},\"endBody\":{\"col\":1,\"line\":13}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport ProjectCreationModal, { Props } from \".\";\n\nexport default {\n  title: \"molecules/ProjectList/ProjectCreationModal\",\n  component: ProjectCreationModal,\n} as Meta;\n\nexport const Default: Story<Props> = args => (\n  <ProjectCreationModal {...args} open onClose={action(\"onClose\")} onSubmit={action(\"onSubmit\")} />\n);\n\n\n\nDefault.parameters = { storySource: { source: \"args => (\\n  <ProjectCreationModal {...args} open onClose={action(\\\"onClose\\\")} onSubmit={action(\\\"onSubmit\\\")} />\\n)\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport WorkSpaceCreationModal from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/Common/WorkSpaceCreationModal\\\",\\n  component: WorkSpaceCreationModal,\\n} as Meta;\\n\\nexport const Default = () => (\\n  <WorkSpaceCreationModal open onClose={action(\\\"onClose\\\")} onSubmit={action(\\\"onSubmit\\\")} />\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":11},\"endLoc\":{\"col\":1,\"line\":13},\"startBody\":{\"col\":23,\"line\":11},\"endBody\":{\"col\":1,\"line\":13}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport WorkSpaceCreationModal from \".\";\n\nexport default {\n  title: \"molecules/Common/WorkSpaceCreationModal\",\n  component: WorkSpaceCreationModal,\n} as Meta;\n\nexport const Default = () => (\n  <WorkSpaceCreationModal open onClose={action(\"onClose\")} onSubmit={action(\"onSubmit\")} />\n);\n\n\n\nDefault.parameters = { storySource: { source: \"() => (\\n  <WorkSpaceCreationModal open onClose={action(\\\"onClose\\\")} onSubmit={action(\\\"onSubmit\\\")} />\\n)\" }, ...Default.parameters };","import React from \"react\";\nimport { styled } from \"@reearth/theme\";\n\nexport interface Props {\n  host: string;\n}\n\nconst DatasetHeader: React.FC<Props> = ({ host }) => {\n  return (\n    <Wrapper>\n      <HostName>{host}</HostName>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  background-color: ${props => props.theme.layers.bg};\n  height: 26px;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 10px;\n`;\n\nconst HostName = styled.h3`\n  color: ${({ theme }) => theme.leftMenu.text};\n  font-size: 0.8rem;\n  margin: 0;\n`;\n\nexport default DatasetHeader;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport DatasetHeader from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/DatasetPane/DatasetHeader\\\",\\n  component: DatasetHeader,\\n} as Meta;\\n\\nexport const Default = () => <DatasetHeader host=\\\"Hoge\\\" />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":58,\"line\":10},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":58,\"line\":10}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport DatasetHeader from \".\";\n\nexport default {\n  title: \"molecules/EarthEditor/DatasetPane/DatasetHeader\",\n  component: DatasetHeader,\n} as Meta;\n\nexport const Default = () => <DatasetHeader host=\"Hoge\" />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <DatasetHeader host=\\\"Hoge\\\" />\" }, ...Default.parameters };","import React from \"react\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport { styled, useTheme } from \"@reearth/theme\";\nimport Text from \"@reearth/components/atoms/Text\";\n\ninterface Props {\n  id: string;\n  icon?: string;\n  iconSize?: string;\n  text?: string;\n  subtext?: string;\n  margin?: number;\n  border?: \"solid\" | \"dotted\" | \"dashed\" | \"double\" | \"none\";\n  borderColor?: string;\n  onClick?: (id: string) => void;\n}\n\nconst Card: React.FC<Props> = ({\n  id,\n  icon,\n  iconSize,\n  text,\n  subtext,\n  margin,\n  border,\n  borderColor,\n  onClick,\n}) => {\n  const theme = useTheme();\n  return (\n    <StyledContainer\n      border={border}\n      borderColor={borderColor}\n      icon={icon}\n      margin={margin}\n      onClick={onClick && (() => onClick(id))}>\n      <Content>\n        <StyledIcon icon={icon} size={iconSize} color={theme.main.text} />\n        <Text size=\"xs\">{text}</Text>\n        <Text size=\"2xs\" color={theme.main.text}>\n          {subtext}\n        </Text>\n      </Content>\n    </StyledContainer>\n  );\n};\n\nconst StyledContainer = styled.div<{\n  border?: string;\n  icon?: string;\n  margin?: number;\n  borderColor?: string;\n}>`\n  height: 192px;\n  width: 193px;\n  margin: ${props => props.margin}px;\n  background-color: ${({ theme }) => theme.main.lighterBg};\n  border: 1px ${props => props.border || \"solid\"}\n    ${props => (props.borderColor ? props.borderColor : props.theme.assetCard.highlight)};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  flex-direction: column;\n`;\n\nconst StyledIcon = styled(Icon)``;\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  * {\n    margin-bottom: 10px;\n  }\n`;\n\nexport default Card;\n","import { useCallback, useEffect, useState } from \"react\";\n\nexport type SheetParameter = {\n  accessToken: string;\n  fileId: string;\n  sheetName: string;\n};\n\nexport type GoogleSheet = {\n  properties: {\n    gridProperties: { rowCount: number; columnCount: number };\n    index: number;\n    sheetId: string;\n    sheetType: string;\n    title: string;\n  };\n};\n\nexport type File = {\n  id: string;\n  name: string;\n};\n\nexport default (onSheetSelect: (sheet: SheetParameter) => void) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [pickerApiLoaded, setPickerApiLoaded] = useState(false);\n  const [pickedFile, setPickedFile] = useState<File>();\n  const [pickedFileSheets, setPickedFileSheets] = useState<GoogleSheet[]>([]);\n  const [selectedSheet, setSelectedSheet] = useState<File>();\n  const [accessToken, setAccessToken] = useState(\"\");\n\n  const pickerCallback = async (data: any) => {\n    if (data[google.picker.Response.ACTION] === google.picker.Action.PICKED) {\n      setPickedFile({ name: data.docs[0].name, id: data.docs[0].id });\n      gapi.client.sheets.spreadsheets\n        .get({\n          spreadsheetId: data.docs[0].id,\n        })\n        .then(function (response: any) {\n          setPickedFileSheets(response.result.sheets as GoogleSheet[]);\n        });\n    }\n  };\n\n  useEffect(() => {\n    const googleApiKey = window.REEARTH_CONFIG?.googleApiKey;\n    if (pickerApiLoaded && accessToken && googleApiKey) {\n      setIsLoading(false);\n      const picker = new google.picker.PickerBuilder()\n        .addView(google.picker.ViewId.SPREADSHEETS)\n        .setOAuthToken(accessToken)\n        .setDeveloperKey(googleApiKey)\n        .setCallback(pickerCallback)\n        .build();\n      picker.setVisible(true);\n    }\n  }, [accessToken, pickerApiLoaded]);\n\n  const handleClientLoad = async () => {\n    const googleApiKey = window.REEARTH_CONFIG?.googleApiKey;\n    setIsLoading(true);\n    const googleClientId = window.REEARTH_CONFIG?.googleClientId;\n    await gapi.load(\"client:auth2\", () => {\n      gapi.client\n        .init({\n          apiKey: googleApiKey,\n          clientId: googleClientId,\n          scope:\n            \"https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/documents.readonly\",\n          discoveryDocs: [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"],\n        })\n        .then(function () {\n          if (gapi.auth2.getAuthInstance().isSignedIn.get()) {\n            gapi.auth2.getAuthInstance().signOut();\n          }\n          setIsLoading(false);\n        });\n    });\n    await gapi.load(\"picker\", () => {\n      setPickerApiLoaded(true);\n    });\n  };\n\n  const updateSigninStatus = (isSignedIn: boolean, accessToken: any) => {\n    if (isSignedIn) {\n      setAccessToken(accessToken);\n    }\n  };\n\n  const handleSheetSelect = useCallback(\n    (sheet: File) => {\n      setSelectedSheet({ id: sheet.id, name: sheet.name });\n      onSheetSelect({\n        accessToken,\n        fileId: pickedFile?.id as string,\n        sheetName: sheet.name as string,\n      });\n    },\n    [onSheetSelect, accessToken, pickedFile?.id],\n  );\n\n  const handleAuthClick = () => {\n    Promise.resolve(gapi.auth2.getAuthInstance().signIn()).then(() => {\n      updateSigninStatus(\n        gapi.auth2.getAuthInstance().isSignedIn.get(),\n        gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().access_token,\n      );\n    });\n  };\n\n  useEffect(() => {\n    const gDriveScript = document.createElement(\"script\");\n    gDriveScript.src = \"https://apis.google.com/js/api.js\";\n    gDriveScript.async = true;\n    gDriveScript.onload = () => {\n      handleClientLoad();\n    };\n    document.body.appendChild(gDriveScript);\n    return () => {\n      document.body.removeChild(gDriveScript);\n    };\n  }, []);\n\n  return {\n    isLoading,\n    pickedFile,\n    pickedFileSheets,\n    selectedSheet,\n    handleAuthClick,\n    handleSheetSelect,\n    handleClientLoad,\n  };\n};\n","import React from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { styled, useTheme } from \"@reearth/theme\";\n\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Flex from \"@reearth/components/atoms/Flex\";\nimport Loading from \"@reearth/components/atoms/Loading\";\nimport Divider from \"@reearth/components/atoms/Divider\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\nimport AssetCard from \"@reearth/components/molecules/Common/AssetModal/AssetCard\";\nimport AssetListItem from \"@reearth/components/molecules/Common/AssetModal/AssetListItem\";\nimport Button from \"@reearth/components/atoms/Button\";\nimport useHooks, { GoogleSheet, SheetParameter as SheetParam } from \"./hooks\";\n\nexport type SheetParameter = SheetParam;\n\nexport type Props = {\n  onReturn: () => void;\n  onSheetSelect: (sheet: SheetParam) => void;\n  syncLoading: boolean;\n};\n\nconst Gdrive: React.FC<Props> = ({ onReturn, syncLoading, onSheetSelect }) => {\n  const intl = useIntl();\n  const theme = useTheme();\n\n  const {\n    isLoading,\n    pickedFile,\n    pickedFileSheets,\n    selectedSheet,\n    handleAuthClick,\n    handleSheetSelect,\n  } = useHooks(onSheetSelect);\n\n  return (\n    <>\n      <StyledIcon icon={\"arrowLongLeft\"} size={24} onClick={onReturn} color={theme.main.text} />\n      {syncLoading && <Loading />}\n      <Flex justify=\"center\" direction=\"column\" align=\"center\">\n        <Flex justify=\"center\" align=\"center\">\n          <GdriveIcon size={32} icon=\"googleDrive\" />\n          <Text size=\"m\" color={theme.main.strongText} weight=\"bold\">\n            {intl.formatMessage({ defaultMessage: \"Connect with Google Drive\" })}\n          </Text>\n        </Flex>\n        <Divider margin=\"24px\" />\n        {pickedFile?.id && (\n          <>\n            <AssetCard\n              name={pickedFile.name}\n              cardSize=\"medium\"\n              icon=\"sheetFile\"\n              iconSize=\"50px\"\n              onCheck={() => handleAuthClick()}\n            />\n            <Divider />\n            <AssetWrapper direction=\"column\" justify=\"space-between\">\n              <AssetList wrap=\"nowrap\" direction=\"column\" justify=\"space-between\">\n                {pickedFileSheets?.map((sheetItem: GoogleSheet) => (\n                  <AssetListItem\n                    key={sheetItem.properties.sheetId}\n                    asset={{ id: sheetItem.properties.sheetId, name: sheetItem.properties.title }}\n                    onCheck={() => {\n                      handleSheetSelect({\n                        id: sheetItem.properties.sheetId,\n                        name: sheetItem.properties.title,\n                      });\n                    }}\n                    selected={sheetItem.properties.sheetId === selectedSheet?.id}\n                  />\n                ))}\n              </AssetList>\n            </AssetWrapper>\n            <Divider />\n          </>\n        )}\n\n        {!pickedFile?.id && (\n          <>\n            <Text\n              size=\"m\"\n              color={theme.infoBox.weakText}\n              otherProperties={{ marginBottom: metricsSizes[\"m\"] + \"px\" }}>\n              {intl.formatMessage({\n                defaultMessage: \"Re:Earth supports uploading Google Sheets and CSV files.\",\n              })}\n            </Text>\n\n            {isLoading ? (\n              <Loading />\n            ) : (\n              <Button\n                large\n                text=\"Connect your google account\"\n                buttonType=\"primary\"\n                onClick={() => handleAuthClick()}\n              />\n            )}\n          </>\n        )}\n      </Flex>\n    </>\n  );\n};\n\nconst GdriveIcon = styled(Icon)`\n  margin-right: ${metricsSizes[\"m\"]}px;\n`;\n\nconst StyledIcon = styled(Icon)`\n  cursor: pointer;\n`;\n\nconst AssetList = styled(Flex)`\n  width: 100%;\n  max-height: 196px;\n  overflow-y: scroll;\n  scrollbar-width: none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n\n  &::after {\n    content: \"\";\n    flex: \"0 33%\";\n  }\n\n  * {\n    margin: 4px 0;\n  }\n`;\n\nconst AssetWrapper = styled(Flex)`\n  width: 100%;\n`;\n\nexport default Gdrive;\n","import React, { useMemo } from \"react\";\nimport { useIntl } from \"react-intl\";\n\nimport { styled, useTheme } from \"@reearth/theme\";\n\nimport Modal from \"@reearth/components/atoms/Modal\";\nimport Button from \"@reearth/components/atoms/Button\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Divider from \"@reearth/components/atoms/Divider\";\nimport Card from \"@reearth/components/atoms/Card\";\nimport Loading from \"@reearth/components/atoms/Loading\";\nimport Text from \"@reearth/components/atoms/Text\";\n\nimport { Type as NotificationType } from \"@reearth/components/atoms/NotificationBar\";\nimport useHooks from \"./hooks\";\nimport Gdrive from \"./Gdrive\";\n\ninterface Props {\n  className?: string;\n  isVisible: boolean;\n  syncLoading: boolean;\n  onClose?: () => void;\n  handleDatasetAdd?: (url: string | File, schemeId: string | null) => Promise<void>;\n  handleGoogleSheetDatasetAdd?: (\n    accessToken: string,\n    fileId: string,\n    sheetName: string,\n    schemeId: string | null,\n  ) => Promise<void>;\n  onNotify?: (type: NotificationType, text: string) => void;\n}\n\nconst DatasetModal: React.FC<Props> = ({\n  isVisible,\n  syncLoading,\n  onClose,\n  handleDatasetAdd,\n  handleGoogleSheetDatasetAdd,\n  onNotify,\n}) => {\n  const intl = useIntl();\n  const googleApiKey = window.REEARTH_CONFIG?.googleApiKey;\n  const {\n    csv,\n    dataType,\n    disabled,\n    onSelectCsvFile,\n    onReturn,\n    onSheetSelect,\n    handleImport,\n    handleClick,\n  } = useHooks(handleDatasetAdd, handleGoogleSheetDatasetAdd, onNotify);\n\n  const primaryButtonText = useMemo(() => {\n    if (syncLoading) {\n      return intl.formatMessage({ defaultMessage: \"sending...\" });\n    } else {\n      return intl.formatMessage({ defaultMessage: \"Add Dataset\" });\n    }\n  }, [syncLoading, intl]);\n  const theme = useTheme();\n\n  return (\n    <Modal\n      title={intl.formatMessage({ defaultMessage: \"Add dataset\" })}\n      isVisible={isVisible}\n      onClose={onClose}\n      button1={\n        <Button\n          large\n          text={primaryButtonText}\n          onClick={handleImport}\n          disabled={disabled}\n          buttonType=\"primary\"\n        />\n      }\n      button2={\n        <Button\n          large\n          text={intl.formatMessage({ defaultMessage: \"Cancel\" })}\n          onClick={onClose}\n          buttonType=\"secondary\"\n        />\n      }>\n      {!dataType ? (\n        <ConnectSection>\n          <Content>\n            <Card\n              id=\"csv\"\n              icon=\"computer\"\n              iconSize=\"50px\"\n              text={intl.formatMessage({ defaultMessage: \"Upload from your device\" })}\n              subtext={intl.formatMessage({ defaultMessage: \"Supports CSV, JSON, GIS files\" })}\n              margin={56}\n              border=\"dashed\"\n              borderColor={theme.main.border}\n              onClick={onSelectCsvFile}\n            />\n            {googleApiKey && (\n              <Card\n                id=\"gdrive\"\n                icon=\"googleDrive\"\n                iconSize=\"50px\"\n                text={intl.formatMessage({ defaultMessage: \"Google Drive\" })}\n                margin={56}\n                border=\"dashed\"\n                borderColor={theme.main.border}\n                onClick={handleClick}\n              />\n            )}\n          </Content>\n        </ConnectSection>\n      ) : (\n        <InputSection>\n          {dataType === \"gdrive\" && (\n            <Gdrive onReturn={onReturn} onSheetSelect={onSheetSelect} syncLoading={syncLoading} />\n          )}\n          {dataType === \"csv\" && (\n            <>\n              <StyledIcon\n                icon={\"arrowLongLeft\"}\n                size={24}\n                onClick={onReturn}\n                color={theme.main.text}\n              />\n              <Subtitle\n                size=\"m\"\n                color={theme.main.strongText}\n                otherProperties={{ textAlign: \"center\" }}>\n                {intl.formatMessage({ defaultMessage: \"Upload CSV file\" })}\n              </Subtitle>\n              <Divider margin=\"24px\" />\n              <Content>\n                {syncLoading ? (\n                  <Loading />\n                ) : (\n                  csv && <Card id=\"csv\" key=\"csv\" icon=\"file\" iconSize=\"24px\" text={csv.name} />\n                )}\n              </Content>\n            </>\n          )}\n          {!dataType && (\n            <>\n              <Button onClick={onReturn}>\n                <Icon icon={\"arrowLongLeft\"} size={24} color={theme.main.text} />\n              </Button>\n\n              <Subtitle size=\"m\" color={theme.main.strongText}>\n                {intl.formatMessage({\n                  defaultMessage: \"Sorry, that service is unavailable at this time.\",\n                })}\n              </Subtitle>\n              <Divider margin=\"24px\" />\n            </>\n          )}\n        </InputSection>\n      )}\n    </Modal>\n  );\n};\n\nconst ConnectSection = styled.div`\n  width: 100%;\n  min-height: 200px;\n  & > div > div {\n    // margin-right: 40px;\n    &:hover {\n      cursor: pointer;\n      background: ${props => props.theme.main.paleBg};\n    }\n  }\n`;\n\nconst Content = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst Subtitle = styled(Text)`\n  flex: 1;\n`;\n\nconst InputSection = styled.div`\n  min-height: 296px;\n  width: 100%;\n`;\n\nconst StyledIcon = styled(Icon)`\n  cursor: pointer;\n`;\n\nexport default DatasetModal;\n","import { useCallback, useState, useEffect } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport useFileInput from \"use-file-input\";\nimport { Type as NotificationType } from \"@reearth/components/atoms/NotificationBar\";\nimport { SheetParameter } from \"./Gdrive\";\n\nexport type DatasetType = \"csv\" | \"gcms\" | \"box\" | \"drop\" | \"gdrive\";\n\nexport default (\n  handleDatasetAdd?: (url: string | File, schemeId: string | null) => Promise<void>,\n  handleGoogleSheetDatasetAdd?: (\n    accessToken: string,\n    fileId: string,\n    sheetName: string,\n    schemeId: string | null,\n  ) => Promise<void>,\n  onNotify?: (type: NotificationType, text: string) => void,\n) => {\n  const intl = useIntl();\n  const [url, onUrlChange] = useState<string>();\n  const [csv, changeCsv] = useState<File>();\n  const [sheet, changeSheet] = useState<SheetParameter>();\n  const [dataType, setDataType] = useState<DatasetType>();\n  const [disabled, setDisabled] = useState(true);\n\n  const handleImport = useCallback(async () => {\n    if (dataType === \"gdrive\") {\n      if (!sheet || !handleGoogleSheetDatasetAdd) return;\n      await handleGoogleSheetDatasetAdd(sheet.accessToken, sheet.fileId, sheet.sheetName, null);\n      onNotify?.(\n        \"success\",\n        intl.formatMessage({ defaultMessage: \"You have added a dataset successfully.\" }),\n      );\n    }\n    const data = dataType === \"csv\" ? csv : url;\n    if (!data || !handleDatasetAdd) return;\n    await handleDatasetAdd(data, null);\n    onNotify?.(\n      \"success\",\n      intl.formatMessage({ defaultMessage: \"You have added a dataset successfully.\" }),\n    );\n  }, [dataType, url, csv, sheet, handleDatasetAdd, handleGoogleSheetDatasetAdd, intl, onNotify]);\n\n  const onSelectCsvFile = useFileInput(\n    (files: FileList) => {\n      const file = files[0];\n      if (!file) return;\n      changeCsv(file);\n      setDataType(\"csv\");\n    },\n    { accept: \".csv,text/csv\", multiple: false },\n  );\n\n  const handleClick = useCallback(type => {\n    setDataType(type);\n  }, []);\n\n  const onSheetSelect = useCallback(sheet => {\n    changeSheet(sheet);\n  }, []);\n\n  const onReturn = useCallback(() => {\n    onUrlChange(undefined);\n    changeCsv(undefined);\n    setDataType(undefined);\n    changeSheet(undefined);\n  }, []);\n\n  useEffect(() => {\n    setDisabled(!(csv || url || sheet));\n  }, [csv, url, sheet]);\n\n  return {\n    url,\n    onUrlChange,\n    csv,\n    dataType,\n    disabled,\n    onSelectCsvFile,\n    handleClick,\n    onReturn,\n    onSheetSelect,\n    handleImport,\n  };\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport DatasetModal from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/DatasetPane/DatasetModal\\\",\\n  component: DatasetModal,\\n} as Meta;\\n\\nexport const Default = () => <DatasetModal isVisible syncLoading={false} />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":75,\"line\":10},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":75,\"line\":10}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport DatasetModal from \".\";\n\nexport default {\n  title: \"molecules/EarthEditor/DatasetPane/DatasetModal\",\n  component: DatasetModal,\n} as Meta;\n\nexport const Default = () => <DatasetModal isVisible syncLoading={false} />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <DatasetModal isVisible syncLoading={false} />\" }, ...Default.parameters };","import { useDrag } from \"@reearth/util/use-dnd\";\n\nexport default (onDrop?: (layerId: string, index?: number) => void) => {\n  const { ref } = useDrag<\"datasetSchema\">(\n    { type: \"datasetSchema\" },\n    false,\n    async (item, dropper) => {\n      if (!dropper || (dropper.type !== \"earth\" && dropper.type !== \"layer\")) return;\n      onDrop?.(dropper.layerId, dropper.type === \"layer\" ? dropper.index : undefined);\n    },\n  );\n\n  return ref;\n};\n","import React, { useCallback } from \"react\";\nimport { styled } from \"@reearth/theme\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport fonts from \"@reearth/theme/fonts\";\n\nimport useHooks from \"./hooks\";\n\nexport type DatasetSchemaProps = {\n  className?: string;\n  id?: string;\n  name?: string;\n  totalCount?: number;\n  onDrop?: (layerId: string, index?: number) => void;\n  onRemove?: (schemaId: string) => void;\n  selected?: boolean;\n};\n\nconst DatasetSchemaCell: React.FC<DatasetSchemaProps> = ({\n  className,\n  id,\n  onDrop,\n  onRemove,\n  name,\n  totalCount,\n  selected,\n}) => {\n  const ref = useHooks(onDrop);\n  const handleRemove = useCallback(() => {\n    if (!id || !window.confirm(\"Are you sure to remove this dataset?\")) return;\n    onRemove?.(id);\n  }, [id, onRemove]);\n  return (\n    <Wrapper className={className} ref={ref} selected={selected}>\n      <StyledIcon icon=\"dataset\" size={16} />\n      <Name>{name}</Name>\n      <Count>({totalCount ?? \"\"})</Count>\n      <div onClick={handleRemove}>\n        <RemoveButton icon=\"bin\" size={14} />\n      </div>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div<Pick<DatasetSchemaProps, \"selected\">>`\n  background-color: ${props =>\n    props.selected ? props.theme.layers.paleBg : props.theme.layers.bg};\n  display: flex;\n  align-items: center;\n  font-size: ${fonts.sizes.xs}px;\n  padding: 10px;\n  border-radius: 3px;\n  cursor: pointer;\n  color: ${props => props.theme.leftMenu.text};\n  user-select: none;\n  &:hover {\n    background-color: ${props => props.theme.layers.hoverBg};\n  }\n`;\n\nconst StyledIcon = styled(Icon)`\n  flex-shrink: 0;\n  padding-right: 0.5em;\n`;\n\nconst Name = styled.div`\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  flex: auto;\n`;\n\nconst Count = styled.div`\n  font-size: 0.8em;\n  padding-left: 0.5em;\n`;\n\nconst RemoveButton = styled(Icon)`\n  margin-left: 4px;\n`;\n\nexport default DatasetSchemaCell;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport DatasetSchemaCell from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/DatasetPane/DatasetSchemaCell\\\",\\n  component: DatasetSchemaCell,\\n} as Meta;\\n\\nexport const Default = () => <DatasetSchemaCell name=\\\"Hoge\\\" totalCount={10} />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":78,\"line\":10},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":78,\"line\":10}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport DatasetSchemaCell from \".\";\n\nexport default {\n  title: \"molecules/EarthEditor/DatasetPane/DatasetSchemaCell\",\n  component: DatasetSchemaCell,\n} as Meta;\n\nexport const Default = () => <DatasetSchemaCell name=\"Hoge\" totalCount={10} />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <DatasetSchemaCell name=\\\"Hoge\\\" totalCount={10} />\" }, ...Default.parameters };","import React from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { styled, useTheme } from \"@reearth/theme\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport {\n  MenuListItemLabel,\n  MenuList,\n  MenuListItem,\n} from \"@reearth/components/molecules/Common/MenuList\";\nimport Dropdown from \"@reearth/components/atoms/Dropdown\";\nimport { Project } from \"@reearth/components/molecules/Common/Header\";\n\ntype Props = {\n  currentProject: Project;\n  teamId?: string;\n};\n\nconst ProjectMenu: React.FC<Props> = ({ currentProject, teamId }) => {\n  const intl = useIntl();\n  const theme = useTheme();\n\n  return (\n    <Wrapper>\n      <Dropdown\n        label={\n          <Text size=\"m\" weight=\"bold\" color={theme.main.strongText}>\n            {currentProject?.name}\n          </Text>\n        }\n        noHoverStyle\n        centered\n        hasIcon\n        openOnClick>\n        <DropdownInner>\n          <MenuList>\n            <MenuListItem>\n              <MenuListItemLabel\n                linkTo={`/settings/project/${currentProject.id}`}\n                text={intl.formatMessage({ defaultMessage: \"Project settings\" })}\n              />\n            </MenuListItem>\n            <MenuListItem>\n              <MenuListItemLabel\n                linkTo={`/settings/project/${currentProject.id}/dataset`}\n                text={intl.formatMessage({ defaultMessage: \"Datasets\" })}\n              />\n            </MenuListItem>\n            {/* <MenuListItem>\n              <MenuListItemLabel\n                linkTo={`/settings/project/${currentProject.id}/plugins`}\n                text={intl.formatMessage({ defaultMessage: \"Plugins\" })}\n              />\n            </MenuListItem> */}\n            <Spacer />\n            <MenuListItem>\n              <MenuListItemLabel\n                linkTo={`/settings/workspace/${teamId}/projects`}\n                text={intl.formatMessage({ defaultMessage: \"Manage projects\" })}\n              />\n            </MenuListItem>\n            <Spacer />\n            <MenuListItem>\n              <MenuListItemLabel\n                icon=\"dashboard\"\n                linkTo={`/dashboard/${teamId}`}\n                text={intl.formatMessage({ defaultMessage: \"Top page\" })}\n              />\n            </MenuListItem>\n            <MenuListItem>\n              <MenuListItemLabel\n                icon=\"help\"\n                linkTo=\"/projects\"\n                text={intl.formatMessage({ defaultMessage: \"Help\" })}\n              />\n            </MenuListItem>\n          </MenuList>\n        </DropdownInner>\n      </Dropdown>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  min-width: 200px;\n  height: 100%;\n`;\n\nconst DropdownInner = styled.div`\n  padding: 0;\n`;\n\nconst Spacer = styled.div`\n  width: 100%;\n  height: 1px;\n  background-color: #3f3d45;\n`;\n\nexport default ProjectMenu;\n","import React, { useRef, useMemo } from \"react\";\nimport { useIntl } from \"react-intl\";\n\nimport Button from \"@reearth/components/atoms/Button\";\nimport Flex from \"@reearth/components/atoms/Flex\";\nimport PublicationStatus, { Status } from \"@reearth/components/atoms/PublicationStatus\";\nimport CommonHeader, {\n  Props as CommonHeaderProps,\n} from \"@reearth/components/molecules/Common/Header\";\nimport ProjectMenu from \"@reearth/components/molecules/Common/ProjectMenu\";\nimport Dropdown, { Ref as DropDownRef } from \"@reearth/components/atoms/Dropdown\";\nimport {\n  MenuList,\n  MenuListItem,\n  MenuListItemLabel,\n} from \"@reearth/components/molecules/Common/MenuList\";\n\nimport { styled } from \"@reearth/theme\";\n\n// Proxy dependent types\nexport { User, Team, NotificationType } from \"@reearth/components/molecules/Common/Header\";\n\nexport type publishingType = \"publishing\" | \"updating\" | \"unpublishing\";\nexport type Project = {\n  id?: string;\n  name?: string;\n};\n\nexport type Props = {\n  currentProject?: Project;\n  currentProjectStatus?: Status;\n  teamId?: string;\n  onPublishmentStatusClick?: (p: publishingType) => void;\n  onPreviewOpen?: () => void;\n} & CommonHeaderProps;\n\nconst Header: React.FC<Props> = ({\n  currentProject,\n  currentProjectStatus,\n  teamId,\n  onPublishmentStatusClick,\n  onPreviewOpen,\n  ...props\n}) => {\n  const intl = useIntl();\n  const dropDownRef = useRef<DropDownRef>(null);\n\n  const publicationButtonText = useMemo(() => {\n    return currentProjectStatus === \"unpublished\"\n      ? intl.formatMessage({\n          defaultMessage: \"Publish\",\n        })\n      : intl.formatMessage({\n          defaultMessage: \"Update\",\n        });\n  }, [intl, currentProjectStatus]);\n\n  const disableUnpublish = useMemo(() => {\n    return currentProjectStatus === \"unpublished\" ? true : false;\n  }, [currentProjectStatus]);\n\n  const center = currentProject && <ProjectMenu currentProject={currentProject} teamId={teamId} />;\n\n  const right = (\n    <RightArea justify=\"flex-end\" align=\"center\">\n      <Button\n        text={intl.formatMessage({ defaultMessage: \"Preview\" })}\n        buttonType=\"secondary\"\n        onClick={onPreviewOpen}\n        margin=\"0 12px 0 0\"\n      />\n      <Dropdown\n        ref={dropDownRef}\n        openOnClick\n        noHoverStyle\n        label={\n          <Button buttonType=\"secondary\" margin=\"0\" icon=\"arrowDown\" iconRight>\n            <PublicationStatus status={currentProjectStatus} />\n          </Button>\n        }>\n        <ChildrenWrapper>\n          <Section>\n            <MenuList>\n              <MenuListItem>\n                <MenuListItemLabel\n                  disabled={disableUnpublish}\n                  icon=\"unpublish\"\n                  onClick={\n                    currentProjectStatus !== \"unpublished\"\n                      ? () => onPublishmentStatusClick?.(\"unpublishing\")\n                      : undefined\n                  }\n                  text={intl.formatMessage({ defaultMessage: \"Unpublish\" })}\n                />\n              </MenuListItem>\n\n              <MenuListItem>\n                <MenuListItemLabel\n                  icon=\"publish\"\n                  onClick={\n                    currentProjectStatus === \"published\" || currentProjectStatus === \"limited\"\n                      ? () => onPublishmentStatusClick?.(\"updating\")\n                      : () => onPublishmentStatusClick?.(\"publishing\")\n                  }\n                  text={publicationButtonText}\n                />\n              </MenuListItem>\n            </MenuList>\n          </Section>\n        </ChildrenWrapper>\n      </Dropdown>\n    </RightArea>\n  );\n\n  return <CommonHeader {...props} center={center} right={right} />;\n};\n\nconst RightArea = styled(Flex)`\n  height: 100%;\n  align-items: center;\n`;\n\nconst ChildrenWrapper = styled.div`\n  width: 100%;\n`;\n\nconst Section = styled.div`\n  padding: 0;\n`;\n\nexport default Header;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport Header from \\\".\\\";\\n\\nconst defaultProps = {\\n  currentProject: {\\n    id: \\\"1\\\",\\n    name: \\\"Sample Project\\\",\\n  },\\n  currentProjectStatus: \\\"published\\\" as const,\\n  recentProjects: [\\n    {\\n      id: \\\"1\\\",\\n      name: \\\"Project 1\\\",\\n    },\\n    {\\n      id: \\\"2\\\",\\n      name: \\\"Project 2\\\",\\n    },\\n    {\\n      id: \\\"3\\\",\\n      name: \\\"Project 3\\\",\\n    },\\n    {\\n      id: \\\"4\\\",\\n      name: \\\"Project 4\\\",\\n    },\\n    {\\n      id: \\\"5\\\",\\n      name: \\\"Project 5\\\",\\n    },\\n  ],\\n  user: {\\n    name: \\\"Shinnosuke Komiya\\\",\\n  },\\n  currentTeam: {\\n    id: \\\"1\\\",\\n    name: \\\"Darwin Education\\\",\\n  },\\n  teams: [\\n    {\\n      id: \\\"A\\\",\\n      name: \\\"Team A\\\",\\n    },\\n    {\\n      id: \\\"B\\\",\\n      name: \\\"Team B\\\",\\n    },\\n  ],\\n  onBack: () => action(\\\"onBack\\\"),\\n  onForward: () => action(\\\"onForward\\\"),\\n  onSignOut: () => action(\\\"signOut\\\"),\\n};\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/Header\\\",\\n  component: Header,\\n} as Meta;\\n\\nexport const Default = () => <Header {...defaultProps} />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":61},\"endLoc\":{\"col\":57,\"line\":61},\"startBody\":{\"col\":23,\"line\":61},\"endBody\":{\"col\":57,\"line\":61}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport Header from \".\";\n\nconst defaultProps = {\n  currentProject: {\n    id: \"1\",\n    name: \"Sample Project\",\n  },\n  currentProjectStatus: \"published\" as const,\n  recentProjects: [\n    {\n      id: \"1\",\n      name: \"Project 1\",\n    },\n    {\n      id: \"2\",\n      name: \"Project 2\",\n    },\n    {\n      id: \"3\",\n      name: \"Project 3\",\n    },\n    {\n      id: \"4\",\n      name: \"Project 4\",\n    },\n    {\n      id: \"5\",\n      name: \"Project 5\",\n    },\n  ],\n  user: {\n    name: \"Shinnosuke Komiya\",\n  },\n  currentTeam: {\n    id: \"1\",\n    name: \"Darwin Education\",\n  },\n  teams: [\n    {\n      id: \"A\",\n      name: \"Team A\",\n    },\n    {\n      id: \"B\",\n      name: \"Team B\",\n    },\n  ],\n  onBack: () => action(\"onBack\"),\n  onForward: () => action(\"onForward\"),\n  onSignOut: () => action(\"signOut\"),\n};\n\nexport default {\n  title: \"molecules/EarthEditor/Header\",\n  component: Header,\n} as Meta;\n\nexport const Default = () => <Header {...defaultProps} />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <Header {...defaultProps} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Story, Meta } from \\\"@storybook/react\\\";\\n\\nimport Component, { Props, Layer } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/LayerMultipleSelectionModal\\\",\\n  component: Component,\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nconst layers: Layer[] = [\\n  { id: \\\"a\\\", title: \\\"A\\\" },\\n  {\\n    id: \\\"b\\\",\\n    title: \\\"B\\\",\\n    group: true,\\n    children: [\\n      { id: \\\"d\\\", title: \\\"xxxxxxxxxxxxxxx\\\" },\\n      { id: \\\"e\\\", title: \\\"ああああああああああああああああ\\\" },\\n      { id: \\\"f\\\", title: \\\"F\\\", group: true, children: [{ id: \\\"g\\\", title: \\\"G\\\" }] },\\n    ],\\n  },\\n  { id: \\\"c\\\", title: \\\"C\\\" },\\n];\\n\\nexport const Basic: Story<Props> = args => (\\n  <Component {...args} layers={layers} selected={[\\\"d\\\", \\\"e\\\"]} />\\n);\\n\\nBasic.args = {\\n  active: true,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Basic\":{\"startLoc\":{\"col\":35,\"line\":27},\"endLoc\":{\"col\":1,\"line\":29},\"startBody\":{\"col\":35,\"line\":27},\"endBody\":{\"col\":1,\"line\":29}}};\n    \nimport React from \"react\";\nimport { Story, Meta } from \"@storybook/react\";\n\nimport Component, { Props, Layer } from \".\";\n\nexport default {\n  title: \"molecules/EarthEditor/LayerMultipleSelectionModal\",\n  component: Component,\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nconst layers: Layer[] = [\n  { id: \"a\", title: \"A\" },\n  {\n    id: \"b\",\n    title: \"B\",\n    group: true,\n    children: [\n      { id: \"d\", title: \"xxxxxxxxxxxxxxx\" },\n      { id: \"e\", title: \"ああああああああああああああああ\" },\n      { id: \"f\", title: \"F\", group: true, children: [{ id: \"g\", title: \"G\" }] },\n    ],\n  },\n  { id: \"c\", title: \"C\" },\n];\n\nexport const Basic: Story<Props> = args => (\n  <Component {...args} layers={layers} selected={[\"d\", \"e\"]} />\n);\n\nBasic.args = {\n  active: true,\n};\n\n\n\nBasic.parameters = { storySource: { source: \"args => (\\n  <Component {...args} layers={layers} selected={[\\\"d\\\", \\\"e\\\"]} />\\n)\" }, ...Basic.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Story, Meta } from \\\"@storybook/react\\\";\\n\\nimport Component, { Props, Layer } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/LayerSelectionModal\\\",\\n  component: Component,\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nconst layers: Layer[] = [\\n  { id: \\\"a\\\", title: \\\"A\\\" },\\n  {\\n    id: \\\"b\\\",\\n    title: \\\"B\\\",\\n    group: true,\\n    children: [\\n      { id: \\\"d\\\", title: \\\"xxxxxxxxxxxxxxx\\\" },\\n      { id: \\\"e\\\", title: \\\"ああああああああああああああああ\\\" },\\n      { id: \\\"f\\\", title: \\\"F\\\", group: true, children: [{ id: \\\"g\\\", title: \\\"G\\\" }] },\\n    ],\\n  },\\n  { id: \\\"c\\\", title: \\\"C\\\" },\\n];\\n\\nexport const Basic: Story<Props> = args => <Component {...args} layers={layers} selected={\\\"e\\\"} />;\\n\\nBasic.args = {\\n  active: true,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Basic\":{\"startLoc\":{\"col\":35,\"line\":27},\"endLoc\":{\"col\":97,\"line\":27},\"startBody\":{\"col\":35,\"line\":27},\"endBody\":{\"col\":97,\"line\":27}}};\n    \nimport React from \"react\";\nimport { Story, Meta } from \"@storybook/react\";\n\nimport Component, { Props, Layer } from \".\";\n\nexport default {\n  title: \"molecules/EarthEditor/LayerSelectionModal\",\n  component: Component,\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nconst layers: Layer[] = [\n  { id: \"a\", title: \"A\" },\n  {\n    id: \"b\",\n    title: \"B\",\n    group: true,\n    children: [\n      { id: \"d\", title: \"xxxxxxxxxxxxxxx\" },\n      { id: \"e\", title: \"ああああああああああああああああ\" },\n      { id: \"f\", title: \"F\", group: true, children: [{ id: \"g\", title: \"G\" }] },\n    ],\n  },\n  { id: \"c\", title: \"C\" },\n];\n\nexport const Basic: Story<Props> = args => <Component {...args} layers={layers} selected={\"e\"} />;\n\nBasic.args = {\n  active: true,\n};\n\n\n\nBasic.parameters = { storySource: { source: \"args => <Component {...args} layers={layers} selected={\\\"e\\\"} />\" }, ...Basic.parameters };","import { useEffect, useState } from \"react\";\nimport { useCallback, useMemo } from \"react\";\nimport { useIntl } from \"react-intl\";\n\nimport { Item as TreeViewItemType } from \"@reearth/components/atoms/TreeView\";\nimport { Layer as LayerTreeViewItemItem, useLayerTreeViewItem } from \"../LayerTreeViewItem\";\nimport { arrayEquals } from \"@reearth/components/atoms/TreeView/util\";\n\nexport type Format = \"kml\" | \"czml\" | \"geojson\" | \"shape\" | \"reearth\";\n\nexport type Layer = {\n  id: string;\n  title: string;\n  icon?: string;\n  linked?: boolean;\n  visible?: boolean;\n} & (LayerGroup | LayerItem);\n\nexport type LayerGroup = {\n  type: \"group\";\n  children?: Layer[];\n};\n\nexport type LayerItem = {\n  type: \"item\";\n};\n\nexport type Widget = {\n  id: string;\n  title: string;\n  description?: string;\n  enabled?: boolean;\n  icon?: string;\n};\n\nexport type ItemType = \"root\" | \"scene\" | \"layer\" | \"widget\";\nexport type ItemEx = { type: ItemType };\nexport type TreeViewItem = LayerTreeViewItemItem<ItemEx>;\n\nexport default ({\n  rootLayerId,\n  layers,\n  widgets,\n  sceneDescription,\n  selectedLayerId,\n  selectedWidgetId,\n  selectedType,\n  onLayerSelect,\n  onSceneSelect,\n  onWidgetSelect,\n  onLayerMove,\n  onLayerRemove,\n  onLayerRename,\n  onLayerVisibilityChange,\n  onDrop,\n  onLayerGroupCreate,\n  onLayerImport,\n}: {\n  rootLayerId?: string;\n  layers?: Layer[];\n  widgets?: Widget[];\n  sceneDescription?: string;\n  selectedLayerId?: string;\n  selectedIndex?: number[];\n  selectedWidgetId?: string;\n  selectedType?: ItemType;\n  onLayerSelect?: (id: string, ...i: number[]) => void;\n  onLayerImport?: (file: File, format: Format) => void;\n  onLayerRemove?: (id: string) => void;\n  onSceneSelect?: () => void;\n  onWidgetSelect?: (id: string) => void;\n  onLayerMove?: (\n    src: string,\n    dest: string,\n    destIndex: number,\n    destChildrenCount: number,\n    parent: string,\n  ) => void;\n  onLayerRename?: (id: string, name: string) => void;\n  onLayerVisibilityChange?: (id: string, visibility: boolean) => void;\n  onDrop?: (layer: string, index: number, childrenCount: number) => any;\n  onLayerGroupCreate?: () => void;\n}) => {\n  const intl = useIntl();\n  const [selected, setSelected] = useState<string[]>([]);\n\n  const select = useCallback(\n    (items: TreeViewItemType<TreeViewItem>[], i: number[][]) => {\n      const ids = items.map(i => i.id);\n      setSelected(selected => (!arrayEquals(selected, ids) ? ids : selected));\n\n      const item = items[0];\n      if (!item) return;\n\n      if (item.content.type === \"scene\") {\n        onSceneSelect?.();\n      } else if (item.content.type === \"widget\") {\n        onWidgetSelect?.(item.id);\n      } else if (item.content.type === \"layer\") {\n        onLayerSelect?.(\n          item.id,\n          // because other items can be exist like Scene, Widget\n          ...(typeof i[0][0] === \"number\" ? [i[0][0] - 2, ...i[0].slice(1)] : []),\n        );\n      }\n    },\n    [onLayerSelect, onSceneSelect, onWidgetSelect],\n  );\n\n  const drop = useCallback(\n    (\n      item: TreeViewItemType<TreeViewItem>,\n      destItem: TreeViewItemType<TreeViewItem>,\n      _index: number[],\n      destIndex: number[],\n      parent: TreeViewItemType<TreeViewItem>,\n    ) => {\n      if (destItem.content.type !== \"layer\") return;\n      onLayerMove?.(\n        item.id,\n        destItem.id,\n        Math.max(0, destIndex[destIndex.length - 1]),\n        destItem.content.childrenCount ?? 0,\n        parent.id,\n      );\n    },\n    [onLayerMove],\n  );\n\n  const dropExternals = useCallback(\n    (_: any, item: TreeViewItemType<LayerTreeViewItemItem>, index: number[]) =>\n      onDrop?.(item.id, index[index.length - 1], item.content.childrenCount ?? 0),\n    [onDrop],\n  );\n\n  const removeLayer = useCallback(() => {\n    if (selectedLayerId) {\n      onLayerRemove?.(selectedLayerId);\n    }\n  }, [selectedLayerId, onLayerRemove]);\n\n  const sceneTitle = intl.formatMessage({ defaultMessage: \"Scene\" });\n  const widgetTitle = intl.formatMessage({ defaultMessage: \"Widgets\" });\n  const layerTitle = intl.formatMessage({ defaultMessage: \"Layers\" });\n\n  const sceneWidgetsItem = useMemo<TreeViewItemType<TreeViewItem> | undefined>(\n    () => ({\n      id: \"root\",\n      content: {\n        id: \"root\",\n        type: \"root\",\n      },\n      children: [\n        {\n          id: \"scene\",\n          content: {\n            id: \"scene\",\n            type: \"scene\",\n            icon: \"scene\",\n            title: sceneTitle,\n            description: sceneDescription,\n          },\n          draggable: false,\n          droppable: false,\n          droppableIntoChildren: false,\n          expandable: false,\n          selectable: true,\n        },\n        {\n          id: \"widgets\",\n          content: {\n            id: \"widgets\",\n            type: \"widget\",\n            icon: \"widget\",\n            title: widgetTitle,\n            group: true,\n          },\n          draggable: false,\n          droppable: false,\n          droppableIntoChildren: false,\n          expandable: true,\n          selectable: false,\n          children: widgets?.map(w => ({\n            id: w.id,\n            content: {\n              id: w.id,\n              type: \"widget\",\n              title: w.title,\n              description: w.description,\n              icon: w.icon,\n              deactivated: !w.enabled,\n            },\n            draggable: false,\n            droppable: false,\n            droppableIntoChildren: false,\n            expandable: false,\n            selectable: true,\n          })),\n        },\n      ],\n    }),\n    [sceneTitle, sceneDescription, widgetTitle, widgets],\n  );\n  const layersItem = useMemo<TreeViewItemType<TreeViewItem> | undefined>(\n    () =>\n      rootLayerId\n        ? {\n            id: \"root\",\n            content: {\n              id: \"root\",\n              type: \"root\",\n            },\n            children: [\n              {\n                id: rootLayerId,\n                content: {\n                  id: rootLayerId,\n                  type: \"layer\",\n                  icon: \"layer\",\n                  title: layerTitle,\n                  childrenCount: layers?.length,\n                  showLayerActions: true,\n                  underlined: true,\n                  showChildrenCount: false,\n                  group: true,\n                },\n                expandable: true,\n                children: [...(convertLayers(layers) ?? [])],\n              },\n            ],\n          }\n        : undefined,\n    [layerTitle, rootLayerId, layers],\n  );\n\n  const layerTreeViewItemOnRename = useCallback(\n    (props, name) => onLayerRename?.(props.item.id, name),\n    [onLayerRename],\n  );\n  const layerTreeViewItemOnLayerVisibilityChange = useCallback(\n    (props, visibility) => onLayerVisibilityChange?.(props.item.id, visibility),\n    [onLayerVisibilityChange],\n  );\n\n  const TreeViewItem = useLayerTreeViewItem<ItemEx>({\n    onRename: layerTreeViewItemOnRename,\n    onVisibilityChange: layerTreeViewItemOnLayerVisibilityChange,\n    onRemove: onLayerRemove,\n    onImport: onLayerImport,\n    onGroupCreate: onLayerGroupCreate,\n    selectedLayerId,\n    rootLayerId,\n  });\n\n  useEffect(() => {\n    const newState =\n      selectedType === \"scene\"\n        ? [\"scene\"]\n        : selectedType === \"layer\" && selectedLayerId\n        ? [selectedLayerId]\n        : selectedType === \"widget\" && selectedWidgetId\n        ? [selectedWidgetId]\n        : [];\n    setSelected(ids => (arrayEquals(ids, newState) ? ids : newState));\n  }, [selectedLayerId, selectedType, selectedWidgetId]);\n\n  return {\n    sceneWidgetsItem,\n    layersItem,\n    select,\n    drop,\n    dropExternals,\n    removeLayer,\n    TreeViewItem,\n    selected,\n  };\n};\n\nconst convertLayers = (\n  layers: Layer[] | undefined,\n  parent?: Layer,\n): TreeViewItemType<LayerTreeViewItemItem<{ type: \"layer\" }>>[] | undefined =>\n  layers?.map(layer => ({\n    id: layer.id,\n    content: {\n      id: layer.id,\n      type: \"layer\",\n      group: layer.type === \"group\",\n      childrenCount: layer.type === \"group\" ? layer.children?.length : undefined,\n      showChildrenCount: true,\n      icon: layer.icon,\n      title: layer.title,\n      linked: layer.linked,\n      visible: layer.visible,\n      visibilityChangeable: true,\n      renamable: true,\n    },\n    children: layer.type === \"group\" ? convertLayers(layer.children, layer) : undefined,\n    draggable: parent?.type !== \"group\" || !parent.linked,\n    droppable: parent?.type !== \"group\" || !parent.linked,\n    droppableIntoChildren: layer.type === \"group\" && !layer.linked,\n    droppableExternals: true,\n    expandable: true,\n    selectable: true,\n  }));\n","import React from \"react\";\n\nimport { styled } from \"@reearth/theme\";\nimport Loading from \"@reearth/components/atoms/Loading\";\nimport TreeView from \"@reearth/components/atoms/TreeView\";\nimport useHooks, {\n  Layer as LayerType,\n  Widget as WidgetType,\n  Format as FormatType,\n  TreeViewItem,\n} from \"./hooks\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\n\nexport type Layer = LayerType;\nexport type Widget = WidgetType;\nexport type Format = FormatType;\n\nexport type Props = {\n  className?: string;\n  rootLayerId?: string;\n  selectedLayerId?: string;\n  selectedWidgetId?: string;\n  layers?: Layer[];\n  widgets?: Widget[];\n  sceneDescription?: string;\n  selectedType?: \"scene\" | \"layer\" | \"widget\";\n  loading?: boolean;\n  onLayerRename?: (id: string, name: string) => void;\n  onLayerVisibilityChange?: (id: string, visibility: boolean) => void;\n  onLayerRemove?: (id: string) => void;\n  onLayerSelect?: (layerId: string, ...i: number[]) => void;\n  onSceneSelect?: () => void;\n  onWidgetSelect?: (id: string) => void;\n  onLayerMove?: (\n    layer: string,\n    destLayer: string,\n    index: number,\n    destChildrenCount: number,\n    parentId: string,\n  ) => void;\n  onLayerGroupCreate?: () => void;\n  onLayerImport?: (file: File, format: Format) => void;\n  onDrop?: (layer: string, index: number, childrenCount: number) => any;\n};\n\nconst OutlinePane: React.FC<Props> = ({\n  className,\n  rootLayerId,\n  selectedLayerId,\n  selectedWidgetId,\n  selectedType,\n  layers,\n  widgets,\n  sceneDescription,\n  onLayerRename,\n  onLayerVisibilityChange,\n  onLayerRemove,\n  onLayerSelect,\n  onSceneSelect,\n  onWidgetSelect,\n  onLayerMove,\n  onLayerImport,\n  onLayerGroupCreate,\n  onDrop,\n  loading,\n}) => {\n  const { sceneWidgetsItem, layersItem, select, drop, dropExternals, TreeViewItem, selected } =\n    useHooks({\n      rootLayerId,\n      layers,\n      widgets,\n      sceneDescription,\n      selectedLayerId,\n      selectedWidgetId,\n      selectedType,\n      onLayerSelect,\n      onLayerImport,\n      onLayerRemove,\n      onSceneSelect,\n      onWidgetSelect,\n      onLayerMove,\n      onLayerRename,\n      onLayerVisibilityChange,\n      onDrop,\n      onLayerGroupCreate,\n    });\n\n  return (\n    <Wrapper className={className}>\n      <OutlineItemsWrapper>\n        {sceneWidgetsItem && (\n          <TreeView<TreeViewItem, HTMLDivElement>\n            item={sceneWidgetsItem}\n            selected={selected}\n            renderItem={TreeViewItem}\n            draggable\n            droppable\n            selectable\n            expandable\n            dragItemType=\"layer\"\n            acceptedDragItemTypes={acceptedDragItemTypes}\n            onSelect={select}\n          />\n        )}\n      </OutlineItemsWrapper>\n\n      <LayersItemWrapper>\n        {layersItem && (\n          <TreeView<TreeViewItem, HTMLDivElement>\n            item={layersItem}\n            selected={selected}\n            renderItem={TreeViewItem}\n            draggable\n            droppable\n            selectable\n            expandable\n            expanded={rootLayerId && !selectedLayerId ? [rootLayerId] : undefined}\n            dragItemType=\"layer\"\n            acceptedDragItemTypes={acceptedDragItemTypes}\n            onSelect={select}\n            onDrop={drop}\n            onDropExternals={dropExternals}\n          />\n        )}\n        {loading && <Loading />}\n      </LayersItemWrapper>\n    </Wrapper>\n  );\n};\n\nconst acceptedDragItemTypes = [\"primitive\"];\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-flow: column;\n`;\n\nconst OutlineItemsWrapper = styled.div`\n  margin-top: ${metricsSizes[\"4xl\"]}px;\n  position: relative;\n  background-color: ${props => props.theme.layers.bg};\n`;\n\nconst LayersItemWrapper = styled(OutlineItemsWrapper)`\n  min-height: 0;\n`;\n\nexport default OutlinePane;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useState } from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\n\\nimport Component, { Layer, Widget } from \\\".\\\";\\nimport deepFind from \\\"@reearth/util/deepFind\\\";\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/LayerPane\\\",\\n  component: Component,\\n  argTypes: {\\n    onLayerRename: { action: \\\"onLayerRename\\\" },\\n    onLayerVisibilityChange: { action: \\\"onLayerVisibilityChange\\\" },\\n    onLayerRemove: { action: \\\"onLayerRemove\\\" },\\n    onLayerSelect: { action: \\\"onLayerSelect\\\" },\\n    onSceneSelect: { action: \\\"onSceneSelect\\\" },\\n    onWidgetSelect: { action: \\\"onWidgetSelect\\\" },\\n    onLayerMove: { action: \\\"onLayerMove\\\" },\\n    onLayerImport: { action: \\\"onLayerImport\\\" },\\n  },\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nconst widgets: Widget[] = [\\n  {\\n    id: \\\"Widget1\\\",\\n    title: \\\"Widget1\\\",\\n    enabled: true,\\n  },\\n];\\n\\nconst layers: Layer[] = [\\n  { id: \\\"foobar\\\", type: \\\"item\\\", title: \\\"foobar\\\" },\\n  {\\n    id: \\\"hoge\\\",\\n    title: \\\"hoge\\\",\\n    type: \\\"group\\\",\\n    children: [\\n      { id: \\\"foo\\\", type: \\\"item\\\", title: \\\"foo\\\" },\\n      { id: \\\"bar\\\", type: \\\"item\\\", title: \\\"bar\\\" },\\n    ],\\n  },\\n];\\n\\nexport const Default = () => {\\n  const [layersState, setLayers] = useState(layers);\\n\\n  return (\\n    <Component\\n      rootLayerId=\\\"root\\\"\\n      layers={layersState}\\n      widgets={widgets}\\n      onLayerMove={(src, dest, index, childrenCount, parent) => {\\n        action(\\\"onLayerMove\\\")(src, dest, index, childrenCount, parent);\\n\\n        const s = deepFind(\\n          layersState,\\n          l => l.id === src,\\n          l => (l.type === \\\"group\\\" ? l.children : undefined),\\n        )[0];\\n        const p = deepFind(\\n          layersState,\\n          l => l.id === parent,\\n          l => (l.type === \\\"group\\\" ? l.children : undefined),\\n        )[0];\\n        const d = deepFind(\\n          layersState,\\n          l => l.id === dest,\\n          l => (l.type === \\\"group\\\" ? l.children : undefined),\\n        )[0];\\n        if (!s || (p && p.type !== \\\"group\\\") || (d && d.type !== \\\"group\\\")) return;\\n\\n        let newLayers = [...layersState];\\n\\n        if (!p) {\\n          const srcIndex = newLayers?.findIndex(l => l.id === src) ?? -1;\\n          if (srcIndex >= 0) {\\n            newLayers.splice(srcIndex, 1);\\n          }\\n        } else {\\n          const srcIndex = p.children?.findIndex(l => l.id === src) ?? -1;\\n          if (srcIndex >= 0) {\\n            p?.children?.splice(srcIndex, 1);\\n          }\\n        }\\n\\n        if (d) {\\n          d.children = [\\n            ...(d.children?.slice(0, index) ?? []),\\n            s,\\n            ...(d.children?.slice(index) ?? []),\\n          ];\\n        } else {\\n          newLayers = [...newLayers.slice(0, index), s, ...newLayers.slice(index)];\\n        }\\n\\n        setLayers(newLayers);\\n      }}\\n    />\\n  );\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":45},\"endLoc\":{\"col\":1,\"line\":101},\"startBody\":{\"col\":23,\"line\":45},\"endBody\":{\"col\":1,\"line\":101}}};\n    \nimport React, { useState } from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\n\nimport Component, { Layer, Widget } from \".\";\nimport deepFind from \"@reearth/util/deepFind\";\n\nexport default {\n  title: \"molecules/EarthEditor/LayerPane\",\n  component: Component,\n  argTypes: {\n    onLayerRename: { action: \"onLayerRename\" },\n    onLayerVisibilityChange: { action: \"onLayerVisibilityChange\" },\n    onLayerRemove: { action: \"onLayerRemove\" },\n    onLayerSelect: { action: \"onLayerSelect\" },\n    onSceneSelect: { action: \"onSceneSelect\" },\n    onWidgetSelect: { action: \"onWidgetSelect\" },\n    onLayerMove: { action: \"onLayerMove\" },\n    onLayerImport: { action: \"onLayerImport\" },\n  },\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nconst widgets: Widget[] = [\n  {\n    id: \"Widget1\",\n    title: \"Widget1\",\n    enabled: true,\n  },\n];\n\nconst layers: Layer[] = [\n  { id: \"foobar\", type: \"item\", title: \"foobar\" },\n  {\n    id: \"hoge\",\n    title: \"hoge\",\n    type: \"group\",\n    children: [\n      { id: \"foo\", type: \"item\", title: \"foo\" },\n      { id: \"bar\", type: \"item\", title: \"bar\" },\n    ],\n  },\n];\n\nexport const Default = () => {\n  const [layersState, setLayers] = useState(layers);\n\n  return (\n    <Component\n      rootLayerId=\"root\"\n      layers={layersState}\n      widgets={widgets}\n      onLayerMove={(src, dest, index, childrenCount, parent) => {\n        action(\"onLayerMove\")(src, dest, index, childrenCount, parent);\n\n        const s = deepFind(\n          layersState,\n          l => l.id === src,\n          l => (l.type === \"group\" ? l.children : undefined),\n        )[0];\n        const p = deepFind(\n          layersState,\n          l => l.id === parent,\n          l => (l.type === \"group\" ? l.children : undefined),\n        )[0];\n        const d = deepFind(\n          layersState,\n          l => l.id === dest,\n          l => (l.type === \"group\" ? l.children : undefined),\n        )[0];\n        if (!s || (p && p.type !== \"group\") || (d && d.type !== \"group\")) return;\n\n        let newLayers = [...layersState];\n\n        if (!p) {\n          const srcIndex = newLayers?.findIndex(l => l.id === src) ?? -1;\n          if (srcIndex >= 0) {\n            newLayers.splice(srcIndex, 1);\n          }\n        } else {\n          const srcIndex = p.children?.findIndex(l => l.id === src) ?? -1;\n          if (srcIndex >= 0) {\n            p?.children?.splice(srcIndex, 1);\n          }\n        }\n\n        if (d) {\n          d.children = [\n            ...(d.children?.slice(0, index) ?? []),\n            s,\n            ...(d.children?.slice(index) ?? []),\n          ];\n        } else {\n          newLayers = [...newLayers.slice(0, index), s, ...newLayers.slice(index)];\n        }\n\n        setLayers(newLayers);\n      }}\n    />\n  );\n};\n\n\n\nDefault.parameters = { storySource: { source: \"() => {\\n  const [layersState, setLayers] = useState(layers);\\n\\n  return (\\n    <Component\\n      rootLayerId=\\\"root\\\"\\n      layers={layersState}\\n      widgets={widgets}\\n      onLayerMove={(src, dest, index, childrenCount, parent) => {\\n        action(\\\"onLayerMove\\\")(src, dest, index, childrenCount, parent);\\n\\n        const s = deepFind(\\n          layersState,\\n          l => l.id === src,\\n          l => (l.type === \\\"group\\\" ? l.children : undefined),\\n        )[0];\\n        const p = deepFind(\\n          layersState,\\n          l => l.id === parent,\\n          l => (l.type === \\\"group\\\" ? l.children : undefined),\\n        )[0];\\n        const d = deepFind(\\n          layersState,\\n          l => l.id === dest,\\n          l => (l.type === \\\"group\\\" ? l.children : undefined),\\n        )[0];\\n        if (!s || (p && p.type !== \\\"group\\\") || (d && d.type !== \\\"group\\\")) return;\\n\\n        let newLayers = [...layersState];\\n\\n        if (!p) {\\n          const srcIndex = newLayers?.findIndex(l => l.id === src) ?? -1;\\n          if (srcIndex >= 0) {\\n            newLayers.splice(srcIndex, 1);\\n          }\\n        } else {\\n          const srcIndex = p.children?.findIndex(l => l.id === src) ?? -1;\\n          if (srcIndex >= 0) {\\n            p?.children?.splice(srcIndex, 1);\\n          }\\n        }\\n\\n        if (d) {\\n          d.children = [\\n            ...(d.children?.slice(0, index) ?? []),\\n            s,\\n            ...(d.children?.slice(index) ?? []),\\n          ];\\n        } else {\\n          newLayers = [...newLayers.slice(0, index), s, ...newLayers.slice(index)];\\n        }\\n\\n        setLayers(newLayers);\\n      }}\\n    />\\n  );\\n}\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport PrimitiveCell from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PrimitiveHeader/PrimitiveCell\\\",\\n  component: PrimitiveCell,\\n} as Meta;\\n\\nexport const Default = () => (\\n  <PrimitiveCell\\n    name=\\\"Point\\\"\\n    description=\\\"This is a description. Hoge Hoge...\\\"\\n    icon={`<svg stroke=\\\"currentColor\\\" fill=\\\"none\\\" stroke-width=\\\"2\\\" viewBox=\\\"0 0 24 24\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" class=\\\"css-1t9xarj\\\" height=\\\"1em\\\" width=\\\"1em\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\\\"></path><circle cx=\\\"12\\\" cy=\\\"10\\\" r=\\\"3\\\"></circle></svg>`}\\n  />\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":1,\"line\":16},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":1,\"line\":16}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport PrimitiveCell from \".\";\n\nexport default {\n  title: \"molecules/EarthEditor/PrimitiveHeader/PrimitiveCell\",\n  component: PrimitiveCell,\n} as Meta;\n\nexport const Default = () => (\n  <PrimitiveCell\n    name=\"Point\"\n    description=\"This is a description. Hoge Hoge...\"\n    icon={`<svg stroke=\"currentColor\" fill=\"none\" stroke-width=\"2\" viewBox=\"0 0 24 24\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"css-1t9xarj\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\"></path><circle cx=\"12\" cy=\"10\" r=\"3\"></circle></svg>`}\n  />\n);\n\n\n\nDefault.parameters = { storySource: { source: \"() => (\\n  <PrimitiveCell\\n    name=\\\"Point\\\"\\n    description=\\\"This is a description. Hoge Hoge...\\\"\\n    icon={`<svg stroke=\\\"currentColor\\\" fill=\\\"none\\\" stroke-width=\\\"2\\\" viewBox=\\\"0 0 24 24\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" class=\\\"css-1t9xarj\\\" height=\\\"1em\\\" width=\\\"1em\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\\\"></path><circle cx=\\\"12\\\" cy=\\\"10\\\" r=\\\"3\\\"></circle></svg>`}\\n  />\\n)\" }, ...Default.parameters };","import Loading from \"@reearth/components/atoms/Loading\";\nimport { metrics, styled } from \"@reearth/theme\";\nimport React from \"react\";\nimport PrimitiveCell from \"./PrimitiveCell\";\n\nexport type Props = {\n  className?: string;\n  loading?: boolean;\n  primitives?:\n    | {\n        id: string;\n        name: string;\n        description: string;\n        icon: string;\n        onDrop?: (\n          layerId?: string | undefined,\n          index?: number | undefined,\n          location?:\n            | {\n                lat: number;\n                lng: number;\n              }\n            | undefined,\n        ) => Promise<void>;\n      }[]\n    | undefined;\n};\n\nconst PrimitiveHeader: React.FC<Props> = ({ className, primitives, loading }) => {\n  return (\n    <Wrapper className={className}>\n      {primitives?.map(p => (\n        <PrimitiveCell\n          key={p.id}\n          name={p.name}\n          description={p.description}\n          icon={p.icon}\n          onDrop={p.onDrop}\n        />\n      ))}\n      {loading && <Loading />}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: ${metrics.primitiveHeaderHeight}px;\n  background: ${props => props.theme.primitiveHeader.bg};\n`;\n\nexport default PrimitiveHeader;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\n\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport PrimitiveHeader, { Props } from \\\".\\\";\\n\\nconst primitives = [\\n  {\\n    id: \\\"hoge\\\",\\n    name: \\\"Elipsoid\\\",\\n    description: \\\"This is an Elipsoid. This is an Elipsoid.\\\",\\n    icon: \\\"ellipsoid\\\",\\n  },\\n  {\\n    id: \\\"hoge\\\",\\n    name: \\\"marker\\\",\\n    description: \\\"This is a marker Elipsoid. This is a marker.\\\",\\n    icon: \\\"marker\\\",\\n  },\\n  {\\n    id: \\\"hoge\\\",\\n    name: \\\"resource\\\",\\n    description: \\\"This is an resource. This is an resource.\\\",\\n    icon: \\\"resource\\\",\\n  },\\n  {\\n    id: \\\"hoge\\\",\\n    name: \\\"polyline\\\",\\n    description: \\\"This is an polyline. This is an polyline.\\\",\\n    icon: \\\"polyline\\\",\\n  },\\n];\\nconst defaultProps = {\\n  primitives: primitives,\\n};\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PrimitiveHeader\\\",\\n  component: PrimitiveHeader,\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => <PrimitiveHeader {...args} />;\\n\\nDefault.args = defaultProps;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":41},\"endLoc\":{\"col\":74,\"line\":41},\"startBody\":{\"col\":37,\"line\":41},\"endBody\":{\"col\":74,\"line\":41}}};\n    \nimport React from \"react\";\n\nimport { Meta, Story } from \"@storybook/react\";\nimport PrimitiveHeader, { Props } from \".\";\n\nconst primitives = [\n  {\n    id: \"hoge\",\n    name: \"Elipsoid\",\n    description: \"This is an Elipsoid. This is an Elipsoid.\",\n    icon: \"ellipsoid\",\n  },\n  {\n    id: \"hoge\",\n    name: \"marker\",\n    description: \"This is a marker Elipsoid. This is a marker.\",\n    icon: \"marker\",\n  },\n  {\n    id: \"hoge\",\n    name: \"resource\",\n    description: \"This is an resource. This is an resource.\",\n    icon: \"resource\",\n  },\n  {\n    id: \"hoge\",\n    name: \"polyline\",\n    description: \"This is an polyline. This is an polyline.\",\n    icon: \"polyline\",\n  },\n];\nconst defaultProps = {\n  primitives: primitives,\n};\n\nexport default {\n  title: \"molecules/EarthEditor/PrimitiveHeader\",\n  component: PrimitiveHeader,\n} as Meta;\n\nexport const Default: Story<Props> = args => <PrimitiveHeader {...args} />;\n\nDefault.args = defaultProps;\n\n\n\nDefault.parameters = { storySource: { source: \"args => <PrimitiveHeader {...args} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport CameraField, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PropertyPane/PropertyField/CameraField\\\",\\n  component: CameraField,\\n} as Meta;\\n\\nexport const HasNoCamera: Story<Props> = args => <CameraField {...args} />;\\n\\nexport const HasCamera: Story<Props> = args => (\\n  <CameraField\\n    {...args}\\n    value={{\\n      lat: 0,\\n      lng: 0,\\n      height: 10 ** 8,\\n      heading: 0,\\n      pitch: 0,\\n      roll: 0,\\n      fov: 1,\\n    }}\\n  />\\n);\\n\\nexport const OnlyPose: Story<Props> = args => (\\n  <CameraField\\n    {...args}\\n    onlyPose\\n    value={{\\n      lat: 0,\\n      lng: 0,\\n      height: 10 ** 8,\\n      heading: 0,\\n      pitch: 0,\\n      roll: 0,\\n      fov: 1,\\n    }}\\n  />\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"HasNoCamera\":{\"startLoc\":{\"col\":41,\"line\":10},\"endLoc\":{\"col\":74,\"line\":10},\"startBody\":{\"col\":41,\"line\":10},\"endBody\":{\"col\":74,\"line\":10}},\"HasCamera\":{\"startLoc\":{\"col\":39,\"line\":12},\"endLoc\":{\"col\":1,\"line\":25},\"startBody\":{\"col\":39,\"line\":12},\"endBody\":{\"col\":1,\"line\":25}},\"OnlyPose\":{\"startLoc\":{\"col\":38,\"line\":27},\"endLoc\":{\"col\":1,\"line\":41},\"startBody\":{\"col\":38,\"line\":27},\"endBody\":{\"col\":1,\"line\":41}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport CameraField, { Props } from \".\";\n\nexport default {\n  title: \"molecules/EarthEditor/PropertyPane/PropertyField/CameraField\",\n  component: CameraField,\n} as Meta;\n\nexport const HasNoCamera: Story<Props> = args => <CameraField {...args} />;;\n\nexport const HasCamera: Story<Props> = args => (\n  <CameraField\n    {...args}\n    value={{\n      lat: 0,\n      lng: 0,\n      height: 10 ** 8,\n      heading: 0,\n      pitch: 0,\n      roll: 0,\n      fov: 1,\n    }}\n  />\n);;\n\nexport const OnlyPose: Story<Props> = args => (\n  <CameraField\n    {...args}\n    onlyPose\n    value={{\n      lat: 0,\n      lng: 0,\n      height: 10 ** 8,\n      heading: 0,\n      pitch: 0,\n      roll: 0,\n      fov: 1,\n    }}\n  />\n);\n\n\n\nHasNoCamera.parameters = { storySource: { source: \"args => <CameraField {...args} />\" }, ...HasNoCamera.parameters };\nHasCamera.parameters = { storySource: { source: \"args => (\\n  <CameraField\\n    {...args}\\n    value={{\\n      lat: 0,\\n      lng: 0,\\n      height: 10 ** 8,\\n      heading: 0,\\n      pitch: 0,\\n      roll: 0,\\n      fov: 1,\\n    }}\\n  />\\n)\" }, ...HasCamera.parameters };\nOnlyPose.parameters = { storySource: { source: \"args => (\\n  <CameraField\\n    {...args}\\n    onlyPose\\n    value={{\\n      lat: 0,\\n      lng: 0,\\n      height: 10 ** 8,\\n      heading: 0,\\n      pitch: 0,\\n      roll: 0,\\n      fov: 1,\\n    }}\\n  />\\n)\" }, ...OnlyPose.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport ColorField from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PropertyPane/PropertyField/ColorField\\\",\\n  component: ColorField,\\n} as Meta;\\n\\nexport const Default = () => <ColorField onChange={action(\\\"onchange\\\")} />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":11},\"endLoc\":{\"col\":73,\"line\":11},\"startBody\":{\"col\":23,\"line\":11},\"endBody\":{\"col\":73,\"line\":11}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport ColorField from \".\";\n\nexport default {\n  title: \"molecules/EarthEditor/PropertyPane/PropertyField/ColorField\",\n  component: ColorField,\n} as Meta;\n\nexport const Default = () => <ColorField onChange={action(\"onchange\")} />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <ColorField onChange={action(\\\"onchange\\\")} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Story, Meta } from \\\"@storybook/react\\\";\\n\\nimport Component, { Props, Layer } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PropertyPane/PropertyField/LayerField\\\",\\n  component: Component,\\n  argTypes: { onChange: { action: \\\"onChange\\\" } },\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nconst layers: Layer[] = [\\n  { id: \\\"a\\\", title: \\\"A\\\" },\\n  {\\n    id: \\\"b\\\",\\n    title: \\\"B\\\",\\n    group: true,\\n    children: [\\n      { id: \\\"d\\\", title: \\\"xxx\\\" },\\n      { id: \\\"e\\\", title: \\\"aaa\\\" },\\n      { id: \\\"f\\\", title: \\\"F\\\", group: true, children: [{ id: \\\"g\\\", title: \\\"G\\\" }] },\\n    ],\\n  },\\n  { id: \\\"c\\\", title: \\\"C\\\" },\\n];\\n\\nexport const Default: Story<Props> = args => <Component {...args} layers={layers} />;\\n\\nDefault.args = {\\n  value: \\\"xxxx\\\",\\n  linked: false,\\n  overridden: false,\\n  disabled: false,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":28},\"endLoc\":{\"col\":84,\"line\":28},\"startBody\":{\"col\":37,\"line\":28},\"endBody\":{\"col\":84,\"line\":28}}};\n    \nimport React from \"react\";\nimport { Story, Meta } from \"@storybook/react\";\n\nimport Component, { Props, Layer } from \".\";\n\nexport default {\n  title: \"molecules/EarthEditor/PropertyPane/PropertyField/LayerField\",\n  component: Component,\n  argTypes: { onChange: { action: \"onChange\" } },\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nconst layers: Layer[] = [\n  { id: \"a\", title: \"A\" },\n  {\n    id: \"b\",\n    title: \"B\",\n    group: true,\n    children: [\n      { id: \"d\", title: \"xxx\" },\n      { id: \"e\", title: \"aaa\" },\n      { id: \"f\", title: \"F\", group: true, children: [{ id: \"g\", title: \"G\" }] },\n    ],\n  },\n  { id: \"c\", title: \"C\" },\n];\n\nexport const Default: Story<Props> = args => <Component {...args} layers={layers} />;\n\nDefault.args = {\n  value: \"xxxx\",\n  linked: false,\n  overridden: false,\n  disabled: false,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Component {...args} layers={layers} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\n\\n// Components\\nimport LocationField, { Location } from \\\".\\\";\\n\\nconst location: Location = {\\n  lat: 36.5,\\n  lng: 137.34,\\n  height: 20,\\n};\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PropertyPane/PropertyField/LocationField\\\",\\n  component: LocationField,\\n} as Meta;\\n\\nexport const Default = () => <LocationField value={location} />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":18},\"endLoc\":{\"col\":63,\"line\":18},\"startBody\":{\"col\":23,\"line\":18},\"endBody\":{\"col\":63,\"line\":18}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\n\n// Components\nimport LocationField, { Location } from \".\";\n\nconst location: Location = {\n  lat: 36.5,\n  lng: 137.34,\n  height: 20,\n};\n\nexport default {\n  title: \"molecules/EarthEditor/PropertyPane/PropertyField/LocationField\",\n  component: LocationField,\n} as Meta;\n\nexport const Default = () => <LocationField value={location} />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <LocationField value={location} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport PropertyLinkPanel, { DatasetSchema } from \\\".\\\";\\n\\nconst datasetSchemas: DatasetSchema[] = [\\n  {\\n    id: \\\"1\\\",\\n    name: \\\"Schema A\\\",\\n    datasets: [\\n      { id: \\\"d1\\\", name: \\\"Dataset 1\\\" },\\n      { id: \\\"d2\\\", name: \\\"Dataset 2\\\" },\\n      { id: \\\"d3\\\", name: \\\"Dataset 3\\\" },\\n      { id: \\\"d4\\\", name: \\\"Dataset 4\\\" },\\n    ],\\n    fields: [\\n      { id: \\\"f1\\\", name: \\\"Field 1\\\", type: \\\"string\\\" },\\n      { id: \\\"f2\\\", name: \\\"Field 2\\\", type: \\\"string\\\" },\\n      { id: \\\"f3\\\", name: \\\"Field 3\\\", type: \\\"latlng\\\" },\\n      { id: \\\"f4\\\", name: \\\"Field 4\\\", type: \\\"latlng\\\" },\\n      { id: \\\"f5\\\", name: \\\"Field 5\\\", type: \\\"number\\\" },\\n      { id: \\\"f6\\\", name: \\\"Field 6\\\", type: \\\"bool\\\" },\\n      { id: \\\"f7\\\", name: \\\"Field 7\\\", type: \\\"url\\\" },\\n    ],\\n  },\\n  {\\n    id: \\\"2\\\",\\n    name: \\\"Schema B\\\",\\n    datasets: [\\n      { id: \\\"d1\\\", name: \\\"Dataset 1\\\" },\\n      { id: \\\"d2\\\", name: \\\"Dataset 2\\\" },\\n      { id: \\\"d3\\\", name: \\\"Dataset 3\\\" },\\n    ],\\n    fields: [{ id: \\\"f1\\\", name: \\\"Field 1\\\", type: \\\"string\\\" }],\\n  },\\n];\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PropertyPane/PropertyField/PropertyTitle/PropertyLinkPanel\\\",\\n  component: PropertyLinkPanel,\\n} as Meta;\\n\\nexport const DatasetLinkable = () => (\\n  <PropertyLinkPanel\\n    datasetSchemas={datasetSchemas}\\n    onClear={action(\\\"onClear\\\")}\\n    onLink={action(\\\"onLink\\\")}\\n    isLinkable={true}\\n  />\\n);\\nexport const ChildLinked = () => (\\n  <PropertyLinkPanel\\n    datasetSchemas={datasetSchemas}\\n    linkedDataset={{\\n      schema: \\\"File.csv\\\",\\n      dataset: \\\"datasetnumbers1234\\\",\\n      field: \\\"height\\\",\\n    }}\\n    linkableType=\\\"string\\\"\\n    onClear={action(\\\"onClear\\\")}\\n    onLink={action(\\\"onLink\\\")}\\n  />\\n);\\nexport const ChildOverridden = () => (\\n  <PropertyLinkPanel\\n    datasetSchemas={datasetSchemas}\\n    linkedDataset={{\\n      schema: \\\"1\\\",\\n      dataset: \\\"d2\\\",\\n      field: \\\"color\\\",\\n    }}\\n    isOverridden\\n    onClear={action(\\\"onClear\\\")}\\n    onLink={action(\\\"onLink\\\")}\\n  />\\n);\\nexport const NotLinkable = () => (\\n  <PropertyLinkPanel onClear={action(\\\"onClear\\\")} onLink={action(\\\"onLink\\\")} />\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"DatasetLinkable\":{\"startLoc\":{\"col\":31,\"line\":43},\"endLoc\":{\"col\":1,\"line\":50},\"startBody\":{\"col\":31,\"line\":43},\"endBody\":{\"col\":1,\"line\":50}},\"ChildLinked\":{\"startLoc\":{\"col\":27,\"line\":51},\"endLoc\":{\"col\":1,\"line\":63},\"startBody\":{\"col\":27,\"line\":51},\"endBody\":{\"col\":1,\"line\":63}},\"ChildOverridden\":{\"startLoc\":{\"col\":31,\"line\":64},\"endLoc\":{\"col\":1,\"line\":76},\"startBody\":{\"col\":31,\"line\":64},\"endBody\":{\"col\":1,\"line\":76}},\"NotLinkable\":{\"startLoc\":{\"col\":27,\"line\":77},\"endLoc\":{\"col\":1,\"line\":79},\"startBody\":{\"col\":27,\"line\":77},\"endBody\":{\"col\":1,\"line\":79}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport PropertyLinkPanel, { DatasetSchema } from \".\";\n\nconst datasetSchemas: DatasetSchema[] = [\n  {\n    id: \"1\",\n    name: \"Schema A\",\n    datasets: [\n      { id: \"d1\", name: \"Dataset 1\" },\n      { id: \"d2\", name: \"Dataset 2\" },\n      { id: \"d3\", name: \"Dataset 3\" },\n      { id: \"d4\", name: \"Dataset 4\" },\n    ],\n    fields: [\n      { id: \"f1\", name: \"Field 1\", type: \"string\" },\n      { id: \"f2\", name: \"Field 2\", type: \"string\" },\n      { id: \"f3\", name: \"Field 3\", type: \"latlng\" },\n      { id: \"f4\", name: \"Field 4\", type: \"latlng\" },\n      { id: \"f5\", name: \"Field 5\", type: \"number\" },\n      { id: \"f6\", name: \"Field 6\", type: \"bool\" },\n      { id: \"f7\", name: \"Field 7\", type: \"url\" },\n    ],\n  },\n  {\n    id: \"2\",\n    name: \"Schema B\",\n    datasets: [\n      { id: \"d1\", name: \"Dataset 1\" },\n      { id: \"d2\", name: \"Dataset 2\" },\n      { id: \"d3\", name: \"Dataset 3\" },\n    ],\n    fields: [{ id: \"f1\", name: \"Field 1\", type: \"string\" }],\n  },\n];\n\nexport default {\n  title: \"molecules/EarthEditor/PropertyPane/PropertyField/PropertyTitle/PropertyLinkPanel\",\n  component: PropertyLinkPanel,\n} as Meta;\n\nexport const DatasetLinkable = () => (\n  <PropertyLinkPanel\n    datasetSchemas={datasetSchemas}\n    onClear={action(\"onClear\")}\n    onLink={action(\"onLink\")}\n    isLinkable={true}\n  />\n);;\nexport const ChildLinked = () => (\n  <PropertyLinkPanel\n    datasetSchemas={datasetSchemas}\n    linkedDataset={{\n      schema: \"File.csv\",\n      dataset: \"datasetnumbers1234\",\n      field: \"height\",\n    }}\n    linkableType=\"string\"\n    onClear={action(\"onClear\")}\n    onLink={action(\"onLink\")}\n  />\n);;\nexport const ChildOverridden = () => (\n  <PropertyLinkPanel\n    datasetSchemas={datasetSchemas}\n    linkedDataset={{\n      schema: \"1\",\n      dataset: \"d2\",\n      field: \"color\",\n    }}\n    isOverridden\n    onClear={action(\"onClear\")}\n    onLink={action(\"onLink\")}\n  />\n);;\nexport const NotLinkable = () => (\n  <PropertyLinkPanel onClear={action(\"onClear\")} onLink={action(\"onLink\")} />\n);\n\n\n\nDatasetLinkable.parameters = { storySource: { source: \"() => (\\n  <PropertyLinkPanel\\n    datasetSchemas={datasetSchemas}\\n    onClear={action(\\\"onClear\\\")}\\n    onLink={action(\\\"onLink\\\")}\\n    isLinkable={true}\\n  />\\n)\" }, ...DatasetLinkable.parameters };\nChildLinked.parameters = { storySource: { source: \"() => (\\n  <PropertyLinkPanel\\n    datasetSchemas={datasetSchemas}\\n    linkedDataset={{\\n      schema: \\\"File.csv\\\",\\n      dataset: \\\"datasetnumbers1234\\\",\\n      field: \\\"height\\\",\\n    }}\\n    linkableType=\\\"string\\\"\\n    onClear={action(\\\"onClear\\\")}\\n    onLink={action(\\\"onLink\\\")}\\n  />\\n)\" }, ...ChildLinked.parameters };\nChildOverridden.parameters = { storySource: { source: \"() => (\\n  <PropertyLinkPanel\\n    datasetSchemas={datasetSchemas}\\n    linkedDataset={{\\n      schema: \\\"1\\\",\\n      dataset: \\\"d2\\\",\\n      field: \\\"color\\\",\\n    }}\\n    isOverridden\\n    onClear={action(\\\"onClear\\\")}\\n    onLink={action(\\\"onLink\\\")}\\n  />\\n)\" }, ...ChildOverridden.parameters };\nNotLinkable.parameters = { storySource: { source: \"() => (\\n  <PropertyLinkPanel onClear={action(\\\"onClear\\\")} onLink={action(\\\"onLink\\\")} />\\n)\" }, ...NotLinkable.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport PropertyTitle from \\\".\\\";\\n\\nconst Wrapper: React.FC = ({ children }) => <div style={{ padding: \\\"32px\\\" }}>{children}</div>;\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PropertyPane/PropertyField/PropertyTitle\\\",\\n  component: PropertyTitle,\\n} as Meta;\\n\\nexport const Default = () => (\\n  <Wrapper>\\n    <PropertyTitle title=\\\"Title\\\" />\\n  </Wrapper>\\n);\\nexport const Linked = () => (\\n  <Wrapper>\\n    <PropertyTitle isLinked title=\\\"Title\\\" />\\n  </Wrapper>\\n);\\nexport const Overridden = () => (\\n  <Wrapper>\\n    <PropertyTitle isOverridden title=\\\"Title\\\" />\\n  </Wrapper>\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":12},\"endLoc\":{\"col\":1,\"line\":16},\"startBody\":{\"col\":23,\"line\":12},\"endBody\":{\"col\":1,\"line\":16}},\"Linked\":{\"startLoc\":{\"col\":22,\"line\":17},\"endLoc\":{\"col\":1,\"line\":21},\"startBody\":{\"col\":22,\"line\":17},\"endBody\":{\"col\":1,\"line\":21}},\"Overridden\":{\"startLoc\":{\"col\":26,\"line\":22},\"endLoc\":{\"col\":1,\"line\":26},\"startBody\":{\"col\":26,\"line\":22},\"endBody\":{\"col\":1,\"line\":26}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport PropertyTitle from \".\";\n\nconst Wrapper: React.FC = ({ children }) => <div style={{ padding: \"32px\" }}>{children}</div>;\n\nexport default {\n  title: \"molecules/EarthEditor/PropertyPane/PropertyField/PropertyTitle\",\n  component: PropertyTitle,\n} as Meta;\n\nexport const Default = () => (\n  <Wrapper>\n    <PropertyTitle title=\"Title\" />\n  </Wrapper>\n);;\nexport const Linked = () => (\n  <Wrapper>\n    <PropertyTitle isLinked title=\"Title\" />\n  </Wrapper>\n);;\nexport const Overridden = () => (\n  <Wrapper>\n    <PropertyTitle isOverridden title=\"Title\" />\n  </Wrapper>\n);\n\n\n\nDefault.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyTitle title=\\\"Title\\\" />\\n  </Wrapper>\\n)\" }, ...Default.parameters };\nLinked.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyTitle isLinked title=\\\"Title\\\" />\\n  </Wrapper>\\n)\" }, ...Linked.parameters };\nOverridden.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyTitle isOverridden title=\\\"Title\\\" />\\n  </Wrapper>\\n)\" }, ...Overridden.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport RadioField from \\\".\\\";\\n\\nconst items: { key: string; label?: string; icon?: string }[] = [\\n  { key: \\\"0\\\", label: \\\"left\\\", icon: \\\"alignLeft\\\" },\\n  { key: \\\"1\\\", label: \\\"center\\\", icon: \\\"alignCenter\\\" },\\n  { key: \\\"2\\\", label: \\\"right\\\", icon: \\\"alignRight\\\" },\\n];\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PropertyPane/PropertyField/RadioField\\\",\\n  component: RadioField,\\n} as Meta;\\n\\nexport const Default = () => <RadioField value=\\\"0\\\" items={items} onChange={action(\\\"onchange\\\")} />;\\nexport const Linked = () => (\\n  <RadioField value=\\\"0\\\" items={items} linked onChange={action(\\\"onchange\\\")} />\\n);\\nexport const Overridden = () => (\\n  <RadioField value=\\\"0\\\" items={items} overridden onChange={action(\\\"onchange\\\")} />\\n);\\nexport const Disabled = () => (\\n  <RadioField value=\\\"0\\\" items={items} disabled onChange={action(\\\"onchange\\\")} />\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":17},\"endLoc\":{\"col\":97,\"line\":17},\"startBody\":{\"col\":23,\"line\":17},\"endBody\":{\"col\":97,\"line\":17}},\"Linked\":{\"startLoc\":{\"col\":22,\"line\":18},\"endLoc\":{\"col\":1,\"line\":20},\"startBody\":{\"col\":22,\"line\":18},\"endBody\":{\"col\":1,\"line\":20}},\"Overridden\":{\"startLoc\":{\"col\":26,\"line\":21},\"endLoc\":{\"col\":1,\"line\":23},\"startBody\":{\"col\":26,\"line\":21},\"endBody\":{\"col\":1,\"line\":23}},\"Disabled\":{\"startLoc\":{\"col\":24,\"line\":24},\"endLoc\":{\"col\":1,\"line\":26},\"startBody\":{\"col\":24,\"line\":24},\"endBody\":{\"col\":1,\"line\":26}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport RadioField from \".\";\n\nconst items: { key: string; label?: string; icon?: string }[] = [\n  { key: \"0\", label: \"left\", icon: \"alignLeft\" },\n  { key: \"1\", label: \"center\", icon: \"alignCenter\" },\n  { key: \"2\", label: \"right\", icon: \"alignRight\" },\n];\n\nexport default {\n  title: \"molecules/EarthEditor/PropertyPane/PropertyField/RadioField\",\n  component: RadioField,\n} as Meta;\n\nexport const Default = () => <RadioField value=\"0\" items={items} onChange={action(\"onchange\")} />;;\nexport const Linked = () => (\n  <RadioField value=\"0\" items={items} linked onChange={action(\"onchange\")} />\n);;\nexport const Overridden = () => (\n  <RadioField value=\"0\" items={items} overridden onChange={action(\"onchange\")} />\n);;\nexport const Disabled = () => (\n  <RadioField value=\"0\" items={items} disabled onChange={action(\"onchange\")} />\n);\n\n\n\nDefault.parameters = { storySource: { source: \"() => <RadioField value=\\\"0\\\" items={items} onChange={action(\\\"onchange\\\")} />\" }, ...Default.parameters };\nLinked.parameters = { storySource: { source: \"() => (\\n  <RadioField value=\\\"0\\\" items={items} linked onChange={action(\\\"onchange\\\")} />\\n)\" }, ...Linked.parameters };\nOverridden.parameters = { storySource: { source: \"() => (\\n  <RadioField value=\\\"0\\\" items={items} overridden onChange={action(\\\"onchange\\\")} />\\n)\" }, ...Overridden.parameters };\nDisabled.parameters = { storySource: { source: \"() => (\\n  <RadioField value=\\\"0\\\" items={items} disabled onChange={action(\\\"onchange\\\")} />\\n)\" }, ...Disabled.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport SelectField from \\\".\\\";\\n\\nconst linkIcon =\\n  \\\"data:image/svg+xml,%3Csvg stroke='white' fill='white' stroke-width='0' viewBox='0 0 512 512' height='11px' width='11px' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z'%3E%3C/path%3E%3C/svg%3E\\\";\\n\\nconst items: { key: string; label: string; icon?: string }[] = [\\n  { key: \\\"0\\\", label: \\\"120\\\" },\\n  { key: \\\"1\\\", label: \\\"2000\\\" },\\n];\\n\\nconst itemsWithIcon = items.map(({ key, label, icon }) =>\\n  key === \\\"1\\\" ? { key, label, icon: linkIcon } : { key, label, icon },\\n);\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PropertyPane/PropertyField/SelectField\\\",\\n  component: SelectField,\\n} as Meta;\\n\\nexport const Default = () => <SelectField value=\\\"0\\\" items={items} onChange={action(\\\"onchange\\\")} />;\\nexport const WithIcon = () => (\\n  <SelectField value=\\\"0\\\" items={itemsWithIcon} onChange={action(\\\"onchange\\\")} />\\n);\\nexport const Linked = () => (\\n  <SelectField value=\\\"0\\\" items={items} linked onChange={action(\\\"onchange\\\")} />\\n);\\nexport const Overridden = () => (\\n  <SelectField value=\\\"0\\\" items={items} overridden onChange={action(\\\"onchange\\\")} />\\n);\\nexport const Disabled = () => (\\n  <SelectField value=\\\"0\\\" items={items} disabled onChange={action(\\\"onchange\\\")} />\\n);\\nexport const LinkedAndDisabled = () => (\\n  <SelectField value=\\\"0\\\" items={items} linked disabled onChange={action(\\\"onchange\\\")} />\\n);\\nexport const OverriddenAndDisabled = () => (\\n  <SelectField value=\\\"0\\\" items={items} overridden disabled onChange={action(\\\"onchange\\\")} />\\n);\\nexport const LinkedAndOverridden = () => (\\n  <SelectField value=\\\"0\\\" items={items} linked overridden onChange={action(\\\"onchange\\\")} />\\n);\\nexport const LinkedAndOverriddenAndDisabled = () => (\\n  <SelectField value=\\\"0\\\" items={items} linked overridden disabled onChange={action(\\\"onchange\\\")} />\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":23},\"endLoc\":{\"col\":98,\"line\":23},\"startBody\":{\"col\":23,\"line\":23},\"endBody\":{\"col\":98,\"line\":23}},\"WithIcon\":{\"startLoc\":{\"col\":24,\"line\":24},\"endLoc\":{\"col\":1,\"line\":26},\"startBody\":{\"col\":24,\"line\":24},\"endBody\":{\"col\":1,\"line\":26}},\"Linked\":{\"startLoc\":{\"col\":22,\"line\":27},\"endLoc\":{\"col\":1,\"line\":29},\"startBody\":{\"col\":22,\"line\":27},\"endBody\":{\"col\":1,\"line\":29}},\"Overridden\":{\"startLoc\":{\"col\":26,\"line\":30},\"endLoc\":{\"col\":1,\"line\":32},\"startBody\":{\"col\":26,\"line\":30},\"endBody\":{\"col\":1,\"line\":32}},\"Disabled\":{\"startLoc\":{\"col\":24,\"line\":33},\"endLoc\":{\"col\":1,\"line\":35},\"startBody\":{\"col\":24,\"line\":33},\"endBody\":{\"col\":1,\"line\":35}},\"LinkedAndDisabled\":{\"startLoc\":{\"col\":33,\"line\":36},\"endLoc\":{\"col\":1,\"line\":38},\"startBody\":{\"col\":33,\"line\":36},\"endBody\":{\"col\":1,\"line\":38}},\"OverriddenAndDisabled\":{\"startLoc\":{\"col\":37,\"line\":39},\"endLoc\":{\"col\":1,\"line\":41},\"startBody\":{\"col\":37,\"line\":39},\"endBody\":{\"col\":1,\"line\":41}},\"LinkedAndOverridden\":{\"startLoc\":{\"col\":35,\"line\":42},\"endLoc\":{\"col\":1,\"line\":44},\"startBody\":{\"col\":35,\"line\":42},\"endBody\":{\"col\":1,\"line\":44}},\"LinkedAndOverriddenAndDisabled\":{\"startLoc\":{\"col\":46,\"line\":45},\"endLoc\":{\"col\":1,\"line\":47},\"startBody\":{\"col\":46,\"line\":45},\"endBody\":{\"col\":1,\"line\":47}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport SelectField from \".\";\n\nconst linkIcon =\n  \"data:image/svg+xml,%3Csvg stroke='white' fill='white' stroke-width='0' viewBox='0 0 512 512' height='11px' width='11px' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z'%3E%3C/path%3E%3C/svg%3E\";\n\nconst items: { key: string; label: string; icon?: string }[] = [\n  { key: \"0\", label: \"120\" },\n  { key: \"1\", label: \"2000\" },\n];\n\nconst itemsWithIcon = items.map(({ key, label, icon }) =>\n  key === \"1\" ? { key, label, icon: linkIcon } : { key, label, icon },\n);\n\nexport default {\n  title: \"molecules/EarthEditor/PropertyPane/PropertyField/SelectField\",\n  component: SelectField,\n} as Meta;\n\nexport const Default = () => <SelectField value=\"0\" items={items} onChange={action(\"onchange\")} />;;\nexport const WithIcon = () => (\n  <SelectField value=\"0\" items={itemsWithIcon} onChange={action(\"onchange\")} />\n);;\nexport const Linked = () => (\n  <SelectField value=\"0\" items={items} linked onChange={action(\"onchange\")} />\n);;\nexport const Overridden = () => (\n  <SelectField value=\"0\" items={items} overridden onChange={action(\"onchange\")} />\n);;\nexport const Disabled = () => (\n  <SelectField value=\"0\" items={items} disabled onChange={action(\"onchange\")} />\n);;\nexport const LinkedAndDisabled = () => (\n  <SelectField value=\"0\" items={items} linked disabled onChange={action(\"onchange\")} />\n);;\nexport const OverriddenAndDisabled = () => (\n  <SelectField value=\"0\" items={items} overridden disabled onChange={action(\"onchange\")} />\n);;\nexport const LinkedAndOverridden = () => (\n  <SelectField value=\"0\" items={items} linked overridden onChange={action(\"onchange\")} />\n);;\nexport const LinkedAndOverriddenAndDisabled = () => (\n  <SelectField value=\"0\" items={items} linked overridden disabled onChange={action(\"onchange\")} />\n);\n\n\n\nDefault.parameters = { storySource: { source: \"() => <SelectField value=\\\"0\\\" items={items} onChange={action(\\\"onchange\\\")} />\" }, ...Default.parameters };\nWithIcon.parameters = { storySource: { source: \"() => (\\n  <SelectField value=\\\"0\\\" items={itemsWithIcon} onChange={action(\\\"onchange\\\")} />\\n)\" }, ...WithIcon.parameters };\nLinked.parameters = { storySource: { source: \"() => (\\n  <SelectField value=\\\"0\\\" items={items} linked onChange={action(\\\"onchange\\\")} />\\n)\" }, ...Linked.parameters };\nOverridden.parameters = { storySource: { source: \"() => (\\n  <SelectField value=\\\"0\\\" items={items} overridden onChange={action(\\\"onchange\\\")} />\\n)\" }, ...Overridden.parameters };\nDisabled.parameters = { storySource: { source: \"() => (\\n  <SelectField value=\\\"0\\\" items={items} disabled onChange={action(\\\"onchange\\\")} />\\n)\" }, ...Disabled.parameters };\nLinkedAndDisabled.parameters = { storySource: { source: \"() => (\\n  <SelectField value=\\\"0\\\" items={items} linked disabled onChange={action(\\\"onchange\\\")} />\\n)\" }, ...LinkedAndDisabled.parameters };\nOverriddenAndDisabled.parameters = { storySource: { source: \"() => (\\n  <SelectField value=\\\"0\\\" items={items} overridden disabled onChange={action(\\\"onchange\\\")} />\\n)\" }, ...OverriddenAndDisabled.parameters };\nLinkedAndOverridden.parameters = { storySource: { source: \"() => (\\n  <SelectField value=\\\"0\\\" items={items} linked overridden onChange={action(\\\"onchange\\\")} />\\n)\" }, ...LinkedAndOverridden.parameters };\nLinkedAndOverriddenAndDisabled.parameters = { storySource: { source: \"() => (\\n  <SelectField value=\\\"0\\\" items={items} linked overridden disabled onChange={action(\\\"onchange\\\")} />\\n)\" }, ...LinkedAndOverriddenAndDisabled.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport SwitchField from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PropertyPane/PropertyField/SwitchField\\\",\\n  component: SwitchField,\\n} as Meta;\\n\\nexport const Default = () => <SwitchField value />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":50,\"line\":10},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":50,\"line\":10}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport SwitchField from \".\";\n\nexport default {\n  title: \"molecules/EarthEditor/PropertyPane/PropertyField/SwitchField\",\n  component: SwitchField,\n} as Meta;\n\nexport const Default = () => <SwitchField value />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <SwitchField value />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport TextField from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PropertyPane/PropertyField/TextField\\\",\\n  component: TextField,\\n} as Meta;\\n\\nexport const Default = () => <TextField name=\\\"title\\\" value=\\\"value\\\" onChange={action(\\\"onchange\\\")} />;\\nexport const Linked = () => (\\n  <TextField name=\\\"title\\\" value=\\\"value\\\" onChange={action(\\\"onchange\\\")} linked />\\n);\\nexport const Overridden = () => (\\n  <TextField name=\\\"title\\\" value=\\\"value\\\" onChange={action(\\\"onchange\\\")} overridden />\\n);\\nexport const Inactive = () => (\\n  <TextField name=\\\"title\\\" value=\\\"value\\\" onChange={action(\\\"onchange\\\")} disabled />\\n);\\nexport const Multiline = () => (\\n  <TextField name=\\\"title\\\" value=\\\"value\\\" onChange={action(\\\"onchange\\\")} multiline />\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":11},\"endLoc\":{\"col\":99,\"line\":11},\"startBody\":{\"col\":23,\"line\":11},\"endBody\":{\"col\":99,\"line\":11}},\"Linked\":{\"startLoc\":{\"col\":22,\"line\":12},\"endLoc\":{\"col\":1,\"line\":14},\"startBody\":{\"col\":22,\"line\":12},\"endBody\":{\"col\":1,\"line\":14}},\"Overridden\":{\"startLoc\":{\"col\":26,\"line\":15},\"endLoc\":{\"col\":1,\"line\":17},\"startBody\":{\"col\":26,\"line\":15},\"endBody\":{\"col\":1,\"line\":17}},\"Inactive\":{\"startLoc\":{\"col\":24,\"line\":18},\"endLoc\":{\"col\":1,\"line\":20},\"startBody\":{\"col\":24,\"line\":18},\"endBody\":{\"col\":1,\"line\":20}},\"Multiline\":{\"startLoc\":{\"col\":25,\"line\":21},\"endLoc\":{\"col\":1,\"line\":23},\"startBody\":{\"col\":25,\"line\":21},\"endBody\":{\"col\":1,\"line\":23}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport TextField from \".\";\n\nexport default {\n  title: \"molecules/EarthEditor/PropertyPane/PropertyField/TextField\",\n  component: TextField,\n} as Meta;\n\nexport const Default = () => <TextField name=\"title\" value=\"value\" onChange={action(\"onchange\")} />;;\nexport const Linked = () => (\n  <TextField name=\"title\" value=\"value\" onChange={action(\"onchange\")} linked />\n);;\nexport const Overridden = () => (\n  <TextField name=\"title\" value=\"value\" onChange={action(\"onchange\")} overridden />\n);;\nexport const Inactive = () => (\n  <TextField name=\"title\" value=\"value\" onChange={action(\"onchange\")} disabled />\n);;\nexport const Multiline = () => (\n  <TextField name=\"title\" value=\"value\" onChange={action(\"onchange\")} multiline />\n);\n\n\n\nDefault.parameters = { storySource: { source: \"() => <TextField name=\\\"title\\\" value=\\\"value\\\" onChange={action(\\\"onchange\\\")} />\" }, ...Default.parameters };\nLinked.parameters = { storySource: { source: \"() => (\\n  <TextField name=\\\"title\\\" value=\\\"value\\\" onChange={action(\\\"onchange\\\")} linked />\\n)\" }, ...Linked.parameters };\nOverridden.parameters = { storySource: { source: \"() => (\\n  <TextField name=\\\"title\\\" value=\\\"value\\\" onChange={action(\\\"onchange\\\")} overridden />\\n)\" }, ...Overridden.parameters };\nInactive.parameters = { storySource: { source: \"() => (\\n  <TextField name=\\\"title\\\" value=\\\"value\\\" onChange={action(\\\"onchange\\\")} disabled />\\n)\" }, ...Inactive.parameters };\nMultiline.parameters = { storySource: { source: \"() => (\\n  <TextField name=\\\"title\\\" value=\\\"value\\\" onChange={action(\\\"onchange\\\")} multiline />\\n)\" }, ...Multiline.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport { colors } from \\\"@reearth/theme\\\";\\n\\nimport FontFamilyField from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PropertyPane/PropertyField/TypographyField/FontFamilyField\\\",\\n  component: FontFamilyField,\\n} as Meta;\\n\\nexport const Default = () => <FontFamilyField onChange={action(\\\"onchange\\\")} />;\\nexport const Selected = () => (\\n  <FontFamilyField value=\\\"Comic Sans MS\\\" onChange={action(\\\"onchange\\\")} />\\n);\\nexport const Linked = () => (\\n  <FontFamilyField\\n    value=\\\"Comic Sans MS\\\"\\n    color={colors.dark.primary.main}\\n    onChange={action(\\\"onchange\\\")}\\n  />\\n);\\nexport const Overridden = () => (\\n  <FontFamilyField\\n    value=\\\"Tahoma\\\"\\n    color={colors.dark.functional.attention}\\n    onChange={action(\\\"onchange\\\")}\\n  />\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":13},\"endLoc\":{\"col\":78,\"line\":13},\"startBody\":{\"col\":23,\"line\":13},\"endBody\":{\"col\":78,\"line\":13}},\"Selected\":{\"startLoc\":{\"col\":24,\"line\":14},\"endLoc\":{\"col\":1,\"line\":16},\"startBody\":{\"col\":24,\"line\":14},\"endBody\":{\"col\":1,\"line\":16}},\"Linked\":{\"startLoc\":{\"col\":22,\"line\":17},\"endLoc\":{\"col\":1,\"line\":23},\"startBody\":{\"col\":22,\"line\":17},\"endBody\":{\"col\":1,\"line\":23}},\"Overridden\":{\"startLoc\":{\"col\":26,\"line\":24},\"endLoc\":{\"col\":1,\"line\":30},\"startBody\":{\"col\":26,\"line\":24},\"endBody\":{\"col\":1,\"line\":30}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport { colors } from \"@reearth/theme\";\n\nimport FontFamilyField from \".\";\n\nexport default {\n  title: \"molecules/EarthEditor/PropertyPane/PropertyField/TypographyField/FontFamilyField\",\n  component: FontFamilyField,\n} as Meta;\n\nexport const Default = () => <FontFamilyField onChange={action(\"onchange\")} />;;\nexport const Selected = () => (\n  <FontFamilyField value=\"Comic Sans MS\" onChange={action(\"onchange\")} />\n);;\nexport const Linked = () => (\n  <FontFamilyField\n    value=\"Comic Sans MS\"\n    color={colors.dark.primary.main}\n    onChange={action(\"onchange\")}\n  />\n);;\nexport const Overridden = () => (\n  <FontFamilyField\n    value=\"Tahoma\"\n    color={colors.dark.functional.attention}\n    onChange={action(\"onchange\")}\n  />\n);\n\n\n\nDefault.parameters = { storySource: { source: \"() => <FontFamilyField onChange={action(\\\"onchange\\\")} />\" }, ...Default.parameters };\nSelected.parameters = { storySource: { source: \"() => (\\n  <FontFamilyField value=\\\"Comic Sans MS\\\" onChange={action(\\\"onchange\\\")} />\\n)\" }, ...Selected.parameters };\nLinked.parameters = { storySource: { source: \"() => (\\n  <FontFamilyField\\n    value=\\\"Comic Sans MS\\\"\\n    color={colors.dark.primary.main}\\n    onChange={action(\\\"onchange\\\")}\\n  />\\n)\" }, ...Linked.parameters };\nOverridden.parameters = { storySource: { source: \"() => (\\n  <FontFamilyField\\n    value=\\\"Tahoma\\\"\\n    color={colors.dark.functional.attention}\\n    onChange={action(\\\"onchange\\\")}\\n  />\\n)\" }, ...Overridden.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { storiesOf } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\n\\nimport FontFormatField from \\\".\\\";\\n\\nstoriesOf(\\n  \\\"molecules/EarthEditor/PropertyPane/PropertyField/TypographyField/FontFormatField\\\",\\n  module,\\n)\\n  .add(\\\"default\\\", () => (\\n    <FontFormatField values={[\\\"bold\\\", \\\"italic\\\"]} onChange={action(\\\"onchange\\\")} />\\n  ))\\n  .add(\\\"linked\\\", () => (\\n    <FontFormatField values={[\\\"bold\\\", \\\"italic\\\"]} linked onChange={action(\\\"onchange\\\")} />\\n  ))\\n  .add(\\\"overridden\\\", () => (\\n    <FontFormatField values={[\\\"bold\\\", \\\"italic\\\"]} overridden onChange={action(\\\"onchange\\\")} />\\n  ))\\n  .add(\\\"disabled\\\", () => (\\n    <FontFormatField values={[\\\"bold\\\", \\\"italic\\\"]} disabled onChange={action(\\\"onchange\\\")} />\\n  ))\\n  .add(\\\"linked & disabled\\\", () => (\\n    <FontFormatField values={[\\\"bold\\\", \\\"italic\\\"]} linked disabled onChange={action(\\\"onchange\\\")} />\\n  ))\\n  .add(\\\"overridden & disabled\\\", () => (\\n    <FontFormatField\\n      values={[\\\"bold\\\", \\\"italic\\\"]}\\n      overridden\\n      disabled\\n      onChange={action(\\\"onchange\\\")}\\n    />\\n  ))\\n  .add(\\\"linked & overridden\\\", () => (\\n    <FontFormatField values={[\\\"bold\\\", \\\"italic\\\"]} linked overridden onChange={action(\\\"onchange\\\")} />\\n  ))\\n  .add(\\\"linekd & overridden & disabled\\\", () => (\\n    <FontFormatField\\n      values={[\\\"bold\\\", \\\"italic\\\"]}\\n      linked\\n      overridden\\n      disabled\\n      onChange={action(\\\"onchange\\\")}\\n    />\\n  ));\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"linekd-overridden-disabled\":{\"startLoc\":{\"col\":7,\"line\":37},\"endLoc\":{\"col\":3,\"line\":45},\"startBody\":{\"col\":41,\"line\":37},\"endBody\":{\"col\":3,\"line\":45}},\"linked-overridden\":{\"startLoc\":{\"col\":7,\"line\":34},\"endLoc\":{\"col\":3,\"line\":36},\"startBody\":{\"col\":30,\"line\":34},\"endBody\":{\"col\":3,\"line\":36}},\"overridden-disabled\":{\"startLoc\":{\"col\":7,\"line\":26},\"endLoc\":{\"col\":3,\"line\":33},\"startBody\":{\"col\":32,\"line\":26},\"endBody\":{\"col\":3,\"line\":33}},\"linked-disabled\":{\"startLoc\":{\"col\":7,\"line\":23},\"endLoc\":{\"col\":3,\"line\":25},\"startBody\":{\"col\":28,\"line\":23},\"endBody\":{\"col\":3,\"line\":25}},\"disabled\":{\"startLoc\":{\"col\":7,\"line\":20},\"endLoc\":{\"col\":3,\"line\":22},\"startBody\":{\"col\":19,\"line\":20},\"endBody\":{\"col\":3,\"line\":22}},\"overridden\":{\"startLoc\":{\"col\":7,\"line\":17},\"endLoc\":{\"col\":3,\"line\":19},\"startBody\":{\"col\":21,\"line\":17},\"endBody\":{\"col\":3,\"line\":19}},\"linked\":{\"startLoc\":{\"col\":7,\"line\":14},\"endLoc\":{\"col\":3,\"line\":16},\"startBody\":{\"col\":17,\"line\":14},\"endBody\":{\"col\":3,\"line\":16}},\"default\":{\"startLoc\":{\"col\":7,\"line\":11},\"endLoc\":{\"col\":3,\"line\":13},\"startBody\":{\"col\":18,\"line\":11},\"endBody\":{\"col\":3,\"line\":13}}};\n    \nimport React from \"react\";\nimport { storiesOf } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\n\nimport FontFormatField from \".\";\n\nstoriesOf(\n  \"molecules/EarthEditor/PropertyPane/PropertyField/TypographyField/FontFormatField\",\n  module,\n).addParameters({ storySource: { source: __STORY__, locationsMap: __LOCATIONS_MAP__ } })\n  .add(\"default\", () => (\n    <FontFormatField values={[\"bold\", \"italic\"]} onChange={action(\"onchange\")} />\n  ))\n  .add(\"linked\", () => (\n    <FontFormatField values={[\"bold\", \"italic\"]} linked onChange={action(\"onchange\")} />\n  ))\n  .add(\"overridden\", () => (\n    <FontFormatField values={[\"bold\", \"italic\"]} overridden onChange={action(\"onchange\")} />\n  ))\n  .add(\"disabled\", () => (\n    <FontFormatField values={[\"bold\", \"italic\"]} disabled onChange={action(\"onchange\")} />\n  ))\n  .add(\"linked & disabled\", () => (\n    <FontFormatField values={[\"bold\", \"italic\"]} linked disabled onChange={action(\"onchange\")} />\n  ))\n  .add(\"overridden & disabled\", () => (\n    <FontFormatField\n      values={[\"bold\", \"italic\"]}\n      overridden\n      disabled\n      onChange={action(\"onchange\")}\n    />\n  ))\n  .add(\"linked & overridden\", () => (\n    <FontFormatField values={[\"bold\", \"italic\"]} linked overridden onChange={action(\"onchange\")} />\n  ))\n  .add(\"linekd & overridden & disabled\", () => (\n    <FontFormatField\n      values={[\"bold\", \"italic\"]}\n      linked\n      overridden\n      disabled\n      onChange={action(\"onchange\")}\n    />\n  ));\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { storiesOf } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\n\\nimport FontSizeField from \\\".\\\";\\n\\nstoriesOf(\\\"molecules/EarthEditor/PropertyPane/PropertyField/TypographyField/FontSizeField\\\", module)\\n  .add(\\\"default\\\", () => <FontSizeField onChange={action(\\\"onchange\\\")} />)\\n  .add(\\\"selected\\\", () => <FontSizeField value={10} onChange={action(\\\"onchange\\\")} />);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"selected\":{\"startLoc\":{\"col\":7,\"line\":9},\"endLoc\":{\"col\":83,\"line\":9},\"startBody\":{\"col\":19,\"line\":9},\"endBody\":{\"col\":83,\"line\":9}},\"default\":{\"startLoc\":{\"col\":7,\"line\":8},\"endLoc\":{\"col\":71,\"line\":8},\"startBody\":{\"col\":18,\"line\":8},\"endBody\":{\"col\":71,\"line\":8}}};\n    \nimport React from \"react\";\nimport { storiesOf } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\n\nimport FontSizeField from \".\";\n\nstoriesOf(\"molecules/EarthEditor/PropertyPane/PropertyField/TypographyField/FontSizeField\", module).addParameters({ storySource: { source: __STORY__, locationsMap: __LOCATIONS_MAP__ } })\n  .add(\"default\", () => <FontSizeField onChange={action(\"onchange\")} />)\n  .add(\"selected\", () => <FontSizeField value={10} onChange={action(\"onchange\")} />);\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\n\\nimport TypographyField from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PropertyPane/PropertyField/TypographyField\\\",\\n  component: TypographyField,\\n} as Meta;\\n\\nexport const Default = () => <TypographyField onChange={action(\\\"onchange\\\")} />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":12},\"endLoc\":{\"col\":78,\"line\":12},\"startBody\":{\"col\":23,\"line\":12},\"endBody\":{\"col\":78,\"line\":12}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\n\nimport TypographyField from \".\";\n\nexport default {\n  title: \"molecules/EarthEditor/PropertyPane/PropertyField/TypographyField\",\n  component: TypographyField,\n} as Meta;\n\nexport const Default = () => <TypographyField onChange={action(\"onchange\")} />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <TypographyField onChange={action(\\\"onchange\\\")} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\n\\nimport PropertyField, { Layer as LayerType } from \\\".\\\";\\nimport { Camera as settings } from \\\"@reearth/util/value\\\";\\n\\nconst Wrapper: React.FC = ({ children }) => <div style={{ padding: \\\"32px\\\" }}>{children}</div>;\\n\\nconst choices = [\\n  { key: \\\"a\\\", label: \\\"a\\\", icon: \\\"scene\\\" },\\n  { key: \\\"b\\\", label: \\\"b\\\", icon: \\\"layer\\\" },\\n];\\n\\nconst camera: settings = {\\n  lat: 35.652832,\\n  lng: 139.839478,\\n  height: 1000,\\n  heading: 0,\\n  roll: 1,\\n  pitch: 1,\\n  fov: 60,\\n};\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PropertyPane/PropertyField\\\",\\n  component: PropertyField,\\n} as Meta;\\n\\nexport const Bool = () => (\\n  <Wrapper>\\n    <PropertyField schema={{ id: \\\"Title\\\", type: \\\"bool\\\" }} onChange={action(\\\"onChange\\\")} />\\n  </Wrapper>\\n);\\nexport const Number = () => (\\n  <Wrapper>\\n    <PropertyField schema={{ id: \\\"Title\\\", type: \\\"number\\\" }} onChange={action(\\\"onChange\\\")} />\\n  </Wrapper>\\n);\\nexport const String = () => (\\n  <Wrapper>\\n    <PropertyField schema={{ id: \\\"Title\\\", type: \\\"string\\\" }} onChange={action(\\\"onChange\\\")} />\\n  </Wrapper>\\n);\\nexport const LatLng = () => (\\n  <Wrapper>\\n    <PropertyField schema={{ id: \\\"Title\\\", type: \\\"latlng\\\" }} onChange={action(\\\"onChange\\\")} />\\n  </Wrapper>\\n);\\nexport const Url = () => (\\n  <Wrapper>\\n    <PropertyField schema={{ id: \\\"Title\\\", type: \\\"url\\\" }} onChange={action(\\\"onChange\\\")} />\\n  </Wrapper>\\n);\\nexport const BoolWithValue = () => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Title\\\", type: \\\"bool\\\" }}\\n      field={{ id: \\\"Title\\\", type: \\\"bool\\\", value: true }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n);\\nexport const NumberWithValue = () => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Title\\\", type: \\\"number\\\" }}\\n      field={{ id: \\\"Title\\\", type: \\\"number\\\", value: 100 }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n);\\nexport const StringWithValue = () => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Title\\\", type: \\\"string\\\" }}\\n      field={{ id: \\\"Title\\\", type: \\\"string\\\", value: \\\"hogetext\\\" }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n);\\nexport const LatLngWithValue = () => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Title\\\", type: \\\"latlng\\\" }}\\n      field={{ id: \\\"Title\\\", type: \\\"latlng\\\", value: { lat: 123.234, lng: 34.4323 } }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n);\\nexport const UrlWithValue = () => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Title\\\", type: \\\"url\\\" }}\\n      field={{ id: \\\"Title\\\", type: \\\"url\\\", value: `${process.env.PUBLIC_URL}/sample.svg` }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n);\\nexport const Color = () => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Color\\\", type: \\\"string\\\", ui: \\\"color\\\" }}\\n      field={{ id: \\\"Color\\\", type: \\\"string\\\", value: \\\"ff0000\\\" }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n);\\nexport const Multiline = () => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Text\\\", type: \\\"string\\\", ui: \\\"multiline\\\" }}\\n      field={{ id: \\\"Text\\\", type: \\\"string\\\", value: \\\"multiline\\\\nmultiline\\\" }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n);\\nexport const Selection = () => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Mode\\\", type: \\\"string\\\", ui: \\\"selection\\\", choices }}\\n      field={{ id: \\\"Mode\\\", type: \\\"string\\\", value: \\\"a\\\" }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n);\\nexport const Buttons = () => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Mode\\\", type: \\\"string\\\", ui: \\\"buttons\\\", defaultValue: \\\"a\\\", choices }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n);\\nexport const Camera = () => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Camera\\\", type: \\\"camera\\\" }}\\n      field={{ id: \\\"Camera\\\", type: \\\"camera\\\", value: camera }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n);\\nexport const Typography = () => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Typography\\\", type: \\\"typography\\\" }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n);\\nexport const Polygon = () => (\\n  <Wrapper>\\n    <PropertyField schema={{ id: \\\"Polygon\\\", type: \\\"polygon\\\" }} onChange={action(\\\"onChange\\\")} />\\n  </Wrapper>\\n);\\nexport const LayerRef = () => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Layer\\\", type: \\\"ref\\\", ui: \\\"layer\\\" }}\\n      field={{\\n        id: \\\"Layer\\\",\\n        type: \\\"ref\\\",\\n        value: \\\"a\\\",\\n      }}\\n      onChange={action(\\\"onChange\\\")}\\n      layers={layers}\\n    />\\n  </Wrapper>\\n);\\n\\nexport const LinkedPartially = () => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Polygon\\\", type: \\\"polygon\\\" }}\\n      field={{\\n        id: \\\"Polygon\\\",\\n        type: \\\"polygon\\\",\\n        link: { schema: \\\"xxx\\\", field: \\\"yyy\\\", fieldName: \\\"YYY\\\" },\\n      }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n);\\n\\nconst layers: LayerType[] = [\\n  { id: \\\"a\\\", title: \\\"A\\\" },\\n  {\\n    id: \\\"b\\\",\\n    title: \\\"B\\\",\\n    group: true,\\n    children: [\\n      { id: \\\"d\\\", title: \\\"xxx\\\" },\\n      { id: \\\"e\\\", title: \\\"aaa\\\" },\\n      { id: \\\"f\\\", title: \\\"F\\\", group: true, children: [{ id: \\\"g\\\", title: \\\"G\\\" }] },\\n    ],\\n  },\\n  { id: \\\"c\\\", title: \\\"C\\\" },\\n];\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Bool\":{\"startLoc\":{\"col\":20,\"line\":30},\"endLoc\":{\"col\":1,\"line\":34},\"startBody\":{\"col\":20,\"line\":30},\"endBody\":{\"col\":1,\"line\":34}},\"Number\":{\"startLoc\":{\"col\":22,\"line\":35},\"endLoc\":{\"col\":1,\"line\":39},\"startBody\":{\"col\":22,\"line\":35},\"endBody\":{\"col\":1,\"line\":39}},\"String\":{\"startLoc\":{\"col\":22,\"line\":40},\"endLoc\":{\"col\":1,\"line\":44},\"startBody\":{\"col\":22,\"line\":40},\"endBody\":{\"col\":1,\"line\":44}},\"LatLng\":{\"startLoc\":{\"col\":22,\"line\":45},\"endLoc\":{\"col\":1,\"line\":49},\"startBody\":{\"col\":22,\"line\":45},\"endBody\":{\"col\":1,\"line\":49}},\"Url\":{\"startLoc\":{\"col\":19,\"line\":50},\"endLoc\":{\"col\":1,\"line\":54},\"startBody\":{\"col\":19,\"line\":50},\"endBody\":{\"col\":1,\"line\":54}},\"BoolWithValue\":{\"startLoc\":{\"col\":29,\"line\":55},\"endLoc\":{\"col\":1,\"line\":63},\"startBody\":{\"col\":29,\"line\":55},\"endBody\":{\"col\":1,\"line\":63}},\"NumberWithValue\":{\"startLoc\":{\"col\":31,\"line\":64},\"endLoc\":{\"col\":1,\"line\":72},\"startBody\":{\"col\":31,\"line\":64},\"endBody\":{\"col\":1,\"line\":72}},\"StringWithValue\":{\"startLoc\":{\"col\":31,\"line\":73},\"endLoc\":{\"col\":1,\"line\":81},\"startBody\":{\"col\":31,\"line\":73},\"endBody\":{\"col\":1,\"line\":81}},\"LatLngWithValue\":{\"startLoc\":{\"col\":31,\"line\":82},\"endLoc\":{\"col\":1,\"line\":90},\"startBody\":{\"col\":31,\"line\":82},\"endBody\":{\"col\":1,\"line\":90}},\"UrlWithValue\":{\"startLoc\":{\"col\":28,\"line\":91},\"endLoc\":{\"col\":1,\"line\":99},\"startBody\":{\"col\":28,\"line\":91},\"endBody\":{\"col\":1,\"line\":99}},\"Color\":{\"startLoc\":{\"col\":21,\"line\":100},\"endLoc\":{\"col\":1,\"line\":108},\"startBody\":{\"col\":21,\"line\":100},\"endBody\":{\"col\":1,\"line\":108}},\"Multiline\":{\"startLoc\":{\"col\":25,\"line\":109},\"endLoc\":{\"col\":1,\"line\":117},\"startBody\":{\"col\":25,\"line\":109},\"endBody\":{\"col\":1,\"line\":117}},\"Selection\":{\"startLoc\":{\"col\":25,\"line\":118},\"endLoc\":{\"col\":1,\"line\":126},\"startBody\":{\"col\":25,\"line\":118},\"endBody\":{\"col\":1,\"line\":126}},\"Buttons\":{\"startLoc\":{\"col\":23,\"line\":127},\"endLoc\":{\"col\":1,\"line\":134},\"startBody\":{\"col\":23,\"line\":127},\"endBody\":{\"col\":1,\"line\":134}},\"Camera\":{\"startLoc\":{\"col\":22,\"line\":135},\"endLoc\":{\"col\":1,\"line\":143},\"startBody\":{\"col\":22,\"line\":135},\"endBody\":{\"col\":1,\"line\":143}},\"Typography\":{\"startLoc\":{\"col\":26,\"line\":144},\"endLoc\":{\"col\":1,\"line\":151},\"startBody\":{\"col\":26,\"line\":144},\"endBody\":{\"col\":1,\"line\":151}},\"Polygon\":{\"startLoc\":{\"col\":23,\"line\":152},\"endLoc\":{\"col\":1,\"line\":156},\"startBody\":{\"col\":23,\"line\":152},\"endBody\":{\"col\":1,\"line\":156}},\"LayerRef\":{\"startLoc\":{\"col\":24,\"line\":157},\"endLoc\":{\"col\":1,\"line\":170},\"startBody\":{\"col\":24,\"line\":157},\"endBody\":{\"col\":1,\"line\":170}},\"LinkedPartially\":{\"startLoc\":{\"col\":31,\"line\":172},\"endLoc\":{\"col\":1,\"line\":184},\"startBody\":{\"col\":31,\"line\":172},\"endBody\":{\"col\":1,\"line\":184}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\n\nimport PropertyField, { Layer as LayerType } from \".\";\nimport { Camera as settings } from \"@reearth/util/value\";\n\nconst Wrapper: React.FC = ({ children }) => <div style={{ padding: \"32px\" }}>{children}</div>;\n\nconst choices = [\n  { key: \"a\", label: \"a\", icon: \"scene\" },\n  { key: \"b\", label: \"b\", icon: \"layer\" },\n];\n\nconst camera: settings = {\n  lat: 35.652832,\n  lng: 139.839478,\n  height: 1000,\n  heading: 0,\n  roll: 1,\n  pitch: 1,\n  fov: 60,\n};\n\nexport default {\n  title: \"molecules/EarthEditor/PropertyPane/PropertyField\",\n  component: PropertyField,\n} as Meta;\n\nexport const Bool = () => (\n  <Wrapper>\n    <PropertyField schema={{ id: \"Title\", type: \"bool\" }} onChange={action(\"onChange\")} />\n  </Wrapper>\n);;\nexport const Number = () => (\n  <Wrapper>\n    <PropertyField schema={{ id: \"Title\", type: \"number\" }} onChange={action(\"onChange\")} />\n  </Wrapper>\n);;\nexport const String = () => (\n  <Wrapper>\n    <PropertyField schema={{ id: \"Title\", type: \"string\" }} onChange={action(\"onChange\")} />\n  </Wrapper>\n);;\nexport const LatLng = () => (\n  <Wrapper>\n    <PropertyField schema={{ id: \"Title\", type: \"latlng\" }} onChange={action(\"onChange\")} />\n  </Wrapper>\n);;\nexport const Url = () => (\n  <Wrapper>\n    <PropertyField schema={{ id: \"Title\", type: \"url\" }} onChange={action(\"onChange\")} />\n  </Wrapper>\n);;\nexport const BoolWithValue = () => (\n  <Wrapper>\n    <PropertyField\n      schema={{ id: \"Title\", type: \"bool\" }}\n      field={{ id: \"Title\", type: \"bool\", value: true }}\n      onChange={action(\"onChange\")}\n    />\n  </Wrapper>\n);;\nexport const NumberWithValue = () => (\n  <Wrapper>\n    <PropertyField\n      schema={{ id: \"Title\", type: \"number\" }}\n      field={{ id: \"Title\", type: \"number\", value: 100 }}\n      onChange={action(\"onChange\")}\n    />\n  </Wrapper>\n);;\nexport const StringWithValue = () => (\n  <Wrapper>\n    <PropertyField\n      schema={{ id: \"Title\", type: \"string\" }}\n      field={{ id: \"Title\", type: \"string\", value: \"hogetext\" }}\n      onChange={action(\"onChange\")}\n    />\n  </Wrapper>\n);;\nexport const LatLngWithValue = () => (\n  <Wrapper>\n    <PropertyField\n      schema={{ id: \"Title\", type: \"latlng\" }}\n      field={{ id: \"Title\", type: \"latlng\", value: { lat: 123.234, lng: 34.4323 } }}\n      onChange={action(\"onChange\")}\n    />\n  </Wrapper>\n);;\nexport const UrlWithValue = () => (\n  <Wrapper>\n    <PropertyField\n      schema={{ id: \"Title\", type: \"url\" }}\n      field={{ id: \"Title\", type: \"url\", value: `${process.env.PUBLIC_URL}/sample.svg` }}\n      onChange={action(\"onChange\")}\n    />\n  </Wrapper>\n);;\nexport const Color = () => (\n  <Wrapper>\n    <PropertyField\n      schema={{ id: \"Color\", type: \"string\", ui: \"color\" }}\n      field={{ id: \"Color\", type: \"string\", value: \"ff0000\" }}\n      onChange={action(\"onChange\")}\n    />\n  </Wrapper>\n);;\nexport const Multiline = () => (\n  <Wrapper>\n    <PropertyField\n      schema={{ id: \"Text\", type: \"string\", ui: \"multiline\" }}\n      field={{ id: \"Text\", type: \"string\", value: \"multiline\\nmultiline\" }}\n      onChange={action(\"onChange\")}\n    />\n  </Wrapper>\n);;\nexport const Selection = () => (\n  <Wrapper>\n    <PropertyField\n      schema={{ id: \"Mode\", type: \"string\", ui: \"selection\", choices }}\n      field={{ id: \"Mode\", type: \"string\", value: \"a\" }}\n      onChange={action(\"onChange\")}\n    />\n  </Wrapper>\n);;\nexport const Buttons = () => (\n  <Wrapper>\n    <PropertyField\n      schema={{ id: \"Mode\", type: \"string\", ui: \"buttons\", defaultValue: \"a\", choices }}\n      onChange={action(\"onChange\")}\n    />\n  </Wrapper>\n);;\nexport const Camera = () => (\n  <Wrapper>\n    <PropertyField\n      schema={{ id: \"Camera\", type: \"camera\" }}\n      field={{ id: \"Camera\", type: \"camera\", value: camera }}\n      onChange={action(\"onChange\")}\n    />\n  </Wrapper>\n);;\nexport const Typography = () => (\n  <Wrapper>\n    <PropertyField\n      schema={{ id: \"Typography\", type: \"typography\" }}\n      onChange={action(\"onChange\")}\n    />\n  </Wrapper>\n);;\nexport const Polygon = () => (\n  <Wrapper>\n    <PropertyField schema={{ id: \"Polygon\", type: \"polygon\" }} onChange={action(\"onChange\")} />\n  </Wrapper>\n);;\nexport const LayerRef = () => (\n  <Wrapper>\n    <PropertyField\n      schema={{ id: \"Layer\", type: \"ref\", ui: \"layer\" }}\n      field={{\n        id: \"Layer\",\n        type: \"ref\",\n        value: \"a\",\n      }}\n      onChange={action(\"onChange\")}\n      layers={layers}\n    />\n  </Wrapper>\n);;\n\nexport const LinkedPartially = () => (\n  <Wrapper>\n    <PropertyField\n      schema={{ id: \"Polygon\", type: \"polygon\" }}\n      field={{\n        id: \"Polygon\",\n        type: \"polygon\",\n        link: { schema: \"xxx\", field: \"yyy\", fieldName: \"YYY\" },\n      }}\n      onChange={action(\"onChange\")}\n    />\n  </Wrapper>\n);\n\nconst layers: LayerType[] = [\n  { id: \"a\", title: \"A\" },\n  {\n    id: \"b\",\n    title: \"B\",\n    group: true,\n    children: [\n      { id: \"d\", title: \"xxx\" },\n      { id: \"e\", title: \"aaa\" },\n      { id: \"f\", title: \"F\", group: true, children: [{ id: \"g\", title: \"G\" }] },\n    ],\n  },\n  { id: \"c\", title: \"C\" },\n];\n\n\n\nBool.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyField schema={{ id: \\\"Title\\\", type: \\\"bool\\\" }} onChange={action(\\\"onChange\\\")} />\\n  </Wrapper>\\n)\" }, ...Bool.parameters };\nNumber.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyField schema={{ id: \\\"Title\\\", type: \\\"number\\\" }} onChange={action(\\\"onChange\\\")} />\\n  </Wrapper>\\n)\" }, ...Number.parameters };\nString.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyField schema={{ id: \\\"Title\\\", type: \\\"string\\\" }} onChange={action(\\\"onChange\\\")} />\\n  </Wrapper>\\n)\" }, ...String.parameters };\nLatLng.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyField schema={{ id: \\\"Title\\\", type: \\\"latlng\\\" }} onChange={action(\\\"onChange\\\")} />\\n  </Wrapper>\\n)\" }, ...LatLng.parameters };\nUrl.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyField schema={{ id: \\\"Title\\\", type: \\\"url\\\" }} onChange={action(\\\"onChange\\\")} />\\n  </Wrapper>\\n)\" }, ...Url.parameters };\nBoolWithValue.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Title\\\", type: \\\"bool\\\" }}\\n      field={{ id: \\\"Title\\\", type: \\\"bool\\\", value: true }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n)\" }, ...BoolWithValue.parameters };\nNumberWithValue.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Title\\\", type: \\\"number\\\" }}\\n      field={{ id: \\\"Title\\\", type: \\\"number\\\", value: 100 }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n)\" }, ...NumberWithValue.parameters };\nStringWithValue.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Title\\\", type: \\\"string\\\" }}\\n      field={{ id: \\\"Title\\\", type: \\\"string\\\", value: \\\"hogetext\\\" }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n)\" }, ...StringWithValue.parameters };\nLatLngWithValue.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Title\\\", type: \\\"latlng\\\" }}\\n      field={{ id: \\\"Title\\\", type: \\\"latlng\\\", value: { lat: 123.234, lng: 34.4323 } }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n)\" }, ...LatLngWithValue.parameters };\nUrlWithValue.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Title\\\", type: \\\"url\\\" }}\\n      field={{ id: \\\"Title\\\", type: \\\"url\\\", value: `${process.env.PUBLIC_URL}/sample.svg` }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n)\" }, ...UrlWithValue.parameters };\nColor.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Color\\\", type: \\\"string\\\", ui: \\\"color\\\" }}\\n      field={{ id: \\\"Color\\\", type: \\\"string\\\", value: \\\"ff0000\\\" }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n)\" }, ...Color.parameters };\nMultiline.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Text\\\", type: \\\"string\\\", ui: \\\"multiline\\\" }}\\n      field={{ id: \\\"Text\\\", type: \\\"string\\\", value: \\\"multiline\\\\nmultiline\\\" }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n)\" }, ...Multiline.parameters };\nSelection.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Mode\\\", type: \\\"string\\\", ui: \\\"selection\\\", choices }}\\n      field={{ id: \\\"Mode\\\", type: \\\"string\\\", value: \\\"a\\\" }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n)\" }, ...Selection.parameters };\nButtons.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Mode\\\", type: \\\"string\\\", ui: \\\"buttons\\\", defaultValue: \\\"a\\\", choices }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n)\" }, ...Buttons.parameters };\nCamera.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Camera\\\", type: \\\"camera\\\" }}\\n      field={{ id: \\\"Camera\\\", type: \\\"camera\\\", value: camera }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n)\" }, ...Camera.parameters };\nTypography.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Typography\\\", type: \\\"typography\\\" }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n)\" }, ...Typography.parameters };\nPolygon.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyField schema={{ id: \\\"Polygon\\\", type: \\\"polygon\\\" }} onChange={action(\\\"onChange\\\")} />\\n  </Wrapper>\\n)\" }, ...Polygon.parameters };\nLayerRef.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Layer\\\", type: \\\"ref\\\", ui: \\\"layer\\\" }}\\n      field={{\\n        id: \\\"Layer\\\",\\n        type: \\\"ref\\\",\\n        value: \\\"a\\\",\\n      }}\\n      onChange={action(\\\"onChange\\\")}\\n      layers={layers}\\n    />\\n  </Wrapper>\\n)\" }, ...LayerRef.parameters };\nLinkedPartially.parameters = { storySource: { source: \"() => (\\n  <Wrapper>\\n    <PropertyField\\n      schema={{ id: \\\"Polygon\\\", type: \\\"polygon\\\" }}\\n      field={{\\n        id: \\\"Polygon\\\",\\n        type: \\\"polygon\\\",\\n        link: { schema: \\\"xxx\\\", field: \\\"yyy\\\", fieldName: \\\"YYY\\\" },\\n      }}\\n      onChange={action(\\\"onChange\\\")}\\n    />\\n  </Wrapper>\\n)\" }, ...LinkedPartially.parameters };","import React, { useState, useMemo, useCallback } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { mapValues } from \"lodash-es\";\n\nimport { styled, useTheme } from \"@reearth/theme\";\nimport { ExtendedFuncProps2 } from \"@reearth/types\";\nimport { useBind } from \"@reearth/util/use-bind\";\nimport { partitionObject } from \"@reearth/util/util\";\nimport { zeroValues } from \"@reearth/util/value\";\n\nimport GroupWrapper from \"@reearth/components/atoms/PropertyGroup\";\nimport PropertyList, { Item as PropertyListItem } from \"../PropertyList\";\nimport PropertyField, {\n  Props as FieldProps,\n  Field as FieldType,\n  ValueType as ValueTypeType,\n  ValueTypes as ValueTypesType,\n  LatLng as LatLngType,\n  SchemaField as SchemaFieldType,\n  Asset as AssetType,\n} from \"../PropertyField\";\nimport Button from \"@reearth/components/atoms/Button\";\nimport Modal from \"@reearth/components/atoms/Modal\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\n\nexport type Mode = \"infobox\" | \"scene\" | \"layer\" | \"block\" | \"widget\";\n\nexport type {\n  Dataset,\n  DatasetSchema,\n  DatasetField,\n  DatasetType,\n  Location,\n  Layer,\n} from \"../PropertyField\";\n\nexport type Field = FieldType;\n\nexport type SchemaField<T extends ValueType = ValueType> = SchemaFieldType<T> & {\n  only?: {\n    field: string;\n    value: string | boolean;\n  };\n};\nexport type ValueType = ValueTypeType;\nexport type ValueTypes = ValueTypesType;\nexport type LatLng = LatLngType;\nexport type Asset = AssetType;\n\nexport type ItemCommon = {\n  id?: string;\n  schemaGroup: string;\n  title?: string;\n  schemaFields: SchemaField[];\n  nameField?: string;\n  only?: {\n    field: string;\n    value: string | boolean;\n  };\n};\n\nexport type GroupList = {\n  items: GroupListItem[];\n} & ItemCommon;\n\nexport type GroupListItem = {\n  id: string;\n  fields: Field[];\n};\n\nexport type Group = {\n  fields: Field[];\n} & ItemCommon;\n\nexport type Item = Group | GroupList;\n\nexport type Props = {\n  className?: string;\n  item?: Item;\n  title?: string;\n  isTemplate?: boolean;\n  mode?: Mode;\n  defaultItemName?: string;\n  onItemAdd?: (schemaGroupId: string) => void;\n  onItemMove?: (schemaGroupId: string, itemId: string, from: number, to: number) => void;\n  onItemRemove?: (schemaGroupId: string, itemId: string, index: number) => void;\n  onRemovePane?: () => void;\n  onItemsUpdate?: (\n    schemaGroupId: string,\n    items: {\n      itemId?: string;\n      layerId?: string;\n      from: number;\n      to: number;\n    }[],\n  ) => void;\n} & Pick<\n  FieldProps,\n  | \"datasetSchemas\"\n  | \"linkedDatasetSchemaId\"\n  | \"linkedDatasetId\"\n  | \"isCapturing\"\n  | \"onIsCapturingChange\"\n  | \"camera\"\n  | \"onCameraChange\"\n  | \"isLinkable\"\n  | \"onDatasetPickerOpen\"\n  | \"layers\"\n  | \"assets\"\n  | \"onCreateAsset\"\n> &\n  ExtendedFuncProps2<\n    Pick<FieldProps, \"onChange\" | \"onRemove\" | \"onLink\" | \"onUploadFile\" | \"onRemoveFile\">,\n    string,\n    string | undefined\n  >;\n\nconst PropertyItem: React.FC<Props> = ({\n  className,\n  item,\n  isTemplate,\n  mode,\n  defaultItemName,\n  onItemAdd,\n  onItemMove,\n  onItemRemove,\n  onItemsUpdate,\n  onRemovePane,\n  ...props\n}) => {\n  const [eventProps, otherProps] = partitionObject(props, [\n    \"onChange\",\n    \"onRemove\",\n    \"onLink\",\n    \"onUploadFile\",\n    \"onRemoveFile\",\n  ]);\n  const intl = useIntl();\n\n  const theme = useTheme();\n\n  const [selected, select] = useState(-1);\n  const [openModal, setModal] = useState(false);\n\n  const isList = item && \"items\" in item;\n  const layerMode = useMemo(() => {\n    if (!isList || !item?.nameField) return false;\n    const sf = item.schemaFields.find(f => f.id === item.nameField);\n    return sf?.type === \"ref\" && sf.ui === \"layer\";\n  }, [isList, item?.nameField, item?.schemaFields]);\n\n  const groups = useMemo<(GroupListItem | Group)[]>(\n    () => (item && \"items\" in item ? item.items : item ? [item] : []),\n    [item],\n  );\n\n  const selectedItem = isList ? groups[selected] : groups[0];\n  const propertyListItems = useMemo(\n    () =>\n      groups\n        .map<PropertyListItem | undefined>(i => {\n          if (!i.id) return;\n\n          const nameField = item?.nameField\n            ? i.fields.find(f => f.id === item.nameField)\n            : undefined;\n          const nameSchemaField = item?.schemaFields?.find(sf => sf.id === item.nameField);\n\n          const value = nameField?.value || nameSchemaField?.defaultValue;\n\n          const choice = nameSchemaField?.choices\n            ? nameSchemaField?.choices?.find(c => c.key === value)?.label\n            : undefined;\n\n          const title = valueToString(choice || value);\n\n          return {\n            id: i.id,\n            title: layerMode ? undefined : title,\n            layerId: layerMode ? title : undefined,\n          };\n        })\n        .filter((g): g is PropertyListItem => !!g),\n    [groups, layerMode, item],\n  );\n  const schemaFields = useMemo(\n    () =>\n      selectedItem\n        ? item?.schemaFields.map(f => {\n            const events = mapValues(\n              eventProps,\n              f =>\n                (...args: any[]) =>\n                  f?.(item.schemaGroup, isList ? selectedItem.id : undefined, ...args),\n            );\n            const field = selectedItem?.fields.find(f2 => f2.id === f.id);\n            const condf = f.only && selectedItem?.fields.find(f2 => f2.id === f.only?.field);\n            const condsf = f.only && item.schemaFields.find(f2 => f2.id === f.only?.field);\n            const condv =\n              condf?.value ??\n              condf?.mergedValue ??\n              condsf?.defaultValue ??\n              (condsf?.type ? zeroValues[condsf.type] : undefined);\n            return {\n              schemaField: f,\n              field,\n              events,\n              hidden: f.only && (!condv || condv !== f.only.value),\n            };\n          })\n        : [],\n    [eventProps, item, selectedItem, isList],\n  );\n\n  const handleItemMove = useCallback(\n    (from: number, to: number) => {\n      if (!item?.schemaGroup) return;\n      const id = propertyListItems[from]?.id;\n      if (!id) return;\n      onItemMove?.(item.schemaGroup, id, from, to);\n    },\n    [item?.schemaGroup, onItemMove, propertyListItems],\n  );\n  const handleItemRemove = useCallback(\n    (index: number) => {\n      if (!item?.schemaGroup) return;\n      const id = propertyListItems[index]?.id;\n      if (!id) return;\n      onItemRemove?.(item.schemaGroup, id, index);\n    },\n    [item?.schemaGroup, onItemRemove, propertyListItems],\n  );\n  const { onItemsUpdate: handleItemUpdate } = useBind({ onItemsUpdate }, item?.schemaGroup);\n\n  const handleItemAdd = useCallback(() => {\n    if (item) [onItemAdd?.(item.schemaGroup)];\n  }, [onItemAdd, item]);\n\n  const handleDelete = useCallback(() => {\n    if (!onRemovePane || !item?.title) return;\n    if (item?.title === intl.formatMessage({ defaultMessage: \"Basic\" })) {\n      setModal(true);\n    } else {\n      onRemovePane();\n    }\n  }, [item, onRemovePane, intl]);\n\n  return (\n    <GroupWrapper\n      className={className}\n      name={\n        mode === \"layer\" && isTemplate\n          ? intl.formatMessage({ defaultMessage: \"Template\" })\n          : isTemplate\n          ? `${item?.title} ${intl.formatMessage({ defaultMessage: \"template\" })}`\n          : item?.title\n      }>\n      {isList && !!item && (\n        <StyledPropertyList\n          name={item.title || (item.id === \"default\" ? defaultItemName : \"\")}\n          items={propertyListItems}\n          layers={props.layers}\n          layerMode={layerMode}\n          selectedIndex={selected}\n          onItemSelect={select}\n          onItemAdd={handleItemAdd}\n          onItemMove={handleItemMove}\n          onItemRemove={handleItemRemove}\n          onItemsUpdate={handleItemUpdate}\n        />\n      )}\n      {!!item &&\n        schemaFields?.map(f => {\n          if (layerMode && f.schemaField.id === item.nameField) return null;\n          return (\n            <PropertyField\n              key={f.schemaField.id}\n              field={f.field}\n              schema={f.schemaField}\n              hidden={f.hidden}\n              isTemplate={isTemplate}\n              {...f.events}\n              {...otherProps}\n            />\n          );\n        })}\n      {onRemovePane && (\n        <StyledButton buttonType=\"primary\" onClick={handleDelete}>\n          <TrashIcon icon=\"bin\" size={16} />\n          {intl.formatMessage({ defaultMessage: \"Delete\" })}\n        </StyledButton>\n      )}\n      <Modal\n        button1={\n          <Button\n            large\n            buttonType=\"danger\"\n            text={intl.formatMessage({ defaultMessage: \"OK\" })}\n            onClick={onRemovePane}\n          />\n        }\n        button2={\n          <Button\n            large\n            buttonType=\"secondary\"\n            text={intl.formatMessage({ defaultMessage: \"Cancel\" })}\n            onClick={() => setModal(false)}\n          />\n        }\n        size=\"sm\"\n        isVisible={openModal}\n        onClose={() => setModal(false)}>\n        <StyledIcon icon=\"alert\" size={24} />\n        <Text\n          size=\"m\"\n          color={theme.main.text}\n          otherProperties={{ marginTop: `${metricsSizes[\"s\"]}px` }}>\n          {intl.formatMessage({\n            defaultMessage:\n              \"You are deleting the infobox and all its contents. Are you sure you want to do that?\",\n          })}\n        </Text>\n      </Modal>\n    </GroupWrapper>\n  );\n};\n\nconst StyledPropertyList = styled(PropertyList)`\n  margin-bottom: 20px;\n`;\n\nconst StyledButton = styled(Button)`\n  float: right;\n`;\n\nconst TrashIcon = styled(Icon)`\n  margin-right: ${metricsSizes[\"s\"]}px;\n`;\n\nconst StyledIcon = styled(Icon)`\n  color: ${props => props.theme.main.alert};\n`;\n\nconst valueToString = (v: ValueTypesType[ValueTypeType] | undefined): string | undefined => {\n  if (typeof v === \"string\" || typeof v === \"number\") {\n    return v.toString();\n  }\n  return undefined;\n};\n\nexport default PropertyItem;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport PropertyItem, { Layer } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PropertyPane/PropertyItem\\\",\\n  component: PropertyItem,\\n} as Meta;\\n\\nconst layers: Layer[] = [\\n  { id: \\\"a\\\", title: \\\"A\\\" },\\n  {\\n    id: \\\"b\\\",\\n    title: \\\"B\\\",\\n    group: true,\\n    children: [\\n      { id: \\\"d\\\", title: \\\"xxxxxx\\\" },\\n      { id: \\\"e\\\", title: \\\"ああああ\\\" },\\n      { id: \\\"f\\\", title: \\\"F\\\", group: true, children: [{ id: \\\"g\\\", title: \\\"G\\\" }] },\\n    ],\\n  },\\n  { id: \\\"c\\\", title: \\\"C\\\" },\\n];\\n\\nexport const Default = () => (\\n  <PropertyItem\\n    item={{\\n      id: \\\"foo\\\",\\n      schemaGroup: \\\"foo\\\",\\n      schemaFields: [\\n        {\\n          id: \\\"bar\\\",\\n          type: \\\"string\\\",\\n          name: \\\"bar\\\",\\n        },\\n      ],\\n      items: [],\\n    }}\\n    onChange={action(\\\"onChange\\\")}\\n  />\\n);\\n\\nexport const List = () => (\\n  <PropertyItem\\n    item={{\\n      id: \\\"foo\\\",\\n      schemaGroup: \\\"foo\\\",\\n      schemaFields: [\\n        {\\n          id: \\\"bar\\\",\\n          type: \\\"string\\\",\\n          name: \\\"bar\\\",\\n        },\\n      ],\\n      items: [\\n        {\\n          id: \\\"bar\\\",\\n          fields: [\\n            {\\n              id: \\\"bar\\\",\\n              type: \\\"string\\\",\\n            },\\n          ],\\n        },\\n        {\\n          id: \\\"hoge\\\",\\n          fields: [\\n            {\\n              id: \\\"hoge\\\",\\n              type: \\\"string\\\",\\n              value: \\\"hoge\\\",\\n            },\\n          ],\\n        },\\n      ],\\n    }}\\n    onChange={action(\\\"onChange\\\")}\\n    onItemAdd={action(\\\"onItemAdd\\\")}\\n    onItemMove={action(\\\"onItemMove\\\")}\\n    onItemRemove={action(\\\"onItemRemove\\\")}\\n  />\\n);\\n\\nexport const NamedList = () => (\\n  <PropertyItem\\n    item={{\\n      id: \\\"foo\\\",\\n      schemaGroup: \\\"foo\\\",\\n      nameField: \\\"bar\\\",\\n      schemaFields: [\\n        {\\n          id: \\\"bar\\\",\\n          type: \\\"string\\\",\\n          name: \\\"bar\\\",\\n        },\\n      ],\\n      items: [\\n        {\\n          id: \\\"bar\\\",\\n          fields: [\\n            {\\n              id: \\\"bar\\\",\\n              type: \\\"string\\\",\\n              value: \\\"foo\\\",\\n            },\\n          ],\\n        },\\n        {\\n          id: \\\"hoge\\\",\\n          fields: [\\n            {\\n              id: \\\"hoge\\\",\\n              type: \\\"string\\\",\\n              value: \\\"hoge\\\",\\n            },\\n          ],\\n        },\\n      ],\\n    }}\\n    onChange={action(\\\"onChange\\\")}\\n    onItemAdd={action(\\\"onItemAdd\\\")}\\n    onItemMove={action(\\\"onItemMove\\\")}\\n    onItemRemove={action(\\\"onItemRemove\\\")}\\n  />\\n);\\n\\nexport const LayerMode = () => (\\n  <PropertyItem\\n    item={{\\n      id: \\\"foo\\\",\\n      schemaGroup: \\\"foo\\\",\\n      nameField: \\\"foo\\\",\\n      schemaFields: [\\n        {\\n          id: \\\"foo\\\",\\n          type: \\\"ref\\\",\\n          name: \\\"foo\\\",\\n          ui: \\\"layer\\\",\\n        },\\n        {\\n          id: \\\"bar\\\",\\n          type: \\\"string\\\",\\n          name: \\\"bar\\\",\\n        },\\n      ],\\n      items: [\\n        {\\n          id: \\\"bar\\\",\\n          fields: [\\n            {\\n              id: \\\"foo\\\",\\n              type: \\\"ref\\\",\\n              value: \\\"d\\\",\\n            },\\n            {\\n              id: \\\"bar\\\",\\n              type: \\\"string\\\",\\n              value: \\\"hoge\\\",\\n            },\\n          ],\\n        },\\n        {\\n          id: \\\"hoge\\\",\\n          fields: [\\n            {\\n              id: \\\"foo\\\",\\n              type: \\\"ref\\\",\\n              value: \\\"e\\\",\\n            },\\n            {\\n              id: \\\"bar\\\",\\n              type: \\\"string\\\",\\n              value: \\\"hogehoge\\\",\\n            },\\n          ],\\n        },\\n      ],\\n    }}\\n    layers={layers}\\n    onChange={action(\\\"onChange\\\")}\\n    onItemAdd={action(\\\"onItemAdd\\\")}\\n    onItemMove={action(\\\"onItemMove\\\")}\\n    onItemRemove={action(\\\"onItemRemove\\\")}\\n    onItemsUpdate={action(\\\"onItemsUpdate\\\")}\\n  />\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":26},\"endLoc\":{\"col\":1,\"line\":42},\"startBody\":{\"col\":23,\"line\":26},\"endBody\":{\"col\":1,\"line\":42}},\"List\":{\"startLoc\":{\"col\":20,\"line\":44},\"endLoc\":{\"col\":1,\"line\":83},\"startBody\":{\"col\":20,\"line\":44},\"endBody\":{\"col\":1,\"line\":83}},\"NamedList\":{\"startLoc\":{\"col\":25,\"line\":85},\"endLoc\":{\"col\":1,\"line\":126},\"startBody\":{\"col\":25,\"line\":85},\"endBody\":{\"col\":1,\"line\":126}},\"LayerMode\":{\"startLoc\":{\"col\":25,\"line\":128},\"endLoc\":{\"col\":1,\"line\":187},\"startBody\":{\"col\":25,\"line\":128},\"endBody\":{\"col\":1,\"line\":187}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport PropertyItem, { Layer } from \".\";\n\nexport default {\n  title: \"molecules/EarthEditor/PropertyPane/PropertyItem\",\n  component: PropertyItem,\n} as Meta;\n\nconst layers: Layer[] = [\n  { id: \"a\", title: \"A\" },\n  {\n    id: \"b\",\n    title: \"B\",\n    group: true,\n    children: [\n      { id: \"d\", title: \"xxxxxx\" },\n      { id: \"e\", title: \"ああああ\" },\n      { id: \"f\", title: \"F\", group: true, children: [{ id: \"g\", title: \"G\" }] },\n    ],\n  },\n  { id: \"c\", title: \"C\" },\n];\n\nexport const Default = () => (\n  <PropertyItem\n    item={{\n      id: \"foo\",\n      schemaGroup: \"foo\",\n      schemaFields: [\n        {\n          id: \"bar\",\n          type: \"string\",\n          name: \"bar\",\n        },\n      ],\n      items: [],\n    }}\n    onChange={action(\"onChange\")}\n  />\n);;\n\nexport const List = () => (\n  <PropertyItem\n    item={{\n      id: \"foo\",\n      schemaGroup: \"foo\",\n      schemaFields: [\n        {\n          id: \"bar\",\n          type: \"string\",\n          name: \"bar\",\n        },\n      ],\n      items: [\n        {\n          id: \"bar\",\n          fields: [\n            {\n              id: \"bar\",\n              type: \"string\",\n            },\n          ],\n        },\n        {\n          id: \"hoge\",\n          fields: [\n            {\n              id: \"hoge\",\n              type: \"string\",\n              value: \"hoge\",\n            },\n          ],\n        },\n      ],\n    }}\n    onChange={action(\"onChange\")}\n    onItemAdd={action(\"onItemAdd\")}\n    onItemMove={action(\"onItemMove\")}\n    onItemRemove={action(\"onItemRemove\")}\n  />\n);;\n\nexport const NamedList = () => (\n  <PropertyItem\n    item={{\n      id: \"foo\",\n      schemaGroup: \"foo\",\n      nameField: \"bar\",\n      schemaFields: [\n        {\n          id: \"bar\",\n          type: \"string\",\n          name: \"bar\",\n        },\n      ],\n      items: [\n        {\n          id: \"bar\",\n          fields: [\n            {\n              id: \"bar\",\n              type: \"string\",\n              value: \"foo\",\n            },\n          ],\n        },\n        {\n          id: \"hoge\",\n          fields: [\n            {\n              id: \"hoge\",\n              type: \"string\",\n              value: \"hoge\",\n            },\n          ],\n        },\n      ],\n    }}\n    onChange={action(\"onChange\")}\n    onItemAdd={action(\"onItemAdd\")}\n    onItemMove={action(\"onItemMove\")}\n    onItemRemove={action(\"onItemRemove\")}\n  />\n);;\n\nexport const LayerMode = () => (\n  <PropertyItem\n    item={{\n      id: \"foo\",\n      schemaGroup: \"foo\",\n      nameField: \"foo\",\n      schemaFields: [\n        {\n          id: \"foo\",\n          type: \"ref\",\n          name: \"foo\",\n          ui: \"layer\",\n        },\n        {\n          id: \"bar\",\n          type: \"string\",\n          name: \"bar\",\n        },\n      ],\n      items: [\n        {\n          id: \"bar\",\n          fields: [\n            {\n              id: \"foo\",\n              type: \"ref\",\n              value: \"d\",\n            },\n            {\n              id: \"bar\",\n              type: \"string\",\n              value: \"hoge\",\n            },\n          ],\n        },\n        {\n          id: \"hoge\",\n          fields: [\n            {\n              id: \"foo\",\n              type: \"ref\",\n              value: \"e\",\n            },\n            {\n              id: \"bar\",\n              type: \"string\",\n              value: \"hogehoge\",\n            },\n          ],\n        },\n      ],\n    }}\n    layers={layers}\n    onChange={action(\"onChange\")}\n    onItemAdd={action(\"onItemAdd\")}\n    onItemMove={action(\"onItemMove\")}\n    onItemRemove={action(\"onItemRemove\")}\n    onItemsUpdate={action(\"onItemsUpdate\")}\n  />\n);\n\n\n\nDefault.parameters = { storySource: { source: \"() => (\\n  <PropertyItem\\n    item={{\\n      id: \\\"foo\\\",\\n      schemaGroup: \\\"foo\\\",\\n      schemaFields: [\\n        {\\n          id: \\\"bar\\\",\\n          type: \\\"string\\\",\\n          name: \\\"bar\\\",\\n        },\\n      ],\\n      items: [],\\n    }}\\n    onChange={action(\\\"onChange\\\")}\\n  />\\n)\" }, ...Default.parameters };\nList.parameters = { storySource: { source: \"() => (\\n  <PropertyItem\\n    item={{\\n      id: \\\"foo\\\",\\n      schemaGroup: \\\"foo\\\",\\n      schemaFields: [\\n        {\\n          id: \\\"bar\\\",\\n          type: \\\"string\\\",\\n          name: \\\"bar\\\",\\n        },\\n      ],\\n      items: [\\n        {\\n          id: \\\"bar\\\",\\n          fields: [\\n            {\\n              id: \\\"bar\\\",\\n              type: \\\"string\\\",\\n            },\\n          ],\\n        },\\n        {\\n          id: \\\"hoge\\\",\\n          fields: [\\n            {\\n              id: \\\"hoge\\\",\\n              type: \\\"string\\\",\\n              value: \\\"hoge\\\",\\n            },\\n          ],\\n        },\\n      ],\\n    }}\\n    onChange={action(\\\"onChange\\\")}\\n    onItemAdd={action(\\\"onItemAdd\\\")}\\n    onItemMove={action(\\\"onItemMove\\\")}\\n    onItemRemove={action(\\\"onItemRemove\\\")}\\n  />\\n)\" }, ...List.parameters };\nNamedList.parameters = { storySource: { source: \"() => (\\n  <PropertyItem\\n    item={{\\n      id: \\\"foo\\\",\\n      schemaGroup: \\\"foo\\\",\\n      nameField: \\\"bar\\\",\\n      schemaFields: [\\n        {\\n          id: \\\"bar\\\",\\n          type: \\\"string\\\",\\n          name: \\\"bar\\\",\\n        },\\n      ],\\n      items: [\\n        {\\n          id: \\\"bar\\\",\\n          fields: [\\n            {\\n              id: \\\"bar\\\",\\n              type: \\\"string\\\",\\n              value: \\\"foo\\\",\\n            },\\n          ],\\n        },\\n        {\\n          id: \\\"hoge\\\",\\n          fields: [\\n            {\\n              id: \\\"hoge\\\",\\n              type: \\\"string\\\",\\n              value: \\\"hoge\\\",\\n            },\\n          ],\\n        },\\n      ],\\n    }}\\n    onChange={action(\\\"onChange\\\")}\\n    onItemAdd={action(\\\"onItemAdd\\\")}\\n    onItemMove={action(\\\"onItemMove\\\")}\\n    onItemRemove={action(\\\"onItemRemove\\\")}\\n  />\\n)\" }, ...NamedList.parameters };\nLayerMode.parameters = { storySource: { source: \"() => (\\n  <PropertyItem\\n    item={{\\n      id: \\\"foo\\\",\\n      schemaGroup: \\\"foo\\\",\\n      nameField: \\\"foo\\\",\\n      schemaFields: [\\n        {\\n          id: \\\"foo\\\",\\n          type: \\\"ref\\\",\\n          name: \\\"foo\\\",\\n          ui: \\\"layer\\\",\\n        },\\n        {\\n          id: \\\"bar\\\",\\n          type: \\\"string\\\",\\n          name: \\\"bar\\\",\\n        },\\n      ],\\n      items: [\\n        {\\n          id: \\\"bar\\\",\\n          fields: [\\n            {\\n              id: \\\"foo\\\",\\n              type: \\\"ref\\\",\\n              value: \\\"d\\\",\\n            },\\n            {\\n              id: \\\"bar\\\",\\n              type: \\\"string\\\",\\n              value: \\\"hoge\\\",\\n            },\\n          ],\\n        },\\n        {\\n          id: \\\"hoge\\\",\\n          fields: [\\n            {\\n              id: \\\"foo\\\",\\n              type: \\\"ref\\\",\\n              value: \\\"e\\\",\\n            },\\n            {\\n              id: \\\"bar\\\",\\n              type: \\\"string\\\",\\n              value: \\\"hogehoge\\\",\\n            },\\n          ],\\n        },\\n      ],\\n    }}\\n    layers={layers}\\n    onChange={action(\\\"onChange\\\")}\\n    onItemAdd={action(\\\"onItemAdd\\\")}\\n    onItemMove={action(\\\"onItemMove\\\")}\\n    onItemRemove={action(\\\"onItemRemove\\\")}\\n    onItemsUpdate={action(\\\"onItemsUpdate\\\")}\\n  />\\n)\" }, ...LayerMode.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport PropertyList, { Props, Layer } from \\\".\\\";\\n\\nconst Wrapper: React.FC = ({ children }) => <div style={{ width: 300 }}>{children}</div>;\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PropertyPane/PropertyList\\\",\\n  component: PropertyList,\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nconst items = [\\n  { id: \\\"a\\\", title: \\\"Tokyo\\\", layerId: \\\"a\\\" },\\n  { id: \\\"b\\\", title: \\\"Osaka\\\", layerId: \\\"c\\\" },\\n  { id: \\\"c\\\", title: \\\"Kyoto\\\", layerId: \\\"i\\\" },\\n  { id: \\\"d\\\", title: \\\"Tokyo\\\", layerId: \\\"e\\\" },\\n  { id: \\\"e\\\", title: \\\"Osaka\\\", layerId: \\\"g\\\" },\\n  { id: \\\"f\\\", title: \\\"Kyoto\\\", layerId: \\\"h\\\" },\\n];\\n\\nconst layers: Layer[] = [\\n  { id: \\\"a\\\", title: \\\"A\\\" },\\n  {\\n    id: \\\"b\\\",\\n    title: \\\"B\\\",\\n    group: true,\\n    children: [\\n      { id: \\\"d\\\", title: \\\"xxxxxxxxxxxxxxx\\\" },\\n      { id: \\\"e\\\", title: \\\"ああああああああああああああああ\\\" },\\n      { id: \\\"f\\\", title: \\\"F\\\", group: true, children: [{ id: \\\"g\\\", title: \\\"G\\\" }] },\\n    ],\\n  },\\n  { id: \\\"c\\\", title: \\\"C\\\" },\\n  { id: \\\"h\\\", title: \\\"H\\\" },\\n  { id: \\\"i\\\", title: \\\"I\\\" },\\n];\\n\\nexport const Default: Story<Props> = args => (\\n  <Wrapper>\\n    <PropertyList {...args} items={items} />\\n  </Wrapper>\\n);\\n\\nDefault.args = {\\n  name: \\\"Items\\\",\\n};\\n\\nexport const Selected: Story<Props> = args => (\\n  <Wrapper>\\n    <PropertyList {...args} items={items} />\\n  </Wrapper>\\n);\\n\\nSelected.args = {\\n  name: \\\"Items\\\",\\n  selectedIndex: 1,\\n};\\n\\nexport const LayerMode: Story<Props> = args => (\\n  <Wrapper>\\n    <PropertyList {...args} layers={layers} items={items} />\\n  </Wrapper>\\n);\\n\\nLayerMode.args = {\\n  name: \\\"Items\\\",\\n  selectedIndex: 1,\\n  layerMode: true,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":39},\"endLoc\":{\"col\":1,\"line\":43},\"startBody\":{\"col\":37,\"line\":39},\"endBody\":{\"col\":1,\"line\":43}},\"Selected\":{\"startLoc\":{\"col\":38,\"line\":49},\"endLoc\":{\"col\":1,\"line\":53},\"startBody\":{\"col\":38,\"line\":49},\"endBody\":{\"col\":1,\"line\":53}},\"LayerMode\":{\"startLoc\":{\"col\":39,\"line\":60},\"endLoc\":{\"col\":1,\"line\":64},\"startBody\":{\"col\":39,\"line\":60},\"endBody\":{\"col\":1,\"line\":64}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport PropertyList, { Props, Layer } from \".\";\n\nconst Wrapper: React.FC = ({ children }) => <div style={{ width: 300 }}>{children}</div>;\n\nexport default {\n  title: \"molecules/EarthEditor/PropertyPane/PropertyList\",\n  component: PropertyList,\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nconst items = [\n  { id: \"a\", title: \"Tokyo\", layerId: \"a\" },\n  { id: \"b\", title: \"Osaka\", layerId: \"c\" },\n  { id: \"c\", title: \"Kyoto\", layerId: \"i\" },\n  { id: \"d\", title: \"Tokyo\", layerId: \"e\" },\n  { id: \"e\", title: \"Osaka\", layerId: \"g\" },\n  { id: \"f\", title: \"Kyoto\", layerId: \"h\" },\n];\n\nconst layers: Layer[] = [\n  { id: \"a\", title: \"A\" },\n  {\n    id: \"b\",\n    title: \"B\",\n    group: true,\n    children: [\n      { id: \"d\", title: \"xxxxxxxxxxxxxxx\" },\n      { id: \"e\", title: \"ああああああああああああああああ\" },\n      { id: \"f\", title: \"F\", group: true, children: [{ id: \"g\", title: \"G\" }] },\n    ],\n  },\n  { id: \"c\", title: \"C\" },\n  { id: \"h\", title: \"H\" },\n  { id: \"i\", title: \"I\" },\n];\n\nexport const Default: Story<Props> = args => (\n  <Wrapper>\n    <PropertyList {...args} items={items} />\n  </Wrapper>\n);;\n\nDefault.args = {\n  name: \"Items\",\n};\n\nexport const Selected: Story<Props> = args => (\n  <Wrapper>\n    <PropertyList {...args} items={items} />\n  </Wrapper>\n);;\n\nSelected.args = {\n  name: \"Items\",\n  selectedIndex: 1,\n};\n\nexport const LayerMode: Story<Props> = args => (\n  <Wrapper>\n    <PropertyList {...args} layers={layers} items={items} />\n  </Wrapper>\n);\n\nLayerMode.args = {\n  name: \"Items\",\n  selectedIndex: 1,\n  layerMode: true,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => (\\n  <Wrapper>\\n    <PropertyList {...args} items={items} />\\n  </Wrapper>\\n)\" }, ...Default.parameters };\nSelected.parameters = { storySource: { source: \"args => (\\n  <Wrapper>\\n    <PropertyList {...args} items={items} />\\n  </Wrapper>\\n)\" }, ...Selected.parameters };\nLayerMode.parameters = { storySource: { source: \"args => (\\n  <Wrapper>\\n    <PropertyList {...args} layers={layers} items={items} />\\n  </Wrapper>\\n)\" }, ...LayerMode.parameters };","import React from \"react\";\nimport { useIntl } from \"react-intl\";\n\nimport { styled } from \"@reearth/theme\";\nimport ToggleButton from \"@reearth/components/atoms/ToggleButton\";\nimport Text from \"@reearth/components/atoms/Text\";\n\nexport type Props = {\n  checked?: boolean;\n  onChange?: () => Promise<void> | undefined;\n};\n\nconst WidgetToggleButton: React.FC<Props> = props => {\n  const intl = useIntl();\n  return (\n    <ToggleWrapper>\n      <Text size=\"xs\">{intl.formatMessage({ defaultMessage: \"Enable\" })}</Text>\n      <ToggleButton {...props} />\n    </ToggleWrapper>\n  );\n};\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding: 16px 16px 0 16px;\n  justify-content: space-between;\n`;\n\nexport default WidgetToggleButton;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\n\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport Component, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PropertyPane/WidgetToggleSwitch\\\",\\n  component: Component,\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => <Component {...args} />;\\n\\nDefault.args = {\\n  checked: false,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":11},\"endLoc\":{\"col\":68,\"line\":11},\"startBody\":{\"col\":37,\"line\":11},\"endBody\":{\"col\":68,\"line\":11}}};\n    \nimport React from \"react\";\n\nimport { Meta, Story } from \"@storybook/react\";\nimport Component, { Props } from \".\";\n\nexport default {\n  title: \"molecules/EarthEditor/PropertyPane/WidgetToggleSwitch\",\n  component: Component,\n} as Meta;\n\nexport const Default: Story<Props> = args => <Component {...args} />;\n\nDefault.args = {\n  checked: false,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Default.parameters };","import React from \"react\";\n\n// Components\nimport RadioLabelGroup from \"@reearth/components/atoms/RadioLabelGroup\";\nimport RadioLabel, { RadioLabelProps } from \"@reearth/components/atoms/RadioLabel\";\n\nexport type RadioLabelFieldProps = {\n  className?: string;\n  selectedValue?: string;\n  items?: RadioLabelProps[];\n  onChange?: (value: string) => void;\n};\n\nconst RadioLabelField: React.FC<RadioLabelFieldProps> = ({\n  className,\n  selectedValue,\n  items = [],\n  onChange,\n}) => {\n  return (\n    <RadioLabelGroup className={className} selectedValue={selectedValue} onChange={onChange}>\n      {items.map(({ value, label, disabled, inlineChildren, children }) => (\n        <RadioLabel\n          key={value}\n          value={value}\n          label={label}\n          disabled={disabled}\n          inlineChildren={inlineChildren}>\n          {children}\n        </RadioLabel>\n      ))}\n    </RadioLabelGroup>\n  );\n};\n\nexport default RadioLabelField;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport RadioLabelField, { RadioLabelFieldProps } from \\\".\\\";\\n\\nconst items: RadioLabelFieldProps[\\\"items\\\"] = [\\n  { label: \\\"デフォルトドメイン\\\", value: \\\"default\\\" },\\n  { label: \\\"カスタムドメイン\\\", value: \\\"custom\\\" },\\n];\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PublicationModal/RadioLabelField\\\",\\n  component: RadioLabelField,\\n} as Meta;\\n\\nexport const Default = () => (\\n  <RadioLabelField selectedValue=\\\"default\\\" items={items} onChange={action(\\\"onchange\\\")} />\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":16},\"endLoc\":{\"col\":1,\"line\":18},\"startBody\":{\"col\":23,\"line\":16},\"endBody\":{\"col\":1,\"line\":18}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport RadioLabelField, { RadioLabelFieldProps } from \".\";\n\nconst items: RadioLabelFieldProps[\"items\"] = [\n  { label: \"デフォルトドメイン\", value: \"default\" },\n  { label: \"カスタムドメイン\", value: \"custom\" },\n];\n\nexport default {\n  title: \"molecules/EarthEditor/PublicationModal/RadioLabelField\",\n  component: RadioLabelField,\n} as Meta;\n\nexport const Default = () => (\n  <RadioLabelField selectedValue=\"default\" items={items} onChange={action(\"onchange\")} />\n);\n\n\n\nDefault.parameters = { storySource: { source: \"() => (\\n  <RadioLabelField selectedValue=\\\"default\\\" items={items} onChange={action(\\\"onchange\\\")} />\\n)\" }, ...Default.parameters };","import React from \"react\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport { styled, useTheme } from \"@reearth/theme\";\nimport fonts from \"@reearth/theme/fonts\";\nimport Text from \"@reearth/components/atoms/Text\";\n\ntype Props = {\n  subMessage?: string;\n  value: string;\n  disabled?: boolean;\n  link?: boolean;\n  button1: string;\n  button2?: string;\n  actioned?: boolean;\n  onButtonClick1: (e: React.MouseEvent<HTMLSpanElement>) => void;\n  onButtonClick2?: (e: React.MouseEvent<HTMLSpanElement>) => void;\n};\nconst InputField: React.FC<Props> = ({\n  value,\n  disabled = false,\n  link,\n  subMessage,\n  button1,\n  button2,\n  actioned,\n  onButtonClick1,\n  onButtonClick2,\n}) => {\n  const theme = useTheme();\n  return (\n    <Wrapper>\n      <InputContent>\n        {link ? (\n          <URL disabled={disabled} href={value} rel=\"noopener noreferrer\" target=\"_blank\">\n            {value}\n          </URL>\n        ) : (\n          <InputURL disabled={disabled} value={value} readOnly />\n        )}\n        <InputLinkButton onClick={onButtonClick1}>{actioned ? null : button1}</InputLinkButton>\n        <InputLinkButton onClick={onButtonClick2}>\n          {actioned ? <Icon icon=\"check\" size={15} /> : button2}\n        </InputLinkButton>\n      </InputContent>\n      <SubMessage size=\"2xs\" color={theme.main.weak}>\n        {subMessage}\n      </SubMessage>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  margin-bottom: 20px;\n`;\n\nconst InputContent = styled.div`\n  padding: 5px;\n  border: solid 1.5px ${props => props.theme.main.border};\n  text-align: left;\n  height: auto;\n  display: flex;\n  align-items: center;\n  font-size: ${fonts.sizes.s}px;\n`;\n\nconst InputLinkButton = styled.button`\n  border: none;\n  flex: 0 0 auto;\n  cursor: pointer;\n  background: transparent;\n  color: ${props => props.theme.main.accent};\n  padding: 5px 10px;\n  > svg {\n    font-size: 24px;\n  }\n`;\n\nconst InputURL = styled.input`\n  flex: auto;\n  border: none;\n  outline: none;\n  padding: 5px 10px;\n  color: ${props => props.theme.main.text};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  color: ${props => props.theme.main.highlighted};\n  text-decoration-line: underline;\n`;\n\nconst URL = styled.a<{ disabled?: boolean }>`\n  flex: auto;\n  border: none;\n  outline: none;\n  padding: 5px 10px;\n  color: ${props => props.theme.main.accent};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  text-decoration-line: underline;\n`;\n\nconst SubMessage = styled(Text)`\n  margin-top: 5px;\n  > svg {\n    font-size: 24px;\n  }\n`;\n\nexport default InputField;\n","const usableChars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\nconst generateRandomString = (len: number): string => {\n  return Array.from(window.crypto.getRandomValues(new Uint8Array(len)))\n    .map(n => usableChars[n % len])\n    .join(\"\")\n    .toLowerCase();\n};\n\nexport default generateRandomString;\n","import React, { useMemo, useCallback } from \"react\";\nimport { useIntl } from \"react-intl\";\n\nimport Modal from \"@reearth/components/atoms/Modal\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport Button from \"@reearth/components/atoms/Button\";\nimport Divider from \"@reearth/components/atoms/Divider\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport ToggleButton from \"@reearth/components/atoms/ToggleButton\";\nimport { Type as NotificationType } from \"@reearth/components/atoms/NotificationBar\";\nimport { publishingType } from \"@reearth/components/molecules/EarthEditor/Header/index\";\nimport { Status } from \"@reearth/components/atoms/PublicationStatus\";\nimport InputField from \"./InputField\";\n\nimport { styled, useTheme } from \"@reearth/theme\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\nimport useHooks from \"./hooks\";\n\ninterface Props {\n  className?: string;\n  loading?: boolean;\n  isVisible: boolean;\n  publicationStatus?: Status;\n  projectId?: string;\n  projectAlias?: string;\n  validAlias?: boolean;\n  onClose?: () => void;\n  onSearchIndexChange?: () => void;\n  searchIndex?: boolean;\n  publishing?: publishingType;\n  onPublish?: (alias: string | undefined, publicationStatus: Status) => void | Promise<void>;\n  onNotify?: (type: NotificationType, text: string) => void;\n  onAliasValidate?: (alias: string) => void;\n  validatingAlias?: boolean;\n  url?: string[];\n}\n\nconst PublicationModal: React.FC<Props> = ({\n  isVisible,\n  loading,\n  onClose,\n  onSearchIndexChange,\n  searchIndex,\n  publishing,\n  publicationStatus,\n  onPublish,\n  projectAlias,\n  onNotify,\n  validAlias,\n  onAliasValidate,\n  validatingAlias,\n  url,\n}) => {\n  const intl = useIntl();\n  const theme = useTheme();\n  const {\n    handleClose,\n    statusChanged,\n    setStatusChange,\n    alias,\n    validation,\n    generateAlias,\n    copiedKey,\n    handleCopyToClipBoard,\n    showOptions,\n    setOptions,\n  } = useHooks(projectAlias, onClose, onNotify, onAliasValidate);\n\n  const purl = useMemo(() => {\n    return (url?.[0] ?? \"\") + (alias?.replace(\"/\", \"\") ?? \"\") + (url?.[1] ?? \"\");\n  }, [alias, url]);\n\n  const embedCode = useMemo(\n    () => `<iframe width=\"560\" height=\"315\" src=\"${purl}\" frameBorder=\"0\"></iframe>;`,\n    [purl],\n  );\n\n  const publishDisabled =\n    loading ||\n    (publishing === \"unpublishing\" && publicationStatus === \"unpublished\") ||\n    ((publishing === \"publishing\" || publishing === \"updating\") &&\n      (!alias || !!validation || validatingAlias || !validAlias));\n\n  const handlePublish = useCallback(async () => {\n    if (!publishing) return;\n    const a = publishing !== \"unpublishing\" ? alias || generateAlias() : undefined;\n    // const p = !searchIndex && publishing !== \"unpublishing\" ? alias || generateAlias() : undefined;\n    const mode =\n      publishing === \"unpublishing\" ? \"unpublished\" : !searchIndex ? \"limited\" : \"published\";\n    await onPublish?.(a, mode);\n    if (publishing === \"unpublishing\") {\n      handleClose?.();\n    } else {\n      setStatusChange(true);\n    }\n  }, [alias, onPublish, publishing, searchIndex, setStatusChange, generateAlias, handleClose]);\n\n  const modalTitleText = useMemo(() => {\n    return statusChanged\n      ? intl.formatMessage({\n          defaultMessage: \"Congratulations!\",\n        })\n      : publishing === \"publishing\"\n      ? intl.formatMessage({\n          defaultMessage: \"Publish your project\",\n        })\n      : publishing === \"updating\"\n      ? intl.formatMessage({\n          defaultMessage: \"Update your project\",\n        })\n      : \"\";\n  }, [intl, statusChanged, publishing]);\n\n  const primaryButtonText = useMemo(() => {\n    return statusChanged\n      ? intl.formatMessage({\n          defaultMessage: \"Ok\",\n        })\n      : publishing === \"publishing\"\n      ? intl.formatMessage({\n          defaultMessage: \"Publish\",\n        })\n      : publishing === \"updating\"\n      ? intl.formatMessage({\n          defaultMessage: \"Update\",\n        })\n      : intl.formatMessage({\n          defaultMessage: \"Continue\",\n        });\n  }, [intl, statusChanged, publishing]);\n\n  const updateDescriptionText = useMemo(() => {\n    return publishing === \"updating\"\n      ? intl.formatMessage({\n          defaultMessage:\n            \"Your published project will be updated. This means all current changes will overwrite the current published project.\",\n        })\n      : intl.formatMessage({\n          defaultMessage:\n            \"Your project will be published. This means anybody with the below URL will be able to view this project.\",\n        });\n  }, [intl, publishing]);\n\n  return (\n    <Modal\n      title={modalTitleText}\n      size=\"sm\"\n      isVisible={isVisible}\n      onClose={handleClose}\n      button1={\n        statusChanged === false && (\n          <Button\n            text={primaryButtonText}\n            buttonType=\"primary\"\n            disabled={publishDisabled}\n            onClick={handlePublish}\n          />\n        )\n      }\n      button2={\n        !statusChanged ? (\n          <Button\n            text={intl.formatMessage({ defaultMessage: \"Cancel\" })}\n            buttonType=\"secondary\"\n            onClick={handleClose}\n          />\n        ) : (\n          <Button\n            text={intl.formatMessage({ defaultMessage: \"Close\" })}\n            buttonType=\"secondary\"\n            onClick={handleClose}\n          />\n        )\n      }>\n      {statusChanged ? (\n        <Section>\n          <Subtitle size=\"m\">\n            {intl.formatMessage({\n              defaultMessage: \"Your project has been published!\",\n            })}\n          </Subtitle>\n          <Subtitle size=\"m\">\n            {intl.formatMessage({\n              defaultMessage: \"Public URL\",\n            })}\n          </Subtitle>\n          <InputField\n            button1={intl.formatMessage({\n              defaultMessage: \"Copy\",\n            })}\n            value={purl}\n            actioned={copiedKey?.url}\n            onButtonClick1={handleCopyToClipBoard(\"url\", purl)}\n            link\n            subMessage={intl.formatMessage({\n              defaultMessage: \"* Anyone can see your project with this URL\",\n            })}\n          />\n          <Subtitle size=\"m\">\n            {intl.formatMessage({\n              defaultMessage: \"Embed Code\",\n            })}\n          </Subtitle>\n          <InputField\n            button1={intl.formatMessage({\n              defaultMessage: \"Copy\",\n            })}\n            value={embedCode}\n            actioned={copiedKey?.embedCode}\n            onButtonClick1={handleCopyToClipBoard(\"embedCode\", embedCode)}\n            link\n            subMessage={intl.formatMessage({\n              defaultMessage:\n                \"* Please use this code if you want to embed your project into a webpage\",\n            })}\n          />\n        </Section>\n      ) : publishing !== \"unpublishing\" ? (\n        <>\n          <Section>\n            <Divider margin=\"20px\" />\n            <Text size=\"m\">{updateDescriptionText}</Text>\n            {url && alias && (\n              <PublishLink href={purl} target=\"blank\">\n                <UrlText size=\"m\" color={theme.main.accent}>\n                  {purl}\n                </UrlText>\n              </PublishLink>\n            )}\n            <Divider margin=\"0\" />\n          </Section>\n          <OptionsToggle onClick={() => setOptions(!showOptions)}>\n            <ArrowIcon icon=\"arrowToggle\" size={16} open={showOptions} />\n            <Text size=\"s\">{intl.formatMessage({ defaultMessage: \"more options\" })}</Text>\n          </OptionsToggle>\n          <HideableSection showOptions={showOptions}>\n            <Flex>\n              <Subtitle size=\"m\">\n                {intl.formatMessage({\n                  defaultMessage: \"Search engine indexing\",\n                })}\n              </Subtitle>\n              <ToggleButton checked={searchIndex} onChange={onSearchIndexChange} />\n            </Flex>\n          </HideableSection>\n        </>\n      ) : (\n        <Section>\n          <StyledIcon icon=\"alert\" color={theme.main.warning} />\n          <Subtitle size=\"m\">\n            {intl.formatMessage({ defaultMessage: \"Your project will be unpublished.\" })}\n          </Subtitle>\n          <Subtitle size=\"m\">\n            {intl.formatMessage({\n              defaultMessage:\n                \"This means that anybody with the URL will become unable to view this project.\",\n            })}\n          </Subtitle>\n          <Text size=\"m\" color={theme.main.warning}>\n            {intl.formatMessage({\n              defaultMessage: \"**Warning**: This includes websites where this project is embedded.\",\n            })}\n          </Text>\n        </Section>\n      )}\n    </Modal>\n  );\n};\n\nconst Flex = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\ntype SectionType = { disabled?: boolean };\nconst Section = styled.div<SectionType>`\n  margin-bottom: ${`${metricsSizes[\"m\"]}px`};\n  opacity: ${({ disabled }) => disabled && \"0.6\"};\n  cursor: ${({ disabled }) => disabled && \"not-allowed\"};\n`;\n\nconst HideableSection = styled(Section)<{ showOptions?: boolean }>`\n  display: ${props => (props.showOptions ? null : \"none\")};\n`;\n\nconst Subtitle = styled(Text)`\n  text-align: left;\n  margin-bottom: ${`${metricsSizes[\"2xl\"]}px`};\n`;\n\nconst StyledIcon = styled(Icon)`\n  margin-bottom: ${`${metricsSizes[\"2xl\"]}px`};\n`;\n\nconst UrlText = styled(Text)`\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin: ${`${metricsSizes[\"2xl\"]}px 0`};\n`;\n\nconst PublishLink = styled.a`\n  text-decoration: none;\n`;\n\nconst OptionsToggle = styled.div`\n  display: flex;\n  align-items: center;\n  margin: ${`0 0 ${metricsSizes[\"m\"]}px 0`};\n  color: ${({ theme }) => theme.main.text};\n  cursor: pointer;\n  user-select: none;\n`;\n\nconst ArrowIcon = styled(Icon)<{ open?: boolean }>`\n  transition: transform 0.15s ease;\n  transform: ${({ open }) => open && \"translateY(10%) rotate(90deg)\"};\n`;\n\nexport default PublicationModal;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useIntl } from \"react-intl\";\n\nimport generateRandomString from \"@reearth/util/generate-random-string\";\nimport { Type as NotificationType } from \"@reearth/components/atoms/NotificationBar\";\n\nexport type Validation = \"too short\" | \"not match\";\nexport type CopiedItemKey = {\n  url?: boolean;\n  embedCode?: boolean;\n};\n\nexport default (\n  defaultAlias?: string,\n  onClose?: () => void,\n  onNotify?: (type: NotificationType, text: string) => void,\n  onAliasValidate?: (alias: string) => void,\n) => {\n  const intl = useIntl();\n  const [copiedKey, setCopiedKey] = useState<CopiedItemKey>();\n  const [alias, changeAlias] = useState(defaultAlias);\n  const [validation, changeValidation] = useState<Validation>();\n  const [statusChanged, setStatusChange] = useState(false);\n  const [showOptions, setOptions] = useState(!defaultAlias);\n\n  const resetCopiedWithDelay = useCallback((key: keyof CopiedItemKey) => {\n    const timerID = setTimeout(\n      () =>\n        setCopiedKey(prevState => ({\n          ...prevState,\n          [key]: false,\n        })),\n      2500,\n    );\n    return () => clearTimeout(timerID);\n  }, []);\n\n  const handleCopyToClipBoard = useCallback(\n    (key: keyof CopiedItemKey, value: string | undefined) =>\n      (_: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n        if (!value) return;\n        setCopiedKey(prevState => ({\n          ...prevState,\n          [key]: true,\n        }));\n        navigator.clipboard.writeText(value);\n        onNotify?.(\n          \"info\",\n          `${\n            key === \"embedCode\"\n              ? intl.formatMessage({ defaultMessage: \"Embed code was successfully copied!\" })\n              : intl.formatMessage({ defaultMessage: \"URL was successfully copied!\" })\n          }`,\n        );\n        resetCopiedWithDelay(key);\n      },\n    [onNotify, resetCopiedWithDelay, intl],\n  );\n\n  const validate = useCallback(\n    (a?: string) => {\n      if (!a) {\n        changeValidation(undefined);\n        return;\n      }\n      if (a.length < 5) {\n        changeValidation(\"too short\");\n      } else if (!/^[A-Za-z0-9_-]*$/.test(a)) {\n        changeValidation(\"not match\");\n      } else {\n        changeValidation(undefined);\n        onAliasValidate?.(a);\n      }\n    },\n    [onAliasValidate],\n  );\n\n  const onAliasChange = useCallback(\n    (value?: string) => {\n      const a = value || generateAlias();\n      changeAlias(a);\n      validate(a);\n    },\n    [validate], // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  const handleClose = useCallback(() => {\n    onClose?.();\n    onAliasChange(defaultAlias);\n    setStatusChange(false);\n    setOptions(defaultAlias ? false : true);\n  }, [onClose, defaultAlias]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const generateAlias = useCallback(() => {\n    const str = generateRandomString(10);\n    changeAlias(str);\n    return str;\n  }, []);\n\n  useEffect(() => {\n    onAliasChange(defaultAlias);\n  }, [defaultAlias]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    handleClose,\n    statusChanged,\n    setStatusChange,\n    alias,\n    validation,\n    generateAlias,\n    copiedKey,\n    handleCopyToClipBoard,\n    showOptions,\n    setOptions,\n  };\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport PublicationModal from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/EarthEditor/PublicationModal\\\",\\n  component: PublicationModal,\\n} as Meta;\\n\\nexport const Default = () => <PublicationModal isVisible />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":59,\"line\":10},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":59,\"line\":10}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport PublicationModal from \".\";\n\nexport default {\n  title: \"molecules/EarthEditor/PublicationModal\",\n  component: PublicationModal,\n} as Meta;\n\nexport const Default = () => <PublicationModal isVisible />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <PublicationModal isVisible />\" }, ...Default.parameters };","import React from \"react\";\n\nimport { styled } from \"@reearth/theme\";\n\nexport default function Error() {\n  return <Wrapper>Error!</Wrapper>;\n}\n\nconst Wrapper = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: #000;\n  color: #ccc;\n  font-size: 14px;\n  padding: 10px;\n`;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\n\\nimport Component from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/Published/Error\\\",\\n  component: Component,\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nconst Template: Story = args => <Component {...args} />;\\n\\nexport const Default = Template.bind({});\\nDefault.args = {};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":24,\"line\":12},\"endLoc\":{\"col\":55,\"line\":12},\"startBody\":{\"col\":24,\"line\":12},\"endBody\":{\"col\":55,\"line\":12}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\n\nimport Component from \".\";\n\nexport default {\n  title: \"molecules/Published/Error\",\n  component: Component,\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nconst Template: Story = args => <Component {...args} />;\n\nexport const Default = Template.bind({});\nDefault.args = {};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Default.parameters };","import { styled } from \"@reearth/theme\";\n\nconst Avatar = styled.div<{ size: number; avatar?: string }>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: ${({ size }) => size}px;\n  min-height: ${({ size }) => size}px;\n  font-size: 24px;\n  border-radius: 50%;\n  background: ${({ avatar }) => (avatar ? `url(${avatar});` : \"#888888\")};\n`;\n\nexport default Avatar;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport Avatar from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/Settings/Avatar\\\",\\n  component: Avatar,\\n} as Meta;\\n\\nexport const Default = () => <Avatar size={24}>😄</Avatar>;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":10},\"endLoc\":{\"col\":58,\"line\":10},\"startBody\":{\"col\":23,\"line\":10},\"endBody\":{\"col\":58,\"line\":10}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport Avatar from \".\";\n\nexport default {\n  title: \"molecules/Settings/Avatar\",\n  component: Avatar,\n} as Meta;\n\nexport const Default = () => <Avatar size={24}>😄</Avatar>;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <Avatar size={24}>😄</Avatar>\" }, ...Default.parameters };","import React, { useState, useCallback } from \"react\";\nimport { styled, fonts } from \"@reearth/theme\";\nimport { useIntl } from \"react-intl\";\nimport Modal from \"@reearth/components/atoms/Modal\";\nimport Button from \"@reearth/components/atoms/Button\";\nimport Icon from \"@reearth/components/atoms/Icon\";\n\nexport type Item = {};\n\nexport type Props = {\n  className?: string;\n  id: string;\n  name: string;\n  removeDatasetSchema?: (schemaId: string) => void;\n};\n\nconst DatasetItem: React.FC<Props> = ({ className, id, name, removeDatasetSchema }) => {\n  const intl = useIntl();\n\n  const [isHover, setHover] = useState(false);\n  const [isVisible, setIsVisible] = useState(false);\n  const handleRemoveDatasetSchema = useCallback(\n    () => removeDatasetSchema?.(id),\n    [id, removeDatasetSchema],\n  );\n\n  const onClose = useCallback(() => {\n    setIsVisible(false);\n    setHover(false);\n  }, []);\n\n  return (\n    <>\n      <Wrapper\n        className={className}\n        onMouseEnter={() => setHover(true)}\n        onMouseLeave={() => setHover(false)}>\n        {isHover && (\n          <Actions>\n            <TrashIcon icon=\"bin\" size={20} onClick={() => setIsVisible(true)} />\n          </Actions>\n        )}\n        <Preview>\n          <StyledIcon icon=\"dataset\" size={24} />\n        </Preview>\n        <Meta>\n          <Name>{name}</Name>\n        </Meta>\n      </Wrapper>\n      <Modal\n        title={intl.formatMessage({ defaultMessage: \"Delete this dataset\" })}\n        isVisible={isVisible}\n        size=\"sm\"\n        onClose={onClose}\n        button1={\n          <Button\n            large\n            buttonType=\"danger\"\n            text={intl.formatMessage({ defaultMessage: \"Delete\" })}\n            onClick={handleRemoveDatasetSchema}\n          />\n        }\n        button2={\n          <Button\n            large\n            buttonType=\"secondary\"\n            text={intl.formatMessage({ defaultMessage: \"Cancel\" })}\n            onClick={onClose}\n          />\n        }>\n        {intl.formatMessage({ defaultMessage: \"Are you sure you want to delete it?\" })}\n      </Modal>\n    </>\n  );\n};\n\nconst Wrapper = styled.div`\n  width: 250px;\n  height: 250px;\n  background: #232226;\n  position: relative;\n`;\n\nconst StyledIcon = styled(Icon)`\n  width: 25px;\n  height: 25px;\n  color: ${props => props.theme.main.text};\n`;\n\nconst Preview = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 90%;\n`;\n\nconst Actions = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(34, 34, 34, 0.9);\n  display: flex;\n  align-items: flex-start;\n  justify-content: flex-end;\n  padding: 10px;\n  box-sizing: border-box;\n`;\n\nconst Meta = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: -20px;\n  margin-left: 22px;\n`;\n\nconst Name = styled.div`\n  font-size: ${fonts.sizes.m}px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\n\nconst TrashIcon = styled(Icon)`\n  color: #ff3c53;\n  cursor: pointer;\n  padding: 10px;\n`;\n\nexport default DatasetItem;\n","import React from \"react\";\nimport { styled } from \"@reearth/theme\";\nimport DatasetItem from \"@reearth/components/molecules/Settings/Project/Dataset/DatasetItem\";\n\nexport type Item = {\n  id: string;\n  name: string;\n};\n\nexport type Props = {\n  items: Item[];\n  removeDatasetSchema?: (schemaId: string) => void;\n};\n\nconst DatasetList: React.FC<Props> = ({ items, removeDatasetSchema }) => {\n  return (\n    <Wrapper>\n      {items.map(item => (\n        <DatasetItem key={item.id} {...item} removeDatasetSchema={removeDatasetSchema} />\n      ))}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  display: grid;\n  grid-template-columns: 250px 250px 250px;\n  grid-gap: 20px;\n`;\n\nexport default DatasetList;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport DatasetList from \\\".\\\";\\n\\nconst items = [\\n  { id: \\\"1\\\", name: \\\"plugins-01.kml\\\" },\\n  { id: \\\"2\\\", name: \\\"plugins-02.kml\\\" },\\n  { id: \\\"3\\\", name: \\\"plugins-03.kml\\\" },\\n  { id: \\\"4\\\", name: \\\"plugins-04.kml\\\" },\\n];\\n\\nexport default {\\n  title: \\\"molecules/Settings/Workspace/Dataset/DatasetList\\\",\\n  component: DatasetList,\\n} as Meta;\\n\\nexport const Default = () => <DatasetList items={items} />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":17},\"endLoc\":{\"col\":58,\"line\":17},\"startBody\":{\"col\":23,\"line\":17},\"endBody\":{\"col\":58,\"line\":17}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport DatasetList from \".\";\n\nconst items = [\n  { id: \"1\", name: \"plugins-01.kml\" },\n  { id: \"2\", name: \"plugins-02.kml\" },\n  { id: \"3\", name: \"plugins-03.kml\" },\n  { id: \"4\", name: \"plugins-04.kml\" },\n];\n\nexport default {\n  title: \"molecules/Settings/Workspace/Dataset/DatasetList\",\n  component: DatasetList,\n} as Meta;\n\nexport const Default = () => <DatasetList items={items} />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <DatasetList items={items} />\" }, ...Default.parameters };","import Box from \"@reearth/components/atoms/Box\";\nimport Markdown from \"@reearth/components/atoms/Markdown\";\nimport { useTheme } from \"@reearth/theme\";\nimport React from \"react\";\n\nexport type Props = {\n  children?: string;\n};\n\nconst PluginAccordionItemBody: React.FC<Props> = ({ children }) => {\n  const theme = useTheme();\n  const markdownTypographyStyle = {\n    color: theme.text.default,\n  };\n  return (\n    <Box ph=\"2xl\">\n      <Markdown backgroundColor={theme.pluginList.bg} styles={markdownTypographyStyle}>\n        {children}\n      </Markdown>\n    </Box>\n  );\n};\n\nexport default PluginAccordionItemBody;\n","import Box from \"@reearth/components/atoms/Box\";\nimport ConfirmationModal from \"@reearth/components/atoms/ConfirmationModal\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport { useTheme } from \"@reearth/theme\";\nimport React from \"react\";\nimport { useIntl } from \"react-intl\";\n\nexport type Props = {\n  onCancel: () => void;\n  onProceed: () => void;\n  onClose: () => void;\n  isOpen: boolean;\n};\n\nconst DeleteModal: React.FC<Props> = ({ onCancel, onProceed, onClose, isOpen }) => {\n  const intl = useIntl();\n  const theme = useTheme();\n  return (\n    <ConfirmationModal\n      title=\"\"\n      body={\n        <>\n          <Icon icon=\"alert\" size={24} color={theme.main.danger} />\n          <Box mt={\"2xl\"}>\n            <Text size=\"m\">\n              {intl.formatMessage({\n                defaultMessage:\n                  \"You are uninstalling selected plugin. The datas which are used by this plugin may also be deleted .\",\n              })}\n            </Text>\n          </Box>\n          <Text size=\"m\">\n            {intl.formatMessage({ defaultMessage: \"please check it before uninstalling.\" })}\n          </Text>\n        </>\n      }\n      isOpen={isOpen}\n      onClose={onClose}\n      onCancel={onCancel}\n      onProceed={onProceed}\n    />\n  );\n};\n\nexport default DeleteModal;\n","import Box from \"@reearth/components/atoms/Box\";\nimport Button from \"@reearth/components/atoms/Button\";\nimport Flex from \"@reearth/components/atoms/Flex\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport { fonts, styled } from \"@reearth/theme\";\nimport React, { useState } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport DeleteModal from \"./deleteModal\";\n\nexport type PluginItemProps = {\n  className?: string;\n  thumbnail?: string;\n  title?: string;\n  isInstalled?: boolean;\n  onUninstall: () => void;\n};\n\nconst PluginAccordionItemHeader: React.FC<PluginItemProps> = ({\n  className,\n  thumbnail,\n  title,\n  isInstalled,\n  onUninstall,\n}) => {\n  const intl = useIntl();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [hovered, setHovered] = useState(false);\n  const handleMouseEnter = () => {\n    setHovered(true);\n  };\n  const handleMouseLeave = () => {\n    setHovered(false);\n  };\n  return (\n    <Wrapper align=\"center\" justify=\"space-between\" className={className}>\n      <Flex align=\"center\">\n        {thumbnail && (\n          <Box borderRadius={8} mh=\"m\">\n            <Thumbnail src={thumbnail} alt=\"plugin thumbnail\" />\n          </Box>\n        )}\n        <Text size=\"l\" weight=\"bold\">\n          {title}\n        </Text>\n      </Flex>\n      <StyledButton\n        buttonType={isInstalled && hovered ? \"danger\" : \"secondary\"}\n        type=\"button\"\n        large\n        icon={isInstalled ? (hovered ? \"bin\" : \"check\") : \"install\"}\n        text={\n          isInstalled\n            ? hovered\n              ? intl.formatMessage({ defaultMessage: \"Uninstall\" })\n              : intl.formatMessage({ defaultMessage: \"Installed\" })\n            : intl.formatMessage({ defaultMessage: \"Install\" })\n        }\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        onClick={isInstalled ? () => setIsModalOpen(true) : undefined}\n      />\n      <DeleteModal\n        onCancel={() => setIsModalOpen(false)}\n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        onProceed={onUninstall}\n      />\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled(Flex)`\n  width: 100%;\n  padding: ${props => `${props.theme.metrics.xl}px 0`};\n`;\n\nconst Thumbnail = styled.img`\n  border-radius: 8px;\n  width: 64px;\n  height: 64px;\n`;\n\nconst StyledButton = styled(Button)`\n  font-weight: ${fonts.weight.bold};\n  border-radius: ${props => props.theme.metrics.s}px;\n  padding: ${({ theme }) => `${theme.metrics.s}px ${theme.metrics[\"2xl\"]}`};\n`;\n\nexport default PluginAccordionItemHeader;\n","import Accordion from \"@reearth/components/atoms/Accordion\";\nimport { useTheme } from \"@reearth/theme\";\nimport React from \"react\";\nimport PluginAccordionItemBody from \"./PluginAccordionItem/itemBody\";\nimport PluginAccordionItemHeader from \"./PluginAccordionItem/itemHeader\";\n\nexport type PluginItem = {\n  thumbnailUrl?: string;\n  title: string;\n  isInstalled: boolean;\n  bodyMarkdown?: string;\n  author: string;\n  pluginId: string;\n};\n\nexport type PluginAccordionProps = {\n  className?: string;\n  items?: PluginItem[];\n  uninstallPlugin: (pluginId: string) => void;\n};\n\nconst PluginAccordion: React.FC<PluginAccordionProps> = ({ className, items, uninstallPlugin }) => {\n  const theme = useTheme();\n  return items ? (\n    <Accordion\n      className={className}\n      allowMultipleExpanded\n      itemBgColor={theme.main.lighterBg}\n      items={items?.map(item => {\n        return {\n          id: item.title,\n          heading: (\n            <PluginAccordionItemHeader\n              // thumbnail={item.thumbnailUrl}\n              title={item.title}\n              isInstalled={item.isInstalled}\n              onUninstall={() => uninstallPlugin(item.pluginId)}\n            />\n          ),\n          content: <PluginAccordionItemBody>{item.bodyMarkdown}</PluginAccordionItemBody>,\n        };\n      })}\n    />\n  ) : null;\n};\n\nexport default PluginAccordion;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\n\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport Component, { PluginAccordionProps } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/Settings/Project/PluginAccordion\\\",\\n  component: Component,\\n} as Meta;\\n\\nexport const Default: Story<PluginAccordionProps> = args => <Component {...args} />;\\n\\nDefault.args = {\\n  items: [\\n    {\\n      thumbnailUrl: `${process.env.PUBLIC_URL}/sample.svg`,\\n      title: \\\"Sample\\\",\\n      isInstalled: true,\\n      bodyMarkdown: \\\"# Hoge ## Hoge\\\",\\n      author: \\\"reearth\\\",\\n      pluginId: \\\"id1\\\",\\n    },\\n    {\\n      thumbnailUrl: `${process.env.PUBLIC_URL}/sample.svg`,\\n      title: \\\"Sample2\\\",\\n      isInstalled: false,\\n      bodyMarkdown: \\\"# Fuga ## Fuga\\\",\\n      author: \\\"reearth\\\",\\n      pluginId: \\\"id2\\\",\\n    },\\n  ],\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":52,\"line\":11},\"endLoc\":{\"col\":83,\"line\":11},\"startBody\":{\"col\":52,\"line\":11},\"endBody\":{\"col\":83,\"line\":11}}};\n    \nimport React from \"react\";\n\nimport { Meta, Story } from \"@storybook/react\";\nimport Component, { PluginAccordionProps } from \".\";\n\nexport default {\n  title: \"molecules/Settings/Project/PluginAccordion\",\n  component: Component,\n} as Meta;\n\nexport const Default: Story<PluginAccordionProps> = args => <Component {...args} />;\n\nDefault.args = {\n  items: [\n    {\n      thumbnailUrl: `${process.env.PUBLIC_URL}/sample.svg`,\n      title: \"Sample\",\n      isInstalled: true,\n      bodyMarkdown: \"# Hoge ## Hoge\",\n      author: \"reearth\",\n      pluginId: \"id1\",\n    },\n    {\n      thumbnailUrl: `${process.env.PUBLIC_URL}/sample.svg`,\n      title: \"Sample2\",\n      isInstalled: false,\n      bodyMarkdown: \"# Fuga ## Fuga\",\n      author: \"reearth\",\n      pluginId: \"id2\",\n    },\n  ],\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport ProjectCell, { Project } from \\\".\\\";\\n\\nconst project: Project = {\\n  id: \\\"1\\\",\\n  name: \\\"vis1\\\",\\n  status: \\\"published\\\",\\n  description: \\\"vis1\\\",\\n};\\n\\nexport default {\\n  title: \\\"molecules/ProjectList/ProjectCell\\\",\\n  component: ProjectCell,\\n} as Meta;\\n\\nexport const Default = () => <ProjectCell project={project} />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":17},\"endLoc\":{\"col\":62,\"line\":17},\"startBody\":{\"col\":23,\"line\":17},\"endBody\":{\"col\":62,\"line\":17}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport ProjectCell, { Project } from \".\";\n\nconst project: Project = {\n  id: \"1\",\n  name: \"vis1\",\n  status: \"published\",\n  description: \"vis1\",\n};\n\nexport default {\n  title: \"molecules/ProjectList/ProjectCell\",\n  component: ProjectCell,\n} as Meta;\n\nexport const Default = () => <ProjectCell project={project} />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <ProjectCell project={project} />\" }, ...Default.parameters };","import React, { useEffect, useState } from \"react\";\nimport { useIntl } from \"react-intl\";\n\nimport { styled, useTheme } from \"@reearth/theme\";\nimport ProjectCell, {\n  Project as ProjectType,\n} from \"@reearth/components/molecules/Settings/ProjectList/ProjectCell\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Button from \"@reearth/components/atoms/Button\";\nimport Loading from \"@reearth/components/atoms/Loading\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport Flex from \"@reearth/components/atoms/Flex\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\n\nexport type Project = ProjectType;\n\nexport type Props = {\n  title?: string;\n  archived?: boolean;\n  projects?: Project[];\n  loading?: boolean;\n  onProjectSelect?: (project: Project) => void;\n  onCreationButtonClick?: () => void;\n};\n\nconst ProjectList: React.FC<Props> = ({\n  loading,\n  projects,\n  title,\n  archived,\n  onProjectSelect,\n  onCreationButtonClick,\n}) => {\n  const intl = useIntl();\n  const [open, setOpen] = useState(true);\n\n  useEffect(() => {\n    if (archived) {\n      setOpen(false);\n    }\n  }, [archived]);\n  const theme = useTheme();\n\n  return (\n    <>\n      {archived && (\n        <StyledFlex align=\"center\" onClick={() => setOpen(!open)}>\n          <StyledIcon icon=\"arrowToggle\" size={15} color={theme.main.text} />\n          <Text\n            size=\"m\"\n            weight=\"normal\"\n            color={theme.main.text}\n            otherProperties={{ margin: \"12px 0\" }}>\n            {`${intl.formatMessage({ defaultMessage: \"Archived Projects\" })} (${\n              projects?.length || 0\n            })`}\n          </Text>\n        </StyledFlex>\n      )}\n      {!archived && (\n        <StyledFlex justify=\"space-between\" align=\"center\">\n          <Text size=\"m\" weight=\"normal\" color={theme.main.text}>\n            {title ||\n              `${intl.formatMessage({ defaultMessage: \"Current Projects\" })} (${\n                projects?.length || 0\n              })`}\n          </Text>\n          <Button\n            large\n            buttonType=\"secondary\"\n            text={intl.formatMessage({ defaultMessage: \"New Project\" })}\n            onClick={onCreationButtonClick}\n          />\n        </StyledFlex>\n      )}\n      {loading ? (\n        <div>\n          <Loading />\n        </div>\n      ) : (\n        <>\n          {open && (\n            <ProjectListContainner>\n              {projects?.map(project => (\n                <ProjectCell project={project} key={project.id} onSelect={onProjectSelect} />\n              ))}\n            </ProjectListContainner>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nconst StyledIcon = styled(Icon)`\n  margin-right: 5px;\n`;\n\nconst ProjectListContainner = styled.div`\n  > * {\n    margin-bottom: ${metricsSizes[\"4xl\"]}px;\n  }\n`;\n\nconst StyledFlex = styled(Flex)`\n  border-bottom: solid 1px ${({ theme }) => theme.projectCell.divider};\n  cursor: pointer;\n`;\n\nexport default ProjectList;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport ProjectList, { Project } from \\\".\\\";\\n\\nconst visualizations: Project[] = [\\n  {\\n    id: \\\"1\\\",\\n    name: \\\"vis1\\\",\\n    status: \\\"published\\\",\\n    description: \\\"this is a visualization\\\",\\n  },\\n  {\\n    id: \\\"2\\\",\\n    name: \\\"vis2\\\",\\n    status: \\\"limited\\\",\\n    description: \\\"this is a visualization\\\",\\n  },\\n  {\\n    id: \\\"3\\\",\\n    name: \\\"vis3\\\",\\n    status: \\\"unpublished\\\",\\n    description: \\\"this is a visualization\\\",\\n  },\\n];\\n\\nexport default {\\n  title: \\\"molecules/Settings/ProjectList/ProjectList\\\",\\n  component: ProjectList,\\n} as Meta;\\n\\nexport const Default = () => <ProjectList projects={visualizations} />;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":31},\"endLoc\":{\"col\":70,\"line\":31},\"startBody\":{\"col\":23,\"line\":31},\"endBody\":{\"col\":70,\"line\":31}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport ProjectList, { Project } from \".\";\n\nconst visualizations: Project[] = [\n  {\n    id: \"1\",\n    name: \"vis1\",\n    status: \"published\",\n    description: \"this is a visualization\",\n  },\n  {\n    id: \"2\",\n    name: \"vis2\",\n    status: \"limited\",\n    description: \"this is a visualization\",\n  },\n  {\n    id: \"3\",\n    name: \"vis3\",\n    status: \"unpublished\",\n    description: \"this is a visualization\",\n  },\n];\n\nexport default {\n  title: \"molecules/Settings/ProjectList/ProjectList\",\n  component: ProjectList,\n} as Meta;\n\nexport const Default = () => <ProjectList projects={visualizations} />;\n\n\n\nDefault.parameters = { storySource: { source: \"() => <ProjectList projects={visualizations} />\" }, ...Default.parameters };","import React, { useMemo } from \"react\";\n\nimport { styled } from \"@reearth/theme\";\nimport Select, { Props as SelectProps } from \"@reearth/components/atoms/Select\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Option from \"@reearth/components/atoms/SelectOption\";\nimport Text from \"@reearth/components/atoms/Text\";\n\ninterface SelectFieldProps {\n  variant?: \"filled\" | \"standard\";\n  value?: string;\n  items?: { key: string; label: string; icon?: string }[];\n  onChange?: (value: string) => void;\n  fullWidth?: boolean;\n}\n\n// TODO: 汎用化させて molecules/property/SelectField の元にする\nconst SelectField: React.FC<SelectFieldProps> = ({\n  value: selectedKey,\n  items = [],\n  onChange,\n  fullWidth,\n}) => {\n  const hasIcon = useMemo(() => items.some(({ icon }) => icon), [items]);\n\n  return (\n    <StyledSelect value={selectedKey} onChange={onChange} fullWidth={fullWidth}>\n      {items.map(({ key, label, icon }) => (\n        <Option key={key} value={key} label={label}>\n          <OptionCheck size=\"xs\">\n            {key === selectedKey && <Icon icon=\"check\" size={14} />}\n          </OptionCheck>\n          {hasIcon && <OptionIcon size=\"xs\">{icon && <Icon icon={icon} size={14} />}</OptionIcon>}\n          {label}\n        </Option>\n      ))}\n    </StyledSelect>\n  );\n};\n\nconst StyledSelect = styled(Select as React.ComponentType<SelectProps<string>>)``;\n\nconst OptionCheck = styled(Text)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 20px;\n  margin-right: 6px;\n`;\n\nconst OptionIcon = styled(Text)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 20px;\n  margin-right: 6px;\n`;\n\nexport default SelectField;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta } from \\\"@storybook/react\\\";\\nimport { action } from \\\"@storybook/addon-actions\\\";\\nimport SelectField from \\\".\\\";\\n\\nconst linkIcon =\\n  \\\"data:image/svg+xml,%3Csvg stroke='white' fill='white' stroke-width='0' viewBox='0 0 512 512' height='11px' width='11px' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z'%3E%3C/path%3E%3C/svg%3E\\\";\\n\\nconst items: { key: string; label: string; icon?: string }[] = [\\n  { key: \\\"0\\\", label: \\\"120\\\" },\\n  { key: \\\"1\\\", label: \\\"2000\\\" },\\n];\\n\\nconst itemsWithIcon = items.map(({ key, label, icon }) =>\\n  key === \\\"1\\\" ? { key, label, icon: linkIcon } : { key, label, icon },\\n);\\n\\nexport default {\\n  title: \\\"molecules/Settings/Workspace/SelectField\\\",\\n  component: SelectField,\\n} as Meta;\\n\\nexport const Default = () => <SelectField value=\\\"0\\\" items={items} onChange={action(\\\"onchange\\\")} />;\\nexport const WithIcon = () => (\\n  <SelectField value=\\\"0\\\" items={itemsWithIcon} onChange={action(\\\"onchange\\\")} />\\n);\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":23},\"endLoc\":{\"col\":98,\"line\":23},\"startBody\":{\"col\":23,\"line\":23},\"endBody\":{\"col\":98,\"line\":23}},\"WithIcon\":{\"startLoc\":{\"col\":24,\"line\":24},\"endLoc\":{\"col\":1,\"line\":26},\"startBody\":{\"col\":24,\"line\":24},\"endBody\":{\"col\":1,\"line\":26}}};\n    \nimport React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { action } from \"@storybook/addon-actions\";\nimport SelectField from \".\";\n\nconst linkIcon =\n  \"data:image/svg+xml,%3Csvg stroke='white' fill='white' stroke-width='0' viewBox='0 0 512 512' height='11px' width='11px' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z'%3E%3C/path%3E%3C/svg%3E\";\n\nconst items: { key: string; label: string; icon?: string }[] = [\n  { key: \"0\", label: \"120\" },\n  { key: \"1\", label: \"2000\" },\n];\n\nconst itemsWithIcon = items.map(({ key, label, icon }) =>\n  key === \"1\" ? { key, label, icon: linkIcon } : { key, label, icon },\n);\n\nexport default {\n  title: \"molecules/Settings/Workspace/SelectField\",\n  component: SelectField,\n} as Meta;\n\nexport const Default = () => <SelectField value=\"0\" items={items} onChange={action(\"onchange\")} />;;\nexport const WithIcon = () => (\n  <SelectField value=\"0\" items={itemsWithIcon} onChange={action(\"onchange\")} />\n);\n\n\n\nDefault.parameters = { storySource: { source: \"() => <SelectField value=\\\"0\\\" items={items} onChange={action(\\\"onchange\\\")} />\" }, ...Default.parameters };\nWithIcon.parameters = { storySource: { source: \"() => (\\n  <SelectField value=\\\"0\\\" items={itemsWithIcon} onChange={action(\\\"onchange\\\")} />\\n)\" }, ...WithIcon.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport DataList, { Item, Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Block/DataList\\\",\\n  component: DataList,\\n  argTypes: {\\n    onClick: { action: \\\"onClick\\\" },\\n    onChange: { action: \\\"onChange\\\" },\\n  },\\n} as Meta;\\n\\nconst items: Item[] = [\\n  { id: \\\"a\\\", item_title: \\\"Name\\\", item_datastr: \\\"Foo bar\\\", item_datatype: \\\"string\\\" },\\n  { id: \\\"b\\\", item_title: \\\"Age\\\", item_datanum: 20, item_datatype: \\\"number\\\" },\\n  { id: \\\"c\\\", item_title: \\\"Address\\\", item_datastr: \\\"New York\\\", item_datatype: \\\"string\\\" },\\n];\\n\\nconst Template: Story<Props> = args => <DataList {...args} />;\\n\\nexport const Default = Template.bind({});\\nDefault.args = {\\n  block: { id: \\\"\\\", property: { items } },\\n};\\n\\nexport const Title = Template.bind({});\\nTitle.args = {\\n  block: { id: \\\"\\\", property: { default: { title: \\\"Title\\\" }, items } },\\n};\\n\\nexport const Typography: Story<Props> = Template.bind({});\\nTypography.args = {\\n  block: {\\n    id: \\\"\\\",\\n    property: {\\n      default: { typography: { color: \\\"red\\\", fontSize: 16 } },\\n      items,\\n    },\\n  },\\n};\\n\\nexport const NoItems: Story<Props> = Template.bind({});\\nNoItems.args = { isEditable: true };\\n\\nexport const Selected: Story<Props> = Template.bind({});\\nSelected.args = { block: { id: \\\"\\\", property: { items } }, isSelected: true };\\n\\nexport const Editable: Story<Props> = Template.bind({});\\nEditable.args = {\\n  block: { id: \\\"\\\", property: { items } },\\n  isSelected: true,\\n  isEditable: true,\\n};\\n\\nexport const Built: Story<Props> = Template.bind({});\\nBuilt.args = {\\n  block: { id: \\\"\\\", property: { items } },\\n  isBuilt: true,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":31,\"line\":20},\"endLoc\":{\"col\":61,\"line\":20},\"startBody\":{\"col\":31,\"line\":20},\"endBody\":{\"col\":61,\"line\":20}},\"Title\":{\"startLoc\":{\"col\":31,\"line\":20},\"endLoc\":{\"col\":61,\"line\":20},\"startBody\":{\"col\":31,\"line\":20},\"endBody\":{\"col\":61,\"line\":20}},\"Typography\":{\"startLoc\":{\"col\":31,\"line\":20},\"endLoc\":{\"col\":61,\"line\":20},\"startBody\":{\"col\":31,\"line\":20},\"endBody\":{\"col\":61,\"line\":20}},\"NoItems\":{\"startLoc\":{\"col\":31,\"line\":20},\"endLoc\":{\"col\":61,\"line\":20},\"startBody\":{\"col\":31,\"line\":20},\"endBody\":{\"col\":61,\"line\":20}},\"Selected\":{\"startLoc\":{\"col\":31,\"line\":20},\"endLoc\":{\"col\":61,\"line\":20},\"startBody\":{\"col\":31,\"line\":20},\"endBody\":{\"col\":61,\"line\":20}},\"Editable\":{\"startLoc\":{\"col\":31,\"line\":20},\"endLoc\":{\"col\":61,\"line\":20},\"startBody\":{\"col\":31,\"line\":20},\"endBody\":{\"col\":61,\"line\":20}},\"Built\":{\"startLoc\":{\"col\":31,\"line\":20},\"endLoc\":{\"col\":61,\"line\":20},\"startBody\":{\"col\":31,\"line\":20},\"endBody\":{\"col\":61,\"line\":20}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport DataList, { Item, Props } from \".\";\n\nexport default {\n  title: \"molecules/Visualizer/Block/DataList\",\n  component: DataList,\n  argTypes: {\n    onClick: { action: \"onClick\" },\n    onChange: { action: \"onChange\" },\n  },\n} as Meta;\n\nconst items: Item[] = [\n  { id: \"a\", item_title: \"Name\", item_datastr: \"Foo bar\", item_datatype: \"string\" },\n  { id: \"b\", item_title: \"Age\", item_datanum: 20, item_datatype: \"number\" },\n  { id: \"c\", item_title: \"Address\", item_datastr: \"New York\", item_datatype: \"string\" },\n];\n\nconst Template: Story<Props> = args => <DataList {...args} />;\n\nexport const Default = Template.bind({});;\nDefault.args = {\n  block: { id: \"\", property: { items } },\n};\n\nexport const Title = Template.bind({});;\nTitle.args = {\n  block: { id: \"\", property: { default: { title: \"Title\" }, items } },\n};\n\nexport const Typography: Story<Props> = Template.bind({});;\nTypography.args = {\n  block: {\n    id: \"\",\n    property: {\n      default: { typography: { color: \"red\", fontSize: 16 } },\n      items,\n    },\n  },\n};\n\nexport const NoItems: Story<Props> = Template.bind({});;\nNoItems.args = { isEditable: true };\n\nexport const Selected: Story<Props> = Template.bind({});;\nSelected.args = { block: { id: \"\", property: { items } }, isSelected: true };\n\nexport const Editable: Story<Props> = Template.bind({});;\nEditable.args = {\n  block: { id: \"\", property: { items } },\n  isSelected: true,\n  isEditable: true,\n};\n\nexport const Built: Story<Props> = Template.bind({});\nBuilt.args = {\n  block: { id: \"\", property: { items } },\n  isBuilt: true,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <DataList {...args} />\" }, ...Default.parameters };\nTitle.parameters = { storySource: { source: \"args => <DataList {...args} />\" }, ...Title.parameters };\nTypography.parameters = { storySource: { source: \"args => <DataList {...args} />\" }, ...Typography.parameters };\nNoItems.parameters = { storySource: { source: \"args => <DataList {...args} />\" }, ...NoItems.parameters };\nSelected.parameters = { storySource: { source: \"args => <DataList {...args} />\" }, ...Selected.parameters };\nEditable.parameters = { storySource: { source: \"args => <DataList {...args} />\" }, ...Editable.parameters };\nBuilt.parameters = { storySource: { source: \"args => <DataList {...args} />\" }, ...Built.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport Image, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Block/Image\\\",\\n  component: Image,\\n  argTypes: {\\n    onClick: { action: \\\"onClick\\\" },\\n    onChange: { action: \\\"onChange\\\" },\\n  },\\n} as Meta;\\n\\nconst Template: Story<Props> = args => (\\n  <div style={{ background: \\\"#fff\\\" }}>\\n    <Image {...args} />\\n  </div>\\n);\\n\\nexport const Default = Template.bind({});\\nDefault.args = {\\n  block: { id: \\\"\\\", property: { default: { image: `${process.env.PUBLIC_URL}/sample.svg` } } },\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: false,\\n};\\n\\nexport const NoImage = Template.bind({});\\nNoImage.args = {\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: true,\\n};\\n\\nexport const Title = Template.bind({});\\nTitle.args = {\\n  block: {\\n    id: \\\"\\\",\\n    property: { default: { image: `${process.env.PUBLIC_URL}/sample.svg`, title: \\\"Title\\\" } },\\n  },\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: false,\\n};\\n\\nexport const FullSize = Template.bind({});\\nFullSize.args = {\\n  block: {\\n    id: \\\"\\\",\\n    property: { default: { image: `${process.env.PUBLIC_URL}/sample.svg`, fullSize: true } },\\n  },\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: false,\\n};\\n\\nexport const Cover = Template.bind({});\\nCover.args = {\\n  block: {\\n    id: \\\"\\\",\\n    property: {\\n      default: {\\n        image: `${process.env.PUBLIC_URL}/sample.svg`,\\n        imageSize: \\\"cover\\\",\\n        title: \\\"Title\\\",\\n      },\\n    },\\n  },\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: false,\\n};\\n\\nexport const Contain = Template.bind({});\\nContain.args = {\\n  block: {\\n    id: \\\"\\\",\\n    property: {\\n      default: {\\n        image: `${process.env.PUBLIC_URL}/sample.svg`,\\n        imageSize: \\\"contain\\\",\\n        title: \\\"Title\\\",\\n      },\\n    },\\n  },\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: false,\\n};\\n\\nexport const Position = Template.bind({});\\nPosition.args = {\\n  block: {\\n    id: \\\"\\\",\\n    property: {\\n      default: {\\n        image: `${process.env.PUBLIC_URL}/sample.svg`,\\n        imageSize: \\\"cover\\\",\\n        title: \\\"Title\\\",\\n        imagePositionX: \\\"left\\\",\\n        imagePositionY: \\\"top\\\",\\n      },\\n    },\\n  },\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: false,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":31,\"line\":14},\"endLoc\":{\"col\":1,\"line\":18},\"startBody\":{\"col\":31,\"line\":14},\"endBody\":{\"col\":1,\"line\":18}},\"NoImage\":{\"startLoc\":{\"col\":31,\"line\":14},\"endLoc\":{\"col\":1,\"line\":18},\"startBody\":{\"col\":31,\"line\":14},\"endBody\":{\"col\":1,\"line\":18}},\"Title\":{\"startLoc\":{\"col\":31,\"line\":14},\"endLoc\":{\"col\":1,\"line\":18},\"startBody\":{\"col\":31,\"line\":14},\"endBody\":{\"col\":1,\"line\":18}},\"FullSize\":{\"startLoc\":{\"col\":31,\"line\":14},\"endLoc\":{\"col\":1,\"line\":18},\"startBody\":{\"col\":31,\"line\":14},\"endBody\":{\"col\":1,\"line\":18}},\"Cover\":{\"startLoc\":{\"col\":31,\"line\":14},\"endLoc\":{\"col\":1,\"line\":18},\"startBody\":{\"col\":31,\"line\":14},\"endBody\":{\"col\":1,\"line\":18}},\"Contain\":{\"startLoc\":{\"col\":31,\"line\":14},\"endLoc\":{\"col\":1,\"line\":18},\"startBody\":{\"col\":31,\"line\":14},\"endBody\":{\"col\":1,\"line\":18}},\"Position\":{\"startLoc\":{\"col\":31,\"line\":14},\"endLoc\":{\"col\":1,\"line\":18},\"startBody\":{\"col\":31,\"line\":14},\"endBody\":{\"col\":1,\"line\":18}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport Image, { Props } from \".\";\n\nexport default {\n  title: \"molecules/Visualizer/Block/Image\",\n  component: Image,\n  argTypes: {\n    onClick: { action: \"onClick\" },\n    onChange: { action: \"onChange\" },\n  },\n} as Meta;\n\nconst Template: Story<Props> = args => (\n  <div style={{ background: \"#fff\" }}>\n    <Image {...args} />\n  </div>\n);\n\nexport const Default = Template.bind({});;\nDefault.args = {\n  block: { id: \"\", property: { default: { image: `${process.env.PUBLIC_URL}/sample.svg` } } },\n  isSelected: false,\n  isBuilt: false,\n  isEditable: false,\n};\n\nexport const NoImage = Template.bind({});;\nNoImage.args = {\n  isSelected: false,\n  isBuilt: false,\n  isEditable: true,\n};\n\nexport const Title = Template.bind({});;\nTitle.args = {\n  block: {\n    id: \"\",\n    property: { default: { image: `${process.env.PUBLIC_URL}/sample.svg`, title: \"Title\" } },\n  },\n  isSelected: false,\n  isBuilt: false,\n  isEditable: false,\n};\n\nexport const FullSize = Template.bind({});;\nFullSize.args = {\n  block: {\n    id: \"\",\n    property: { default: { image: `${process.env.PUBLIC_URL}/sample.svg`, fullSize: true } },\n  },\n  isSelected: false,\n  isBuilt: false,\n  isEditable: false,\n};\n\nexport const Cover = Template.bind({});;\nCover.args = {\n  block: {\n    id: \"\",\n    property: {\n      default: {\n        image: `${process.env.PUBLIC_URL}/sample.svg`,\n        imageSize: \"cover\",\n        title: \"Title\",\n      },\n    },\n  },\n  isSelected: false,\n  isBuilt: false,\n  isEditable: false,\n};\n\nexport const Contain = Template.bind({});;\nContain.args = {\n  block: {\n    id: \"\",\n    property: {\n      default: {\n        image: `${process.env.PUBLIC_URL}/sample.svg`,\n        imageSize: \"contain\",\n        title: \"Title\",\n      },\n    },\n  },\n  isSelected: false,\n  isBuilt: false,\n  isEditable: false,\n};\n\nexport const Position = Template.bind({});\nPosition.args = {\n  block: {\n    id: \"\",\n    property: {\n      default: {\n        image: `${process.env.PUBLIC_URL}/sample.svg`,\n        imageSize: \"cover\",\n        title: \"Title\",\n        imagePositionX: \"left\",\n        imagePositionY: \"top\",\n      },\n    },\n  },\n  isSelected: false,\n  isBuilt: false,\n  isEditable: false,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => (\\n  <div style={{ background: \\\"#fff\\\" }}>\\n    <Image {...args} />\\n  </div>\\n)\" }, ...Default.parameters };\nNoImage.parameters = { storySource: { source: \"args => (\\n  <div style={{ background: \\\"#fff\\\" }}>\\n    <Image {...args} />\\n  </div>\\n)\" }, ...NoImage.parameters };\nTitle.parameters = { storySource: { source: \"args => (\\n  <div style={{ background: \\\"#fff\\\" }}>\\n    <Image {...args} />\\n  </div>\\n)\" }, ...Title.parameters };\nFullSize.parameters = { storySource: { source: \"args => (\\n  <div style={{ background: \\\"#fff\\\" }}>\\n    <Image {...args} />\\n  </div>\\n)\" }, ...FullSize.parameters };\nCover.parameters = { storySource: { source: \"args => (\\n  <div style={{ background: \\\"#fff\\\" }}>\\n    <Image {...args} />\\n  </div>\\n)\" }, ...Cover.parameters };\nContain.parameters = { storySource: { source: \"args => (\\n  <div style={{ background: \\\"#fff\\\" }}>\\n    <Image {...args} />\\n  </div>\\n)\" }, ...Contain.parameters };\nPosition.parameters = { storySource: { source: \"args => (\\n  <div style={{ background: \\\"#fff\\\" }}>\\n    <Image {...args} />\\n  </div>\\n)\" }, ...Position.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport Location, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Block/Location\\\",\\n  component: Location,\\n  argTypes: {\\n    onClick: { action: \\\"onClick\\\" },\\n    onChange: { action: \\\"onChange\\\" },\\n  },\\n} as Meta;\\n\\nconst Template: Story<Props> = args => <Location {...args} />;\\n\\nexport const Default = Template.bind({});\\nDefault.args = {\\n  block: { id: \\\"\\\", property: { default: { location: { lat: 0, lng: 0 } } } },\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: false,\\n};\\n\\nexport const Title = Template.bind({});\\nTitle.args = {\\n  block: { id: \\\"\\\", property: { default: { location: { lat: 0, lng: 0 }, title: \\\"Location\\\" } } },\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: false,\\n};\\n\\nexport const NoLocation = Template.bind({});\\nNoLocation.args = {\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: true,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":31,\"line\":14},\"endLoc\":{\"col\":61,\"line\":14},\"startBody\":{\"col\":31,\"line\":14},\"endBody\":{\"col\":61,\"line\":14}},\"Title\":{\"startLoc\":{\"col\":31,\"line\":14},\"endLoc\":{\"col\":61,\"line\":14},\"startBody\":{\"col\":31,\"line\":14},\"endBody\":{\"col\":61,\"line\":14}},\"NoLocation\":{\"startLoc\":{\"col\":31,\"line\":14},\"endLoc\":{\"col\":61,\"line\":14},\"startBody\":{\"col\":31,\"line\":14},\"endBody\":{\"col\":61,\"line\":14}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport Location, { Props } from \".\";\n\nexport default {\n  title: \"molecules/Visualizer/Block/Location\",\n  component: Location,\n  argTypes: {\n    onClick: { action: \"onClick\" },\n    onChange: { action: \"onChange\" },\n  },\n} as Meta;\n\nconst Template: Story<Props> = args => <Location {...args} />;\n\nexport const Default = Template.bind({});;\nDefault.args = {\n  block: { id: \"\", property: { default: { location: { lat: 0, lng: 0 } } } },\n  isSelected: false,\n  isBuilt: false,\n  isEditable: false,\n};\n\nexport const Title = Template.bind({});;\nTitle.args = {\n  block: { id: \"\", property: { default: { location: { lat: 0, lng: 0 }, title: \"Location\" } } },\n  isSelected: false,\n  isBuilt: false,\n  isEditable: false,\n};\n\nexport const NoLocation = Template.bind({});\nNoLocation.args = {\n  isSelected: false,\n  isBuilt: false,\n  isEditable: true,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Location {...args} />\" }, ...Default.parameters };\nTitle.parameters = { storySource: { source: \"args => <Location {...args} />\" }, ...Title.parameters };\nNoLocation.parameters = { storySource: { source: \"args => <Location {...args} />\" }, ...NoLocation.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport Text, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Block/Text\\\",\\n  component: Text,\\n  argTypes: {\\n    onClick: { action: \\\"onClick\\\" },\\n    onChange: { action: \\\"onChange\\\" },\\n  },\\n} as Meta;\\n\\nconst markdownText = `\\n# Hello\\nThis is **markdown**.\\n## H2\\n### H3\\n#### H4\\n##### H5\\n`;\\n\\nconst Template: Story<Props> = args => <Text {...args} />;\\n\\nexport const Default = Template.bind({});\\nDefault.args = {\\n  block: { id: \\\"\\\", property: { default: { text: \\\"aaaaaa\\\" } } },\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: false,\\n};\\n\\nexport const Title = Template.bind({});\\nTitle.args = {\\n  block: { id: \\\"\\\", property: { default: { text: \\\"aaaaaa\\\", title: \\\"Title\\\" } } },\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: false,\\n};\\n\\nexport const Markdown = Template.bind({});\\nMarkdown.args = {\\n  block: { id: \\\"\\\", property: { default: { text: markdownText, markdown: true } } },\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: false,\\n};\\n\\nexport const Typography = Template.bind({});\\nTypography.args = {\\n  block: {\\n    id: \\\"\\\",\\n    property: {\\n      default: { text: markdownText, markdown: true, typography: { color: \\\"red\\\", fontSize: 16 } },\\n    },\\n  },\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: false,\\n};\\n\\nexport const NoText = Template.bind({});\\nNoText.args = {\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: true,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":31,\"line\":23},\"endLoc\":{\"col\":57,\"line\":23},\"startBody\":{\"col\":31,\"line\":23},\"endBody\":{\"col\":57,\"line\":23}},\"Title\":{\"startLoc\":{\"col\":31,\"line\":23},\"endLoc\":{\"col\":57,\"line\":23},\"startBody\":{\"col\":31,\"line\":23},\"endBody\":{\"col\":57,\"line\":23}},\"Markdown\":{\"startLoc\":{\"col\":31,\"line\":23},\"endLoc\":{\"col\":57,\"line\":23},\"startBody\":{\"col\":31,\"line\":23},\"endBody\":{\"col\":57,\"line\":23}},\"Typography\":{\"startLoc\":{\"col\":31,\"line\":23},\"endLoc\":{\"col\":57,\"line\":23},\"startBody\":{\"col\":31,\"line\":23},\"endBody\":{\"col\":57,\"line\":23}},\"NoText\":{\"startLoc\":{\"col\":31,\"line\":23},\"endLoc\":{\"col\":57,\"line\":23},\"startBody\":{\"col\":31,\"line\":23},\"endBody\":{\"col\":57,\"line\":23}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport Text, { Props } from \".\";\n\nexport default {\n  title: \"molecules/Visualizer/Block/Text\",\n  component: Text,\n  argTypes: {\n    onClick: { action: \"onClick\" },\n    onChange: { action: \"onChange\" },\n  },\n} as Meta;\n\nconst markdownText = `\n# Hello\nThis is **markdown**.\n## H2\n### H3\n#### H4\n##### H5\n`;\n\nconst Template: Story<Props> = args => <Text {...args} />;\n\nexport const Default = Template.bind({});;\nDefault.args = {\n  block: { id: \"\", property: { default: { text: \"aaaaaa\" } } },\n  isSelected: false,\n  isBuilt: false,\n  isEditable: false,\n};\n\nexport const Title = Template.bind({});;\nTitle.args = {\n  block: { id: \"\", property: { default: { text: \"aaaaaa\", title: \"Title\" } } },\n  isSelected: false,\n  isBuilt: false,\n  isEditable: false,\n};\n\nexport const Markdown = Template.bind({});;\nMarkdown.args = {\n  block: { id: \"\", property: { default: { text: markdownText, markdown: true } } },\n  isSelected: false,\n  isBuilt: false,\n  isEditable: false,\n};\n\nexport const Typography = Template.bind({});;\nTypography.args = {\n  block: {\n    id: \"\",\n    property: {\n      default: { text: markdownText, markdown: true, typography: { color: \"red\", fontSize: 16 } },\n    },\n  },\n  isSelected: false,\n  isBuilt: false,\n  isEditable: false,\n};\n\nexport const NoText = Template.bind({});\nNoText.args = {\n  isSelected: false,\n  isBuilt: false,\n  isEditable: true,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Text {...args} />\" }, ...Default.parameters };\nTitle.parameters = { storySource: { source: \"args => <Text {...args} />\" }, ...Title.parameters };\nMarkdown.parameters = { storySource: { source: \"args => <Text {...args} />\" }, ...Markdown.parameters };\nTypography.parameters = { storySource: { source: \"args => <Text {...args} />\" }, ...Typography.parameters };\nNoText.parameters = { storySource: { source: \"args => <Text {...args} />\" }, ...NoText.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport Video, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Block/Video\\\",\\n  component: Video,\\n  argTypes: {\\n    onClick: { action: \\\"onClick\\\" },\\n    onChange: { action: \\\"onChange\\\" },\\n  },\\n} as Meta;\\n\\nconst Template: Story<Props> = args => <Video {...args} />;\\n\\nexport const Default = Template.bind({});\\nDefault.args = {\\n  block: { id: \\\"\\\", property: { default: { url: \\\"https://www.youtube.com/watch?v=oUFJJNQGwhk\\\" } } },\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: false,\\n};\\n\\nexport const Title = Template.bind({});\\nTitle.args = {\\n  block: {\\n    id: \\\"\\\",\\n    property: { default: { url: \\\"https://www.youtube.com/watch?v=oUFJJNQGwhk\\\", title: \\\"Video\\\" } },\\n  },\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: false,\\n};\\n\\nexport const NoVideo = Template.bind({});\\nNoVideo.args = {\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: true,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":31,\"line\":14},\"endLoc\":{\"col\":58,\"line\":14},\"startBody\":{\"col\":31,\"line\":14},\"endBody\":{\"col\":58,\"line\":14}},\"Title\":{\"startLoc\":{\"col\":31,\"line\":14},\"endLoc\":{\"col\":58,\"line\":14},\"startBody\":{\"col\":31,\"line\":14},\"endBody\":{\"col\":58,\"line\":14}},\"NoVideo\":{\"startLoc\":{\"col\":31,\"line\":14},\"endLoc\":{\"col\":58,\"line\":14},\"startBody\":{\"col\":31,\"line\":14},\"endBody\":{\"col\":58,\"line\":14}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport Video, { Props } from \".\";\n\nexport default {\n  title: \"molecules/Visualizer/Block/Video\",\n  component: Video,\n  argTypes: {\n    onClick: { action: \"onClick\" },\n    onChange: { action: \"onChange\" },\n  },\n} as Meta;\n\nconst Template: Story<Props> = args => <Video {...args} />;\n\nexport const Default = Template.bind({});;\nDefault.args = {\n  block: { id: \"\", property: { default: { url: \"https://www.youtube.com/watch?v=oUFJJNQGwhk\" } } },\n  isSelected: false,\n  isBuilt: false,\n  isEditable: false,\n};\n\nexport const Title = Template.bind({});;\nTitle.args = {\n  block: {\n    id: \"\",\n    property: { default: { url: \"https://www.youtube.com/watch?v=oUFJJNQGwhk\", title: \"Video\" } },\n  },\n  isSelected: false,\n  isBuilt: false,\n  isEditable: false,\n};\n\nexport const NoVideo = Template.bind({});\nNoVideo.args = {\n  isSelected: false,\n  isBuilt: false,\n  isEditable: true,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Video {...args} />\" }, ...Default.parameters };\nTitle.parameters = { storySource: { source: \"args => <Video {...args} />\" }, ...Title.parameters };\nNoVideo.parameters = { storySource: { source: \"args => <Video {...args} />\" }, ...NoVideo.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\n\\nimport Component, { Props } from \\\".\\\";\\nimport { Provider } from \\\"../context\\\";\\nimport { context } from \\\"../storybook\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Block\\\",\\n  component: Component,\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => <Component {...args} />;\\nDefault.args = {\\n  block: {\\n    id: \\\"\\\",\\n    pluginId: \\\"reearth\\\",\\n    extensionId: \\\"textblock\\\",\\n    property: { default: { text: \\\"hogehoge\\\" } },\\n  },\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: false,\\n};\\n\\nexport const Plugin: Story<Props> = args => (\\n  <Provider value={context}>\\n    <div style={{ background: \\\"#fff\\\" }}>\\n      <Component {...args} />\\n    </div>\\n  </Provider>\\n);\\nPlugin.args = {\\n  block: {\\n    id: \\\"\\\",\\n    pluginId: \\\"plugins\\\",\\n    extensionId: \\\"block\\\",\\n    property: {\\n      location: { lat: 0, lng: 100 },\\n    },\\n  },\\n  isSelected: false,\\n  isBuilt: false,\\n  isEditable: false,\\n  pluginBaseUrl: process.env.PUBLIC_URL,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":14},\"endLoc\":{\"col\":68,\"line\":14},\"startBody\":{\"col\":37,\"line\":14},\"endBody\":{\"col\":68,\"line\":14}},\"Plugin\":{\"startLoc\":{\"col\":36,\"line\":27},\"endLoc\":{\"col\":1,\"line\":33},\"startBody\":{\"col\":36,\"line\":27},\"endBody\":{\"col\":1,\"line\":33}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\n\nimport Component, { Props } from \".\";\nimport { Provider } from \"../context\";\nimport { context } from \"../storybook\";\n\nexport default {\n  title: \"molecules/Visualizer/Block\",\n  component: Component,\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nexport const Default: Story<Props> = args => <Component {...args} />;;\nDefault.args = {\n  block: {\n    id: \"\",\n    pluginId: \"reearth\",\n    extensionId: \"textblock\",\n    property: { default: { text: \"hogehoge\" } },\n  },\n  isSelected: false,\n  isBuilt: false,\n  isEditable: false,\n};\n\nexport const Plugin: Story<Props> = args => (\n  <Provider value={context}>\n    <div style={{ background: \"#fff\" }}>\n      <Component {...args} />\n    </div>\n  </Provider>\n);\nPlugin.args = {\n  block: {\n    id: \"\",\n    pluginId: \"plugins\",\n    extensionId: \"block\",\n    property: {\n      location: { lat: 0, lng: 100 },\n    },\n  },\n  isSelected: false,\n  isBuilt: false,\n  isEditable: false,\n  pluginBaseUrl: process.env.PUBLIC_URL,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Default.parameters };\nPlugin.parameters = { storySource: { source: \"args => (\\n  <Provider value={context}>\\n    <div style={{ background: \\\"#fff\\\" }}>\\n      <Component {...args} />\\n    </div>\\n  </Provider>\\n)\" }, ...Plugin.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\n\\nimport Ellipsoid, { Props } from \\\".\\\";\\nimport { V, location } from \\\"../storybook\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Engine/Cesium/Ellipsoid\\\",\\n  component: Ellipsoid,\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => (\\n  <V location={location}>\\n    <Ellipsoid {...args} />\\n  </V>\\n);\\n\\nDefault.args = {\\n  primitive: {\\n    id: \\\"\\\",\\n    property: {\\n      default: {\\n        radius: 1000,\\n        fillColor: \\\"#f00a\\\",\\n        position: location,\\n        height: location.height,\\n      },\\n    },\\n    isVisible: true,\\n  },\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":12},\"endLoc\":{\"col\":1,\"line\":16},\"startBody\":{\"col\":37,\"line\":12},\"endBody\":{\"col\":1,\"line\":16}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\n\nimport Ellipsoid, { Props } from \".\";\nimport { V, location } from \"../storybook\";\n\nexport default {\n  title: \"molecules/Visualizer/Engine/Cesium/Ellipsoid\",\n  component: Ellipsoid,\n} as Meta;\n\nexport const Default: Story<Props> = args => (\n  <V location={location}>\n    <Ellipsoid {...args} />\n  </V>\n);\n\nDefault.args = {\n  primitive: {\n    id: \"\",\n    property: {\n      default: {\n        radius: 1000,\n        fillColor: \"#f00a\",\n        position: location,\n        height: location.height,\n      },\n    },\n    isVisible: true,\n  },\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => (\\n  <V location={location}>\\n    <Ellipsoid {...args} />\\n  </V>\\n)\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\n\\nimport Marker, { Props } from \\\".\\\";\\nimport { V, location } from \\\"../storybook\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Engine/Cesium/Marker\\\",\\n  component: Marker,\\n} as Meta;\\n\\nconst Template: Story<Props> = args => (\\n  <V>\\n    <Marker {...args} />\\n  </V>\\n);\\n\\nexport const Point = Template.bind({});\\nPoint.args = {\\n  ...Template.args,\\n  primitive: {\\n    id: \\\"\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        location,\\n        height: location.height,\\n        style: \\\"point\\\",\\n        pointColor: \\\"blue\\\",\\n        pointSize: 50,\\n      },\\n    },\\n  },\\n};\\n\\nexport const PointWithLabelAndExcluded = Template.bind({});\\nPointWithLabelAndExcluded.args = {\\n  ...Template.args,\\n  primitive: {\\n    id: \\\"\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        location,\\n        height: location.height,\\n        style: \\\"point\\\",\\n        pointColor: \\\"blue\\\",\\n        pointSize: 50,\\n        extrude: true,\\n        label: true,\\n        labelText: \\\"label\\\",\\n      },\\n    },\\n  },\\n};\\n\\nexport const PointWithRightLabel = Template.bind({});\\nPointWithRightLabel.args = {\\n  ...Template.args,\\n  primitive: {\\n    id: \\\"\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        location,\\n        height: location.height,\\n        style: \\\"point\\\",\\n        label: true,\\n        labelText: \\\"label\\\",\\n        labelPosition: \\\"left\\\",\\n        labelTypography: {\\n          fontSize: 15,\\n          color: \\\"red\\\",\\n          bold: true,\\n          italic: true,\\n          fontFamily: \\\"serif\\\",\\n        },\\n      },\\n    },\\n  },\\n};\\n\\nexport const PointWithTopLabel = Template.bind({});\\nPointWithTopLabel.args = {\\n  ...Template.args,\\n  primitive: {\\n    id: \\\"\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        location,\\n        height: location.height,\\n        style: \\\"point\\\",\\n        label: true,\\n        labelText: \\\"label\\\",\\n        labelPosition: \\\"top\\\",\\n        labelTypography: {\\n          fontFamily: \\\"serif\\\",\\n        },\\n      },\\n    },\\n  },\\n};\\n\\nexport const PointWithBottomLabel = Template.bind({});\\nPointWithBottomLabel.args = {\\n  ...Template.args,\\n  primitive: {\\n    id: \\\"\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        location,\\n        height: location.height,\\n        style: \\\"point\\\",\\n        label: true,\\n        labelText: \\\"label\\\",\\n        labelPosition: \\\"bottom\\\",\\n      },\\n    },\\n  },\\n};\\n\\nexport const Image = Template.bind({});\\nImage.args = {\\n  ...Template.args,\\n  primitive: {\\n    id: \\\"\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        location,\\n        height: location.height,\\n        style: \\\"image\\\",\\n        image: `${process.env.PUBLIC_URL}/sample.svg`,\\n      },\\n    },\\n  },\\n};\\n\\nexport const ImageWithShadow = Template.bind({});\\nImageWithShadow.args = {\\n  ...Template.args,\\n  primitive: {\\n    id: \\\"\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        location,\\n        height: location.height,\\n        style: \\\"image\\\",\\n        image: `${process.env.PUBLIC_URL}/sample.png`,\\n        imageShadow: true,\\n      },\\n    },\\n  },\\n};\\n\\nexport const ImageWithCropAndShadow = Template.bind({});\\nImageWithCropAndShadow.args = {\\n  ...Template.args,\\n  primitive: {\\n    id: \\\"\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        location,\\n        height: location.height,\\n        style: \\\"image\\\",\\n        image: `${process.env.PUBLIC_URL}/sample.png`,\\n        imageCrop: \\\"circle\\\",\\n        imageShadow: true,\\n        extrude: true,\\n      },\\n    },\\n  },\\n};\\n\\nexport const ImageWithColor = Template.bind({});\\nImageWithColor.args = {\\n  ...Template.args,\\n  primitive: {\\n    id: \\\"\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        location,\\n        height: location.height,\\n        style: \\\"image\\\",\\n        image: `${process.env.PUBLIC_URL}/sample.png`,\\n        imageCrop: \\\"circle\\\",\\n        imageShadow: true,\\n        extrude: true,\\n        imageColor: \\\"red\\\",\\n      },\\n    },\\n  },\\n};\\n\\nexport const ImageWithRightLabel = Template.bind({});\\nImageWithRightLabel.args = {\\n  ...Template.args,\\n  primitive: {\\n    id: \\\"\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        location,\\n        height: location.height,\\n        style: \\\"image\\\",\\n        image: `${process.env.PUBLIC_URL}/sample.png`,\\n        label: true,\\n        labelText: \\\"label\\\",\\n        labelPosition: \\\"right\\\",\\n        labelTypography: {\\n          fontSize: 15,\\n          color: \\\"red\\\",\\n          bold: true,\\n          italic: true,\\n          fontFamily: \\\"serif\\\",\\n        },\\n      },\\n    },\\n  },\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Point\":{\"startLoc\":{\"col\":31,\"line\":12},\"endLoc\":{\"col\":1,\"line\":16},\"startBody\":{\"col\":31,\"line\":12},\"endBody\":{\"col\":1,\"line\":16}},\"PointWithLabelAndExcluded\":{\"startLoc\":{\"col\":31,\"line\":12},\"endLoc\":{\"col\":1,\"line\":16},\"startBody\":{\"col\":31,\"line\":12},\"endBody\":{\"col\":1,\"line\":16}},\"PointWithRightLabel\":{\"startLoc\":{\"col\":31,\"line\":12},\"endLoc\":{\"col\":1,\"line\":16},\"startBody\":{\"col\":31,\"line\":12},\"endBody\":{\"col\":1,\"line\":16}},\"PointWithTopLabel\":{\"startLoc\":{\"col\":31,\"line\":12},\"endLoc\":{\"col\":1,\"line\":16},\"startBody\":{\"col\":31,\"line\":12},\"endBody\":{\"col\":1,\"line\":16}},\"PointWithBottomLabel\":{\"startLoc\":{\"col\":31,\"line\":12},\"endLoc\":{\"col\":1,\"line\":16},\"startBody\":{\"col\":31,\"line\":12},\"endBody\":{\"col\":1,\"line\":16}},\"Image\":{\"startLoc\":{\"col\":31,\"line\":12},\"endLoc\":{\"col\":1,\"line\":16},\"startBody\":{\"col\":31,\"line\":12},\"endBody\":{\"col\":1,\"line\":16}},\"ImageWithShadow\":{\"startLoc\":{\"col\":31,\"line\":12},\"endLoc\":{\"col\":1,\"line\":16},\"startBody\":{\"col\":31,\"line\":12},\"endBody\":{\"col\":1,\"line\":16}},\"ImageWithCropAndShadow\":{\"startLoc\":{\"col\":31,\"line\":12},\"endLoc\":{\"col\":1,\"line\":16},\"startBody\":{\"col\":31,\"line\":12},\"endBody\":{\"col\":1,\"line\":16}},\"ImageWithColor\":{\"startLoc\":{\"col\":31,\"line\":12},\"endLoc\":{\"col\":1,\"line\":16},\"startBody\":{\"col\":31,\"line\":12},\"endBody\":{\"col\":1,\"line\":16}},\"ImageWithRightLabel\":{\"startLoc\":{\"col\":31,\"line\":12},\"endLoc\":{\"col\":1,\"line\":16},\"startBody\":{\"col\":31,\"line\":12},\"endBody\":{\"col\":1,\"line\":16}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\n\nimport Marker, { Props } from \".\";\nimport { V, location } from \"../storybook\";\n\nexport default {\n  title: \"molecules/Visualizer/Engine/Cesium/Marker\",\n  component: Marker,\n} as Meta;\n\nconst Template: Story<Props> = args => (\n  <V>\n    <Marker {...args} />\n  </V>\n);\n\nexport const Point = Template.bind({});;\nPoint.args = {\n  ...Template.args,\n  primitive: {\n    id: \"\",\n    isVisible: true,\n    property: {\n      default: {\n        location,\n        height: location.height,\n        style: \"point\",\n        pointColor: \"blue\",\n        pointSize: 50,\n      },\n    },\n  },\n};\n\nexport const PointWithLabelAndExcluded = Template.bind({});;\nPointWithLabelAndExcluded.args = {\n  ...Template.args,\n  primitive: {\n    id: \"\",\n    isVisible: true,\n    property: {\n      default: {\n        location,\n        height: location.height,\n        style: \"point\",\n        pointColor: \"blue\",\n        pointSize: 50,\n        extrude: true,\n        label: true,\n        labelText: \"label\",\n      },\n    },\n  },\n};\n\nexport const PointWithRightLabel = Template.bind({});;\nPointWithRightLabel.args = {\n  ...Template.args,\n  primitive: {\n    id: \"\",\n    isVisible: true,\n    property: {\n      default: {\n        location,\n        height: location.height,\n        style: \"point\",\n        label: true,\n        labelText: \"label\",\n        labelPosition: \"left\",\n        labelTypography: {\n          fontSize: 15,\n          color: \"red\",\n          bold: true,\n          italic: true,\n          fontFamily: \"serif\",\n        },\n      },\n    },\n  },\n};\n\nexport const PointWithTopLabel = Template.bind({});;\nPointWithTopLabel.args = {\n  ...Template.args,\n  primitive: {\n    id: \"\",\n    isVisible: true,\n    property: {\n      default: {\n        location,\n        height: location.height,\n        style: \"point\",\n        label: true,\n        labelText: \"label\",\n        labelPosition: \"top\",\n        labelTypography: {\n          fontFamily: \"serif\",\n        },\n      },\n    },\n  },\n};\n\nexport const PointWithBottomLabel = Template.bind({});;\nPointWithBottomLabel.args = {\n  ...Template.args,\n  primitive: {\n    id: \"\",\n    isVisible: true,\n    property: {\n      default: {\n        location,\n        height: location.height,\n        style: \"point\",\n        label: true,\n        labelText: \"label\",\n        labelPosition: \"bottom\",\n      },\n    },\n  },\n};\n\nexport const Image = Template.bind({});;\nImage.args = {\n  ...Template.args,\n  primitive: {\n    id: \"\",\n    isVisible: true,\n    property: {\n      default: {\n        location,\n        height: location.height,\n        style: \"image\",\n        image: `${process.env.PUBLIC_URL}/sample.svg`,\n      },\n    },\n  },\n};\n\nexport const ImageWithShadow = Template.bind({});;\nImageWithShadow.args = {\n  ...Template.args,\n  primitive: {\n    id: \"\",\n    isVisible: true,\n    property: {\n      default: {\n        location,\n        height: location.height,\n        style: \"image\",\n        image: `${process.env.PUBLIC_URL}/sample.png`,\n        imageShadow: true,\n      },\n    },\n  },\n};\n\nexport const ImageWithCropAndShadow = Template.bind({});;\nImageWithCropAndShadow.args = {\n  ...Template.args,\n  primitive: {\n    id: \"\",\n    isVisible: true,\n    property: {\n      default: {\n        location,\n        height: location.height,\n        style: \"image\",\n        image: `${process.env.PUBLIC_URL}/sample.png`,\n        imageCrop: \"circle\",\n        imageShadow: true,\n        extrude: true,\n      },\n    },\n  },\n};\n\nexport const ImageWithColor = Template.bind({});;\nImageWithColor.args = {\n  ...Template.args,\n  primitive: {\n    id: \"\",\n    isVisible: true,\n    property: {\n      default: {\n        location,\n        height: location.height,\n        style: \"image\",\n        image: `${process.env.PUBLIC_URL}/sample.png`,\n        imageCrop: \"circle\",\n        imageShadow: true,\n        extrude: true,\n        imageColor: \"red\",\n      },\n    },\n  },\n};\n\nexport const ImageWithRightLabel = Template.bind({});\nImageWithRightLabel.args = {\n  ...Template.args,\n  primitive: {\n    id: \"\",\n    isVisible: true,\n    property: {\n      default: {\n        location,\n        height: location.height,\n        style: \"image\",\n        image: `${process.env.PUBLIC_URL}/sample.png`,\n        label: true,\n        labelText: \"label\",\n        labelPosition: \"right\",\n        labelTypography: {\n          fontSize: 15,\n          color: \"red\",\n          bold: true,\n          italic: true,\n          fontFamily: \"serif\",\n        },\n      },\n    },\n  },\n};\n\n\n\nPoint.parameters = { storySource: { source: \"args => (\\n  <V>\\n    <Marker {...args} />\\n  </V>\\n)\" }, ...Point.parameters };\nPointWithLabelAndExcluded.parameters = { storySource: { source: \"args => (\\n  <V>\\n    <Marker {...args} />\\n  </V>\\n)\" }, ...PointWithLabelAndExcluded.parameters };\nPointWithRightLabel.parameters = { storySource: { source: \"args => (\\n  <V>\\n    <Marker {...args} />\\n  </V>\\n)\" }, ...PointWithRightLabel.parameters };\nPointWithTopLabel.parameters = { storySource: { source: \"args => (\\n  <V>\\n    <Marker {...args} />\\n  </V>\\n)\" }, ...PointWithTopLabel.parameters };\nPointWithBottomLabel.parameters = { storySource: { source: \"args => (\\n  <V>\\n    <Marker {...args} />\\n  </V>\\n)\" }, ...PointWithBottomLabel.parameters };\nImage.parameters = { storySource: { source: \"args => (\\n  <V>\\n    <Marker {...args} />\\n  </V>\\n)\" }, ...Image.parameters };\nImageWithShadow.parameters = { storySource: { source: \"args => (\\n  <V>\\n    <Marker {...args} />\\n  </V>\\n)\" }, ...ImageWithShadow.parameters };\nImageWithCropAndShadow.parameters = { storySource: { source: \"args => (\\n  <V>\\n    <Marker {...args} />\\n  </V>\\n)\" }, ...ImageWithCropAndShadow.parameters };\nImageWithColor.parameters = { storySource: { source: \"args => (\\n  <V>\\n    <Marker {...args} />\\n  </V>\\n)\" }, ...ImageWithColor.parameters };\nImageWithRightLabel.parameters = { storySource: { source: \"args => (\\n  <V>\\n    <Marker {...args} />\\n  </V>\\n)\" }, ...ImageWithRightLabel.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\n\\nimport Component, { Props } from \\\".\\\";\\nimport { V, location, SceneProperty } from \\\"../storybook\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Engine/Cesium/Model\\\",\\n  component: Component,\\n} as Meta;\\n\\nconst Template: Story<Props & { sceneProperty?: SceneProperty }> = args => (\\n  <V property={args.sceneProperty}>\\n    <Component {...args} />\\n  </V>\\n);\\n\\nexport const Default = Template.bind({});\\nDefault.args = {\\n  ...Template.args,\\n  sceneProperty: {\\n    timeline: {\\n      animation: true,\\n    },\\n  },\\n  primitive: {\\n    id: \\\"\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        location,\\n        scale: 1000,\\n        heading: 130,\\n        model: `${process.env.PUBLIC_URL}/BoxAnimated.glb`,\\n      },\\n    },\\n  },\\n};\\n\\nexport const Appearance = Template.bind({});\\nAppearance.args = {\\n  ...Template.args,\\n  sceneProperty: {\\n    atmosphere: {\\n      enable_shadows: true,\\n    },\\n  },\\n  primitive: {\\n    id: \\\"\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        location,\\n        scale: 1000,\\n        model: `${process.env.PUBLIC_URL}/BoxAnimated.glb`,\\n        animation: false,\\n      },\\n      appearance: {\\n        shadows: \\\"enabled\\\",\\n        color: \\\"red\\\",\\n        colorBlend: \\\"mix\\\",\\n        colorBlendAmount: 0.5,\\n        silhouette: true,\\n        silhouetteColor: \\\"yellow\\\",\\n        silhouetteSize: 10,\\n      },\\n    },\\n  },\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":67,\"line\":12},\"endLoc\":{\"col\":1,\"line\":16},\"startBody\":{\"col\":67,\"line\":12},\"endBody\":{\"col\":1,\"line\":16}},\"Appearance\":{\"startLoc\":{\"col\":67,\"line\":12},\"endLoc\":{\"col\":1,\"line\":16},\"startBody\":{\"col\":67,\"line\":12},\"endBody\":{\"col\":1,\"line\":16}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\n\nimport Component, { Props } from \".\";\nimport { V, location, SceneProperty } from \"../storybook\";\n\nexport default {\n  title: \"molecules/Visualizer/Engine/Cesium/Model\",\n  component: Component,\n} as Meta;\n\nconst Template: Story<Props & { sceneProperty?: SceneProperty }> = args => (\n  <V property={args.sceneProperty}>\n    <Component {...args} />\n  </V>\n);\n\nexport const Default = Template.bind({});;\nDefault.args = {\n  ...Template.args,\n  sceneProperty: {\n    timeline: {\n      animation: true,\n    },\n  },\n  primitive: {\n    id: \"\",\n    isVisible: true,\n    property: {\n      default: {\n        location,\n        scale: 1000,\n        heading: 130,\n        model: `${process.env.PUBLIC_URL}/BoxAnimated.glb`,\n      },\n    },\n  },\n};\n\nexport const Appearance = Template.bind({});\nAppearance.args = {\n  ...Template.args,\n  sceneProperty: {\n    atmosphere: {\n      enable_shadows: true,\n    },\n  },\n  primitive: {\n    id: \"\",\n    isVisible: true,\n    property: {\n      default: {\n        location,\n        scale: 1000,\n        model: `${process.env.PUBLIC_URL}/BoxAnimated.glb`,\n        animation: false,\n      },\n      appearance: {\n        shadows: \"enabled\",\n        color: \"red\",\n        colorBlend: \"mix\",\n        colorBlendAmount: 0.5,\n        silhouette: true,\n        silhouetteColor: \"yellow\",\n        silhouetteSize: 10,\n      },\n    },\n  },\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => (\\n  <V property={args.sceneProperty}>\\n    <Component {...args} />\\n  </V>\\n)\" }, ...Default.parameters };\nAppearance.parameters = { storySource: { source: \"args => (\\n  <V property={args.sceneProperty}>\\n    <Component {...args} />\\n  </V>\\n)\" }, ...Appearance.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport { Math as CesiumMath } from \\\"cesium\\\";\\n\\nimport { V, location } from \\\"../storybook\\\";\\nimport PhotoOverlay, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Engine/Cesium/PhotoOverlay\\\",\\n  component: PhotoOverlay,\\n} as Meta;\\n\\nconst Template: Story<Props> = args => (\\n  <V location={location}>\\n    <PhotoOverlay {...args} />\\n  </V>\\n);\\n\\nexport const Default = Template.bind({});\\nDefault.args = {\\n  primitive: {\\n    id: \\\"\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        location,\\n        photoOverlayImage: `${process.env.PUBLIC_URL}/sample.svg`,\\n        camera: {\\n          ...location,\\n          fov: CesiumMath.toRadians(30),\\n          heading: 0,\\n          pitch: 0,\\n          roll: 0,\\n        },\\n      },\\n    },\\n  },\\n  isBuilt: false,\\n  isEditable: false,\\n  isSelected: false,\\n};\\n\\nexport const Selected = Template.bind({});\\nSelected.args = {\\n  primitive: {\\n    id: \\\"\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        location,\\n        photoOverlayImage: `${process.env.PUBLIC_URL}/sample.svg`,\\n        camera: {\\n          ...location,\\n          fov: CesiumMath.toRadians(30),\\n          heading: 0,\\n          pitch: 0,\\n          roll: 0,\\n        },\\n      },\\n    },\\n  },\\n  isBuilt: false,\\n  isEditable: false,\\n  isSelected: true,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":31,\"line\":13},\"endLoc\":{\"col\":1,\"line\":17},\"startBody\":{\"col\":31,\"line\":13},\"endBody\":{\"col\":1,\"line\":17}},\"Selected\":{\"startLoc\":{\"col\":31,\"line\":13},\"endLoc\":{\"col\":1,\"line\":17},\"startBody\":{\"col\":31,\"line\":13},\"endBody\":{\"col\":1,\"line\":17}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport { Math as CesiumMath } from \"cesium\";\n\nimport { V, location } from \"../storybook\";\nimport PhotoOverlay, { Props } from \".\";\n\nexport default {\n  title: \"molecules/Visualizer/Engine/Cesium/PhotoOverlay\",\n  component: PhotoOverlay,\n} as Meta;\n\nconst Template: Story<Props> = args => (\n  <V location={location}>\n    <PhotoOverlay {...args} />\n  </V>\n);\n\nexport const Default = Template.bind({});;\nDefault.args = {\n  primitive: {\n    id: \"\",\n    isVisible: true,\n    property: {\n      default: {\n        location,\n        photoOverlayImage: `${process.env.PUBLIC_URL}/sample.svg`,\n        camera: {\n          ...location,\n          fov: CesiumMath.toRadians(30),\n          heading: 0,\n          pitch: 0,\n          roll: 0,\n        },\n      },\n    },\n  },\n  isBuilt: false,\n  isEditable: false,\n  isSelected: false,\n};\n\nexport const Selected = Template.bind({});\nSelected.args = {\n  primitive: {\n    id: \"\",\n    isVisible: true,\n    property: {\n      default: {\n        location,\n        photoOverlayImage: `${process.env.PUBLIC_URL}/sample.svg`,\n        camera: {\n          ...location,\n          fov: CesiumMath.toRadians(30),\n          heading: 0,\n          pitch: 0,\n          roll: 0,\n        },\n      },\n    },\n  },\n  isBuilt: false,\n  isEditable: false,\n  isSelected: true,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => (\\n  <V location={location}>\\n    <PhotoOverlay {...args} />\\n  </V>\\n)\" }, ...Default.parameters };\nSelected.parameters = { storySource: { source: \"args => (\\n  <V location={location}>\\n    <PhotoOverlay {...args} />\\n  </V>\\n)\" }, ...Selected.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport { V, location } from \\\"../storybook\\\";\\nimport Polygon, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Engine/Cesium/Polygon\\\",\\n  component: Polygon,\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => (\\n  <V location={location}>\\n    <Polygon {...args} />\\n  </V>\\n);\\n\\nDefault.args = {\\n  primitive: {\\n    id: \\\"\\\",\\n    property: {\\n      default: {\\n        fill: true,\\n        fillColor: \\\"#ffffffaa\\\",\\n        stroke: true,\\n        strokeColor: \\\"red\\\",\\n        strokeWidth: 10,\\n        polygon: [\\n          [\\n            { lat: 35.652832, lng: 139.839478, height: 100 },\\n            { lat: 36.652832, lng: 140.039478, height: 100 },\\n            { lat: 34.652832, lng: 141.839478, height: 100 },\\n          ],\\n        ],\\n      },\\n    },\\n    isVisible: true,\\n  },\\n  isBuilt: false,\\n  isEditable: false,\\n  isSelected: false,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":11},\"endLoc\":{\"col\":1,\"line\":15},\"startBody\":{\"col\":37,\"line\":11},\"endBody\":{\"col\":1,\"line\":15}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport { V, location } from \"../storybook\";\nimport Polygon, { Props } from \".\";\n\nexport default {\n  title: \"molecules/Visualizer/Engine/Cesium/Polygon\",\n  component: Polygon,\n} as Meta;\n\nexport const Default: Story<Props> = args => (\n  <V location={location}>\n    <Polygon {...args} />\n  </V>\n);\n\nDefault.args = {\n  primitive: {\n    id: \"\",\n    property: {\n      default: {\n        fill: true,\n        fillColor: \"#ffffffaa\",\n        stroke: true,\n        strokeColor: \"red\",\n        strokeWidth: 10,\n        polygon: [\n          [\n            { lat: 35.652832, lng: 139.839478, height: 100 },\n            { lat: 36.652832, lng: 140.039478, height: 100 },\n            { lat: 34.652832, lng: 141.839478, height: 100 },\n          ],\n        ],\n      },\n    },\n    isVisible: true,\n  },\n  isBuilt: false,\n  isEditable: false,\n  isSelected: false,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => (\\n  <V location={location}>\\n    <Polygon {...args} />\\n  </V>\\n)\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport { V, location } from \\\"../storybook\\\";\\nimport Polyline, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Engine/Cesium/Polyline\\\",\\n  component: Polyline,\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => (\\n  <V location={location}>\\n    <Polyline {...args} />\\n  </V>\\n);\\n\\nDefault.args = {\\n  primitive: {\\n    id: \\\"\\\",\\n    property: {\\n      default: {\\n        strokeColor: \\\"#ccaa\\\",\\n        strokeWidth: 10,\\n        coordinates: [\\n          { lat: 35.652832, lng: 139.839478, height: 100 },\\n          { lat: 36.652832, lng: 140.039478, height: 100 },\\n          { lat: 34.652832, lng: 141.839478, height: 100 },\\n        ],\\n      },\\n    },\\n    isVisible: true,\\n  },\\n  isBuilt: false,\\n  isEditable: false,\\n  isSelected: false,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":11},\"endLoc\":{\"col\":1,\"line\":15},\"startBody\":{\"col\":37,\"line\":11},\"endBody\":{\"col\":1,\"line\":15}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport { V, location } from \"../storybook\";\nimport Polyline, { Props } from \".\";\n\nexport default {\n  title: \"molecules/Visualizer/Engine/Cesium/Polyline\",\n  component: Polyline,\n} as Meta;\n\nexport const Default: Story<Props> = args => (\n  <V location={location}>\n    <Polyline {...args} />\n  </V>\n);\n\nDefault.args = {\n  primitive: {\n    id: \"\",\n    property: {\n      default: {\n        strokeColor: \"#ccaa\",\n        strokeWidth: 10,\n        coordinates: [\n          { lat: 35.652832, lng: 139.839478, height: 100 },\n          { lat: 36.652832, lng: 140.039478, height: 100 },\n          { lat: 34.652832, lng: 141.839478, height: 100 },\n        ],\n      },\n    },\n    isVisible: true,\n  },\n  isBuilt: false,\n  isEditable: false,\n  isSelected: false,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => (\\n  <V location={location}>\\n    <Polyline {...args} />\\n  </V>\\n)\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport { V, location } from \\\"../storybook\\\";\\nimport Rect, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Engine/Cesium/Rect\\\",\\n  component: Rect,\\n  argTypes: {\\n    api: {\\n      control: false,\\n    },\\n  },\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => (\\n  <V location={location}>\\n    <Rect {...args} />\\n  </V>\\n);\\n\\nDefault.args = {\\n  primitive: {\\n    id: \\\"\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        rect: { west: 139, east: 140, north: 36, south: 35 },\\n        fillColor: \\\"#f00a\\\",\\n        extrudedHeight: 10000,\\n        outlineColor: \\\"yellow\\\",\\n        outlineWidth: 10,\\n      },\\n    },\\n  },\\n  isBuilt: false,\\n  isEditable: false,\\n  isSelected: false,\\n};\\n\\nexport const Image: Story<Props> = args => (\\n  <V location={location}>\\n    <Rect {...args} />\\n  </V>\\n);\\n\\nImage.args = {\\n  primitive: {\\n    id: \\\"\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        rect: { west: 139, east: 140, north: 36, south: 35 },\\n        style: \\\"image\\\",\\n        image: `${process.env.PUBLIC_URL}/sample.png`,\\n      },\\n    },\\n  },\\n  isBuilt: false,\\n  isEditable: false,\\n  isSelected: false,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":16},\"endLoc\":{\"col\":1,\"line\":20},\"startBody\":{\"col\":37,\"line\":16},\"endBody\":{\"col\":1,\"line\":20}},\"Image\":{\"startLoc\":{\"col\":35,\"line\":41},\"endLoc\":{\"col\":1,\"line\":45},\"startBody\":{\"col\":35,\"line\":41},\"endBody\":{\"col\":1,\"line\":45}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport { V, location } from \"../storybook\";\nimport Rect, { Props } from \".\";\n\nexport default {\n  title: \"molecules/Visualizer/Engine/Cesium/Rect\",\n  component: Rect,\n  argTypes: {\n    api: {\n      control: false,\n    },\n  },\n} as Meta;\n\nexport const Default: Story<Props> = args => (\n  <V location={location}>\n    <Rect {...args} />\n  </V>\n);;\n\nDefault.args = {\n  primitive: {\n    id: \"\",\n    isVisible: true,\n    property: {\n      default: {\n        rect: { west: 139, east: 140, north: 36, south: 35 },\n        fillColor: \"#f00a\",\n        extrudedHeight: 10000,\n        outlineColor: \"yellow\",\n        outlineWidth: 10,\n      },\n    },\n  },\n  isBuilt: false,\n  isEditable: false,\n  isSelected: false,\n};\n\nexport const Image: Story<Props> = args => (\n  <V location={location}>\n    <Rect {...args} />\n  </V>\n);\n\nImage.args = {\n  primitive: {\n    id: \"\",\n    isVisible: true,\n    property: {\n      default: {\n        rect: { west: 139, east: 140, north: 36, south: 35 },\n        style: \"image\",\n        image: `${process.env.PUBLIC_URL}/sample.png`,\n      },\n    },\n  },\n  isBuilt: false,\n  isEditable: false,\n  isSelected: false,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => (\\n  <V location={location}>\\n    <Rect {...args} />\\n  </V>\\n)\" }, ...Default.parameters };\nImage.parameters = { storySource: { source: \"args => (\\n  <V location={location}>\\n    <Rect {...args} />\\n  </V>\\n)\" }, ...Image.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport { V, location } from \\\"../storybook\\\";\\nimport Resource, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Engine/Cesium/Resource\\\",\\n  component: Resource,\\n  argTypes: {\\n    api: {\\n      control: false,\\n    },\\n  },\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => (\\n  <V location={location}>\\n    <Resource {...args} />\\n  </V>\\n);\\n\\nDefault.args = {\\n  primitive: {\\n    id: \\\"\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        url: `${process.env.PUBLIC_URL}/sample.geojson`,\\n      },\\n    },\\n  },\\n  isBuilt: false,\\n  isEditable: false,\\n  isSelected: false,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":16},\"endLoc\":{\"col\":1,\"line\":20},\"startBody\":{\"col\":37,\"line\":16},\"endBody\":{\"col\":1,\"line\":20}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport { V, location } from \"../storybook\";\nimport Resource, { Props } from \".\";\n\nexport default {\n  title: \"molecules/Visualizer/Engine/Cesium/Resource\",\n  component: Resource,\n  argTypes: {\n    api: {\n      control: false,\n    },\n  },\n} as Meta;\n\nexport const Default: Story<Props> = args => (\n  <V location={location}>\n    <Resource {...args} />\n  </V>\n);\n\nDefault.args = {\n  primitive: {\n    id: \"\",\n    isVisible: true,\n    property: {\n      default: {\n        url: `${process.env.PUBLIC_URL}/sample.geojson`,\n      },\n    },\n  },\n  isBuilt: false,\n  isEditable: false,\n  isSelected: false,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => (\\n  <V location={location}>\\n    <Resource {...args} />\\n  </V>\\n)\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\n\\nimport Component, { Props } from \\\".\\\";\\nimport { V } from \\\"../storybook\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Engine/Cesium/Tileset\\\",\\n  component: Component,\\n} as Meta;\\n\\nconst Template: Story<Props> = args => {\\n  return (\\n    <V lookAt={{ lng: -75.61209430779367, lat: 40.05083633101078, height: 0, range: 1200 }}>\\n      <Component {...args} />\\n    </V>\\n  );\\n};\\n\\nexport const Default = Template.bind({});\\nDefault.args = {\\n  ...Template.args,\\n  primitive: {\\n    id: \\\"\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        tileset: `${process.env.PUBLIC_URL}/tileset/tileset.json`,\\n      },\\n    },\\n  },\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":31,\"line\":12},\"endLoc\":{\"col\":1,\"line\":18},\"startBody\":{\"col\":31,\"line\":12},\"endBody\":{\"col\":1,\"line\":18}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\n\nimport Component, { Props } from \".\";\nimport { V } from \"../storybook\";\n\nexport default {\n  title: \"molecules/Visualizer/Engine/Cesium/Tileset\",\n  component: Component,\n} as Meta;\n\nconst Template: Story<Props> = args => {\n  return (\n    <V lookAt={{ lng: -75.61209430779367, lat: 40.05083633101078, height: 0, range: 1200 }}>\n      <Component {...args} />\n    </V>\n  );\n};\n\nexport const Default = Template.bind({});\nDefault.args = {\n  ...Template.args,\n  primitive: {\n    id: \"\",\n    isVisible: true,\n    property: {\n      default: {\n        tileset: `${process.env.PUBLIC_URL}/tileset/tileset.json`,\n      },\n    },\n  },\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => {\\n  return (\\n    <V lookAt={{ lng: -75.61209430779367, lat: 40.05083633101078, height: 0, range: 1200 }}>\\n      <Component {...args} />\\n    </V>\\n  );\\n}\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\n\\nimport { Cartesian3, Color } from \\\"cesium\\\";\\nimport { Entity } from \\\"resium\\\";\\nimport Component, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Engine/Cesium\\\",\\n  component: Component,\\n  argTypes: {\\n    onCameraChange: { action: \\\"onCameraChange\\\" },\\n    onPrimitiveSelect: { action: \\\"onPrimitiveSelect\\\" },\\n  },\\n} as Meta;\\n\\nconst Template: Story<Props> = args => <Component {...args} />;\\n\\nexport const Default = Template.bind([]);\\nDefault.args = {\\n  isBuilt: false,\\n  isEditable: false,\\n  small: false,\\n  ready: true,\\n  selectedPrimitiveId: undefined,\\n  property: {\\n    default: {\\n      terrain: true,\\n      terrainExaggeration: 10,\\n      bgcolor: \\\"#ff0\\\",\\n      skybox: false,\\n    },\\n    tiles: [{ id: \\\"default\\\", tile_type: \\\"default\\\" }],\\n    atmosphere: {\\n      enable_lighting: true,\\n      enable_sun: true,\\n      sky_atmosphere: true,\\n      ground_atmosphere: true,\\n    },\\n  },\\n};\\n\\nexport const Selected = Template.bind([]);\\nSelected.args = {\\n  ...Default.args,\\n  children: (\\n    <Entity\\n      id=\\\"a\\\"\\n      point={{ color: Color.WHITE, pixelSize: 10 }}\\n      position={Cartesian3.fromDegrees(0, 0, 0)}\\n      selected\\n    />\\n  ),\\n  selectedPrimitiveId: \\\"a\\\",\\n};\\n\\nexport const DefaultCamera = Template.bind({});\\nDefaultCamera.args = {\\n  ...Default.args,\\n  camera: {\\n    fov: 1.0471975511965976,\\n    heading: 0.23410230091957818,\\n    height: 21075.98272847632,\\n    lat: 36.382785984750846,\\n    lng: 139.59084714252558,\\n    pitch: 0,\\n    roll: 0,\\n  },\\n};\\n\\nexport const InitialCamera = Template.bind({});\\nInitialCamera.args = {\\n  ...Default.args,\\n  property: {\\n    ...Default.args.property,\\n    default: {\\n      ...Default.args.property?.default,\\n      camera: {\\n        fov: 1.0471975511965976,\\n        heading: 0.23410230091957818,\\n        height: 21075.98272847632,\\n        lat: 36.382785984750846,\\n        lng: 139.59084714252558,\\n        pitch: 0,\\n        roll: 0,\\n      },\\n    },\\n  },\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":23,\"line\":19},\"endLoc\":{\"col\":40,\"line\":19},\"startBody\":{\"col\":23,\"line\":19},\"endBody\":{\"col\":40,\"line\":19}},\"Selected\":{\"startLoc\":{\"col\":24,\"line\":43},\"endLoc\":{\"col\":41,\"line\":43},\"startBody\":{\"col\":24,\"line\":43},\"endBody\":{\"col\":41,\"line\":43}},\"DefaultCamera\":{\"startLoc\":{\"col\":31,\"line\":17},\"endLoc\":{\"col\":62,\"line\":17},\"startBody\":{\"col\":31,\"line\":17},\"endBody\":{\"col\":62,\"line\":17}},\"InitialCamera\":{\"startLoc\":{\"col\":31,\"line\":17},\"endLoc\":{\"col\":62,\"line\":17},\"startBody\":{\"col\":31,\"line\":17},\"endBody\":{\"col\":62,\"line\":17}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\n\nimport { Cartesian3, Color } from \"cesium\";\nimport { Entity } from \"resium\";\nimport Component, { Props } from \".\";\n\nexport default {\n  title: \"molecules/Visualizer/Engine/Cesium\",\n  component: Component,\n  argTypes: {\n    onCameraChange: { action: \"onCameraChange\" },\n    onPrimitiveSelect: { action: \"onPrimitiveSelect\" },\n  },\n} as Meta;\n\nconst Template: Story<Props> = args => <Component {...args} />;\n\nexport const Default = Template.bind([]);;\nDefault.args = {\n  isBuilt: false,\n  isEditable: false,\n  small: false,\n  ready: true,\n  selectedPrimitiveId: undefined,\n  property: {\n    default: {\n      terrain: true,\n      terrainExaggeration: 10,\n      bgcolor: \"#ff0\",\n      skybox: false,\n    },\n    tiles: [{ id: \"default\", tile_type: \"default\" }],\n    atmosphere: {\n      enable_lighting: true,\n      enable_sun: true,\n      sky_atmosphere: true,\n      ground_atmosphere: true,\n    },\n  },\n};\n\nexport const Selected = Template.bind([]);;\nSelected.args = {\n  ...Default.args,\n  children: (\n    <Entity\n      id=\"a\"\n      point={{ color: Color.WHITE, pixelSize: 10 }}\n      position={Cartesian3.fromDegrees(0, 0, 0)}\n      selected\n    />\n  ),\n  selectedPrimitiveId: \"a\",\n};\n\nexport const DefaultCamera = Template.bind({});;\nDefaultCamera.args = {\n  ...Default.args,\n  camera: {\n    fov: 1.0471975511965976,\n    heading: 0.23410230091957818,\n    height: 21075.98272847632,\n    lat: 36.382785984750846,\n    lng: 139.59084714252558,\n    pitch: 0,\n    roll: 0,\n  },\n};\n\nexport const InitialCamera = Template.bind({});\nInitialCamera.args = {\n  ...Default.args,\n  property: {\n    ...Default.args.property,\n    default: {\n      ...Default.args.property?.default,\n      camera: {\n        fov: 1.0471975511965976,\n        heading: 0.23410230091957818,\n        height: 21075.98272847632,\n        lat: 36.382785984750846,\n        lng: 139.59084714252558,\n        pitch: 0,\n        roll: 0,\n      },\n    },\n  },\n};\n\n\n\nDefault.parameters = { storySource: { source: \"Template.bind([])\" }, ...Default.parameters };\nSelected.parameters = { storySource: { source: \"Template.bind([])\" }, ...Selected.parameters };\nDefaultCamera.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...DefaultCamera.parameters };\nInitialCamera.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...InitialCamera.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport Field, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Infobox/Field\\\",\\n  component: Field,\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => (\\n  <Field {...args}>\\n    <h1>HogeHoge</h1>\\n  </Field>\\n);\\nDefault.args = {\\n  id: \\\"aaa\\\",\\n};\\n\\nexport const Selected: Story<Props> = args => (\\n  <Field {...args}>\\n    <h1>HogeHoge</h1>\\n  </Field>\\n);\\nSelected.args = {\\n  id: \\\"aaa\\\",\\n  isEditable: true,\\n  isSelected: true,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":11},\"endLoc\":{\"col\":1,\"line\":15},\"startBody\":{\"col\":37,\"line\":11},\"endBody\":{\"col\":1,\"line\":15}},\"Selected\":{\"startLoc\":{\"col\":38,\"line\":20},\"endLoc\":{\"col\":1,\"line\":24},\"startBody\":{\"col\":38,\"line\":20},\"endBody\":{\"col\":1,\"line\":24}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport Field, { Props } from \".\";\n\nexport default {\n  title: \"molecules/Visualizer/Infobox/Field\",\n  component: Field,\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nexport const Default: Story<Props> = args => (\n  <Field {...args}>\n    <h1>HogeHoge</h1>\n  </Field>\n);;\nDefault.args = {\n  id: \"aaa\",\n};\n\nexport const Selected: Story<Props> = args => (\n  <Field {...args}>\n    <h1>HogeHoge</h1>\n  </Field>\n);\nSelected.args = {\n  id: \"aaa\",\n  isEditable: true,\n  isSelected: true,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => (\\n  <Field {...args}>\\n    <h1>HogeHoge</h1>\\n  </Field>\\n)\" }, ...Default.parameters };\nSelected.parameters = { storySource: { source: \"args => (\\n  <Field {...args}>\\n    <h1>HogeHoge</h1>\\n  </Field>\\n)\" }, ...Selected.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\n\\nimport Component, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Infobox/Frame\\\",\\n  component: Component,\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nconst Template: Story<Props> = args => <Component {...args} />;\\n\\nexport const Default = Template.bind({});\\nDefault.args = {\\n  title: \\\"hello\\\",\\n};\\n\\nexport const LongTitle = Template.bind({});\\nLongTitle.args = {\\n  title:\\n    \\\"hellohellohellohellohellohellohellohellohellohhellohellohellohellohellohellohellohellohellohellohhellohellohellohellohellohellohellohellohellohellohhello\\\",\\n};\\n\\nexport const LongCJKTitle = Template.bind({});\\nLongCJKTitle.args = {\\n  title:\\n    \\\"こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。\\\",\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":31,\"line\":12},\"endLoc\":{\"col\":62,\"line\":12},\"startBody\":{\"col\":31,\"line\":12},\"endBody\":{\"col\":62,\"line\":12}},\"LongTitle\":{\"startLoc\":{\"col\":31,\"line\":12},\"endLoc\":{\"col\":62,\"line\":12},\"startBody\":{\"col\":31,\"line\":12},\"endBody\":{\"col\":62,\"line\":12}},\"LongCJKTitle\":{\"startLoc\":{\"col\":31,\"line\":12},\"endLoc\":{\"col\":62,\"line\":12},\"startBody\":{\"col\":31,\"line\":12},\"endBody\":{\"col\":62,\"line\":12}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\n\nimport Component, { Props } from \".\";\n\nexport default {\n  title: \"molecules/Visualizer/Infobox/Frame\",\n  component: Component,\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nconst Template: Story<Props> = args => <Component {...args} />;\n\nexport const Default = Template.bind({});;\nDefault.args = {\n  title: \"hello\",\n};\n\nexport const LongTitle = Template.bind({});;\nLongTitle.args = {\n  title:\n    \"hellohellohellohellohellohellohellohellohellohhellohellohellohellohellohellohellohellohellohellohhellohellohellohellohellohellohellohellohellohellohhello\",\n};\n\nexport const LongCJKTitle = Template.bind({});\nLongCJKTitle.args = {\n  title:\n    \"こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。こんにちは。\",\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Default.parameters };\nLongTitle.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...LongTitle.parameters };\nLongCJKTitle.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...LongCJKTitle.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\n\\nimport Component, { Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Infobox\\\",\\n  component: Component,\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nconst Template: Story<Props> = args => <Component {...args} />;\\nTemplate.args = {\\n  blocks: [\\n    {\\n      id: \\\"a\\\",\\n      pluginId: \\\"reearth\\\",\\n      extensionId: \\\"textblock\\\",\\n      propertyId: \\\"propertya\\\",\\n      property: {\\n        default: {\\n          text: \\\"# Hello\\\",\\n          markdown: true,\\n        },\\n      },\\n    },\\n    {\\n      id: \\\"b\\\",\\n      pluginId: \\\"reearth\\\",\\n      extensionId: \\\"textblock\\\",\\n      propertyId: \\\"propertya\\\",\\n      property: {\\n        default: {\\n          text: \\\"# World!\\\",\\n          markdown: true,\\n        },\\n      },\\n    },\\n  ],\\n  property: {\\n    default: {\\n      title: \\\"Hoge\\\",\\n      size: \\\"small\\\",\\n    },\\n  },\\n  selectedBlockId: undefined,\\n  title: \\\"Name\\\",\\n  infoboxKey: \\\"\\\",\\n  isBuilt: false,\\n  isEditable: false,\\n  visible: true,\\n};\\n\\nexport const Default = Template.bind({});\\nDefault.args = {\\n  ...Template.args,\\n};\\n\\nexport const Large = Template.bind({});\\nLarge.args = {\\n  ...Template.args,\\n  property: {\\n    ...Template.args.property,\\n    default: {\\n      ...Template.args.property?.default,\\n      size: \\\"large\\\",\\n    },\\n  },\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":31,\"line\":12},\"endLoc\":{\"col\":62,\"line\":12},\"startBody\":{\"col\":31,\"line\":12},\"endBody\":{\"col\":62,\"line\":12}},\"Large\":{\"startLoc\":{\"col\":31,\"line\":12},\"endLoc\":{\"col\":62,\"line\":12},\"startBody\":{\"col\":31,\"line\":12},\"endBody\":{\"col\":62,\"line\":12}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\n\nimport Component, { Props } from \".\";\n\nexport default {\n  title: \"molecules/Visualizer/Infobox\",\n  component: Component,\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nconst Template: Story<Props> = args => <Component {...args} />;\nTemplate.args = {\n  blocks: [\n    {\n      id: \"a\",\n      pluginId: \"reearth\",\n      extensionId: \"textblock\",\n      propertyId: \"propertya\",\n      property: {\n        default: {\n          text: \"# Hello\",\n          markdown: true,\n        },\n      },\n    },\n    {\n      id: \"b\",\n      pluginId: \"reearth\",\n      extensionId: \"textblock\",\n      propertyId: \"propertya\",\n      property: {\n        default: {\n          text: \"# World!\",\n          markdown: true,\n        },\n      },\n    },\n  ],\n  property: {\n    default: {\n      title: \"Hoge\",\n      size: \"small\",\n    },\n  },\n  selectedBlockId: undefined,\n  title: \"Name\",\n  infoboxKey: \"\",\n  isBuilt: false,\n  isEditable: false,\n  visible: true,\n};\n\nexport const Default = Template.bind({});;\nDefault.args = {\n  ...Template.args,\n};\n\nexport const Large = Template.bind({});\nLarge.args = {\n  ...Template.args,\n  property: {\n    ...Template.args.property,\n    default: {\n      ...Template.args.property?.default,\n      size: \"large\",\n    },\n  },\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Default.parameters };\nLarge.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Large.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\n\\nimport Component, { Props } from \\\".\\\";\\nimport { Provider } from \\\"../context\\\";\\nimport { context } from \\\"../storybook\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Plugin\\\",\\n  component: Component,\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => (\\n  <Provider value={context}>\\n    <div style={{ background: \\\"#fff\\\" }}>\\n      <Component {...args} />\\n    </div>\\n  </Provider>\\n);\\n\\nDefault.args = {\\n  pluginId: \\\"plugins\\\",\\n  extensionId: \\\"plugin\\\",\\n  pluginBaseUrl: process.env.PUBLIC_URL,\\n  visible: true,\\n};\\n\\nexport const Headless: Story<Props> = args => (\\n  <Provider value={context}>\\n    <Component {...args} />\\n  </Provider>\\n);\\n\\nHeadless.args = {\\n  sourceCode: `console.log(\\\"hello world\\\");`,\\n  visible: true,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":14},\"endLoc\":{\"col\":1,\"line\":20},\"startBody\":{\"col\":37,\"line\":14},\"endBody\":{\"col\":1,\"line\":20}},\"Headless\":{\"startLoc\":{\"col\":38,\"line\":29},\"endLoc\":{\"col\":1,\"line\":33},\"startBody\":{\"col\":38,\"line\":29},\"endBody\":{\"col\":1,\"line\":33}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\n\nimport Component, { Props } from \".\";\nimport { Provider } from \"../context\";\nimport { context } from \"../storybook\";\n\nexport default {\n  title: \"molecules/Visualizer/Plugin\",\n  component: Component,\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nexport const Default: Story<Props> = args => (\n  <Provider value={context}>\n    <div style={{ background: \"#fff\" }}>\n      <Component {...args} />\n    </div>\n  </Provider>\n);;\n\nDefault.args = {\n  pluginId: \"plugins\",\n  extensionId: \"plugin\",\n  pluginBaseUrl: process.env.PUBLIC_URL,\n  visible: true,\n};\n\nexport const Headless: Story<Props> = args => (\n  <Provider value={context}>\n    <Component {...args} />\n  </Provider>\n);\n\nHeadless.args = {\n  sourceCode: `console.log(\"hello world\");`,\n  visible: true,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => (\\n  <Provider value={context}>\\n    <div style={{ background: \\\"#fff\\\" }}>\\n      <Component {...args} />\\n    </div>\\n  </Provider>\\n)\" }, ...Default.parameters };\nHeadless.parameters = { storySource: { source: \"args => (\\n  <Provider value={context}>\\n    <Component {...args} />\\n  </Provider>\\n)\" }, ...Headless.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport { Math as CesiumMath } from \\\"cesium\\\";\\n\\nimport Menu, { Props } from \\\".\\\";\\nimport { Provider } from \\\"../../context\\\";\\nimport { context } from \\\"../../storybook\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Widget/Menu\\\",\\n  component: Menu,\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => (\\n  <Provider value={context}>\\n    <Menu {...args} />\\n  </Provider>\\n);\\n\\nDefault.args = {\\n  widget: {\\n    id: \\\"\\\",\\n    property: {\\n      buttons: [\\n        {\\n          id: \\\"menu\\\",\\n          buttonType: \\\"menu\\\",\\n          buttonTitle: \\\"Menu\\\",\\n          buttonPosition: \\\"topleft\\\",\\n          buttonStyle: \\\"text\\\",\\n        },\\n        {\\n          id: \\\"google\\\",\\n          buttonType: \\\"link\\\",\\n          buttonLink: \\\"https://google.com\\\",\\n          buttonTitle: \\\"Google\\\",\\n          buttonPosition: \\\"topleft\\\",\\n          buttonStyle: \\\"text\\\",\\n          buttonBgcolor: \\\"red\\\",\\n        },\\n        {\\n          id: \\\"twitter\\\",\\n          buttonType: \\\"link\\\",\\n          buttonLink: \\\"https://twitter.com\\\",\\n          buttonTitle: \\\"Twitter\\\",\\n          buttonPosition: \\\"bottomright\\\",\\n          buttonStyle: \\\"text\\\",\\n          buttonBgcolor: \\\"#0ff\\\",\\n        },\\n        {\\n          id: \\\"hoge\\\",\\n          buttonType: \\\"camera\\\",\\n          buttonPosition: \\\"bottomright\\\",\\n          buttonCamera: {\\n            lat: 0,\\n            lng: 0,\\n            height: 1000,\\n            fov: CesiumMath.toRadians(60),\\n            heading: 0,\\n            pitch: 0,\\n            roll: 0,\\n          },\\n          buttonTitle: \\\"hoge\\\",\\n        },\\n        {\\n          id: \\\"menu2\\\",\\n          buttonType: \\\"menu\\\",\\n          buttonIcon: \\\"/sample.svg\\\",\\n          buttonPosition: \\\"bottomleft\\\",\\n          buttonStyle: \\\"icon\\\",\\n        },\\n        {\\n          id: \\\"menu3\\\",\\n          buttonType: \\\"menu\\\",\\n          buttonTitle: \\\"Menu\\\",\\n          buttonIcon: \\\"/sample.svg\\\",\\n          buttonPosition: \\\"bottomleft\\\",\\n          buttonStyle: \\\"texticon\\\",\\n        },\\n      ],\\n      menu: [\\n        {\\n          id: \\\"hoge\\\",\\n          menuTitle: \\\"Hoge\\\",\\n          menuType: \\\"camera\\\",\\n          menuCamera: {\\n            lat: 0,\\n            lng: 0,\\n            height: 1000,\\n            fov: CesiumMath.toRadians(60),\\n            heading: 0,\\n            pitch: 0,\\n            roll: 0,\\n          },\\n        },\\n        {\\n          id: \\\"hoge\\\",\\n          menuType: \\\"border\\\",\\n        },\\n        {\\n          id: \\\"GitHub\\\",\\n          menuType: \\\"link\\\",\\n          menuTitle: \\\"GitHub\\\",\\n          menuLink: \\\"https://github.com\\\",\\n        },\\n      ],\\n    },\\n  },\\n  isBuilt: false,\\n  isEditable: false,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":15},\"endLoc\":{\"col\":1,\"line\":19},\"startBody\":{\"col\":37,\"line\":15},\"endBody\":{\"col\":1,\"line\":19}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport { Math as CesiumMath } from \"cesium\";\n\nimport Menu, { Props } from \".\";\nimport { Provider } from \"../../context\";\nimport { context } from \"../../storybook\";\n\nexport default {\n  title: \"molecules/Visualizer/Widget/Menu\",\n  component: Menu,\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nexport const Default: Story<Props> = args => (\n  <Provider value={context}>\n    <Menu {...args} />\n  </Provider>\n);\n\nDefault.args = {\n  widget: {\n    id: \"\",\n    property: {\n      buttons: [\n        {\n          id: \"menu\",\n          buttonType: \"menu\",\n          buttonTitle: \"Menu\",\n          buttonPosition: \"topleft\",\n          buttonStyle: \"text\",\n        },\n        {\n          id: \"google\",\n          buttonType: \"link\",\n          buttonLink: \"https://google.com\",\n          buttonTitle: \"Google\",\n          buttonPosition: \"topleft\",\n          buttonStyle: \"text\",\n          buttonBgcolor: \"red\",\n        },\n        {\n          id: \"twitter\",\n          buttonType: \"link\",\n          buttonLink: \"https://twitter.com\",\n          buttonTitle: \"Twitter\",\n          buttonPosition: \"bottomright\",\n          buttonStyle: \"text\",\n          buttonBgcolor: \"#0ff\",\n        },\n        {\n          id: \"hoge\",\n          buttonType: \"camera\",\n          buttonPosition: \"bottomright\",\n          buttonCamera: {\n            lat: 0,\n            lng: 0,\n            height: 1000,\n            fov: CesiumMath.toRadians(60),\n            heading: 0,\n            pitch: 0,\n            roll: 0,\n          },\n          buttonTitle: \"hoge\",\n        },\n        {\n          id: \"menu2\",\n          buttonType: \"menu\",\n          buttonIcon: \"/sample.svg\",\n          buttonPosition: \"bottomleft\",\n          buttonStyle: \"icon\",\n        },\n        {\n          id: \"menu3\",\n          buttonType: \"menu\",\n          buttonTitle: \"Menu\",\n          buttonIcon: \"/sample.svg\",\n          buttonPosition: \"bottomleft\",\n          buttonStyle: \"texticon\",\n        },\n      ],\n      menu: [\n        {\n          id: \"hoge\",\n          menuTitle: \"Hoge\",\n          menuType: \"camera\",\n          menuCamera: {\n            lat: 0,\n            lng: 0,\n            height: 1000,\n            fov: CesiumMath.toRadians(60),\n            heading: 0,\n            pitch: 0,\n            roll: 0,\n          },\n        },\n        {\n          id: \"hoge\",\n          menuType: \"border\",\n        },\n        {\n          id: \"GitHub\",\n          menuType: \"link\",\n          menuTitle: \"GitHub\",\n          menuLink: \"https://github.com\",\n        },\n      ],\n    },\n  },\n  isBuilt: false,\n  isEditable: false,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => (\\n  <Provider value={context}>\\n    <Menu {...args} />\\n  </Provider>\\n)\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Math as CesiumMath } from \\\"cesium\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\n\\nimport SplashScreen, { Props } from \\\".\\\";\\nimport { Provider } from \\\"../../context\\\";\\nimport { context } from \\\"../../storybook\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Widget/SplashScreen\\\",\\n  component: SplashScreen,\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => (\\n  <Provider value={context}>\\n    <SplashScreen {...args} />\\n  </Provider>\\n);\\n\\nDefault.args = {\\n  widget: {\\n    id: \\\"\\\",\\n    property: {\\n      overlay: {\\n        overlayEnabled: true,\\n        overlayDuration: 2,\\n        overlayTransitionDuration: 1,\\n        overlayDelay: 0.5,\\n        overlayImage: `${process.env.PUBLIC_URL}/sample.svg`,\\n        overlayImageW: 648,\\n        overlayImageH: 432,\\n        overlayBgcolor: \\\"#fff8\\\",\\n      },\\n      camera: [\\n        {\\n          cameraPosition: {\\n            lat: 0,\\n            lng: 0,\\n            height: 1000,\\n            fov: CesiumMath.toRadians(60),\\n            heading: 0,\\n            pitch: 0,\\n            roll: 0,\\n          },\\n          cameraDelay: 3,\\n          cameraDuration: 3,\\n        },\\n        {\\n          cameraPosition: {\\n            lat: 0,\\n            lng: 0,\\n            height: 1000,\\n            fov: CesiumMath.toRadians(60),\\n            heading: 90,\\n            pitch: 0,\\n            roll: 0,\\n          },\\n          cameraDelay: 3,\\n          cameraDuration: 3,\\n        },\\n      ],\\n    },\\n  },\\n  isBuilt: true,\\n  isEditable: false,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":15},\"endLoc\":{\"col\":1,\"line\":19},\"startBody\":{\"col\":37,\"line\":15},\"endBody\":{\"col\":1,\"line\":19}}};\n    \nimport React from \"react\";\nimport { Math as CesiumMath } from \"cesium\";\nimport { Meta, Story } from \"@storybook/react\";\n\nimport SplashScreen, { Props } from \".\";\nimport { Provider } from \"../../context\";\nimport { context } from \"../../storybook\";\n\nexport default {\n  title: \"molecules/Visualizer/Widget/SplashScreen\",\n  component: SplashScreen,\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nexport const Default: Story<Props> = args => (\n  <Provider value={context}>\n    <SplashScreen {...args} />\n  </Provider>\n);\n\nDefault.args = {\n  widget: {\n    id: \"\",\n    property: {\n      overlay: {\n        overlayEnabled: true,\n        overlayDuration: 2,\n        overlayTransitionDuration: 1,\n        overlayDelay: 0.5,\n        overlayImage: `${process.env.PUBLIC_URL}/sample.svg`,\n        overlayImageW: 648,\n        overlayImageH: 432,\n        overlayBgcolor: \"#fff8\",\n      },\n      camera: [\n        {\n          cameraPosition: {\n            lat: 0,\n            lng: 0,\n            height: 1000,\n            fov: CesiumMath.toRadians(60),\n            heading: 0,\n            pitch: 0,\n            roll: 0,\n          },\n          cameraDelay: 3,\n          cameraDuration: 3,\n        },\n        {\n          cameraPosition: {\n            lat: 0,\n            lng: 0,\n            height: 1000,\n            fov: CesiumMath.toRadians(60),\n            heading: 90,\n            pitch: 0,\n            roll: 0,\n          },\n          cameraDelay: 3,\n          cameraDuration: 3,\n        },\n      ],\n    },\n  },\n  isBuilt: true,\n  isEditable: false,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => (\\n  <Provider value={context}>\\n    <SplashScreen {...args} />\\n  </Provider>\\n)\" }, ...Default.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\n\\nimport Component, { Props } from \\\".\\\";\\nimport { Provider } from \\\"../../context\\\";\\nimport { context } from \\\"../../storybook\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Widget/Storytelling\\\",\\n  component: Component,\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nconst Template: Story<Props> = args => (\\n  <Provider value={context}>\\n    <Component {...args} />\\n  </Provider>\\n);\\n\\nexport const Default = Template.bind({});\\n\\nDefault.args = {\\n  widget: {\\n    id: \\\"\\\",\\n    property: {\\n      stories: [\\n        { layer: \\\"a\\\", title: \\\"a\\\" },\\n        { layer: \\\"b\\\", title: \\\"b\\\" },\\n        { layer: \\\"c\\\", title: \\\"c\\\" },\\n      ],\\n    },\\n  },\\n  isBuilt: false,\\n  isEditable: false,\\n};\\n\\nexport const AutoStart = Template.bind({});\\n\\nAutoStart.args = {\\n  widget: {\\n    id: \\\"\\\",\\n    property: {\\n      stories: [\\n        { layer: \\\"a\\\", title: \\\"a\\\" },\\n        { layer: \\\"b\\\", title: \\\"b\\\" },\\n        { layer: \\\"c\\\", title: \\\"c\\\" },\\n      ],\\n      default: { autoStart: true },\\n    },\\n  },\\n  isBuilt: false,\\n  isEditable: false,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":31,\"line\":14},\"endLoc\":{\"col\":1,\"line\":18},\"startBody\":{\"col\":31,\"line\":14},\"endBody\":{\"col\":1,\"line\":18}},\"AutoStart\":{\"startLoc\":{\"col\":31,\"line\":14},\"endLoc\":{\"col\":1,\"line\":18},\"startBody\":{\"col\":31,\"line\":14},\"endBody\":{\"col\":1,\"line\":18}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\n\nimport Component, { Props } from \".\";\nimport { Provider } from \"../../context\";\nimport { context } from \"../../storybook\";\n\nexport default {\n  title: \"molecules/Visualizer/Widget/Storytelling\",\n  component: Component,\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nconst Template: Story<Props> = args => (\n  <Provider value={context}>\n    <Component {...args} />\n  </Provider>\n);\n\nexport const Default = Template.bind({});;\n\nDefault.args = {\n  widget: {\n    id: \"\",\n    property: {\n      stories: [\n        { layer: \"a\", title: \"a\" },\n        { layer: \"b\", title: \"b\" },\n        { layer: \"c\", title: \"c\" },\n      ],\n    },\n  },\n  isBuilt: false,\n  isEditable: false,\n};\n\nexport const AutoStart = Template.bind({});\n\nAutoStart.args = {\n  widget: {\n    id: \"\",\n    property: {\n      stories: [\n        { layer: \"a\", title: \"a\" },\n        { layer: \"b\", title: \"b\" },\n        { layer: \"c\", title: \"c\" },\n      ],\n      default: { autoStart: true },\n    },\n  },\n  isBuilt: false,\n  isEditable: false,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => (\\n  <Provider value={context}>\\n    <Component {...args} />\\n  </Provider>\\n)\" }, ...Default.parameters };\nAutoStart.parameters = { storySource: { source: \"args => (\\n  <Provider value={context}>\\n    <Component {...args} />\\n  </Provider>\\n)\" }, ...AutoStart.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport { Math as CesiumMath } from \\\"cesium\\\";\\n\\nimport Widget, { Props } from \\\".\\\";\\nimport { Provider } from \\\"../context\\\";\\nimport { context } from \\\"../storybook\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer/Widget\\\",\\n  component: Widget,\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nexport const Default: Story<Props> = args => (\\n  <Provider value={context}>\\n    <Widget {...args} />\\n  </Provider>\\n);\\n\\nDefault.args = {\\n  widget: {\\n    id: \\\"\\\",\\n    pluginId: \\\"reearth\\\",\\n    extensionId: \\\"menu\\\",\\n    property: {\\n      buttons: [\\n        {\\n          id: \\\"menu\\\",\\n          buttonType: \\\"menu\\\",\\n          buttonTitle: \\\"Menu\\\",\\n          buttonPosition: \\\"topleft\\\",\\n          buttonStyle: \\\"text\\\",\\n        },\\n        {\\n          id: \\\"google\\\",\\n          buttonType: \\\"link\\\",\\n          buttonLink: \\\"https://google.com\\\",\\n          buttonTitle: \\\"Google\\\",\\n          buttonPosition: \\\"topleft\\\",\\n          buttonStyle: \\\"text\\\",\\n          buttonBgcolor: \\\"red\\\",\\n        },\\n        {\\n          id: \\\"twitter\\\",\\n          buttonType: \\\"link\\\",\\n          buttonLink: \\\"https://twitter.com\\\",\\n          buttonTitle: \\\"Twitter\\\",\\n          buttonPosition: \\\"bottomright\\\",\\n          buttonStyle: \\\"text\\\",\\n          buttonBgcolor: \\\"#0ff\\\",\\n        },\\n        {\\n          id: \\\"hoge\\\",\\n          buttonType: \\\"camera\\\",\\n          buttonPosition: \\\"bottomright\\\",\\n          buttonCamera: {\\n            lat: 0,\\n            lng: 0,\\n            height: 1000,\\n            fov: CesiumMath.toRadians(60),\\n            heading: 0,\\n            pitch: 0,\\n            roll: 0,\\n          },\\n          buttonTitle: \\\"hoge\\\",\\n        },\\n        {\\n          id: \\\"menu2\\\",\\n          buttonType: \\\"menu\\\",\\n          buttonIcon: \\\"/sample.svg\\\",\\n          buttonPosition: \\\"bottomleft\\\",\\n          buttonStyle: \\\"icon\\\",\\n        },\\n        {\\n          id: \\\"menu3\\\",\\n          buttonType: \\\"menu\\\",\\n          buttonTitle: \\\"Menu\\\",\\n          buttonIcon: \\\"/sample.svg\\\",\\n          buttonPosition: \\\"bottomleft\\\",\\n          buttonStyle: \\\"texticon\\\",\\n        },\\n      ],\\n      menu: [\\n        {\\n          id: \\\"hoge\\\",\\n          menuTitle: \\\"Hoge\\\",\\n          menuType: \\\"camera\\\",\\n          menuCamera: {\\n            lat: 0,\\n            lng: 0,\\n            height: 1000,\\n            fov: CesiumMath.toRadians(60),\\n            heading: 0,\\n            pitch: 0,\\n            roll: 0,\\n          },\\n        },\\n        {\\n          id: \\\"hoge\\\",\\n          menuType: \\\"border\\\",\\n        },\\n        {\\n          id: \\\"GitHub\\\",\\n          menuType: \\\"link\\\",\\n          menuTitle: \\\"GitHub\\\",\\n          menuLink: \\\"https://github.com\\\",\\n        },\\n      ],\\n    },\\n  },\\n  isBuilt: false,\\n  isEditable: false,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":37,\"line\":15},\"endLoc\":{\"col\":1,\"line\":19},\"startBody\":{\"col\":37,\"line\":15},\"endBody\":{\"col\":1,\"line\":19}}};\n    \nimport React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport { Math as CesiumMath } from \"cesium\";\n\nimport Widget, { Props } from \".\";\nimport { Provider } from \"../context\";\nimport { context } from \"../storybook\";\n\nexport default {\n  title: \"molecules/Visualizer/Widget\",\n  component: Widget,\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nexport const Default: Story<Props> = args => (\n  <Provider value={context}>\n    <Widget {...args} />\n  </Provider>\n);\n\nDefault.args = {\n  widget: {\n    id: \"\",\n    pluginId: \"reearth\",\n    extensionId: \"menu\",\n    property: {\n      buttons: [\n        {\n          id: \"menu\",\n          buttonType: \"menu\",\n          buttonTitle: \"Menu\",\n          buttonPosition: \"topleft\",\n          buttonStyle: \"text\",\n        },\n        {\n          id: \"google\",\n          buttonType: \"link\",\n          buttonLink: \"https://google.com\",\n          buttonTitle: \"Google\",\n          buttonPosition: \"topleft\",\n          buttonStyle: \"text\",\n          buttonBgcolor: \"red\",\n        },\n        {\n          id: \"twitter\",\n          buttonType: \"link\",\n          buttonLink: \"https://twitter.com\",\n          buttonTitle: \"Twitter\",\n          buttonPosition: \"bottomright\",\n          buttonStyle: \"text\",\n          buttonBgcolor: \"#0ff\",\n        },\n        {\n          id: \"hoge\",\n          buttonType: \"camera\",\n          buttonPosition: \"bottomright\",\n          buttonCamera: {\n            lat: 0,\n            lng: 0,\n            height: 1000,\n            fov: CesiumMath.toRadians(60),\n            heading: 0,\n            pitch: 0,\n            roll: 0,\n          },\n          buttonTitle: \"hoge\",\n        },\n        {\n          id: \"menu2\",\n          buttonType: \"menu\",\n          buttonIcon: \"/sample.svg\",\n          buttonPosition: \"bottomleft\",\n          buttonStyle: \"icon\",\n        },\n        {\n          id: \"menu3\",\n          buttonType: \"menu\",\n          buttonTitle: \"Menu\",\n          buttonIcon: \"/sample.svg\",\n          buttonPosition: \"bottomleft\",\n          buttonStyle: \"texticon\",\n        },\n      ],\n      menu: [\n        {\n          id: \"hoge\",\n          menuTitle: \"Hoge\",\n          menuType: \"camera\",\n          menuCamera: {\n            lat: 0,\n            lng: 0,\n            height: 1000,\n            fov: CesiumMath.toRadians(60),\n            heading: 0,\n            pitch: 0,\n            roll: 0,\n          },\n        },\n        {\n          id: \"hoge\",\n          menuType: \"border\",\n        },\n        {\n          id: \"GitHub\",\n          menuType: \"link\",\n          menuTitle: \"GitHub\",\n          menuLink: \"https://github.com\",\n        },\n      ],\n    },\n  },\n  isBuilt: false,\n  isEditable: false,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => (\\n  <Provider value={context}>\\n    <Widget {...args} />\\n  </Provider>\\n)\" }, ...Default.parameters };","import { styled } from \"@reearth/theme\";\n\nconst Filled = styled.div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n`;\n\nexport default Filled;\n","import React from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { styled } from \"@reearth/theme\";\n\nexport interface Props {\n  className?: string;\n}\n\nconst DropHolder: React.FC<Props> = ({ className }) => {\n  const intl = useIntl();\n\n  return (\n    <DraggableView className={className}>\n      <DragMessage>{intl.formatMessage({ defaultMessage: \"Drop here\" })}</DragMessage>\n    </DraggableView>\n  );\n};\n\nconst DraggableView = styled.div`\n  position: absolute;\n  z-index: ${props => props.theme.zIndexes.dropDown};\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: ${props => props.theme.main.accent};\n  opacity: 0.5;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst DragMessage = styled.p`\n  color: ${props => props.theme.main.text};\n  opacity: 1;\n`;\n\nexport default DropHolder;\n","import { FlyToDestination, CameraOptions, LookAtDestination } from \"@reearth/plugin\";\nimport type { CommonGlobalThis } from \"./context\";\nimport { EngineRef } from \"./Engine/ref\";\n\nexport type Options = {\n  engine: () => EngineRef | null;\n  selectPrimitive: (id?: string, options?: { reason?: string }) => void;\n  showPrimitive: (...id: string[]) => void;\n  hidePrimitive: (...id: string[]) => void;\n};\n\nexport default function (options: Options): CommonGlobalThis {\n  const primitives = getPrimitives(options);\n  const visualizer = getVisualizer(options);\n\n  const consolelog = (...args: any[]) => {\n    console.log(...args);\n  };\n  const consolerror = (...args: any[]) => {\n    console.error(...args);\n  };\n\n  // use only static values to avoid \"Lifetime not alive\" error\n  const api: CommonGlobalThis = {\n    console: {\n      log: consolelog,\n      error: consolerror,\n    },\n    reearth: {\n      get version() {\n        return window.REEARTH_CONFIG?.version || \"\";\n      },\n      get apiVersion() {\n        return 0;\n      },\n      primitives,\n      visualizer,\n    },\n  };\n\n  return api;\n}\n\nfunction getPrimitives({\n  selectPrimitive,\n  showPrimitive,\n  hidePrimitive,\n}: Options): CommonGlobalThis[\"reearth\"][\"primitives\"] {\n  return {\n    select: selectPrimitive.bind(undefined),\n    show: showPrimitive.bind(undefined),\n    hide: hidePrimitive.bind(undefined),\n  };\n}\n\nfunction getVisualizer({ engine }: Options): CommonGlobalThis[\"reearth\"][\"visualizer\"] {\n  const flyTo = (dest: FlyToDestination, options?: CameraOptions) => engine()?.flyTo(dest, options);\n  const lookAt = (dest: LookAtDestination, options?: CameraOptions) =>\n    engine()?.lookAt(dest, options);\n  const zoomIn = (amount: number) => engine()?.zoomIn(amount);\n  const zoomOut = (amount: number) => engine()?.zoomOut(amount);\n\n  return {\n    get engine() {\n      return engine()?.name ?? \"\";\n    },\n    flyTo,\n    lookAt,\n    zoomIn,\n    zoomOut,\n  };\n}\n","import { useRef, useEffect, useMemo, useState, useCallback, RefObject } from \"react\";\nimport ReactGA from \"react-ga\";\n\nimport { useDrop, DropOptions } from \"@reearth/util/use-dnd\";\nimport { Camera } from \"@reearth/util/value\";\nimport { VisualizerContext } from \"./context\";\nimport api from \"./api\";\nimport type {\n  OverriddenInfobox,\n  Ref as EngineRef,\n  SceneProperty,\n  SelectPrimitiveOptions,\n} from \"./Engine\";\nimport type { Props as InfoboxProps, Block } from \"./Infobox\";\nimport type { Primitive } from \".\";\n\nexport default ({\n  engineType,\n  rootLayerId,\n  isEditable,\n  isBuilt,\n  isPublished,\n  primitives,\n  selectedPrimitiveId: outerSelectedPrimitiveId,\n  selectedBlockId: outerSelectedBlockId,\n  camera,\n  sceneProperty,\n  onPrimitiveSelect,\n  onBlockSelect,\n  onCameraChange,\n}: {\n  engineType?: string;\n  rootLayerId?: string;\n  isEditable?: boolean;\n  isBuilt?: boolean;\n  isPublished?: boolean;\n  primitives?: Primitive[];\n  selectedPrimitiveId?: string;\n  selectedBlockId?: string;\n  camera?: Camera;\n  sceneProperty?: SceneProperty;\n  onPrimitiveSelect?: (id?: string) => void;\n  onBlockSelect?: (id?: string) => void;\n  onCameraChange?: (c: Camera) => void;\n}) => {\n  const engineRef = useRef<EngineRef>(null);\n\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const { ref: dropRef, isDroppable } = useDrop(\n    useMemo(\n      (): DropOptions => ({\n        accept: [\"primitive\", \"datasetSchema\"],\n        drop(_item, context) {\n          if (!rootLayerId || !isEditable) return;\n          const loc = context.position\n            ? engineRef.current?.getLocationFromScreenXY(context.position.x, context.position.y)\n            : undefined;\n          return {\n            type: \"earth\",\n            layerId: rootLayerId,\n            position: loc ? { lat: loc.lat, lng: loc.lng, height: loc.height } : undefined,\n          };\n        },\n        wrapperRef,\n      }),\n      [rootLayerId, isEditable],\n    ),\n  );\n  dropRef(wrapperRef);\n\n  const {\n    selectedPrimitive,\n    selectedPrimitiveId,\n    primitiveSelectionReason,\n    primitiveOverridenInfobox,\n    infobox,\n    selectPrimitive,\n  } = usePrimitiveSelection({\n    primitives,\n    selectedPrimitiveId: outerSelectedPrimitiveId,\n    onPrimitiveSelect,\n  });\n\n  const [selectedBlockId, selectBlock] = useInnerState<string>(outerSelectedBlockId, onBlockSelect);\n\n  useEffect(() => {\n    if (!isEditable || !isBuilt) {\n      selectBlock();\n    }\n  }, [isEditable, isBuilt, selectBlock]);\n\n  // update cesium\n  useEffect(() => {\n    engineRef.current?.requestRender();\n  });\n\n  const [innerCamera, setInnerCamera] = useState(camera);\n  useEffect(() => {\n    setInnerCamera(camera);\n  }, [camera]);\n  const updateCamera = useCallback(\n    (camera: Camera) => {\n      setInnerCamera(camera);\n      onCameraChange?.(camera);\n    },\n    [onCameraChange],\n  );\n\n  const hiddenPrimitivesSet = useMemo(() => new Set<string>(), []);\n  const [hiddenPrimitives, setHiddenPrimitives] = useState<string[]>([]);\n  const showPrimitive = useCallback(\n    (...ids: string[]) => {\n      for (const id of ids) {\n        hiddenPrimitivesSet.delete(id);\n      }\n      setHiddenPrimitives(Array.from(hiddenPrimitivesSet.values()));\n    },\n    [hiddenPrimitivesSet],\n  );\n  const hidePrimitive = useCallback(\n    (...ids: string[]) => {\n      for (const id of ids) {\n        hiddenPrimitivesSet.add(id);\n      }\n      setHiddenPrimitives(Array.from(hiddenPrimitivesSet.values()));\n    },\n    [hiddenPrimitivesSet],\n  );\n\n  const { enableGA, trackingId } = sceneProperty?.googleAnalytics || {};\n  useEffect(() => {\n    if (!isPublished || !enableGA || !trackingId) return;\n    ReactGA.initialize(trackingId);\n    ReactGA.pageview(window.location.pathname);\n  }, [isPublished, enableGA, trackingId]);\n\n  const visualizerContext = useVisualizerContext({\n    engine: engineRef,\n    primitives,\n    camera: innerCamera,\n    selectedPrimitive,\n    primitiveSelectionReason,\n    primitiveOverridenInfobox,\n    selectPrimitive,\n    showPrimitive,\n    hidePrimitive,\n  });\n\n  useEffect(() => {\n    const c = engineRef.current?.getCamera();\n    if (c) {\n      setInnerCamera(c);\n    }\n  }, [engineType]);\n\n  return {\n    engineRef,\n    wrapperRef,\n    isDroppable,\n    visualizerContext,\n    hiddenPrimitives,\n    selectedPrimitiveId,\n    primitiveSelectionReason,\n    selectedPrimitive,\n    selectedBlockId,\n    innerCamera,\n    infobox,\n    selectPrimitive,\n    selectBlock,\n    updateCamera,\n  };\n};\n\nfunction usePrimitiveSelection({\n  primitives,\n  selectedPrimitiveId: outerSelectedPrimitiveId,\n  onPrimitiveSelect,\n}: {\n  primitives?: Primitive[];\n  selectedPrimitiveId?: string;\n  infobox?: Pick<\n    InfoboxProps,\n    \"infoboxKey\" | \"title\" | \"blocks\" | \"visible\" | \"property\" | \"primitive\" | \"isEditable\"\n  >;\n  primitiveOverridenInfobox?: OverriddenInfobox;\n  onPrimitiveSelect?: (id?: string, options?: SelectPrimitiveOptions) => void;\n}) {\n  const [selectedPrimitiveId, innerSelectPrimitive] = useState<string | undefined>();\n  const [primitiveSelectionReason, setSelectionReason] = useState<string | undefined>();\n  const [primitiveOverridenInfobox, setPrimitiveOverridenInfobox] = useState<OverriddenInfobox>();\n\n  const selectedPrimitive = useMemo(\n    () => (selectedPrimitiveId ? primitives?.find(p => p.id === selectedPrimitiveId) : undefined),\n    [selectedPrimitiveId, primitives],\n  );\n\n  const selectPrimitive = useCallback(\n    (id?: string, { reason, overriddenInfobox }: SelectPrimitiveOptions = {}) => {\n      innerSelectPrimitive(id);\n      onPrimitiveSelect?.(id);\n      setSelectionReason(reason);\n      setPrimitiveOverridenInfobox(overriddenInfobox);\n    },\n    [onPrimitiveSelect],\n  );\n\n  const blocks = useMemo(\n    (): Block[] | undefined => overridenInfoboxBlocks(primitiveOverridenInfobox),\n    [primitiveOverridenInfobox],\n  );\n\n  const infobox = useMemo<\n    | Pick<\n        InfoboxProps,\n        \"infoboxKey\" | \"title\" | \"blocks\" | \"visible\" | \"property\" | \"primitive\" | \"isEditable\"\n      >\n    | undefined\n  >(\n    () =>\n      selectedPrimitive\n        ? {\n            infoboxKey: selectedPrimitive.id,\n            title: primitiveOverridenInfobox?.title || selectedPrimitive.title,\n            isEditable: !primitiveOverridenInfobox && selectedPrimitive.infoboxEditable,\n            visible: !!selectedPrimitive?.infobox,\n            property: selectedPrimitive?.infobox?.property,\n            primitive: selectedPrimitive,\n            blocks: blocks ?? selectedPrimitive.infobox?.blocks,\n          }\n        : undefined,\n    [selectedPrimitive, primitiveOverridenInfobox, blocks],\n  );\n\n  useEffect(() => {\n    innerSelectPrimitive(outerSelectedPrimitiveId);\n    setSelectionReason(undefined);\n    setPrimitiveOverridenInfobox(undefined);\n  }, [outerSelectedPrimitiveId]);\n\n  return {\n    selectedPrimitive,\n    selectedPrimitiveId,\n    primitiveSelectionReason,\n    infobox,\n    primitiveOverridenInfobox,\n    selectPrimitive,\n  };\n}\n\nfunction useInnerState<T>(\n  value: T | undefined,\n  onChange: ((value?: T) => void) | undefined,\n): readonly [T | undefined, (value?: T) => void] {\n  const [innerState, innerSetState] = useState<T>();\n\n  const setState = useCallback(\n    (newValue?: T) => {\n      innerSetState(newValue);\n      onChange?.(newValue);\n    },\n    [onChange],\n  );\n\n  useEffect(() => {\n    innerSetState(value);\n  }, [value]);\n\n  return [innerState, setState];\n}\n\nfunction useVisualizerContext({\n  engine,\n  camera,\n  primitives = [],\n  selectedPrimitive,\n  primitiveSelectionReason,\n  primitiveOverridenInfobox,\n  showPrimitive,\n  hidePrimitive,\n  selectPrimitive,\n}: {\n  engine: RefObject<EngineRef>;\n  camera?: Camera;\n  primitives?: Primitive[];\n  selectedPrimitive: Primitive | undefined;\n  primitiveSelectionReason?: string;\n  primitiveOverridenInfobox?: OverriddenInfobox;\n  showPrimitive: (...id: string[]) => void;\n  hidePrimitive: (...id: string[]) => void;\n  selectPrimitive: (id?: string, options?: { reason?: string }) => void;\n}): VisualizerContext {\n  const pluginAPI = useMemo(\n    () =>\n      api({\n        engine: () => engine.current,\n        hidePrimitive,\n        selectPrimitive,\n        showPrimitive,\n      }),\n    [engine, hidePrimitive, selectPrimitive, showPrimitive],\n  );\n\n  const ctx = useMemo((): VisualizerContext => {\n    return {\n      engine: engine.current ?? undefined,\n      camera,\n      primitives,\n      selectedPrimitive,\n      primitiveSelectionReason,\n      primitiveOverridenInfobox,\n      pluginAPI,\n    };\n  }, [\n    camera,\n    engine,\n    pluginAPI,\n    primitives,\n    selectedPrimitive,\n    primitiveSelectionReason,\n    primitiveOverridenInfobox,\n  ]);\n\n  return ctx;\n}\n\nfunction overridenInfoboxBlocks(\n  overriddenInfobox: OverriddenInfobox | undefined,\n): Block[] | undefined {\n  return overriddenInfobox && Array.isArray(overriddenInfobox?.content)\n    ? [\n        {\n          id: \"content\",\n          pluginId: \"reearth\",\n          extensionId: \"dlblock\",\n          property: {\n            items: overriddenInfobox.content.map((c, i) => ({\n              id: i,\n              item_title: c.key,\n              item_datastr: String(c.value),\n              item_datatype: \"string\",\n            })),\n          },\n        },\n      ]\n    : undefined;\n}\n","import React, {\n  ForwardRefRenderFunction,\n  PropsWithChildren,\n  ComponentType,\n  PropsWithoutRef,\n  ReactNode,\n  RefAttributes,\n  CSSProperties,\n  forwardRef,\n} from \"react\";\n\nimport { SelectPrimitiveOptions } from \"@reearth/plugin\";\nimport type { Camera } from \"@reearth/util/value\";\nimport type { EngineRef } from \"./ref\";\nimport Cesium from \"./Cesium\";\n\nexport type { OverriddenInfobox, SelectPrimitiveOptions } from \"@reearth/plugin\";\n\nexport type SceneProperty = {\n  default?: {\n    camera?: Camera;\n    terrain?: boolean;\n    terrainExaggeration?: number; // default: 1\n    terrainExaggerationRelativeHeight?: number; // default: 0\n    depthTestAgainstTerrain?: boolean;\n    skybox?: boolean;\n    bgcolor?: string;\n    ion?: string;\n  };\n  tiles?: {\n    id: string;\n    tile_type?: string;\n    tile_url?: string;\n    tile_maxLevel?: number;\n    tile_minLevel?: number;\n  }[];\n  atmosphere?: {\n    enable_sun?: boolean;\n    enable_lighting?: boolean;\n    ground_atmosphere?: boolean;\n    sky_atmosphere?: boolean;\n    shadows?: boolean;\n    fog?: boolean;\n    fog_density?: number;\n    brightness_shift?: number;\n    hue_shift?: number;\n    surturation_shift?: number;\n  };\n  timeline?: {\n    animation?: boolean;\n  };\n  googleAnalytics?: {\n    enableGA?: boolean;\n    trackingId?: string;\n  };\n};\n\nexport type EngineProps = {\n  className?: string;\n  style?: CSSProperties;\n  isEditable?: boolean;\n  isBuilt?: boolean;\n  property?: SceneProperty;\n  camera?: Camera;\n  small?: boolean;\n  children?: ReactNode;\n  ready?: boolean;\n  selectedPrimitiveId?: string;\n  primitiveSelectionReason?: string;\n  onPrimitiveSelect?: (id?: string, options?: SelectPrimitiveOptions) => void;\n  onCameraChange?: (camera: Camera) => void;\n};\n\nexport type Component = ComponentType<PropsWithoutRef<EngineProps> & RefAttributes<Ref>>;\nexport type Props = PropsWithChildren<EngineProps & { engine?: Engine }>;\nexport type Ref = EngineRef;\nexport type Engine = keyof typeof engines;\n\n// TODO: lazy loading\nconst engines = {\n  cesium: Cesium,\n};\n\nconst Engine: ForwardRefRenderFunction<Ref, Props> = ({ engine, children, ...props }, ref) => {\n  const Engine: Component | undefined = engine ? engines[engine] : undefined;\n\n  return Engine ? (\n    <Engine {...props} ref={ref}>\n      {children}\n    </Engine>\n  ) : null;\n};\n\nexport default forwardRef(Engine);\n","import React, { ComponentType, useMemo } from \"react\";\n\nimport { useVisualizerContext } from \"../context\";\nimport { Primitive } from \"../Plugin\";\n// import Plugins, { Widget } from \"../Plugin\";\n\nexport type { Primitive } from \"../Plugin\";\n\nexport type Props<PP = any, SP = any> = {\n  primitive?: Primitive;\n  isEditable?: boolean;\n  isBuilt?: boolean;\n  isSelected?: boolean;\n  isHidden?: boolean;\n  pluginProperty?: PP;\n  sceneProperty?: SP;\n  pluginBaseUrl?: string;\n};\n\nexport type Component<PP = any, SP = any> = ComponentType<Props<PP, SP>>;\n\nexport default function PrimitiveComponent<PP = any, SP = any>({\n  isHidden,\n  pluginBaseUrl: _pluginBaseUrl,\n  ...props\n}: Props<PP, SP>) {\n  const ctx = useVisualizerContext();\n  const Builtin = useMemo(() => {\n    const builtin = ctx?.engine?.builtinPrimitives;\n    return props.primitive?.pluginId && props.primitive.extensionId\n      ? builtin?.[`${props.primitive.pluginId}/${props.primitive.extensionId}`]\n      : undefined;\n  }, [ctx, props.primitive?.extensionId, props.primitive?.pluginId]);\n\n  return isHidden || !props.primitive?.isVisible ? null : Builtin ? <Builtin {...props} /> : null; // TODO: primitive plugin is unsupported yet\n  // <Plugin\n  //   pluginId={props.primitive?.pluginId}\n  //   extensionId={props.primitive?.extensionId}\n  //   sourceCode={(props.primitive as any)?.__REEARTH_SOURCECODE} // for debugging\n  //   extensionType=\"primitive\"\n  //   pluginBaseUrl={pluginBaseUrl}\n  //   visible={false}\n  //   property={props.pluginProperty}\n  //   sceneProperty={props.sceneProperty}\n  //   primitive={props.primitive}\n  // />\n}\n","import React, { PropsWithChildren } from \"react\";\n\nimport Filled from \"@reearth/components/atoms/Filled\";\nimport DropHolder from \"@reearth/components/atoms/DropHolder\";\n\nimport useHooks from \"./hooks\";\nimport { Provider } from \"./context\";\nimport Engine, { Props as EngineProps, SceneProperty } from \"./Engine\";\nimport P, { Primitive as PrimitiveType } from \"./Primitive\";\nimport W, { Widget as WidgetType } from \"./Widget\";\nimport Infobox, { Block as BlockType, InfoboxProperty, Props as InfoboxProps } from \"./Infobox\";\n\nexport type { VisualizerContext } from \"./context\";\nexport type { SceneProperty } from \"./Engine\";\n\nexport type Infobox = {\n  blocks?: Block[];\n  property?: InfoboxProperty;\n};\n\nexport type Primitive = PrimitiveType & {\n  infoboxEditable?: boolean;\n  pluginProperty?: any;\n};\n\nexport type Widget = WidgetType & {\n  pluginProperty?: any;\n};\n\nexport type Block = BlockType;\n\nexport type Props = PropsWithChildren<\n  {\n    rootLayerId?: string;\n    primitives?: Primitive[];\n    widgets?: Widget[];\n    sceneProperty?: SceneProperty;\n    selectedBlockId?: string;\n    pluginBaseUrl?: string;\n    isPublished?: boolean;\n    renderInfoboxInsertionPopUp?: InfoboxProps[\"renderInsertionPopUp\"];\n    onPrimitiveSelect?: (id?: string) => void;\n  } & Omit<EngineProps, \"children\" | \"property\" | \"onPrimitiveSelect\"> &\n    Pick<\n      InfoboxProps,\n      \"onBlockChange\" | \"onBlockDelete\" | \"onBlockMove\" | \"onBlockInsert\" | \"onBlockSelect\"\n    >\n>;\n\nexport default function Visualizer({\n  rootLayerId,\n  primitives,\n  widgets,\n  sceneProperty,\n  selectedPrimitiveId: outerSelectedPrimitiveId,\n  selectedBlockId: outerSelectedBlockId,\n  children,\n  pluginBaseUrl,\n  isPublished,\n  onPrimitiveSelect,\n  renderInfoboxInsertionPopUp,\n  onBlockChange,\n  onBlockDelete,\n  onBlockMove,\n  onBlockInsert,\n  onBlockSelect,\n  ...props\n}: Props): JSX.Element {\n  const {\n    engineRef,\n    wrapperRef,\n    isDroppable,\n    hiddenPrimitives,\n    visualizerContext,\n    selectedPrimitive,\n    selectedPrimitiveId,\n    primitiveSelectionReason,\n    selectedBlockId,\n    innerCamera,\n    infobox,\n    selectPrimitive,\n    selectBlock,\n    updateCamera,\n  } = useHooks({\n    engineType: props.engine,\n    rootLayerId,\n    isEditable: props.isEditable,\n    isBuilt: props.isBuilt,\n    isPublished,\n    primitives,\n    selectedPrimitiveId: outerSelectedPrimitiveId,\n    selectedBlockId: outerSelectedBlockId,\n    camera: props.camera,\n    sceneProperty,\n    onPrimitiveSelect,\n    onBlockSelect,\n    onCameraChange: props.onCameraChange,\n  });\n\n  return (\n    <Provider value={visualizerContext}>\n      <Filled ref={wrapperRef}>\n        {isDroppable && <DropHolder />}\n        <Engine\n          ref={engineRef}\n          property={sceneProperty}\n          selectedPrimitiveId={selectedPrimitive?.id}\n          primitiveSelectionReason={primitiveSelectionReason}\n          onPrimitiveSelect={selectPrimitive}\n          {...props}\n          camera={innerCamera}\n          onCameraChange={updateCamera}>\n          {primitives?.map(primitive => (\n            <P\n              key={primitive.id}\n              primitive={primitive}\n              sceneProperty={sceneProperty}\n              pluginProperty={primitive.pluginProperty}\n              isHidden={hiddenPrimitives.includes(primitive.id)}\n              isEditable={props.isEditable}\n              isBuilt={props.isBuilt}\n              isSelected={!!selectedPrimitiveId && selectedPrimitiveId === primitive.id}\n              pluginBaseUrl={pluginBaseUrl}\n            />\n          ))}\n          {widgets?.map(widget => (\n            <W\n              key={widget.id}\n              widget={widget}\n              sceneProperty={sceneProperty}\n              pluginProperty={widget.pluginProperty}\n              isEditable={props.isEditable}\n              isBuilt={props.isBuilt}\n              pluginBaseUrl={pluginBaseUrl}\n            />\n          ))}\n        </Engine>\n        <Infobox\n          title={infobox?.title}\n          infoboxKey={infobox?.infoboxKey}\n          visible={!!infobox?.visible}\n          property={infobox?.property}\n          sceneProperty={sceneProperty}\n          primitive={infobox?.primitive}\n          blocks={infobox?.blocks}\n          selectedBlockId={selectedBlockId}\n          isBuilt={props.isBuilt}\n          isEditable={props.isEditable && !!infobox?.isEditable}\n          onBlockChange={onBlockChange}\n          onBlockDelete={onBlockDelete}\n          onBlockMove={onBlockMove}\n          onBlockInsert={onBlockInsert}\n          onBlockSelect={selectBlock}\n          renderInsertionPopUp={renderInfoboxInsertionPopUp}\n          pluginBaseUrl={pluginBaseUrl}\n        />\n        {children}\n      </Filled>\n    </Provider>\n  );\n}\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useMemo, useState } from \\\"react\\\";\\nimport { Meta, Story } from \\\"@storybook/react\\\";\\nimport Component, { Primitive, Widget, Props } from \\\".\\\";\\n\\nexport default {\\n  title: \\\"molecules/Visualizer\\\",\\n  component: Component,\\n  argTypes: {\\n    onBlockChange: { action: \\\"onBlockChange\\\" },\\n    onBlockDelete: { action: \\\"onBlockDelete\\\" },\\n    onBlockMove: { action: \\\"onBlockMove\\\" },\\n    onBlockInsert: { action: \\\"onBlockInsert\\\" },\\n    onBlockSelect: { action: \\\"onBlockSelect\\\" },\\n  },\\n  parameters: { actions: { argTypesRegex: \\\"^on.*\\\" } },\\n} as Meta;\\n\\nconst primitives: Primitive[] = [\\n  {\\n    id: \\\"1\\\",\\n    pluginId: \\\"reearth\\\",\\n    extensionId: \\\"marker\\\",\\n    title: \\\"hoge\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        location: { lat: 35.3929, lng: 139.4428 },\\n        height: 0,\\n      },\\n    },\\n    infobox: {},\\n  },\\n  {\\n    id: \\\"2\\\",\\n    pluginId: \\\"reearth\\\",\\n    extensionId: \\\"marker\\\",\\n    title: \\\"hoge\\\",\\n    isVisible: true,\\n    infoboxEditable: true,\\n    property: {\\n      default: {\\n        location: { lat: 34.3929, lng: 139.4428 },\\n        height: 0,\\n      },\\n    },\\n    infobox: {\\n      blocks: [\\n        {\\n          id: \\\"1\\\",\\n          pluginId: \\\"reearth\\\",\\n          extensionId: \\\"textblock\\\",\\n          property: {\\n            default: {\\n              text: \\\"```\\\\naaaaa\\\\n```\\\",\\n              markdown: true,\\n            },\\n          },\\n        },\\n      ],\\n      property: {\\n        default: {\\n          title: \\\"Foo\\\",\\n          bgcolor: \\\"#0ff\\\",\\n        },\\n      },\\n    },\\n  },\\n  {\\n    id: \\\"3\\\",\\n    pluginId: \\\"reearth\\\",\\n    extensionId: \\\"tileset\\\",\\n    title: \\\"tiles\\\",\\n    isVisible: true,\\n    property: {\\n      default: {\\n        tileset: `https://plateau.reearth.io/13109_shinagawa-ku/tileset.json`,\\n      },\\n    },\\n    infobox: {\\n      property: {\\n        default: {\\n          bgcolor: \\\"#ccc\\\",\\n          typography: {\\n            color: \\\"#000\\\",\\n          },\\n        },\\n      },\\n    },\\n  },\\n];\\n\\nconst widgets: Widget[] = [\\n  {\\n    id: \\\"a\\\",\\n    pluginId: \\\"reearth\\\",\\n    extensionId: \\\"splashscreen\\\",\\n    property: {\\n      overlay: {\\n        overlayEnabled: true,\\n        overlayDuration: 2,\\n        overlayTransitionDuration: 1,\\n        overlayImage: `${process.env.PUBLIC_URL}/sample.svg`,\\n        overlayImageW: 648,\\n        overlayImageH: 432,\\n        overlayBgcolor: \\\"#fff8\\\",\\n      },\\n    },\\n  },\\n];\\n\\nconst Template: Story<Props> = args => <Component {...args} />;\\n\\nexport const Default = Template.bind({});\\nDefault.args = {\\n  engine: \\\"cesium\\\",\\n  rootLayerId: \\\"root\\\",\\n  primitives,\\n  widgets,\\n  sceneProperty: {\\n    tiles: [{ id: \\\"default\\\", tile_type: \\\"default\\\" }],\\n  },\\n  selectedPrimitiveId: undefined,\\n  selectedBlockId: undefined,\\n  ready: true,\\n  isEditable: true,\\n  isBuilt: false,\\n  small: false,\\n};\\n\\nexport const Selected = Template.bind({});\\nSelected.args = {\\n  ...Default.args,\\n  primitives: Default.args.primitives?.map(p => ({ ...p, infoboxEditable: true })),\\n  selectedPrimitiveId: primitives[1].id,\\n};\\n\\nexport const Built = Template.bind({});\\nBuilt.args = {\\n  ...Default.args,\\n  isEditable: false,\\n  isBuilt: true,\\n};\\n\\nconst initialSourceCode = `\\nconsole.log(\\\"hello\\\", reearth.block);\\nreearth.ui.show(\\\"<style>body { margin: 0; background: #fff; }</style><h1>Hello World</h1>\\\", { visible: true });\\n`.trim();\\n\\nexport const Plugin: Story<Props> = args => {\\n  const [temporalSourceCode, setTemporalSourceCode] = useState(initialSourceCode);\\n  const [sourceCode, setSourceCode] = useState(temporalSourceCode);\\n  const [temporalMode, setTemporalMode] = useState<\\\"block\\\" | \\\"widget\\\" | \\\"primitive\\\">(\\\"block\\\");\\n  const [mode, setMode] = useState(temporalMode);\\n\\n  const args2 = useMemo<Props>(() => {\\n    return {\\n      ...args,\\n      widgets: [\\n        ...(mode === \\\"widget\\\"\\n          ? [\\n              {\\n                id: \\\"xxx\\\",\\n                __REEARTH_SOURCECODE: sourceCode,\\n              },\\n            ]\\n          : []),\\n      ],\\n      primitives: [\\n        ...(args.primitives ?? []),\\n        {\\n          id: \\\"pluginprimitive\\\",\\n          pluginId: \\\"reearth\\\",\\n          extensionId: \\\"marker\\\",\\n          isVisible: true,\\n          property: {\\n            default: {\\n              location: { lat: 0, lng: 139 },\\n              height: 0,\\n            },\\n          },\\n          infobox: {\\n            blocks: [\\n              ...(mode === \\\"block\\\"\\n                ? [\\n                    {\\n                      id: \\\"xxx\\\",\\n                      __REEARTH_SOURCECODE: sourceCode,\\n                    },\\n                  ]\\n                : []),\\n              {\\n                id: \\\"yyy\\\",\\n                pluginId: \\\"plugins\\\",\\n                extensionId: \\\"block\\\",\\n                property: {\\n                  location: { lat: 0, lng: 139 },\\n                },\\n              },\\n            ],\\n          },\\n        },\\n        ...(mode === \\\"primitive\\\"\\n          ? [\\n              {\\n                id: \\\"xxx\\\",\\n                __REEARTH_SOURCECODE: sourceCode,\\n                isVisible: true,\\n                property: {\\n                  location: { lat: 0, lng: 130 },\\n                },\\n              },\\n            ]\\n          : []),\\n      ],\\n    };\\n  }, [args, mode, sourceCode]);\\n\\n  return (\\n    <div style={{ display: \\\"flex\\\", width: \\\"100%\\\", height: \\\"100%\\\", alignItems: \\\"stretch\\\" }}>\\n      <Component {...args2} style={{ ...args2.style, flex: \\\"1\\\" }} />\\n      <div\\n        style={{\\n          flex: \\\"1 0\\\",\\n          display: \\\"flex\\\",\\n          flexDirection: \\\"column\\\",\\n          alignItems: \\\"stretch\\\",\\n          background: \\\"#fff\\\",\\n        }}>\\n        <textarea\\n          style={{ flex: \\\"auto\\\" }}\\n          value={temporalSourceCode}\\n          onChange={e => setTemporalSourceCode(e.currentTarget.value)}\\n        />\\n        <p>\\n          <button\\n            onClick={() => {\\n              setSourceCode(temporalSourceCode ?? \\\"\\\");\\n              setMode(temporalMode);\\n            }}>\\n            Exec\\n          </button>\\n          <select\\n            value={temporalMode}\\n            onChange={e =>\\n              setTemporalMode(e.currentTarget.value as \\\"block\\\" | \\\"widget\\\" | \\\"primitive\\\")\\n            }>\\n            <option value=\\\"block\\\">Block</option>\\n            <option value=\\\"widget\\\">Widget</option>\\n            <option value=\\\"primitive\\\">Primitive</option>\\n          </select>\\n        </p>\\n      </div>\\n    </div>\\n  );\\n};\\nPlugin.args = {\\n  ...Default.args,\\n  selectedPrimitiveId: \\\"pluginprimitive\\\",\\n  pluginBaseUrl: process.env.PUBLIC_URL,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":31,\"line\":111},\"endLoc\":{\"col\":62,\"line\":111},\"startBody\":{\"col\":31,\"line\":111},\"endBody\":{\"col\":62,\"line\":111}},\"Selected\":{\"startLoc\":{\"col\":31,\"line\":111},\"endLoc\":{\"col\":62,\"line\":111},\"startBody\":{\"col\":31,\"line\":111},\"endBody\":{\"col\":62,\"line\":111}},\"Built\":{\"startLoc\":{\"col\":31,\"line\":111},\"endLoc\":{\"col\":62,\"line\":111},\"startBody\":{\"col\":31,\"line\":111},\"endBody\":{\"col\":62,\"line\":111}},\"Plugin\":{\"startLoc\":{\"col\":36,\"line\":149},\"endLoc\":{\"col\":1,\"line\":255},\"startBody\":{\"col\":36,\"line\":149},\"endBody\":{\"col\":1,\"line\":255}}};\n    \nimport React, { useMemo, useState } from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport Component, { Primitive, Widget, Props } from \".\";\n\nexport default {\n  title: \"molecules/Visualizer\",\n  component: Component,\n  argTypes: {\n    onBlockChange: { action: \"onBlockChange\" },\n    onBlockDelete: { action: \"onBlockDelete\" },\n    onBlockMove: { action: \"onBlockMove\" },\n    onBlockInsert: { action: \"onBlockInsert\" },\n    onBlockSelect: { action: \"onBlockSelect\" },\n  },\n  parameters: { actions: { argTypesRegex: \"^on.*\" } },\n} as Meta;\n\nconst primitives: Primitive[] = [\n  {\n    id: \"1\",\n    pluginId: \"reearth\",\n    extensionId: \"marker\",\n    title: \"hoge\",\n    isVisible: true,\n    property: {\n      default: {\n        location: { lat: 35.3929, lng: 139.4428 },\n        height: 0,\n      },\n    },\n    infobox: {},\n  },\n  {\n    id: \"2\",\n    pluginId: \"reearth\",\n    extensionId: \"marker\",\n    title: \"hoge\",\n    isVisible: true,\n    infoboxEditable: true,\n    property: {\n      default: {\n        location: { lat: 34.3929, lng: 139.4428 },\n        height: 0,\n      },\n    },\n    infobox: {\n      blocks: [\n        {\n          id: \"1\",\n          pluginId: \"reearth\",\n          extensionId: \"textblock\",\n          property: {\n            default: {\n              text: \"```\\naaaaa\\n```\",\n              markdown: true,\n            },\n          },\n        },\n      ],\n      property: {\n        default: {\n          title: \"Foo\",\n          bgcolor: \"#0ff\",\n        },\n      },\n    },\n  },\n  {\n    id: \"3\",\n    pluginId: \"reearth\",\n    extensionId: \"tileset\",\n    title: \"tiles\",\n    isVisible: true,\n    property: {\n      default: {\n        tileset: `https://plateau.reearth.io/13109_shinagawa-ku/tileset.json`,\n      },\n    },\n    infobox: {\n      property: {\n        default: {\n          bgcolor: \"#ccc\",\n          typography: {\n            color: \"#000\",\n          },\n        },\n      },\n    },\n  },\n];\n\nconst widgets: Widget[] = [\n  {\n    id: \"a\",\n    pluginId: \"reearth\",\n    extensionId: \"splashscreen\",\n    property: {\n      overlay: {\n        overlayEnabled: true,\n        overlayDuration: 2,\n        overlayTransitionDuration: 1,\n        overlayImage: `${process.env.PUBLIC_URL}/sample.svg`,\n        overlayImageW: 648,\n        overlayImageH: 432,\n        overlayBgcolor: \"#fff8\",\n      },\n    },\n  },\n];\n\nconst Template: Story<Props> = args => <Component {...args} />;\n\nexport const Default = Template.bind({});;\nDefault.args = {\n  engine: \"cesium\",\n  rootLayerId: \"root\",\n  primitives,\n  widgets,\n  sceneProperty: {\n    tiles: [{ id: \"default\", tile_type: \"default\" }],\n  },\n  selectedPrimitiveId: undefined,\n  selectedBlockId: undefined,\n  ready: true,\n  isEditable: true,\n  isBuilt: false,\n  small: false,\n};\n\nexport const Selected = Template.bind({});;\nSelected.args = {\n  ...Default.args,\n  primitives: Default.args.primitives?.map(p => ({ ...p, infoboxEditable: true })),\n  selectedPrimitiveId: primitives[1].id,\n};\n\nexport const Built = Template.bind({});;\nBuilt.args = {\n  ...Default.args,\n  isEditable: false,\n  isBuilt: true,\n};\n\nconst initialSourceCode = `\nconsole.log(\"hello\", reearth.block);\nreearth.ui.show(\"<style>body { margin: 0; background: #fff; }</style><h1>Hello World</h1>\", { visible: true });\n`.trim();\n\nexport const Plugin: Story<Props> = args => {\n  const [temporalSourceCode, setTemporalSourceCode] = useState(initialSourceCode);\n  const [sourceCode, setSourceCode] = useState(temporalSourceCode);\n  const [temporalMode, setTemporalMode] = useState<\"block\" | \"widget\" | \"primitive\">(\"block\");\n  const [mode, setMode] = useState(temporalMode);\n\n  const args2 = useMemo<Props>(() => {\n    return {\n      ...args,\n      widgets: [\n        ...(mode === \"widget\"\n          ? [\n              {\n                id: \"xxx\",\n                __REEARTH_SOURCECODE: sourceCode,\n              },\n            ]\n          : []),\n      ],\n      primitives: [\n        ...(args.primitives ?? []),\n        {\n          id: \"pluginprimitive\",\n          pluginId: \"reearth\",\n          extensionId: \"marker\",\n          isVisible: true,\n          property: {\n            default: {\n              location: { lat: 0, lng: 139 },\n              height: 0,\n            },\n          },\n          infobox: {\n            blocks: [\n              ...(mode === \"block\"\n                ? [\n                    {\n                      id: \"xxx\",\n                      __REEARTH_SOURCECODE: sourceCode,\n                    },\n                  ]\n                : []),\n              {\n                id: \"yyy\",\n                pluginId: \"plugins\",\n                extensionId: \"block\",\n                property: {\n                  location: { lat: 0, lng: 139 },\n                },\n              },\n            ],\n          },\n        },\n        ...(mode === \"primitive\"\n          ? [\n              {\n                id: \"xxx\",\n                __REEARTH_SOURCECODE: sourceCode,\n                isVisible: true,\n                property: {\n                  location: { lat: 0, lng: 130 },\n                },\n              },\n            ]\n          : []),\n      ],\n    };\n  }, [args, mode, sourceCode]);\n\n  return (\n    <div style={{ display: \"flex\", width: \"100%\", height: \"100%\", alignItems: \"stretch\" }}>\n      <Component {...args2} style={{ ...args2.style, flex: \"1\" }} />\n      <div\n        style={{\n          flex: \"1 0\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"stretch\",\n          background: \"#fff\",\n        }}>\n        <textarea\n          style={{ flex: \"auto\" }}\n          value={temporalSourceCode}\n          onChange={e => setTemporalSourceCode(e.currentTarget.value)}\n        />\n        <p>\n          <button\n            onClick={() => {\n              setSourceCode(temporalSourceCode ?? \"\");\n              setMode(temporalMode);\n            }}>\n            Exec\n          </button>\n          <select\n            value={temporalMode}\n            onChange={e =>\n              setTemporalMode(e.currentTarget.value as \"block\" | \"widget\" | \"primitive\")\n            }>\n            <option value=\"block\">Block</option>\n            <option value=\"widget\">Widget</option>\n            <option value=\"primitive\">Primitive</option>\n          </select>\n        </p>\n      </div>\n    </div>\n  );\n};\nPlugin.args = {\n  ...Default.args,\n  selectedPrimitiveId: \"pluginprimitive\",\n  pluginBaseUrl: process.env.PUBLIC_URL,\n};\n\n\n\nDefault.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Default.parameters };\nSelected.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Selected.parameters };\nBuilt.parameters = { storySource: { source: \"args => <Component {...args} />\" }, ...Built.parameters };\nPlugin.parameters = { storySource: { source: \"args => {\\n  const [temporalSourceCode, setTemporalSourceCode] = useState(initialSourceCode);\\n  const [sourceCode, setSourceCode] = useState(temporalSourceCode);\\n  const [temporalMode, setTemporalMode] = useState<\\\"block\\\" | \\\"widget\\\" | \\\"primitive\\\">(\\\"block\\\");\\n  const [mode, setMode] = useState(temporalMode);\\n\\n  const args2 = useMemo<Props>(() => {\\n    return {\\n      ...args,\\n      widgets: [\\n        ...(mode === \\\"widget\\\"\\n          ? [\\n              {\\n                id: \\\"xxx\\\",\\n                __REEARTH_SOURCECODE: sourceCode,\\n              },\\n            ]\\n          : []),\\n      ],\\n      primitives: [\\n        ...(args.primitives ?? []),\\n        {\\n          id: \\\"pluginprimitive\\\",\\n          pluginId: \\\"reearth\\\",\\n          extensionId: \\\"marker\\\",\\n          isVisible: true,\\n          property: {\\n            default: {\\n              location: { lat: 0, lng: 139 },\\n              height: 0,\\n            },\\n          },\\n          infobox: {\\n            blocks: [\\n              ...(mode === \\\"block\\\"\\n                ? [\\n                    {\\n                      id: \\\"xxx\\\",\\n                      __REEARTH_SOURCECODE: sourceCode,\\n                    },\\n                  ]\\n                : []),\\n              {\\n                id: \\\"yyy\\\",\\n                pluginId: \\\"plugins\\\",\\n                extensionId: \\\"block\\\",\\n                property: {\\n                  location: { lat: 0, lng: 139 },\\n                },\\n              },\\n            ],\\n          },\\n        },\\n        ...(mode === \\\"primitive\\\"\\n          ? [\\n              {\\n                id: \\\"xxx\\\",\\n                __REEARTH_SOURCECODE: sourceCode,\\n                isVisible: true,\\n                property: {\\n                  location: { lat: 0, lng: 130 },\\n                },\\n              },\\n            ]\\n          : []),\\n      ],\\n    };\\n  }, [args, mode, sourceCode]);\\n\\n  return (\\n    <div style={{ display: \\\"flex\\\", width: \\\"100%\\\", height: \\\"100%\\\", alignItems: \\\"stretch\\\" }}>\\n      <Component {...args2} style={{ ...args2.style, flex: \\\"1\\\" }} />\\n      <div\\n        style={{\\n          flex: \\\"1 0\\\",\\n          display: \\\"flex\\\",\\n          flexDirection: \\\"column\\\",\\n          alignItems: \\\"stretch\\\",\\n          background: \\\"#fff\\\",\\n        }}>\\n        <textarea\\n          style={{ flex: \\\"auto\\\" }}\\n          value={temporalSourceCode}\\n          onChange={e => setTemporalSourceCode(e.currentTarget.value)}\\n        />\\n        <p>\\n          <button\\n            onClick={() => {\\n              setSourceCode(temporalSourceCode ?? \\\"\\\");\\n              setMode(temporalMode);\\n            }}>\\n            Exec\\n          </button>\\n          <select\\n            value={temporalMode}\\n            onChange={e =>\\n              setTemporalMode(e.currentTarget.value as \\\"block\\\" | \\\"widget\\\" | \\\"primitive\\\")\\n            }>\\n            <option value=\\\"block\\\">Block</option>\\n            <option value=\\\"widget\\\">Widget</option>\\n            <option value=\\\"primitive\\\">Primitive</option>\\n          </select>\\n        </p>\\n      </div>\\n    </div>\\n  );\\n}\" }, ...Plugin.parameters };","import { useAuth0 } from \"@auth0/auth0-react\";\nimport { useEffect, useState } from \"react\";\n\nexport const errorKey = \"reeartherror\";\n\nexport default function useAuth() {\n  const { isAuthenticated, error, isLoading, loginWithRedirect, logout } = useAuth0();\n\n  return {\n    isAuthenticated: !!window.REEARTH_E2E_ACCESS_TOKEN || (isAuthenticated && !error),\n    isLoading,\n    error: error?.message,\n    login: () => loginWithRedirect(),\n    logout: () =>\n      logout({\n        returnTo: error\n          ? `${window.location.origin}?${errorKey}=${encodeURIComponent(error?.message)}`\n          : window.location.origin,\n      }),\n  };\n}\n\nexport function useCleanUrl() {\n  const { isAuthenticated, isLoading } = useAuth0();\n  const [error, setError] = useState<string>();\n\n  useEffect(() => {\n    if (isLoading) return; // ensure that Auth0 can detect errors\n\n    const params = new URLSearchParams(window.location.search);\n\n    const error = params.get(errorKey);\n    if (error) {\n      setError(error);\n    }\n\n    params.delete(\"code\");\n    params.delete(\"state\");\n    params.delete(errorKey);\n\n    const queries = params.toString();\n    const url = `${window.location.pathname}${queries ? \"?\" : \"\"}${queries}`;\n\n    history.replaceState(null, document.title, url);\n  }, [isAuthenticated, isLoading]);\n\n  return error;\n}\n","import React from \"react\";\nimport {\n  AccordionItem as AccordionItemComponent,\n  AccordionItemButton,\n  AccordionItemHeading,\n  AccordionItemPanel,\n  AccordionItemState,\n} from \"react-accessible-accordion\";\nimport Box from \"../Box\";\nimport Flex from \"../Flex\";\nimport Icon from \"../Icon\";\nimport { styled, useTheme } from \"@reearth/theme\";\n\nexport type Props = {\n  className?: string;\n  id: string;\n  heading?: React.ReactNode;\n  content?: React.ReactNode;\n  bg?: string;\n};\n\nconst AccordionItem: React.FC<Props> = ({ className, id, heading, content, bg }) => {\n  const theme = useTheme();\n  return (\n    <Box m=\"2xl\" key={id} className={className} bg={bg} data-testid=\"atoms-accordion-item\">\n      <AccordionItemComponent>\n        <AccordionItemHeading>\n          <StyledAccordionItemButton data-testid=\"atoms-accordion-item-header\">\n            <Box ph=\"2xl\">\n              <Flex align=\"center\">\n                <AccordionItemState>\n                  {({ expanded }) => (\n                    <>\n                      <StyledIcon\n                        color={theme.main.text}\n                        icon=\"arrowToggle\"\n                        size={16}\n                        open={!!expanded}\n                      />\n                      {heading}\n                    </>\n                  )}\n                </AccordionItemState>\n              </Flex>\n            </Box>\n          </StyledAccordionItemButton>\n        </AccordionItemHeading>\n        <AccordionItemPanel data-testid=\"atoms-accordion-item-content\">\n          {content}\n        </AccordionItemPanel>\n      </AccordionItemComponent>\n    </Box>\n  );\n};\n\nconst StyledIcon = styled(Icon)<{ open: boolean }>`\n  transition: transform 0.15s ease;\n  transform: ${({ open }) => open && \"translateY(10%) rotate(90deg)\"};\n`;\n\nconst StyledAccordionItemButton = styled(AccordionItemButton)`\n  outline: none;\n  cursor: pointer;\n`;\nexport default AccordionItem;\n","import React from \"react\";\nimport { Accordion as AccordionComponent } from \"react-accessible-accordion\";\nimport AccordionItem from \"./AccordionItem\";\n\nexport type Props = {\n  className?: string;\n  items?: AccordionItemType[];\n  allowZeroExpanded?: boolean;\n  allowMultipleExpanded?: boolean;\n  itemBgColor?: string;\n};\n\nexport type AccordionItemType = {\n  id: string;\n  heading?: React.ReactNode;\n  content?: React.ReactNode;\n};\n\nconst Accordion: React.FC<Props> = ({\n  className,\n  items,\n  allowMultipleExpanded,\n  allowZeroExpanded = true,\n  itemBgColor,\n}) => {\n  return (\n    <AccordionComponent\n      className={className}\n      allowZeroExpanded={allowZeroExpanded}\n      data-testid=\"atoms-accordion\"\n      allowMultipleExpanded={allowMultipleExpanded}>\n      {items?.map(i => {\n        return (\n          <AccordionItem\n            key={i.id}\n            id={i.id}\n            heading={i.heading}\n            content={i.content}\n            bg={itemBgColor}\n          />\n        );\n      })}\n    </AccordionComponent>\n  );\n};\n\nexport default Accordion;\n","import React, { useRef, useCallback, useEffect } from \"react\";\nimport { usePopper } from \"react-popper\";\n\nimport { styled } from \"@reearth/theme\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Portal from \"../Portal\";\n\nexport interface Props {\n  className?: string;\n  disabled?: boolean;\n  onClick?: () => void;\n  children?: React.ReactNode;\n}\n\nconst AdditionButton: React.FC<Props> = ({ className, children, disabled, onClick }) => {\n  const referenceElement = useRef<HTMLDivElement>(null);\n  const popperElement = useRef<HTMLDivElement>(null);\n  const { styles, attributes, update: updatePopper } = usePopper(\n    referenceElement.current,\n    popperElement.current,\n    {\n      placement: \"bottom\",\n      strategy: \"fixed\",\n      modifiers: [\n        {\n          name: \"eventListeners\",\n          enabled: false,\n          options: {\n            scroll: false,\n            resize: false,\n          },\n        },\n      ],\n    },\n  );\n\n  const handleClick = useCallback(() => {\n    if (disabled) return;\n    onClick?.();\n  }, [disabled, onClick]);\n\n  // TODO: わかりずらい。もっといい方法ありそう。\n  useEffect(() => {\n    if (children) {\n      updatePopper?.();\n    }\n  }, [children, updatePopper]);\n\n  return (\n    <Wrapper>\n      <InsertArea onClick={handleClick}>\n        <Line />\n        <Button className={className} ref={referenceElement}>\n          <StyledIcon icon=\"plusSquare\" size={13} />\n        </Button>\n        <Line />\n      </InsertArea>\n      <Portal>\n        <div ref={popperElement} style={{ ...styles.popper, zIndex: 1000 }} {...attributes.popper}>\n          {children}\n        </div>\n      </Portal>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  &:hover {\n    * {\n      visibility: visible;\n      opacity: 1;\n    }\n  }\n`;\n\nconst InsertArea = styled.div`\n  width: 100%;\n  padding: 0 0 30px 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  visibility: hidden;\n  opacity: 0;\n  transition: all 0.5s;\n`;\n\nconst StyledIcon = styled(Icon)`\n  color: ${props => props.theme.infoBox.accent};\n`;\n\nconst Button = styled.div`\n  color: ${props => props.theme.infoBox.accent};\n  margin: 0 3px;\n`;\n\nconst Line = styled.div`\n  width: 43%;\n  background-color: ${props => props.theme.main.accent};\n  height: 2px;\n  margin-top: -2px;\n`;\n\nexport default AdditionButton;\n","import React from \"react\";\nimport { styled } from \"@reearth/theme\";\nimport { Placement as PopperPlacement } from \"@popperjs/core\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Text from \"@reearth/components/atoms/Text\";\n\nexport type Placement = PopperPlacement;\n\ntype Props = {\n  className?: string;\n  title?: string;\n  description?: string;\n  img?: {\n    imagePath: string;\n    alt?: string;\n  };\n};\n\nconst Balloon: React.FC<Props> = ({ className, title, description, img }) => {\n  return (\n    <Wrapper className={className}>\n      <TitleWrapper onlyTitle={!description}>\n        <StyledIcon icon=\"help\" size={16} />\n        <Text size=\"xs\">{title}</Text>\n      </TitleWrapper>\n      {img && <StyledImage src={img?.imagePath} alt={img?.alt} />}\n      {description && <Text size=\"xs\">{description}</Text>}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  border-radius: 3px;\n  color: ${props => props.theme.descriptionBalloon.textColor};\n  background-color: ${props => props.theme.descriptionBalloon.bg};\n  box-shadow: ${props => `0px 5px 10px -5px ${props.theme.descriptionBalloon.shadowColor}`};\n  padding: 12px;\n  max-width: 200px;\n  z-index: ${props => props.theme.zIndexes.descriptionBalloon};\n`;\n\nconst StyledImage = styled.img`\n  border-radius: 2px;\n  margin: 8px 0;\n  width: 100%;\n`;\n\nconst TitleWrapper = styled.div<{ onlyTitle: boolean }>`\n  display: flex;\n  align-items: center;\n  margin-bottom: ${props => (props.onlyTitle ? \"\" : \"8px\")};\n`;\n\nconst StyledIcon = styled(Icon)`\n  margin-right: 5px;\n`;\n\nexport default Balloon;\n","import { styled } from \"@reearth/theme\";\nimport { MetricsSizes, metricsSizes } from \"@reearth/theme/metrics\";\nimport React, { CSSProperties } from \"react\";\n\nexport type Props = {\n  className?: string;\n  children: React.ReactNode;\n  onClick?: () => void;\n} & BoxProps;\n\ntype Metrics<T> = {\n  m?: T;\n  mt?: T;\n  mb?: T;\n  mr?: T;\n  ml?: T;\n  mv?: T;\n  mh?: T;\n  p?: T;\n  pt?: T;\n  pb?: T;\n  pr?: T;\n  pl?: T;\n  pv?: T;\n  ph?: T;\n};\n\ntype MetricsProps = Metrics<MetricsSizes>;\n\ntype BorderProps = {\n  border?: string;\n  borderRadius?: number;\n  borderWidth?: number;\n  borderColor?: number;\n  borderStyle?: CSSProperties[\"borderStyle\"];\n};\n\ntype OtherCSSProperties = {\n  bg?: string;\n  width?: CSSProperties[\"width\"];\n};\n\ntype BoxProps = MetricsProps & BorderProps & OtherCSSProperties;\n\nconst Box: React.FC<Props> = props => {\n  const { className, children, onClick, ...styleProps } = props;\n  return (\n    <Wrapper className={className} onClick={onClick} {...styleProps}>\n      {children}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div<BoxProps>`\n  background-color: ${props => props.bg};\n  width: ${props => props.width};\n  margin: ${props => (props.m && props.m in metricsSizes ? `${metricsSizes[props.m]}px}` : \"\")};\n  margin: ${props => (props.mv && props.mv in metricsSizes ? `${metricsSizes[props.mv]}px 0` : \"\")};\n  margin: ${props => (props.mh && props.mh in metricsSizes ? `0 ${metricsSizes[props.mh]}px` : \"\")};\n  margin-top: ${props =>\n    props.mt && props.mt in metricsSizes ? `${metricsSizes[props.mt]}px` : \"\"};\n  margin-bottom: ${props =>\n    props.mb && props.mb in metricsSizes ? `${metricsSizes[props.mb]}px` : \"\"};\n  margin-right: ${props =>\n    props.mr && props.mr in metricsSizes ? `${metricsSizes[props.mr]}px` : \"\"};\n  margin-left: ${props =>\n    props.ml && props.ml in metricsSizes ? `${metricsSizes[props.ml]}px` : \"\"};\n  padding: ${props => (props.p && props.p in metricsSizes ? `${metricsSizes[props.p]}px` : \"\")};\n  padding: ${props =>\n    props.pv && props.pv in metricsSizes ? `${metricsSizes[props.pv]}px 0` : \"\"};\n  padding: ${props =>\n    props.ph && props.ph in metricsSizes ? `0 ${metricsSizes[props.ph]}px` : \"\"};\n  padding-top: ${props =>\n    props.pt && props.pt in metricsSizes ? `${metricsSizes[props.pt]}px` : \"\"};\n  padding-bottom: ${props =>\n    props.pb && props.pb in metricsSizes ? `${metricsSizes[props.pb]}px` : \"\"};\n  padding-right: ${props =>\n    props.pr && props.pr in metricsSizes ? `${metricsSizes[props.pr]}px` : \"\"};\n  padding-left: ${props =>\n    props.pl && props.pl in metricsSizes ? `${metricsSizes[props.pl]}px` : \"\"};\n  border: ${props => props.border};\n  border-radius: ${props => (props.border ? `${props.borderRadius}px` : \"\")};\n  border-width: ${props => (props.borderWidth ? `${props.borderWidth}px` : \"\")};\n  border-color: ${props => (props.borderColor ? `${props.borderColor}` : \"\")};\n  border-style: ${props => (props.borderStyle ? `${props.borderStyle}` : \"\")};\n`;\n\nexport default Box;\n","import React from \"react\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport { styled } from \"@reearth/theme\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\n\nexport type Type = \"primary\" | \"secondary\" | \"danger\";\n\nexport interface Props {\n  className?: string;\n  large?: boolean;\n  type?: \"reset\" | \"button\" | \"submit\" | undefined;\n  buttonType?: Type;\n  disabled?: boolean;\n  text?: string;\n  icon?: string;\n  iconRight?: boolean;\n  margin?: string;\n  onClick?: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  onMouseEnter?: () => void;\n  onMouseLeave?: () => void;\n}\n\nconst Button: React.FC<Props> = ({\n  className,\n  children,\n  large,\n  type,\n  buttonType,\n  disabled,\n  text,\n  icon,\n  iconRight,\n  margin,\n  onClick,\n  onMouseEnter,\n  onMouseLeave,\n}) => {\n  const hasText = !!text || !!children;\n  const iSize = large ? \"16px\" : \"12px\";\n\n  const WrappedIcon = icon ? (\n    <IconWrapper text={hasText} iconRight={iconRight} large={large}>\n      <Icon icon={icon} size={iSize} />\n    </IconWrapper>\n  ) : null;\n\n  return (\n    <StyledButton\n      className={className}\n      large={large}\n      type={type}\n      buttonType={buttonType}\n      text={hasText}\n      disabled={disabled}\n      margin={margin}\n      onClick={onClick}\n      onMouseEnter={onMouseEnter}\n      onMouseLeave={onMouseLeave}>\n      {!iconRight && WrappedIcon}\n      {large ? (\n        <Text size=\"m\" weight=\"bold\" customColor>\n          {text}\n        </Text>\n      ) : (\n        <Text size=\"xs\" customColor>\n          {text}\n        </Text>\n      )}\n      {children}\n      {iconRight && WrappedIcon}\n    </StyledButton>\n  );\n};\n\ntype ButtonProps = {\n  large?: boolean;\n  buttonType?: Type;\n  text?: boolean;\n  disabled?: boolean;\n  margin?: string;\n};\n\nconst StyledButton = styled.button<ButtonProps>`\n  border-radius: ${({ large }) => (large ? \"8px\" : \"6px\")};\n  border-style: solid;\n  border-width: 1px;\n  border-color: ${({ buttonType, disabled, theme }) =>\n    buttonType === \"danger\"\n      ? disabled\n        ? theme.buttonDanger.disabled\n        : theme.buttonDanger.color\n      : buttonType === \"secondary\"\n      ? disabled\n        ? theme.buttonSecondary.disabled\n        : theme.buttonSecondary.color\n      : disabled\n      ? theme.buttonPrimary.disabled\n      : theme.buttonPrimary.color};\n  background: inherit;\n  color: ${({ buttonType, disabled, theme }) =>\n    buttonType === \"danger\"\n      ? disabled\n        ? theme.buttonDanger.disabled\n        : theme.buttonDanger.color\n      : buttonType === \"secondary\"\n      ? disabled\n        ? theme.buttonSecondary.disabled\n        : theme.buttonSecondary.color\n      : disabled\n      ? theme.buttonPrimary.disabled\n      : theme.buttonPrimary.color};\n  padding: ${({ large }) =>\n    large\n      ? `${metricsSizes[\"s\"]}px ${metricsSizes[\"2xl\"]}px`\n      : `${metricsSizes[\"xs\"]}px ${metricsSizes[\"xl\"]}px`};\n  margin: ${({ margin }) => margin || `${metricsSizes[\"m\"]}px`};\n  user-select: none;\n  cursor: ${({ disabled }) => (disabled ? \"not-allowed\" : \"pointer\")};\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  align-items: center;\n  &:hover {\n    background: ${({ buttonType, disabled, theme }) =>\n      disabled\n        ? \"inherit\"\n        : buttonType === \"danger\"\n        ? theme.buttonDanger.bgHover\n        : buttonType === \"secondary\"\n        ? theme.buttonSecondary.bgHover\n        : theme.buttonPrimary.bgHover};\n    color: ${({ buttonType, disabled, theme }) =>\n      buttonType === \"danger\"\n        ? disabled\n          ? theme.buttonDanger.disabled\n          : theme.buttonDanger.colorHover\n        : buttonType === \"secondary\"\n        ? disabled\n          ? theme.buttonSecondary.disabled\n          : theme.buttonSecondary.colorHover\n        : disabled\n        ? theme.buttonPrimary.disabled\n        : theme.buttonPrimary.colorHover};\n  }\n`;\n\nconst IconWrapper = styled.span<{ text: boolean; iconRight?: boolean; large?: boolean }>`\n  display: inline-flex;\n  align-items: center;\n  user-select: none;\n  margin-left: ${({ text, iconRight, large }) =>\n    text && iconRight ? (large ? \"12px\" : \"8px\") : \"none\"};\n  margin-right: ${({ text, iconRight, large }) =>\n    text && !iconRight ? (large ? \"12px\" : \"8px\") : \"none\"};\n`;\n\nexport default Button;\n","import { styled } from \"@reearth/theme\";\nimport fonts from \"@reearth/theme/fonts\";\n\ntype Props = {\n  linked?: boolean;\n  overridden?: boolean;\n  inactive?: boolean;\n  selected?: boolean;\n};\n\nconst Check = styled.li<Props>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 30px;\n  list-style: none;\n  padding: 6px;\n  margin-right: 2px;\n  font-size: ${fonts.sizes.m}px;\n  color: ${({ linked, overridden, selected, inactive, theme }) =>\n    selected && linked\n      ? theme.main.accent\n      : selected && overridden\n      ? theme.main.danger\n      : inactive\n      ? theme.text.pale\n      : theme.properties.contentsText};\n  background: ${({ selected, theme }) => (selected ? theme.main.bg : \"none\")};\n  cursor: pointer;\n  box-sizing: border-box;\n  border-radius: 2px;\n`;\n\nexport default Check;\n","import React, { useCallback } from \"react\";\nimport { styled } from \"@reearth/theme\";\n\ntype CheckProps<Value extends string | number> = {\n  value: Value;\n  children?: React.ReactNode;\n  focused?: boolean;\n  selected?: boolean;\n  inactive?: boolean;\n  onClick?: (e: React.MouseEvent) => void;\n};\n\ntype CheckElement<Value extends string | number> = React.ReactElement<CheckProps<Value>>;\n\nexport type Props<Value extends string | number> = {\n  className?: string;\n  values?: Value[];\n  inactive?: boolean;\n  onChange?: (values: Value[]) => void;\n  children?: CheckElement<Value>[];\n  ref?: React.Ref<HTMLUListElement>;\n};\n\nconst forwardRef = <Value extends string | number>(\n  render: (props: Props<Value>, ref: React.Ref<HTMLUListElement>) => React.ReactElement | null,\n): typeof CheckGroup => React.forwardRef(render) as any;\n\nconst CheckGroup = <Value extends string | number>(\n  { className, values: selectedValues = [], inactive, onChange, children }: Props<Value>,\n  ref: React.Ref<HTMLUListElement>,\n) => {\n  const isValidElement = (object: {} | null | undefined): object is CheckElement<Value> =>\n    React.isValidElement(object);\n  const checks = React.Children.toArray(children).filter(isValidElement);\n\n  const handleClick = useCallback(\n    (value: Value, onClick: CheckProps<Value>[\"onClick\"]) => (e: React.MouseEvent) => {\n      const isSelected = selectedValues.includes(value);\n      if (isSelected) {\n        const values = selectedValues.filter(selectedValue => selectedValue !== value);\n        onChange?.(values);\n      } else {\n        const values = [...selectedValues, value];\n        onChange?.(values);\n      }\n      onClick?.(e);\n    },\n    [selectedValues, onChange],\n  );\n\n  return (\n    <Wrapper className={className} ref={ref}>\n      {checks.map(check => {\n        const { value, onClick } = check.props;\n        return React.cloneElement(check, {\n          selected: selectedValues.includes(value),\n          inactive,\n          onClick: handleClick(value, onClick),\n        });\n      })}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.ul`\n  display: inline-flex;\n  height: 30px;\n  margin: 0;\n  padding: 0;\n  border-radius: 3px;\n  box-sizing: border-box;\n`;\n\nexport default forwardRef(CheckGroup);\n","import React from \"react\";\nimport { useIntl } from \"react-intl\";\nimport Button from \"../Button\";\nimport Modal from \"../Modal\";\n\nexport type Props = {\n  title: string;\n  body: React.ReactNode;\n  onCancel: () => void;\n  onProceed: () => void;\n  onClose: () => void;\n  isOpen: boolean;\n};\n\nconst ConfirmationModal: React.FC<Props> = ({\n  title,\n  body,\n  onCancel,\n  onProceed,\n  isOpen,\n  onClose,\n}) => {\n  const intl = useIntl();\n  return (\n    <Modal\n      title={title}\n      isVisible={isOpen}\n      size=\"sm\"\n      onClose={onClose}\n      button1={\n        <Button\n          text={intl.formatMessage({ defaultMessage: \"Delete\" })}\n          onClick={onProceed}\n          buttonType=\"danger\"\n        />\n      }\n      button2={\n        <Button\n          text={intl.formatMessage({ defaultMessage: \"Cancel\" })}\n          onClick={onCancel}\n          buttonType=\"secondary\"\n        />\n      }>\n      {body}\n    </Modal>\n  );\n};\n\nexport default ConfirmationModal;\n","import React from \"react\";\nimport { styled } from \"@reearth/theme\";\n\nexport type Props = {\n  color?: string;\n  margin?: string;\n  spaceOnly?: boolean;\n};\n\nconst Divider: React.FC<Props> = ({ color, margin, spaceOnly }) => {\n  return <StyledDivider color={color} margin={margin} spaceOnly={spaceOnly} />;\n};\n\nconst StyledDivider = styled.div<{ color?: string; margin?: string; spaceOnly?: boolean }>`\n  width: 100%;\n  margin: ${props => (props.margin ? props.margin : \"35px\")} auto;\n  border-bottom: ${props =>\n    props.spaceOnly ? \"none\" : `1px solid ${props.color ? props.color : props.theme.main.border}`};\n`;\n\nexport default Divider;\n","import React, { useState, useRef, forwardRef, useImperativeHandle } from \"react\";\nimport { styled } from \"@reearth/theme\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport { useClickAway } from \"react-use\";\n\ntype Direction = \"right\" | \"down\" | \"none\";\n\nexport type Props = {\n  isOpen?: boolean;\n  label: React.ReactNode;\n  openOnClick?: boolean;\n  direction?: Direction;\n  hasIcon?: boolean;\n  noHoverStyle?: boolean;\n  centered?: boolean;\n  children?: React.ReactNode;\n};\n\nexport type Ref = {\n  close: () => void;\n};\n\nconst Dropdown: React.ForwardRefRenderFunction<Ref, Props> = (\n  {\n    isOpen = false,\n    openOnClick,\n    noHoverStyle,\n    centered,\n    label,\n    direction = \"down\",\n    hasIcon,\n    children,\n  },\n  ref,\n) => {\n  const [open, setOpen] = useState(isOpen);\n\n  const wrapperRef = useRef(null);\n  useClickAway(wrapperRef, () => {\n    setOpen(false);\n  });\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      close: () => setOpen(false),\n    }),\n    [],\n  );\n\n  return (\n    <Wrapper\n      ref={wrapperRef}\n      onMouseEnter={openOnClick ? undefined : () => setOpen(true)}\n      onMouseLeave={openOnClick ? undefined : () => setOpen(false)}>\n      <Parent noHover={noHoverStyle} centered={centered}>\n        <Label onClick={openOnClick ? () => setOpen(o => !o) : undefined}>\n          {label}\n          {hasIcon && (\n            <StyledIcon icon={direction === \"right\" ? \"arrowRight\" : \"arrowDown\"} size={24} />\n          )}\n        </Label>\n      </Parent>\n      {open && (\n        <Child onClick={openOnClick ? () => setOpen(o => !o) : undefined} direction={direction}>\n          {children}\n        </Child>\n      )}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  height: 100%;\n`;\n\nconst Parent = styled.div<{ noHover?: boolean; centered?: boolean }>`\n  position: relative;\n  min-height: 36px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: ${props => props.centered && `center;`}\n  background-color: ${props => props.theme.header.bg};\n  &:hover {\n    ${props =>\n      !props.noHover &&\n      `\n      background-color: ${props.theme.main.bg};\n      `}\n    }\n    `;\n\nconst Label = styled.div`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n`;\n\nconst childTransform = (direction: Direction) => {\n  switch (direction) {\n    case \"down\":\n      return \"translate(0, 100%)\";\n    case \"right\":\n    case \"none\":\n      return \"translate(100%, 0)\";\n    default:\n      return \"translate(0, 100%)\";\n  }\n};\n\nconst Child = styled.div<{ direction: Direction }>`\n  position: absolute;\n  left: 0;\n  bottom: ${({ direction }) => (direction === \"down\" ? \"0\" : \"auto\")};\n  min-width: 100%;\n  top: ${({ direction }) => (direction === \"down\" ? \"auto\" : \"0\")};\n  transform: ${({ direction }) => childTransform(direction)};\n  box-shadow: 6px 6px 8px rgba(0, 0, 0, 0.3);\n  background-color: ${props => props.theme.header.bg};\n  z-index: ${props => props.theme.zIndexes.dropDown};\n`;\n\nconst StyledIcon = styled(Icon)`\n  margin: 0 16px;\n  color: ${props => props.theme.header.text};\n`;\n\nexport default forwardRef(Dropdown);\n","import React, { CSSProperties } from \"react\";\n\nexport type Props = {\n  className?: string;\n  onClick?: () => void;\n  children?: React.ReactNode;\n} & FlexOptions;\n\nexport type FlexOptions = {\n  align?: CSSProperties[\"alignItems\"];\n  justify?: CSSProperties[\"justifyContent\"];\n  wrap?: CSSProperties[\"flexWrap\"];\n  direction?: CSSProperties[\"flexDirection\"];\n  basis?: CSSProperties[\"flexBasis\"];\n  grow?: CSSProperties[\"flexGrow\"];\n  shrink?: CSSProperties[\"flexShrink\"];\n  flex?: CSSProperties[\"flex\"];\n  gap?: CSSProperties[\"gap\"];\n};\n\nconst Flex: React.FC<Props> = ({\n  className,\n  onClick,\n  children,\n  align,\n  justify,\n  wrap,\n  direction,\n  basis,\n  grow,\n  shrink,\n  flex,\n  gap,\n}) => {\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink,\n    flex: flex,\n    gap: gap, // TODO: Safari doesn't support this property and please develop polyfill\n  };\n  return (\n    <div className={className} style={styles} onClick={onClick}>\n      {children}\n    </div>\n  );\n};\n\nexport default Flex;\n","import React, { useRef, useState, useEffect } from \"react\";\nimport { styled } from \"@reearth/theme\";\nimport { usePopper } from \"react-popper\";\nimport Balloon from \"../Balloon\";\nimport { Placement as PopperPlacement } from \"@popperjs/core\";\nexport type Placement = PopperPlacement;\n\nexport type Props = {\n  className?: string;\n  descriptionTitle?: string;\n  description?: string;\n  balloonDirection?: Placement;\n  gap?: number;\n  img?: {\n    imagePath: string;\n    alt?: string;\n  };\n  children?: React.ReactNode;\n};\n\nconst HelpButton: React.FC<Props> = ({\n  className,\n  descriptionTitle,\n  description,\n  balloonDirection,\n  gap,\n  img,\n  children,\n}) => {\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const referenceRef = useRef<HTMLDivElement>(null);\n  const popperRef = useRef<HTMLDivElement>(null);\n  const arrowRef = useRef<HTMLDivElement>(null);\n  const { styles, attributes } = usePopper(referenceRef.current, popperRef.current, {\n    placement: balloonDirection ? balloonDirection : \"auto\",\n    modifiers: [\n      {\n        name: \"arrow\",\n        options: {\n          element: arrowRef.current,\n        },\n      },\n      {\n        name: \"offset\",\n        options: {\n          offset: [0, (balloonDirection && gap) || 10],\n        },\n      },\n    ],\n  });\n  const [visible, setVisible] = useState(false);\n  const [isMouseEnter, setIsMouseEnter] = useState(false);\n  const mouseEnterSec = 500;\n\n  useEffect(() => {\n    if (isMouseEnter) {\n      const timer = setTimeout(() => {\n        setVisible(true);\n      }, mouseEnterSec);\n      return () => clearTimeout(timer);\n    } else {\n      setVisible(false);\n      return;\n    }\n  }, [isMouseEnter]);\n\n  return (\n    <>\n      {descriptionTitle || description ? (\n        <div ref={wrapperRef} className={className}>\n          <div ref={referenceRef}>\n            <HelpArea\n              onMouseEnter={() => {\n                setIsMouseEnter(true);\n              }}\n              onMouseLeave={() => setIsMouseEnter(false)}>\n              {children}\n            </HelpArea>\n          </div>\n          <BalloonWrapper\n            ref={popperRef}\n            visible={visible}\n            direction={balloonDirection}\n            style={styles.popper}\n            {...attributes.popper}>\n            <BalloonArrow\n              ref={arrowRef}\n              style={styles.arrow}\n              className=\"arrow\"\n              data-placement={balloonDirection}\n            />\n            <Balloon title={descriptionTitle} description={description} img={img} />\n          </BalloonWrapper>\n        </div>\n      ) : undefined}\n    </>\n  );\n};\n\nconst HelpArea = styled.div`\n  margin: 0;\n  padding: 0;\n`;\n\nconst BalloonWrapper = styled.div<{ visible: boolean; direction?: string }>`\n  z-index: ${props => props.theme.zIndexes.descriptionBalloon};\n  visibility: ${props => (props.visible ? \"visible\" : \"hidden\")};\n`;\n\nconst BalloonArrow = styled.div<{ direction?: string }>`\n  position: absolute;\n  width: 10px;\n  height: 10px;\n  &:after {\n    background-color: ${props => props.theme.descriptionBalloon.bg};\n    content: \" \";\n    box-shadow: -1px -1px 1px rgba(0, 0, 0, 0.1);\n    position: absolute;\n    transform: rotate(45deg);\n    width: 10px;\n    height: 10px;\n  }\n\n  &[data-placement*=\"bottom\"] {\n    top: -5px;\n  }\n\n  &[data-placement*=\"top\"] {\n    bottom: -5px;\n  }\n\n  &[data-placement*=\"right\"] {\n    left: -5px;\n  }\n\n  &[data-placement*=\"left\"] {\n    right: -5px;\n  }\n`;\n\nexport default HelpButton;\n","// Primitives\nimport Layer from \"./Icons/layerIcon.svg\";\nimport LayerAdd from \"./Icons/layerAddIcon.svg\";\nimport PrimMarker from \"./Icons/primMarkerIcon.svg\";\nimport PrimPhotoOverlay from \"./Icons/primPhotoIcon.svg\";\nimport PrimResource from \"./Icons/primResourceIcon.svg\";\nimport PrimSphere from \"./Icons/primSphereIcon.svg\";\nimport PrimRect from \"./Icons/primRect.svg\";\nimport PrimModel from \"./Icons/primModel.svg\";\nimport PrimTileset from \"./Icons/primTileset.svg\";\n\n// Built-in Widgets\nimport Widgets from \"./Icons/widgetsIcon.svg\";\nimport WidgetMenu from \"./Icons/widgetMenu.svg\";\nimport WidgetStory from \"./Icons/widgetStorytelling.svg\";\nimport StorytellingMenu from \"./Icons/storytellingMenu.svg\";\nimport WidgetSplash from \"./Icons/widgetSplashscreen.svg\";\n\n// Workspace\nimport Workspaces from \"./Icons/workspaces.svg\";\nimport WorkspaceAdd from \"./Icons/workspaceAdd.svg\";\nimport MemberAdd from \"./Icons/memberAdd.svg\";\n\n// Dataset\nimport Dataset from \"./Icons/datasetIcon.svg\";\nimport DatasetAdd from \"./Icons/datasetAdd.svg\";\nimport File from \"./Icons/fileIcon.svg\";\nimport PcIcon from \"./Icons/pcIcon.svg\";\nimport GoogleDriveIcon from \"./Icons/googleDriveIcon.svg\";\nimport SheetFileIcon from \"./Icons/sheet-file.svg\";\n\n// Asset\nimport AssetGrid from \"./Icons/assetGrid.svg\";\nimport AssetGridSmall from \"./Icons/assetGridSmall.svg\";\nimport AssetList from \"./Icons/assetList.svg\";\nimport FilterName from \"./Icons/filterName.svg\";\nimport FilterNameReverse from \"./Icons/filterNameReverse.svg\";\nimport FilterSize from \"./Icons/filterSize.svg\";\nimport FilterSizeReverse from \"./Icons/filterSizeReverse.svg\";\nimport FilterTime from \"./Icons/filterTime.svg\";\nimport FilterTimeReverse from \"./Icons/filterTimeReverse.svg\";\n\n// Titles/Sections\nimport Scene from \"./Icons/sceneIcon.svg\";\nimport Infobox from \"./Icons/infoboxIcon.svg\";\nimport Export from \"./Icons/exportIcon.svg\";\nimport Dashboard from \"./Icons/dashboardIcon.svg\";\nimport EarthEditor from \"./Icons/scene.svg\";\nimport Settings from \"./Icons/settings.svg\";\n\n// Infobox Blocks\nimport InfoVideo from \"./Icons/infoboxVideoIcon.svg\";\nimport InfoText from \"./Icons/infoboxTextIcon.svg\";\nimport InfoTable from \"./Icons/infoboxTableIcon.svg\";\nimport InfoLocation from \"./Icons/infoboxLocationIcon.svg\";\n\n// Arrows\nimport ArrowToggle from \"./Icons/arrowToggle.svg\";\nimport ArrowUp from \"./Icons/arrowUp.svg\";\nimport ArrowDown from \"./Icons/arrowDown.svg\";\nimport ArrowRight from \"./Icons/arrowRight.svg\";\nimport ArrowLeft from \"./Icons/arrowLeft.svg\";\nimport ArrowSelect from \"./Icons/arrowSelect.svg\";\nimport ArrowLong from \"./Icons/arrowLong.svg\";\nimport ArrowLongLeft from \"./Icons/arrowLongLeft.svg\";\nimport ArrowLongRight from \"./Icons/arrowLongRight.svg\";\nimport ArrowUpDown from \"./Icons/arrowUpDown.svg\";\n\n// Fields / Actions\nimport TextLeft from \"./Icons/textAlignLeft.svg\";\nimport TextRight from \"./Icons/textAlignRight.svg\";\nimport TextCenter from \"./Icons/textAlignCenter.svg\";\nimport TextJustify from \"./Icons/textAlignJustify.svg\";\nimport TextItalic from \"./Icons/textItalic.svg\";\nimport TextBold from \"./Icons/textBold.svg\";\nimport TextUnderline from \"./Icons/textUnderline.svg\";\nimport CameraCapture from \"./Icons/captureIcon.svg\";\nimport Visible from \"./Icons/viewIcon.svg\";\nimport NotVisible from \"./Icons/viewNotIcon.svg\";\nimport Upload from \"./Icons/upload.svg\";\nimport Logout from \"./Icons/logoutIcon.svg\";\nimport FolderAdd from \"./Icons/folderAddIcon.svg\";\nimport Folder from \"./Icons/folderIcon.svg\";\nimport Plus from \"./Icons/plus.svg\";\nimport PlusSquare from \"./Icons/plusSquare.svg\";\nimport Edit from \"./Icons/editIcon.svg\";\nimport Bin from \"./Icons/binIcon.svg\";\nimport Cancel from \"./Icons/cancel.svg\";\nimport Link from \"./Icons/linkIcon.svg\";\nimport Publish from \"./Icons/publish.svg\";\nimport Unpublish from \"./Icons/unpublish.svg\";\nimport NewProject from \"./Icons/newProject.svg\";\nimport NewWorkspace from \"./Icons/newWorkspace.svg\";\nimport Preview from \"./Icons/preview.svg\";\nimport Install from \"./Icons/install.svg\";\nimport CopyCode from \"./Icons/copyCode.svg\";\nimport FieldClear from \"./Icons/fieldClear.svg\";\nimport FieldLinked from \"./Icons/fieldLinked.svg\";\n\n// Misc\nimport Logo from \"./Icons/reearthLogo.svg\";\nimport Camera from \"./Icons/camera.svg\";\nimport Help from \"./Icons/helpIcon.svg\";\nimport Alert from \"./Icons/alert.svg\";\nimport QuestionMark from \"./Icons/questionMarkIcon.svg\";\nimport CheckCircle from \"./Icons/checkCircle.svg\";\nimport CheckMark from \"./Icons/check.svg\";\nimport Search from \"./Icons/search.svg\";\nimport Avatar from \"./Icons/avatar.svg\";\nimport Scale from \"./Icons/scale.svg\";\nimport MapIcon from \"./Icons/map.svg\";\nimport NoProjects from \"./Icons/noProjects.svg\";\nimport TopPage from \"./Icons/topPage.svg\";\nimport MenuForDevice from \"./Icons/menuForDevice.svg\";\nimport Moon from \"./Icons/moon.svg\";\nimport Sun from \"./Icons/sun.svg\";\n\n// Plugi-ins\nimport UploadZipPlugin from \"./Icons/uploadZipPlugin.svg\";\nimport PublicGitHubRepo from \"./Icons/publicGitHubRepo.svg\";\nimport PrivateGitHubRepo from \"./Icons/privateGitHubRepo.svg\";\n\nexport default {\n  outline: Layer,\n  layer: Layer,\n  layerAdd: LayerAdd,\n  marker: PrimMarker,\n  photooverlay: PrimPhotoOverlay,\n  resource: PrimResource,\n  ellipsoid: PrimSphere,\n  rect: PrimRect,\n  model: PrimModel,\n  tileset: PrimTileset,\n  widget: Widgets,\n  menu: WidgetMenu,\n  storytelling: WidgetStory,\n  storytellingMenu: StorytellingMenu,\n  splashscreen: WidgetSplash,\n  workspaces: Workspaces,\n  workspaceAdd: WorkspaceAdd,\n  memberAdd: MemberAdd,\n  dataset: Dataset,\n  datasetAdd: DatasetAdd,\n  file: File,\n  googleDrive: GoogleDriveIcon,\n  sheetFile: SheetFileIcon,\n  computer: PcIcon,\n  assetGrid: AssetGrid,\n  assetGridSmall: AssetGridSmall,\n  assetList: AssetList,\n  filterName: FilterName,\n  filterNameReverse: FilterNameReverse,\n  filterSize: FilterSize,\n  filterSizeReverse: FilterSizeReverse,\n  filterTime: FilterTime,\n  filterTimeReverse: FilterTimeReverse,\n  scene: Scene,\n  dashboard: Dashboard,\n  earthEditor: EarthEditor,\n  settings: Settings,\n  export: Export,\n  infobox: Infobox,\n  text: InfoText,\n  video: InfoVideo,\n  image: PrimPhotoOverlay,\n  location: InfoLocation,\n  arrowLong: ArrowLong,\n  arrowLongLeft: ArrowLongLeft,\n  arrowLongRight: ArrowLongRight,\n  arrowToggle: ArrowToggle,\n  arrowSelect: ArrowSelect,\n  arrowUp: ArrowUp,\n  arrowDown: ArrowDown,\n  arrowLeft: ArrowLeft,\n  arrowRight: ArrowRight,\n  arrowUpDown: ArrowUpDown,\n  alignLeft: TextLeft,\n  alignRight: TextRight,\n  alignCenter: TextCenter,\n  alignJustify: TextJustify,\n  italic: TextItalic,\n  bold: TextBold,\n  underline: TextUnderline,\n  visible: Visible,\n  hidden: NotVisible,\n  logout: Logout,\n  edit: Edit,\n  help: Help,\n  question: QuestionMark,\n  alert: Alert,\n  avatar: Avatar,\n  folder: Folder,\n  folderAdd: FolderAdd,\n  bin: Bin,\n  dl: InfoTable,\n  checkCircle: CheckCircle,\n  check: CheckMark,\n  plus: Plus,\n  plusSquare: PlusSquare,\n  cancel: Cancel,\n  upload: Upload,\n  capture: CameraCapture,\n  camera: Camera,\n  link: Link,\n  publish: Publish,\n  unpublish: Unpublish,\n  search: Search,\n  scale: Scale,\n  logo: Logo,\n  newProject: NewProject,\n  newWorkspace: NewWorkspace,\n  preview: Preview,\n  copyCode: CopyCode,\n  fieldLinked: FieldLinked,\n  fieldClear: FieldClear,\n  map: MapIcon,\n  noProjects: NoProjects,\n  moon: Moon,\n  sun: Sun,\n  topPage: TopPage,\n  install: Install,\n  uploadZipPlugin: UploadZipPlugin,\n  privateGitHubRepo: PrivateGitHubRepo,\n  publicGitHubRepo: PublicGitHubRepo,\n  menuForDevice: MenuForDevice,\n};\n","import React, { ComponentProps, memo } from \"react\";\nimport { ReactSVG } from \"react-svg\";\n\nimport { styled } from \"@reearth/theme\";\n\nimport Icons from \"./icons\";\n\nexport type Icons = keyof typeof Icons;\n\nexport type Props = {\n  className?: string;\n  icon?: string;\n  size?: string | number;\n  alt?: string;\n  color?: string;\n  onClick?: () => void;\n};\n\nconst Icon: React.FC<Props> = ({ className, icon, color, size, alt, onClick }) => {\n  if (!icon) return null;\n\n  const sizeStr = typeof size === \"number\" ? `${size}px` : size;\n  const builtin = Icons[icon as Icons];\n  if (!builtin) {\n    return <StyledImg src={icon} alt={alt} size={sizeStr} onClick={onClick} />;\n  }\n\n  return (\n    <StyledSvg\n      className={className}\n      src={builtin}\n      color={color}\n      size={sizeStr}\n      onClick={onClick}\n      alt={alt}\n    />\n  );\n};\n\nconst StyledImg = styled.img<{ size?: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n`;\n\nconst SVG: React.FC<\n  Pick<ComponentProps<typeof ReactSVG>, \"className\" | \"src\" | \"onClick\" | \"alt\">\n> = props => {\n  return <ReactSVG {...props} wrapper=\"span\" />;\n};\n\nconst StyledSvg = styled(SVG)<{ color?: string; size?: string }>`\n  font-size: 0;\n  color: ${({ color }) => color};\n  svg {\n    width: ${({ size }) => size};\n    height: ${({ size }) => size};\n  }\n`;\n\nexport default memo(Icon);\n","import React from \"react\";\n\n// Component\nimport { RingLoader } from \"react-spinners\";\n\n// Theme\nimport { styled, useTheme } from \"@reearth/theme\";\nimport Portal from \"../Portal\";\n\nexport type Props = {\n  portal?: boolean;\n  fixed?: boolean;\n  overlay?: boolean;\n};\n\nconst Loading: React.FC<Props> = ({ portal, fixed, overlay }) => {\n  const theme = useTheme();\n  const loading = (\n    <LoadingWrapper fixed={fixed} overlay={overlay}>\n      <RingLoader size={33} color={theme.main.highlighted} />\n    </LoadingWrapper>\n  );\n  return portal ? <Portal>{loading}</Portal> : loading;\n};\n\nconst LoadingWrapper = styled.div<{ fixed?: boolean; overlay?: boolean }>`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 14px;\n  position: ${({ fixed }) => (fixed ? \"fixed\" : \"absolute\")};\n  top: 0;\n  left: 0;\n  background: ${props => (props.overlay ? props.theme.main.deepBg : null)};\n  opacity: 0.8;\n  z-index: ${props => props.theme.zIndexes.loading};\n`;\n\nexport default Loading;\n","import React, { useMemo } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport gfm from \"remark-gfm\";\nimport tinycolor from \"tinycolor2\";\n\nimport { styled } from \"@reearth/theme\";\nimport { Typography, typographyStyles } from \"@reearth/util/value\";\n\nexport type Props = {\n  className?: string;\n  children?: string;\n  styles?: Typography;\n  backgroundColor?: string;\n  onClick?: () => void;\n  onDoubleClick?: () => void;\n};\n\nconst plugins = [gfm];\n\nconst Markdown: React.FC<Props> = ({\n  className,\n  styles,\n  backgroundColor,\n  children,\n  onClick,\n  onDoubleClick,\n}) => {\n  const dark = useMemo(\n    () => (backgroundColor ? isDark(backgroundColor) : false),\n    [backgroundColor],\n  );\n\n  return (\n    <Wrapper\n      className=\"markdown-body\" // github-markdown-css is imported at src/theme/globalstyle.tsx\n      styles={styles}\n      dark={dark}\n      onClick={onClick}\n      onDoubleClick={onDoubleClick}>\n      <ReactMarkdown\n        source={children || \"\"}\n        plugins={plugins}\n        className={className}\n        linkTarget=\"_blank\"\n      />\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div<{ styles?: Typography; dark: boolean }>`\n  color: inherit;\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n\n  ${({ styles }) => typographyStyles(styles)}\n\n  h1,\n  h2 {\n    border-bottom: none;\n  }\n\n  code {\n    background-color: ${({ dark }) =>\n      dark ? \"rgba(240, 246, 252, 0.15)\" : \"rgba(27, 31, 35, 0.05)\"};\n  }\n\n  .highlight pre,\n  pre {\n    background-color: ${({ dark }) =>\n      color(dark ? \"#161b22\" : \"#f6f8fa\", 0.1, dark)}; // #161b22 #f6f8fa\n  }\n\n  table tr {\n    background-color: inherit;\n    border-top-color: ${({ dark }) => color(dark ? \"#272c32\" : \"#c6cbd1\", 0.1, dark)};\n  }\n\n  table tr:nth-of-type(2n) {\n    background-color: ${({ dark }) => color(dark ? \"#161b22\" : \"#f6f8fa\", 0.1, dark)};\n  }\n\n  table td,\n  table th {\n    border-color: ${({ dark }) => color(dark ? \"#3b434b\" : \"#dfe2e5\", 0.1, dark)};\n  }\n\n  blockquote {\n    color: inherit; /* #8b949e #6a737d */\n    border-left-color: ${({ dark }) => color(dark ? \"#3b434b\" : \"#dfe2e5\", 0.1, dark)};\n  }\n\n  hr {\n    background-color: ${({ dark }) => color(dark ? \"#30363d\" : \"#e1e4e8\", 0.1, dark)};\n  }\n`;\n\nconst color = (hex: string, alpha: number, dark: boolean) => {\n  const color = tinycolor(hex).toRgb();\n  const bg = dark ? 0 : 255;\n\n  // out = a * alpha + b * (1 - alpha)\n  // a = (out - b * (1 - alpha)) / alpha\n  const nr = Math.floor((color.r - (1 - alpha) * bg) / alpha);\n  const ng = Math.floor((color.g - (1 - alpha) * bg) / alpha);\n  const nb = Math.floor((color.b - (1 - alpha) * bg) / alpha);\n\n  return `rgba(${nr}, ${ng}, ${nb}, ${alpha})`;\n};\n\nconst isDark = (hex: string): boolean => tinycolor(hex).isDark();\n\nexport default Markdown;\n","import React, { useRef, useCallback } from \"react\";\nimport { useClickAway, useKeyPressEvent } from \"react-use\";\nimport useTransition, { TransitionStatus } from \"@rot1024/use-transition\";\n\nimport { styled } from \"@reearth/theme\";\nimport Icon from \"@reearth/components/atoms/Icon\";\n\nexport type Props = {\n  title?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n  isVisible?: boolean;\n  onClose?: () => void;\n};\n\nconst Modal: React.FC<Props> = ({ size, isVisible, onClose, children }) => {\n  const ref = useRef<HTMLDivElement>(null);\n  useClickAway(ref, () => onClose?.());\n\n  const state = useTransition(!!isVisible, 300, {\n    mountOnEnter: true,\n    unmountOnExit: true,\n  });\n\n  const handleClose = useCallback(() => onClose?.(), [onClose]);\n\n  useKeyPressEvent(\"Escape\", handleClose);\n\n  return state === \"unmounted\" ? null : (\n    <Bg state={state}>\n      <Wrapper ref={ref} size={size}>\n        <CloseButton onClick={handleClose}>\n          <Icon icon=\"cancel\" />\n        </CloseButton>\n        <InnerWrapper>{children}</InnerWrapper>\n      </Wrapper>\n    </Bg>\n  );\n};\n\nconst Bg = styled.div<{ state: TransitionStatus }>`\n  background: ${props => props.theme.main.transparentBg};\n  position: fixed;\n  z-index: ${props => props.theme.zIndexes.fullScreenModal};\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  transition: ${({ state }) =>\n    state === \"entering\" || state === \"exiting\" ? \"all 0.3s ease\" : \"\"};\n  opacity: ${({ state }) => (state === \"entered\" || state === \"entering\" ? 1 : 0)};\n`;\n\nconst Wrapper = styled.div<{ size?: string }>`\n  margin: ${props => (props.size === \"sm\" ? \"15%\" : props.size === \"lg\" ? \"4%\" : \"8%\")} auto;\n  padding: 36px 32px;\n  border-radius: 3px;\n  width: ${props => (props.size === \"sm\" ? \"372px\" : props.size === \"lg\" ? \"684px\" : \"620px\")};\n  background: ${props => props.theme.main.deepBg};\n  position: relative;\n`;\n\nconst InnerWrapper = styled.div<{ size?: string }>`\n  margin: 0 auto;\n`;\n\nconst CloseButton = styled.span`\n  color: ${props => props.theme.main.text};\n  font-size: 24px;\n  position: absolute;\n  right: 32px;\n  top: 20px;\n  cursor: pointer;\n`;\n\nexport default Modal;\n","import React from \"react\";\nimport Wrapper from \"@reearth/components/atoms/Modal/ModalFrame\";\nimport Text from \"@reearth/components/atoms/Text\";\n\nimport { styled, useTheme } from \"@reearth/theme\";\n\ninterface Props {\n  title?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n  button1?: React.ReactNode;\n  button2?: React.ReactNode;\n  children?: React.ReactNode;\n  isVisible?: boolean;\n  onClose?: () => void;\n}\n\nconst Modal: React.FC<Props> = ({\n  title,\n  size,\n  button1,\n  button2,\n  isVisible,\n  onClose,\n  children,\n}) => {\n  const theme = useTheme();\n  return (\n    <Wrapper size={size} isVisible={isVisible} onClose={onClose}>\n      <Title size=\"l\" weight=\"bold\" color={theme.main.strongText}>\n        {title}\n      </Title>\n      {children}\n      <ButtonWrapper>\n        {button2}\n        {button1}\n      </ButtonWrapper>\n    </Wrapper>\n  );\n};\n\nconst Title = styled(Text)`\n  text-align: center;\n  margin-bottom: 24px;\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin: 20px -10px -10px 0;\n`;\n\nexport default Modal;\n","import React, { useState, useEffect } from \"react\";\n\n// Components\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Text from \"@reearth/components/atoms/Text\";\n\n// Theme\nimport { styled, useTheme } from \"@reearth/theme\";\n\nexport type Type = \"error\" | \"warning\" | \"info\" | \"success\";\n\ninterface NotificationBarProps {\n  text?: string;\n  hidden?: boolean;\n  type?: Type;\n  onClose?: () => void;\n}\n\nconst NotificationBar: React.FC<NotificationBarProps> = ({\n  text,\n  hidden,\n  type,\n  children,\n  onClose,\n}) => {\n  const [visibility, changeVisibility] = useState(!hidden);\n  useEffect(() => {\n    changeVisibility(!hidden);\n  }, [hidden, text]);\n  const theme = useTheme();\n\n  return visibility && (text || children) && type ? (\n    <StyledNotificationBar type={type}>\n      <Text\n        size=\"m\"\n        color={theme.notification.text}\n        weight=\"bold\"\n        otherProperties={{ padding: \"10px\" }}>\n        {text || children}\n      </Text>\n      <CloseBtn\n        icon=\"cancel\"\n        size={20}\n        onClick={() => {\n          changeVisibility(false);\n          onClose?.();\n        }}\n      />\n    </StyledNotificationBar>\n  ) : null;\n};\n\nconst StyledNotificationBar = styled.div<{\n  type?: Type;\n}>`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: ${({ type, theme }) =>\n    type === \"error\"\n      ? theme.notification.errorBg\n      : type === \"warning\"\n      ? theme.notification.warningBg\n      : type === \"success\"\n      ? theme.notification.successBg\n      : theme.notification.infoBg};\n  color: ${({ theme }) => theme.notification.text};\n  position: absolute;\n  top: 0;\n  z-index: ${props => props.theme.zIndexes.notificationBar};\n`;\n\nconst CloseBtn = styled(Icon)`\n  padding: 10px;\n  cursor: pointer;\n`;\n\nexport default NotificationBar;\n","import React, { CSSProperties, IframeHTMLAttributes } from \"react\";\nimport useHook, { RefType } from \"./hooks\";\n\nexport type Ref = RefType;\n\nexport type Props = {\n  autoResize?: boolean;\n  className?: string;\n  html?: string;\n  style?: CSSProperties;\n  visible?: boolean;\n  iFrameProps?: IframeHTMLAttributes<HTMLIFrameElement>;\n  onLoad?: () => void;\n  onMessage?: (message: any) => void;\n};\n\nconst IFrame: React.ForwardRefRenderFunction<Ref, Props> = (\n  { autoResize, className, html, style, visible, iFrameProps, onLoad, onMessage },\n  ref,\n) => {\n  const {\n    ref: iFrameRef,\n    width,\n    height,\n    onLoad: onIFrameLoad,\n  } = useHook({\n    autoResize,\n    html,\n    ref,\n    onLoad,\n    onMessage,\n  });\n\n  return html ? (\n    <iframe\n      frameBorder=\"no\"\n      scrolling={autoResize ? \"no\" : undefined}\n      data-testid=\"iframe\"\n      srcDoc=\"\"\n      key={html}\n      ref={iFrameRef}\n      style={{\n        display: visible ? undefined : \"none\",\n        width: visible ? (autoResize ? width : \"100%\") : \"0px\",\n        height: visible ? (autoResize ? height : \"100%\") : \"0px\",\n        minWidth: \"100%\",\n        ...style,\n      }}\n      className={className}\n      onLoad={onIFrameLoad}\n      {...iFrameProps}\n    />\n  ) : null;\n};\n\nexport default React.forwardRef(IFrame);\n","import {\n  Ref,\n  RefObject,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from \"react\";\n\nexport type RefType = {\n  postMessage: (message: any) => void;\n};\n\nexport default function useHook({\n  autoResizeMessageKey = \"___iframe_auto_resize___\",\n  html,\n  ref,\n  autoResize,\n  onLoad,\n  onMessage,\n}: {\n  autoResizeMessageKey?: string;\n  html?: string;\n  ref?: Ref<RefType>;\n  autoResize?: boolean;\n  onLoad?: () => void;\n  onMessage?: (message: any) => void;\n} = {}): {\n  ref: RefObject<HTMLIFrameElement>;\n  onLoad?: () => void;\n  width?: string;\n  height?: string;\n} {\n  const loaded = useRef(false);\n  const iFrameRef = useRef<HTMLIFrameElement>(null);\n  const [iFrameSize, setIFrameSize] = useState<[string, string]>();\n  const pendingMesages = useRef<any[]>([]);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      postMessage: (message: any) => {\n        if (!loaded.current || !iFrameRef.current?.contentWindow) {\n          pendingMesages.current.push(message);\n          return;\n        }\n        iFrameRef.current.contentWindow.postMessage(message, \"*\");\n      },\n    }),\n    [],\n  );\n\n  useEffect(() => {\n    const cb = (ev: MessageEvent<any>) => {\n      if (!iFrameRef.current || ev.source !== iFrameRef.current.contentWindow) return;\n      if (ev.data?.[autoResizeMessageKey]) {\n        const { width, height } = ev.data?.[autoResizeMessageKey];\n        if (typeof width !== \"number\" || typeof height !== \"number\") return;\n        setIFrameSize([width + \"px\", height + \"px\"]);\n      } else {\n        onMessage?.(ev.data);\n      }\n    };\n    window.addEventListener(\"message\", cb);\n    return () => {\n      window.removeEventListener(\"message\", cb);\n    };\n  }, [autoResize, autoResizeMessageKey, onMessage]);\n\n  const onIframeLoad = useCallback(() => {\n    const win = iFrameRef.current?.contentWindow;\n    const doc = iFrameRef.current?.contentDocument;\n    if (!win || !doc?.body || !html) return;\n\n    // inject auto-resizing code\n    if (!doc.head.querySelector(\"script[id=_reearth_resize]\")) {\n      const resize = document.createElement(\"script\");\n      resize.id = \"_reearth_resize\";\n      // To include margin, getComputedStyle should be used.\n      resize.textContent = `\n        if (\"ResizeObserver\" in window) {\n          new window.ResizeObserver(entries => {\n            const el = document.body.parentElement;\n            const st = document.defaultView.getComputedStyle(el, \"\");\n            horizontalMargin = parseInt(st.getPropertyValue(\"margin-left\")) + parseInt(st.getPropertyValue(\"margin-right\"));\n            verticalMargin = parseInt(st.getPropertyValue(\"margin-top\")) + parseInt(st.getPropertyValue(\"margin-bottom\"));\n            const resize = {\n              width: el.offsetWidth + horizontalMargin, \n              height: el.offsetHeight + verticalMargin,\n            };\n            parent.postMessage({\n              [${JSON.stringify(autoResizeMessageKey)}]: resize\n            })\n          }).observe(document.body.parentElement);\n        }\n      `;\n      doc.head.appendChild(resize);\n    }\n\n    doc.body.innerHTML = html;\n\n    // exec scripts\n    Array.from(doc.body.querySelectorAll(\"script\"))\n      .map<[HTMLScriptElement, HTMLScriptElement]>(oldScript => {\n        const newScript = document.createElement(\"script\");\n        for (const attr of Array.from(oldScript.attributes)) {\n          newScript.setAttribute(attr.name, attr.value);\n        }\n        newScript.appendChild(document.createTextNode(oldScript.innerText));\n        return [oldScript, newScript];\n      })\n      .forEach(([oldScript, newScript]) => {\n        oldScript.parentNode?.replaceChild(newScript, oldScript);\n      });\n\n    // post pending messages\n    if (pendingMesages.current.length) {\n      for (const msg of pendingMesages.current) {\n        win.postMessage(msg, \"*\");\n      }\n      pendingMesages.current = [];\n    }\n\n    loaded.current = true;\n    onLoad?.();\n  }, [autoResizeMessageKey, html, onLoad]);\n\n  return {\n    ref: iFrameRef,\n    width: iFrameSize?.[0],\n    height: iFrameSize?.[1],\n    onLoad: onIframeLoad,\n  };\n}\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { getQuickJS } from \"quickjs-emscripten\";\nimport Arena from \"quickjs-emscripten-sync\";\n\nimport type { Ref as IFrameRef } from \"./IFrame\";\nimport { useMemo } from \"react\";\n\nexport type IFrameAPI = {\n  render: (html: string, options?: { visible?: boolean }) => void;\n  postMessage: (message: any) => void;\n};\n\nexport type Options<T> = {\n  src?: string;\n  sourceCode?: string;\n  skip?: boolean;\n  iframeCanBeVisible?: boolean;\n  exposed?: { [key: string]: any };\n  isMarshalable?: (obj: any) => boolean;\n  onError?: (err: any) => void;\n  staticExposed?: (api: IFrameAPI) => T;\n};\n\n// restrict any classes\nconst defaultIsMarshalable = (obj: any): boolean => {\n  return (\n    ((typeof obj !== \"object\" || obj === null) && typeof obj !== \"function\") ||\n    Array.isArray(obj) ||\n    Object.getPrototypeOf(obj) === Function.prototype ||\n    Object.getPrototypeOf(obj) === Object.prototype\n  );\n};\n\nconst defaultOnError = (err: any) => {\n  console.error(\"plugin error\", err?.message || err);\n};\n\nexport default function useHook<T>({\n  src,\n  sourceCode,\n  skip,\n  iframeCanBeVisible,\n  exposed,\n  isMarshalable,\n  onError = defaultOnError,\n  staticExposed,\n}: Options<T> = {}) {\n  const arena = useRef<Arena | undefined>();\n  const eventLoop = useRef<number>();\n  const [loaded, setLoaded] = useState(false);\n  const iFrameRef = useRef<IFrameRef>(null);\n  const [[iFrameHtml, iFrameOptions], setIFrameState] = useState<\n    [string, { visible?: boolean } | undefined]\n  >([\"\", undefined]);\n\n  const evalCode = useCallback(\n    (code: string): any => {\n      if (!arena.current) return;\n\n      let result: any;\n      try {\n        result = arena.current.evalCode(code);\n      } catch (err) {\n        onError(err);\n      }\n\n      const eventLoopCb = () => {\n        if (!arena.current) return;\n        try {\n          arena.current.executePendingJobs();\n          if (arena.current.vm.hasPendingJob()) {\n            eventLoop.current = window.setTimeout(eventLoopCb, 0);\n          }\n        } catch (err) {\n          onError(err);\n        }\n      };\n      eventLoop.current = window.setTimeout(eventLoopCb, 0);\n\n      return result;\n    },\n    [onError],\n  );\n\n  const iFrameApi = useMemo<IFrameAPI>(\n    () => ({\n      render: (html, { visible = true, ...options } = {}) => {\n        setIFrameState([html, { visible: !!iframeCanBeVisible && !!visible, ...options }]);\n      },\n      postMessage: msg => {\n        iFrameRef.current?.postMessage(JSON.parse(JSON.stringify(msg)));\n      },\n    }),\n    [iframeCanBeVisible],\n  );\n\n  const staticExpose = useCallback(() => {\n    if (!arena.current) return;\n    const exposed = staticExposed?.(iFrameApi);\n    if (exposed) {\n      arena.current.expose(exposed);\n    }\n  }, [iFrameApi, staticExposed]);\n\n  // init and dispose of vm\n  useEffect(() => {\n    if (skip) return;\n\n    (async () => {\n      const vm = (await getQuickJS()).createVm();\n      arena.current = new Arena(vm, {\n        isMarshalable: target => defaultIsMarshalable(target) || !!isMarshalable?.(target),\n      });\n      staticExpose();\n      setLoaded(true);\n    })();\n\n    return () => {\n      if (typeof eventLoop.current === \"number\") {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        window.clearTimeout(eventLoop.current);\n      }\n      if (arena.current) {\n        try {\n          arena.current.dispose();\n          arena.current.vm.dispose();\n        } catch (err) {\n          console.error(err);\n        } finally {\n          arena.current = undefined;\n          setLoaded(false);\n        }\n      }\n    };\n  }, [isMarshalable, onError, skip, src, sourceCode, staticExpose]);\n\n  const exposer = useMemo(() => {\n    if (!arena.current || !loaded) return;\n    return arena.current.evalCode<(keys: string[], value: any) => void>(`(keys, value) => {\n      if (!keys.length) return;\n      let o = globalThis;\n      for (const k of keys.slice(0, -1)) {\n        if (typeof o !== \"object\") break;\n        if (typeof o?.[k] !== \"object\") {\n          o[k] = {};\n        }\n        o = o[k];\n      }\n      if (typeof o !== \"object\") return;\n      o[keys[keys.length - 1]] = value;\n    }`);\n  }, [loaded]);\n\n  useEffect(() => {\n    if (!arena.current || !exposer || !exposed) return;\n    for (const [k, v] of Object.entries(exposed)) {\n      const keys = k.split(\".\");\n      exposer(keys, v);\n    }\n  }, [exposed, exposer]);\n\n  useEffect(() => {\n    if (!arena.current || !loaded || (!src && !sourceCode)) return;\n\n    setIFrameState(s => (!s[0] && !s[1] ? s : [\"\", undefined]));\n    // load JS\n    (async () => {\n      if (!arena.current) return;\n      const code = sourceCode ?? (src ? await (await fetch(src)).text() : \"\");\n      evalCode(code);\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [src, sourceCode, loaded]); // ignore evalCode\n\n  return {\n    iFrameHtml,\n    iFrameRef,\n    iFrameVisible: iFrameOptions?.visible,\n    loaded,\n  };\n}\n","import React, { CSSProperties, IframeHTMLAttributes, ReactNode } from \"react\";\n\nimport useHook, { IFrameAPI as IFrameAPIType } from \"./hooks\";\nimport IFrame from \"./IFrame\";\n\nexport type IFrameAPI = IFrameAPIType;\n\nexport type Props = {\n  className?: string;\n  canBeVisible?: boolean;\n  skip?: boolean;\n  style?: CSSProperties;\n  src?: string;\n  sourceCode?: string;\n  exposed?: { [key: string]: any };\n  renderPlaceholder?: ReactNode;\n  iFrameProps?: IframeHTMLAttributes<HTMLIFrameElement>;\n  isMarshalable?: (target: any) => boolean;\n  staticExposed?: (api: IFrameAPI) => any;\n  onMessage?: (message: any) => void;\n  onError?: (err: any) => void;\n};\n\nconst Plugin: React.FC<Props> = ({\n  className,\n  canBeVisible,\n  skip,\n  style,\n  src,\n  sourceCode,\n  exposed,\n  renderPlaceholder,\n  iFrameProps,\n  isMarshalable,\n  staticExposed,\n  onMessage,\n  onError,\n}) => {\n  const { iFrameRef, iFrameHtml, iFrameVisible } = useHook({\n    iframeCanBeVisible: canBeVisible,\n    skip,\n    src,\n    sourceCode,\n    exposed,\n    isMarshalable,\n    staticExposed,\n    onError,\n  });\n\n  return iFrameHtml ? (\n    <IFrame\n      autoResize\n      className={className}\n      style={style}\n      html={iFrameHtml}\n      ref={iFrameRef}\n      visible={iFrameVisible}\n      onMessage={onMessage}\n      iFrameProps={iFrameProps}\n    />\n  ) : renderPlaceholder ? (\n    <>{renderPlaceholder}</>\n  ) : null;\n};\n\nexport default Plugin;\n","import React, { useLayoutEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst Portal: React.FC = ({ children }) => {\n  const [node, setNode] = React.useState<HTMLElement>();\n\n  useLayoutEffect(() => {\n    setNode(document.body);\n  }, []);\n\n  return node ? ReactDOM.createPortal(children, node) : null;\n};\n\nexport default Portal;\n","import React from \"react\";\nimport { styled, useTheme } from \"@reearth/theme\";\nimport Text from \"@reearth/components/atoms/Text\";\nexport interface Props {\n  className?: string;\n  name?: string;\n}\n\nconst PropertyGroup: React.FC<Props> = ({ className, name, children }) => {\n  const theme = useTheme();\n  return (\n    <PropertyWrapper className={className}>\n      <PropertyTitle>\n        <Text\n          size=\"xs\"\n          color={theme.main.strongText}\n          weight=\"normal\"\n          otherProperties={{ flex: \"auto\" }}>\n          {name}\n        </Text>\n      </PropertyTitle>\n      <PropertyFields hidden={false}>{children}</PropertyFields>\n    </PropertyWrapper>\n  );\n};\n\nconst PropertyWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: 17px;\n`;\n\nconst PropertyTitle = styled.div`\n  background-color: ${props => props.theme.properties.bg};\n  padding: 8px 16px;\n  text-align: left;\n  user-select: none;\n  display: flex;\n  align-items: center;\n`;\n\nconst PropertyFields = styled.div<{ hidden?: boolean }>`\n  width: calc(100% - 32px);\n  background-color: ${props => props.theme.properties.bg};\n  padding: 16px;\n  display: ${({ hidden }) => (hidden ? \"none\" : \"block\")};\n`;\n\nexport default PropertyGroup;\n","import React from \"react\";\nimport { useIntl } from \"react-intl\";\n\n// Theme\nimport { styled } from \"@reearth/theme\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\nimport Text from \"@reearth/components/atoms/Text\";\n\nexport type Status = \"published\" | \"limited\" | \"unpublished\";\n\ninterface PublishStatusProps {\n  className?: string;\n  status?: Status;\n  url?: string[];\n  alias?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n  color?: string;\n}\n\nconst PublicationStatus: React.FC<PublishStatusProps> = ({\n  className,\n  status,\n  url,\n  alias,\n  size,\n}) => {\n  const intl = useIntl();\n  const text =\n    status === \"published\" || status === \"limited\"\n      ? intl.formatMessage({ defaultMessage: \"Published\" })\n      : intl.formatMessage({ defaultMessage: \"Unpublished\" });\n\n  return (\n    <StyledStatus className={className}>\n      <StatusCircle status={status} size={size} />\n      <Text\n        size={size === \"lg\" ? \"m\" : size === \"md\" ? \"s\" : \"xs\"}\n        otherProperties={{ userSelect: \"none\" }}\n        customColor>\n        {status === \"published\" && alias ? (\n          <PublishLink href={`${url?.[0] ?? \"\"}/${alias}${url?.[1]}`} target=\"blank\">\n            {status && text}\n          </PublishLink>\n        ) : (\n          status && text\n        )}\n      </Text>\n    </StyledStatus>\n  );\n};\n\nconst StyledStatus = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst StatusCircle = styled.div<PublishStatusProps>`\n  width: ${({ size }) => (size === \"lg\" || size === \"md\" ? \"10px\" : \"9px\")};\n  height: ${({ size }) => (size === \"lg\" || size === \"md\" ? \"10px\" : \"9px\")};\n  background: ${props =>\n    props.status === \"published\" || props.status === \"limited\"\n      ? props.theme.publishStatus.published\n      : props.status === \"unpublished\"\n      ? props.theme.publishStatus.unpublished\n      : props.status === \"building\"\n      ? props.theme.publishStatus.building\n      : null};\n  border-radius: 50px;\n  margin: auto ${metricsSizes[\"s\"]}px auto 0;\n`;\n\nconst PublishLink = styled.a`\n  color: ${props => props.theme.main.strongText};\n  text-decoration: none;\n`;\n\nexport default PublicationStatus;\n","import { styled } from \"@reearth/theme\";\nimport fonts from \"@reearth/theme/fonts\";\n\ntype Props = {\n  linked?: boolean;\n  overridden?: boolean;\n  inactive?: boolean;\n  selected?: boolean;\n};\n\nconst Radio = styled.li<Props>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 30px;\n  min-height: 30px;\n  list-style: none;\n  padding: 6px;\n  font-size: ${fonts.sizes.m}px;\n  color: ${({ linked, overridden, selected, inactive, theme }) =>\n    selected && linked\n      ? theme.main.accent\n      : selected && overridden\n      ? theme.main.danger\n      : inactive\n      ? theme.toggleButton.toggle\n      : theme.properties.contentsText};\n  background: ${({ selected, theme }) => (selected ? theme.main.bg : \"none\")};\n  cursor: pointer;\n  box-sizing: border-box;\n  border-radius: 2px;\n  :not(:last-child) {\n    margin-right: 1px;\n  }\n`;\n\nexport default Radio;\n","import React from \"react\";\nimport { styled } from \"@reearth/theme\";\n\nexport type RadioButtonProps = {\n  value: string | number;\n  checked?: boolean;\n  disabled?: boolean;\n  handleChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst RadioButton: React.FC<RadioButtonProps> = ({\n  value,\n  disabled = false,\n  checked = false,\n  handleChange,\n}) => (\n  <>\n    <RadioInput\n      type=\"radio\"\n      checked={checked}\n      value={disabled ? undefined : value}\n      onChange={handleChange}\n    />\n    <RadioIcon />\n  </>\n);\n\nconst RadioInput = styled.input`\n  opacity: 0;\n  height: 0;\n  width: 0;\n  &:checked + span {\n    top: 1px; /* 若干ずれるため微調整 */\n    left: 1px;\n    height: 7px;\n    width: 7px;\n    box-shadow: ${props => `0 0 0 1px ${props.theme.main.accent}`};\n    background-color: ${props => props.theme.main.highlighted};\n    border: 4px solid ${props => props.theme.main.bg};\n  }\n`;\n\nconst RadioIcon = styled.span`\n  height: 15px;\n  width: 15px;\n  border-radius: 50%;\n  background-color: ${props => props.theme.main.bg};\n  border: 1px solid ${props => props.theme.main.accent};\n  margin-right: 12px;\n`;\n\nexport default RadioButton;\n","import React, { useCallback } from \"react\";\nimport { styled } from \"@reearth/theme\";\n\ntype RadioProps<Value extends string | number> = {\n  value: Value;\n  children?: React.ReactNode;\n  focused?: boolean;\n  selected?: boolean;\n  inactive?: boolean;\n  onClick?: (e: React.MouseEvent) => void;\n};\n\ntype RadioElement<Value extends string | number> = React.ReactElement<RadioProps<Value>>;\n\nexport type Props<Value extends string | number> = {\n  className?: string;\n  value?: Value;\n  inactive?: boolean;\n  onChange?: (value: Value) => void;\n  children?: RadioElement<Value>[];\n  ref?: React.Ref<HTMLUListElement>;\n};\n\nconst forwardRef = <Value extends string | number>(\n  render: (props: Props<Value>, ref: React.Ref<HTMLUListElement>) => React.ReactElement | null,\n): typeof RadioGroup => React.forwardRef(render) as any;\n\nconst RadioGroup = <Value extends string | number>(\n  { className, value: selectedValue, inactive, onChange, children }: Props<Value>,\n  ref: React.Ref<HTMLUListElement>,\n) => {\n  const isValidElement = (object: {} | null | undefined): object is RadioElement<Value> =>\n    React.isValidElement(object);\n  const checks = React.Children.toArray(children).filter(isValidElement);\n\n  const handleClick = useCallback(\n    (value: Value, onClick: RadioProps<Value>[\"onClick\"]) => (e: React.MouseEvent) => {\n      onChange?.(value);\n      onClick?.(e);\n    },\n    [onChange],\n  );\n\n  return (\n    <Wrapper className={className} ref={ref}>\n      {checks.map(check => {\n        const { value, onClick } = check.props;\n        return React.cloneElement(check, {\n          selected: value === selectedValue,\n          inactive,\n          onClick: handleClick(value, onClick),\n        });\n      })}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.ul`\n  display: inline-flex;\n  margin: 0;\n  padding: 0;\n  border-radius: 3px;\n  box-sizing: border-box;\n`;\n\nexport default forwardRef(RadioGroup);\n","import React from \"react\";\nimport { styled, useTheme } from \"@reearth/theme\";\nimport RadioButton, { RadioButtonProps } from \"@reearth/components/atoms/RadioButton\";\nimport Text from \"@reearth/components/atoms/Text\";\n\nexport type RadioLabelProps = RadioButtonProps & {\n  label: string;\n  children?: React.ReactNode;\n  inlineChildren?: React.ReactNode;\n  disabled?: boolean;\n};\n\nconst RadioLabel: React.FC<RadioLabelProps> = ({\n  label,\n  value,\n  inlineChildren,\n  children,\n  handleChange,\n  disabled = false,\n  checked = false,\n}) => {\n  const theme = useTheme();\n  return (\n    <>\n      <Label size=\"m\" weight=\"bold\" color={theme.main.strongText} disabled={disabled}>\n        <RadioButton\n          value={value}\n          disabled={disabled}\n          checked={checked}\n          handleChange={handleChange}\n        />\n        {label}\n        {inlineChildren}\n      </Label>\n      {checked && children && <>{children}</>}\n    </>\n  );\n};\n\nconst Label = styled(Text)<{ disabled: boolean }>`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  opacity: ${props => props.disabled && \"0.6\"};\n  cursor: ${props => props.disabled && \"not-allowed\"};\n`;\n\nexport default RadioLabel;\n","import React, { useCallback } from \"react\";\nimport { styled } from \"@reearth/theme\";\nimport { RadioLabelProps as BasedRadioLabelProps } from \"@reearth/components/atoms/RadioLabel\";\n\ntype RadioLabelProps<Value extends string | number> = Omit<BasedRadioLabelProps, \"value\"> & {\n  value: Value;\n  children?: React.ReactNode;\n};\n\ntype RadioLabelElement<Value extends string | number> = React.ReactElement<RadioLabelProps<Value>>;\n\nexport type Props<Value extends string | number> = {\n  className?: string;\n  selectedValue?: Value;\n  onChange?: (value: Value) => void;\n  children?: RadioLabelElement<Value>[];\n  ref?: React.Ref<HTMLElement>;\n};\n\nconst forwardRef = <Value extends string | number>(\n  render: (props: Props<Value>, ref: React.Ref<HTMLElement>) => React.ReactElement | null,\n): typeof RadioLabelGroup => React.forwardRef(render) as any;\n\nconst RadioLabelGroup = <Value extends string | number>(\n  { className, selectedValue, onChange, children }: Props<Value>,\n  ref: React.Ref<HTMLElement>,\n) => {\n  const isValidElement = (object: {} | null | undefined): object is RadioLabelElement<Value> =>\n    React.isValidElement(object);\n\n  const radioLabels = React.Children.toArray(children).filter(isValidElement);\n\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (!e.currentTarget?.value) return;\n      onChange?.(e.currentTarget.value as Value);\n    },\n    [onChange],\n  );\n\n  return (\n    <Wrapper className={className} ref={ref}>\n      {radioLabels.map(radio => {\n        const { value, label, disabled, inlineChildren, children } = radio.props;\n        return React.cloneElement(radio, {\n          value,\n          label,\n          disabled,\n          inlineChildren,\n          children,\n          checked: value === selectedValue,\n          handleChange,\n        });\n      })}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.section`\n  display: flex;\n  flex-direction: column;\n  > label:not(:last-child) {\n    margin-bottom: 16px;\n  }\n`;\n\nexport default forwardRef(RadioLabelGroup);\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { detect } from \"detect-browser\";\n\nimport { styled } from \"@reearth/theme\";\n\nexport type Props = {\n  className?: string;\n  dragScrollSpead?: number;\n  dragScrollZoneHeight?: number;\n};\n\nconst browser = detect();\n\nconst Scroll: React.FC<Props> = ({\n  className,\n  children,\n  dragScrollSpead = 20,\n  dragScrollZoneHeight = 1 / 5,\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const [scroll, setScroll] = useState(0);\n\n  const handleDragOver = useCallback(\n    (e: React.DragEvent<HTMLDivElement>) => {\n      // auto scrolling is already supported by browsers\n      if (browser?.name != \"safari\") return;\n\n      const y = e.clientY;\n      const h = e.currentTarget.getBoundingClientRect().height;\n      const bottom = y >= h - y;\n      const b = h * dragScrollZoneHeight;\n      const d = Math.min(b, Math.min(y, h - y));\n      const scroll = (1 - d / b) * dragScrollSpead * (bottom ? 1 : -1);\n\n      setScroll(scroll);\n    },\n    [dragScrollSpead, dragScrollZoneHeight],\n  );\n\n  const handleDragLeave = useCallback(() => {\n    setScroll(0);\n  }, []);\n\n  useEffect(() => {\n    if (scroll === 0) return;\n    let a: number;\n    const cb = () => {\n      ref.current?.scrollBy({ top: scroll });\n      a = requestAnimationFrame(cb);\n    };\n    a = window.requestAnimationFrame(cb);\n    return () => window.cancelAnimationFrame(a);\n  }, [scroll]);\n\n  return (\n    <Wrapper\n      ref={ref}\n      className={className}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}>\n      {children}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n`;\n\nexport default Scroll;\n","import { fonts, styled, useTheme } from \"@reearth/theme\";\nimport React from \"react\";\nimport Box from \"../Box\";\nimport Flex from \"../Flex\";\nimport Icon from \"../Icon\";\n\nexport type Props = {\n  className?: string;\n  placeHolder?: string;\n  onChange?: (e: string) => void;\n  value?: string;\n  iconPos?: \"left\" | \"right\";\n};\n\nconst SearchBar: React.FC<Props> = ({\n  className,\n  placeHolder,\n  onChange,\n  value,\n  iconPos = \"right\",\n}) => {\n  const theme = useTheme();\n  return (\n    <Box border={`solid 1px ${theme.main.border}`} ph=\"m\">\n      <Flex className={className} align=\"center\">\n        {iconPos === \"left\" && <Icon icon=\"search\" size={20} color={theme.main.text} />}\n        <StyledInput\n          placeholder={placeHolder}\n          value={value}\n          onChange={e => onChange?.(e.currentTarget.value)}\n        />\n        {iconPos === \"right\" && <Icon icon=\"search\" color={theme.main.text} size={20} />}\n      </Flex>\n    </Box>\n  );\n};\n\nconst StyledInput = styled.input`\n  border: none;\n  font-size: ${fonts.sizes.m}px;\n  padding: ${({ theme }) => `${theme.metrics.s}px ${theme.metrics[\"2xs\"]}px`};\n  background-color: inherit;\n  color: ${({ theme }) => theme.main.text};\n  &:focus {\n    border: none;\n    outline: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.main.weak};\n  }\n`;\n\nexport default SearchBar;\n","import React, { useState, useRef, useCallback, useLayoutEffect } from \"react\";\nimport { useClickAway } from \"react-use\";\nimport { usePopper } from \"react-popper\";\nimport { useMergeRefs } from \"use-callback-ref\";\nimport { useIntl } from \"react-intl\";\n\nimport { styled, css, useTheme, metrics } from \"@reearth/theme\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Text from \"@reearth/components/atoms/Text\";\n\n// Components\n\ntype OptionProps<Value extends string | number> = {\n  value: Value;\n  label: string;\n  children?: React.ReactNode;\n  focused?: boolean;\n  selected?: boolean;\n  inactive?: boolean;\n  onClick?: (e: React.MouseEvent) => void;\n  onMouseEnter?: (e: React.MouseEvent) => void;\n};\n\ntype OptionElement<Value extends string | number> = React.ReactElement<OptionProps<Value>>;\n\nexport type Props<Value extends string | number> = {\n  className?: string;\n  value?: Value;\n  placeholder?: string;\n  inactive?: boolean;\n  color?: string;\n  fullWidth?: boolean;\n  onChange?: (value: Value) => void;\n  children?: OptionElement<Value>[];\n  ref?: React.Ref<HTMLDivElement>;\n};\n\nconst forwardRef = <Value extends string | number>(\n  render: (props: Props<Value>, ref: React.Ref<HTMLDivElement>) => React.ReactElement | null,\n): typeof Select => React.forwardRef(render) as any;\n\nconst Select = <Value extends string | number>(\n  {\n    className,\n    value: selectedValue,\n    placeholder,\n    inactive = false,\n    color,\n    fullWidth = false,\n    onChange,\n    children,\n  }: Props<Value>,\n  ref: React.Ref<HTMLDivElement>,\n) => {\n  const intl = useIntl();\n  const [open, setOpen] = useState(false);\n  const [focusedValue, setFocusedValue] = useState(selectedValue);\n\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const listRef = useRef<HTMLUListElement>(null);\n  const mergedRef = useMergeRefs(ref ? [ref, wrapperRef] : [wrapperRef]);\n  const {\n    styles,\n    attributes,\n    update: updatePopper,\n  } = usePopper(wrapperRef.current, listRef.current, {\n    placement: \"bottom\",\n    modifiers: [\n      {\n        name: \"flip\",\n        enabled: true,\n        options: {\n          fallbackPlacements: [\"top\"],\n        },\n      },\n      {\n        name: \"offset\",\n        options: {\n          offset: [0, 4],\n        },\n      },\n      {\n        name: \"eventListeners\",\n        enabled: !open,\n        options: {\n          scroll: false,\n          resize: false,\n        },\n      },\n    ],\n  });\n\n  const isValidElement = (object: {} | null | undefined): object is OptionElement<Value> =>\n    React.isValidElement(object);\n  const options = React.Children.toArray(children).filter(isValidElement);\n\n  const values = options.map(({ props: { value } }) => value);\n\n  const labels = Object.fromEntries(\n    options.map(({ props: { value, label } }) => [value, label] as const),\n  );\n  const selectedLabel = selectedValue ? labels[selectedValue] : null;\n\n  const openList = useCallback(() => {\n    setOpen(true);\n    listRef.current?.focus();\n    updatePopper?.();\n  }, [setOpen, updatePopper]);\n\n  const closeList = useCallback(() => {\n    setOpen(false);\n    setFocusedValue(selectedValue);\n    updatePopper?.();\n  }, [setOpen, selectedValue, updatePopper]);\n\n  const toggleList = useCallback(() => {\n    if (open) {\n      closeList();\n    } else {\n      openList();\n    }\n  }, [open, openList, closeList]);\n\n  // Ref: https://github.com/mui-org/material-ui/blob/v4.9.3/packages/material-ui/src/Select/SelectInput.js#L152\n  const handleKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLDivElement>) => {\n      if (!inactive) {\n        const validKeys = [\n          \" \",\n          \"ArrowUp\",\n          \"ArrowDown\",\n          // The native select doesn't respond to enter on macOS, but it's recommended by\n          // https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html\n          \"Enter\",\n        ];\n\n        if (validKeys.indexOf(e.key) !== -1) {\n          e.preventDefault();\n          openList();\n        }\n      }\n    },\n    [inactive, openList],\n  );\n\n  // Ref:\n  //   https://github.com/mui-org/material-ui/blob/v4.9.3/packages/material-ui/src/Menu/Menu.js#L74\n  //   https://github.com/mui-org/material-ui/blob/v4.9.3/packages/material-ui/src/MenuList/MenuList.js\n  const handleListKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLUListElement>) => {\n      const { key } = e;\n\n      if (key === \"Enter\") {\n        e.stopPropagation();\n        if (focusedValue) {\n          onChange?.(focusedValue);\n        }\n        return closeList();\n      }\n\n      if (key === \"Tab\" || key === \"Escape\") {\n        e.preventDefault();\n        return closeList();\n      }\n\n      const index = focusedValue ? values.indexOf(focusedValue) : 0;\n\n      if (key === \"ArrowDown\") {\n        const nextValue = values[Math.min(values.length - 1, index + 1)];\n\n        // Prevent scroll of the page\n        e.preventDefault();\n        return setFocusedValue(nextValue);\n      }\n\n      if (key === \"ArrowUp\") {\n        const previousValue = values[Math.max(0, index - 1)];\n\n        e.preventDefault();\n        return setFocusedValue(previousValue);\n      }\n    },\n    [closeList, focusedValue, values, onChange],\n  );\n\n  const handleListItemClick = useCallback(\n    (value: Value, onClick: OptionProps<Value>[\"onClick\"]) => (e: React.MouseEvent) => {\n      e.stopPropagation();\n      if (!inactive) {\n        onChange?.(value);\n      }\n      closeList();\n      onClick?.(e);\n    },\n    [inactive, onChange, closeList],\n  );\n\n  const handleListItemMouseEnter = useCallback(\n    (value: Value, onMouseEnter: OptionProps<Value>[\"onMouseEnter\"]) => (e: React.MouseEvent) => {\n      setFocusedValue(value);\n      onMouseEnter?.(e);\n    },\n    [setFocusedValue],\n  );\n\n  useLayoutEffect(() => {\n    if (open) {\n      listRef.current?.focus();\n    }\n  }, [open]);\n\n  useClickAway(mergedRef, closeList);\n\n  const theme = useTheme();\n  return (\n    <Wrapper\n      className={className}\n      ref={mergedRef}\n      fullWidth={fullWidth}\n      onClick={toggleList}\n      onKeyDown={handleKeyDown}\n      tabIndex={0}>\n      <SelectWrapper>\n        <Selected inactive={inactive} size=\"xs\" color={!selectedValue ? theme.main.weak : color}>\n          {selectedLabel || placeholder || intl.formatMessage({ defaultMessage: \"not set\" })}\n        </Selected>\n        <StyledDownArrow icon=\"arrowSelect\" />\n      </SelectWrapper>\n      <OptionList\n        ref={listRef}\n        open={open}\n        fullWidth={fullWidth}\n        onKeyDown={handleListKeyDown}\n        tabIndex={0}\n        style={styles.popper}\n        {...attributes.popper}>\n        {options.map(option => {\n          const { value, onClick, onMouseEnter } = option.props;\n          return React.cloneElement(option, {\n            focused: value === focusedValue,\n            selected: value === selectedValue,\n            inactive,\n            onClick: handleListItemClick(value, onClick),\n            onMouseEnter: handleListItemMouseEnter(value, onMouseEnter),\n          });\n        })}\n      </OptionList>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div<{ fullWidth: boolean }>`\n  position: relative;\n  ${({ fullWidth }) =>\n    fullWidth &&\n    css`\n      width: 100%;\n    `};\n  width: 100%;\n  cursor: pointer;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst SelectWrapper = styled.div`\n  border: solid 1px ${props => props.theme.properties.border};\n  background: ${props => props.theme.properties.bg};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: ${metricsSizes.xs}px;\n  width: 100%;\n  height: ${metrics.propertyTextInputHeight}px;\n  box-sizing: border-box;\n`;\n\nconst Selected = styled(Text)<{ inactive: boolean }>`\n  flex: 1;\n  padding: 3px;\n`;\n\nconst OptionList = styled.ul<{ fullWidth: boolean; open: boolean }>`\n  ${({ open }) =>\n    !open &&\n    css`\n      visibility: hidden;\n      pointer-events: none;\n    `}\n  ${({ fullWidth }) =>\n    fullWidth\n      ? css`\n          width: 100%;\n        `\n      : css`\n          min-width: 200px;\n        `};\n  margin: 0;\n  padding: 0;\n  border: solid 1px ${props => props.theme.properties.border};\n  border-radius: 3px;\n  background: ${({ theme }) => theme.selectList.option.bg};\n  box-sizing: border-box;\n  overflow: hidden;\n  z-index: ${props => props.theme.zIndexes.dropDown};\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst StyledDownArrow = styled(Icon)`\n  color: ${props => props.theme.properties.border};\n`;\n\nexport default forwardRef(Select);\n","import React, { useMemo } from \"react\";\nimport { styled } from \"@reearth/theme\";\n\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Select from \"@reearth/components/atoms/Select\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport fonts from \"@reearth/theme/fonts\";\n\nexport type Item<Value extends string | number = string> = {\n  key: Value;\n  label: string;\n  icon?: string;\n};\n\nexport type Props<Value extends string | number = string> = {\n  className?: string;\n  selected?: Value;\n  items?: Item<Value>[];\n  color?: string;\n  disabled?: boolean;\n  onChange?: (selected: Value) => void;\n};\n\nconst SelectField = <Value extends string | number = string>({\n  className,\n  selected,\n  items = [],\n  color,\n  disabled,\n  onChange,\n}: Props<Value>) => {\n  const hasIcon = useMemo(() => items.some(({ icon }) => icon), [items]);\n\n  return (\n    <Select<Value>\n      className={className}\n      value={selected}\n      inactive={disabled}\n      onChange={onChange}\n      fullWidth\n      color={color}>\n      {items.map(({ key, label, icon }) => (\n        <Option key={key} value={key} label={label}>\n          <OptionCheck size=\"xs\">{key === selected && <Icon icon=\"check\" size={12} />}</OptionCheck>\n          {hasIcon && <OptionIcon size=\"xs\">{icon && <Icon icon={icon} />}</OptionIcon>}\n          {label}\n        </Option>\n      ))}\n    </Select>\n  );\n};\n\nconst OptionCheck = styled(Text)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 20px;\n  margin-right: 6px;\n`;\n\nconst OptionIcon = styled(Text)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 20px;\n  margin-right: 6px;\n`;\n\nconst Option = styled.li<{\n  focused?: boolean;\n  label?: string;\n}>`\n  display: flex;\n  list-style: none;\n  padding: 6px;\n  font-size: ${fonts.sizes[\"2xs\"]}px;\n  color: ${({ theme }) => theme.main.text};\n  background: ${({ focused, theme }) => (focused ? \"transparent\" : theme.properties.bg)};\n  cursor: pointer;\n`;\n\nexport default SelectField;\n","import { styled } from \"@reearth/theme\";\nimport fonts from \"@reearth/theme/fonts\";\n\nexport type Props = {\n  label: string;\n  focused?: boolean;\n};\n\nconst Option = styled.li<Props>`\n  display: flex;\n  list-style: none;\n  padding: 6px;\n  font-size: ${fonts.sizes.xs}px;\n  color: ${({ theme }) => theme.properties.contentsText};\n  background: ${({ focused, theme }) =>\n    focused ? theme.selectList.option.hoverBg : \"transparent\"};\n  cursor: pointer;\n`;\n\nexport default Option;\n","import React from \"react\";\nimport { styled } from \"@reearth/theme\";\n\nexport type Props = {\n  className?: string;\n  pos?: number;\n};\n\nconst Slide: React.FC<Props> = ({ className, children, pos }) => {\n  return (\n    <Wrapper className={className}>\n      <Inner pos={pos}>\n        {React.Children.map(children, child =>\n          React.isValidElement(child) ? <Page key={child.key ?? undefined}>{child}</Page> : null,\n        )}\n      </Inner>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst Inner = styled.div<{ pos?: number }>`\n  position: relative;\n  transform: translateX(${({ pos }) => `-${(pos ?? 0) * 100}%`});\n  transition: transform 0.1s ease;\n  display: flex;\n  flex-wrap: nowrap;\n  align-items: stretch;\n  width: 100%;\n  height: 100%;\n`;\n\nconst Page = styled.div`\n  flex: 0 0 100%;\n  width: 100%;\n`;\n\nexport default Slide;\n","import React from \"react\";\nimport { useTheme } from \"@reearth/theme\";\n\nimport { FontWeight, typography, TypographySize } from \"@reearth/theme/fonts\";\nimport { CSSProperties } from \"react\";\n\ntype NonChangeableProperties = \"color\" | \"fontFamily\" | \"fontSize\" | \"lineHeight\" | \"fontStyle\";\n\ntype ChangeableProperties = Omit<CSSProperties, NonChangeableProperties>;\n\nexport type TextProps = {\n  className?: string;\n  children: React.ReactNode;\n  color?: string;\n  customColor?: boolean;\n  size: TypographySize;\n  isParagraph?: boolean;\n  weight?: FontWeight;\n  otherProperties?: Partial<ChangeableProperties>;\n  onClick?: () => void;\n};\n\nconst Text: React.FC<TextProps> = ({\n  className,\n  children,\n  size,\n  color,\n  customColor,\n  isParagraph = false,\n  weight = \"normal\",\n  otherProperties,\n  onClick,\n}) => {\n  const theme = useTheme();\n  const defaultColor = theme.text.default;\n  const typographyBySize = typography[size];\n\n  // Default is \"regular\"\n  const Typography = isParagraph\n    ? \"paragraph\" in typographyBySize && typographyBySize.paragraph\n    : weight === \"bold\" && \"bold\" in typographyBySize\n    ? typographyBySize.bold\n    : typographyBySize.regular;\n\n  return Typography ? (\n    <Typography\n      className={className}\n      style={{\n        ...otherProperties,\n        color: customColor ? undefined : color || defaultColor,\n      }}\n      onClick={onClick}>\n      {children}\n    </Typography>\n  ) : null;\n};\n\nexport default Text;\n","import React, { useEffect, useState, useCallback, useRef } from \"react\";\nimport fonts from \"@reearth/theme/fonts\";\nimport { styled, metrics } from \"@reearth/theme\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\nimport Flex from \"@reearth/components/atoms/Flex\";\n\nexport type Props = {\n  className?: string;\n  value?: string;\n  onChange?: (value: string) => void;\n  disabled?: boolean;\n  multiline?: boolean;\n  prefix?: string;\n  suffix?: string;\n  placeholder?: string;\n  throttle?: boolean;\n  throttleTimeout?: number;\n  color?: string;\n  backgroundColor?: string;\n  borderColor?: string;\n  floatedTextColor?: string;\n  doesChangeEveryTime?: boolean;\n};\n\nconst TextBox: React.FC<Props> = ({\n  className,\n  value,\n  multiline,\n  disabled,\n  onChange,\n  prefix,\n  suffix,\n  placeholder,\n  throttle,\n  throttleTimeout: throttleTimeout = 3000,\n  color,\n  backgroundColor,\n  borderColor,\n  floatedTextColor,\n  doesChangeEveryTime = false,\n}) => {\n  const isDirty = useRef(false);\n  const [innerValue, setInnerValue] = useState(value);\n  const [rows, setRows] = useState(5);\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      const newValue = e.currentTarget.value;\n      isDirty.current = value !== newValue;\n      setInnerValue(newValue);\n      doesChangeEveryTime && onChange?.(newValue);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [value],\n  );\n\n  const handleChangeTextArea = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      handleChange(e);\n      if (textAreaRef.current) {\n        const lines = e.target.value.split(\"\\n\").length;\n        setRows(lines > 20 ? 20 : lines < 5 ? 5 : lines);\n      }\n    },\n    [handleChange],\n  );\n\n  const handleKeyPress = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (onChange && e.key === \"Enter\" && isDirty.current) {\n        onChange(e.currentTarget.value);\n      }\n    },\n    [onChange],\n  );\n\n  const handleBlur = useCallback(\n    (e: React.SyntheticEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      if (onChange && isDirty.current) {\n        onChange(e.currentTarget.value);\n      }\n    },\n    [onChange],\n  );\n\n  useEffect(() => {\n    isDirty.current = false;\n    setInnerValue(value);\n  }, [value]);\n\n  useEffect(() => {\n    if (throttle && onChange && isDirty.current) {\n      const timeout = setTimeout(() => {\n        onChange(innerValue ?? \"\");\n      }, throttleTimeout);\n      return () => clearTimeout(timeout);\n    }\n    return undefined;\n  }, [innerValue, onChange, throttle, throttleTimeout]);\n\n  return (\n    <FormWrapper className={className} align=\"center\">\n      {prefix && (\n        <FloatedText floatedTextColor={floatedTextColor} color={color}>\n          {prefix}\n        </FloatedText>\n      )}\n      {multiline ? (\n        <StyledTextarea\n          ref={textAreaRef}\n          value={innerValue ?? \"\"}\n          onChange={handleChangeTextArea}\n          onBlur={handleBlur}\n          color={color}\n          backgroundColor={backgroundColor}\n          disabled={disabled}\n          placeholder={placeholder}\n          rows={rows}\n        />\n      ) : (\n        <StyledInput\n          value={innerValue ?? \"\"}\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          onBlur={handleBlur}\n          color={color}\n          backgroundColor={backgroundColor}\n          disabled={disabled}\n          placeholder={placeholder}\n          borderColor={borderColor}\n        />\n      )}\n      {suffix && (\n        <FloatedText floatedTextColor={floatedTextColor} color={color}>\n          {suffix}\n        </FloatedText>\n      )}\n    </FormWrapper>\n  );\n};\n\ntype InputProps = Pick<Props, \"color\" | \"backgroundColor\" | \"borderColor\" | \"floatedTextColor\">;\n\nconst FormWrapper = styled(Flex)<InputProps>`\n  box-sizing: border-box;\n`;\n\nconst StyledInput = styled.input<InputProps>`\n  outline: none;\n  border: solid 1px;\n  border-color: ${({ borderColor, theme }) => borderColor || theme.properties.border};\n  background-color: ${({ backgroundColor, theme }) => backgroundColor || theme.properties.bg};\n  color: ${({ color, theme }) => color || theme.properties.contentsText};\n  height: ${metrics.propertyTextInputHeight}px;\n  padding-left: ${metricsSizes.xs}px;\n  padding-right: ${metricsSizes.xs}px;\n  width: 100%;\n\n  &:focus {\n    border-color: ${({ theme }) => theme.properties.focusBorder};\n  }\n`;\n\nconst StyledTextarea = styled.textarea<InputProps>`\n  display: block;\n  outline: none;\n  border: solid 1px;\n  border-color: ${({ borderColor, theme }) => borderColor || theme.properties.border};\n  background-color: ${({ backgroundColor, theme }) => backgroundColor || theme.properties.bg};\n  color: ${({ color, theme }) => color || theme.properties.contentsText};\n  width: 100%;\n  padding: ${metricsSizes.xs}px;\n  margin-top: ${metricsSizes.s}px;\n  height: ${metrics.propertyTextareaHeight}px;\n  min-height: ${metrics.propertyTextInputHeight}px;\n\n  &:focus {\n    border-color: ${({ theme }) => theme.properties.focusBorder};\n  }\n`;\n\nconst FloatedText = styled.span<InputProps>`\n  color: ${({ color, floatedTextColor, theme }) =>\n    floatedTextColor ||\n    theme.properties.contentsFloatText ||\n    color ||\n    theme.properties.contentsText};\n  font-size: ${fonts.sizes.s}px;\n  user-select: none;\n`;\n\nexport default TextBox;\n","import React from \"react\";\n\nimport { styled, useTheme } from \"@reearth/theme\";\nimport Text from \"@reearth/components/atoms/Text\";\n\ninterface ToggleButtonProps {\n  checked?: boolean;\n  disabled?: boolean;\n  onChange?: (checked: boolean) => void;\n  label?: string;\n}\n\nconst ToggleButton: React.FC<ToggleButtonProps> = ({ checked, disabled, onChange, label }) => {\n  const handleClick = !disabled && onChange ? () => onChange(!checked) : undefined;\n  const theme = useTheme();\n  return (\n    <>\n      <Switch checked={checked} disabled={disabled} onClick={handleClick}>\n        <TopSlider checked={checked} disabled={disabled} onClick={handleClick} />\n      </Switch>\n      {label && (\n        <Label size=\"2xs\" color={theme.main.text}>\n          {label}\n        </Label>\n      )}\n    </>\n  );\n};\n\nexport default ToggleButton;\n\nconst Switch = styled.label<{ checked?: boolean; disabled?: boolean }>`\n  display: inline-block;\n  width: 36px;\n  height: 18px;\n  border-radius: 11px;\n  border: 1px solid\n    ${props =>\n      props.checked ? props.theme.toggleButton.activeBgBorder : props.theme.toggleButton.bgBorder};\n  background-color: ${props =>\n    props.checked ? props.theme.toggleButton.activeBg : props.theme.toggleButton.bg};\n  opacity: ${props => (props.checked ? 1 : 0.35)};\n  transition: 0.4s;\n  vertical-align: middle;\n`;\n\nconst TopSlider = styled.div<{ checked?: boolean; disabled?: boolean }>`\n  cursor: pointer;\n  height: 18px;\n  width: 18px;\n  background-color: ${props =>\n    props.checked ? props.theme.toggleButton.activeToggle : props.theme.toggleButton.toggle};\n  transition: 0.4s;\n  border-radius: 50%;\n  transform: ${props => props.checked && \"translateX(100%)\"};\n  vertical-align: middle;\n`;\n\nconst Label = styled(Text)`\n  margin-left: 10px;\n  vertical-align: middle;\n  display: inline;\n`;\n","import React, { useCallback, useState, ReactElement, useRef, useEffect } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\n\nimport type { Item as ItemType, InnerProps, DropType } from \"./types\";\nimport Items from \"./Items\";\nimport { arrayEquals, calcPosition, getDestIndex, getDropType, isAncestor } from \"./util\";\n\nexport type Props<T = unknown, R extends Element = Element> = InnerProps<T, R> & {\n  item: ItemType<T>;\n  parentItem: ItemType<T>;\n  selected: boolean;\n  expanded: boolean;\n};\n\ntype DnDItem<T> = { type: string; item: ItemType<T>; index: number[]; parentItem: ItemType<T> };\n\nexport default function Item<T = unknown, R extends Element = Element>({\n  item,\n  shown,\n  selected,\n  expanded,\n  selectedIds,\n  expandedIds,\n  index,\n  parentItem,\n  renderItem: ItemComponent,\n  onSelect,\n  onExpand,\n  ...props\n}: Props<T, R>): ReactElement | null {\n  const selectable = !!props.selectable && !!item.selectable;\n  const expandable = !!props.expandable && !!item.expandable;\n  const draggable = !!props.dragItemType && !!props.draggable && !!item.draggable && !!shown;\n  const droppable = !!props.dragItemType && !!props.droppable && !!item.droppable && !!shown;\n  const canDropAtChildren = droppable && !!item.droppableIntoChildren;\n  const nextItemDroppable = !!parentItem.children?.[index[index.length - 1] + 1]?.droppable;\n\n  const handleExpand = useCallback(() => {\n    if (!expandable) return;\n    onExpand?.(item, index, !expanded);\n  }, [expandable, expanded, index, item, onExpand]);\n\n  const handleSelect = useCallback(() => {\n    if (!selectable) return;\n    onSelect?.(item, index);\n  }, [selectable, item, onSelect, index]);\n\n  const wrapperRef = useRef<R>(null);\n\n  const [{ isDragging }, dragRef] = useDrag<DnDItem<T>, unknown, { isDragging: boolean }>({\n    item: { type: props.dragItemType ?? \"\", item, index, parentItem },\n    canDrag: draggable,\n    collect: monitor => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  const [dropType, setDropType] = useState<DropType>();\n  const [canDrop, setCanDrop] = useState(false);\n\n  const [{ isDropping }, dropRef] = useDrop<any, unknown, { isDropping: boolean }>({\n    accept: [\n      ...(props.dragItemType ? [props.dragItemType] : []),\n      ...(props.acceptedDragItemTypes ?? []),\n    ],\n    canDrop: (i, monitor) => {\n      if (\n        (!nextItemDroppable && !droppable) ||\n        !index.length ||\n        (!item.droppableExternals && i.type !== props.dragItemType) ||\n        !monitor.isOver({ shallow: true })\n      ) {\n        return false;\n      }\n\n      if (\n        i.type === props.dragItemType &&\n        \"index\" in i &&\n        (!i.index.length || arrayEquals(index, i.index) || isAncestor(index, i.index))\n      ) {\n        return false;\n      }\n\n      const pos = calcPosition(monitor, wrapperRef.current);\n      if (!pos) {\n        return false;\n      }\n\n      const type = getDropType(pos, canDropAtChildren, expanded && !!item.children?.length);\n      if (\n        ((type === \"topOfChildren\" || type === \"bottomOfChildren\") && !item.droppable) ||\n        (!droppable && nextItemDroppable && type !== \"bottom\")\n      ) {\n        return false;\n      }\n\n      if (item.droppableExternals && i.type !== props.dragItemType) {\n        return true;\n      }\n\n      if (!(\"index\" in i)) {\n        return false;\n      }\n\n      const destIndex = getDestIndex(i.index, index, type, item.children?.length);\n      return !arrayEquals(i.index, destIndex);\n    },\n    hover: (_i, monitor) => {\n      const pos = calcPosition(monitor, wrapperRef.current);\n      const type = pos\n        ? getDropType(pos, canDropAtChildren, expanded && !!item.children?.length)\n        : undefined;\n      setDropType(type);\n      setCanDrop(monitor.canDrop());\n    },\n    collect: monitor => ({\n      isDropping: monitor.isOver({ shallow: true }),\n    }),\n    drop: (i, monitor) => {\n      const pos = calcPosition(monitor, wrapperRef.current);\n      if (!pos) return;\n\n      function isDnDItem(d: any): d is DnDItem<T> {\n        return d.type === props.dragItemType;\n      }\n\n      const type = getDropType(pos, canDropAtChildren, expanded && !!item.children?.length);\n      const destIndex = getDestIndex(\n        isDnDItem(i) ? i.index : undefined,\n        index,\n        type,\n        item.children?.length,\n      );\n      const destItem = type === \"top\" || type === \"bottom\" ? parentItem : item;\n\n      if (isDnDItem(i)) {\n        if (arrayEquals(i.index, destIndex)) return;\n        props.onDrop?.(i.item, destItem, i.index, destIndex, i.parentItem);\n        return;\n      }\n\n      return props.onDropExternals?.(i, destItem, destIndex);\n    },\n  });\n\n  useEffect(() => {\n    if (!isDropping) {\n      setCanDrop(false);\n      setDropType(undefined);\n    }\n  }, [isDropping]);\n\n  dropRef(dragRef(wrapperRef));\n\n  const children = item.children ? (\n    <Items<T, R>\n      {...props}\n      shown={expanded}\n      renderItem={ItemComponent}\n      selectedIds={selectedIds}\n      expandedIds={expandedIds}\n      index={index}\n      depth={props.depth + 1}\n      item={item}\n      onSelect={onSelect}\n      onExpand={onExpand}\n    />\n  ) : null;\n\n  const childSelected = !!item.children?.find(c => selectedIds?.has(c?.id));\n\n  return (\n    <ItemComponent\n      {...props}\n      ref={wrapperRef}\n      item={item}\n      index={index}\n      onSelect={handleSelect}\n      onExpand={handleExpand}\n      selected={selected}\n      expanded={expanded}\n      multiple={!!props.multiple}\n      isDragging={isDragging}\n      isDropping={isDropping}\n      dropType={dropType}\n      canDrop={canDrop}\n      depth={props.depth}\n      selectable={selectable}\n      expandable={expandable}\n      draggable={draggable}\n      droppable={droppable}\n      shown={!!shown}\n      siblings={parentItem.children}\n      childSelected={childSelected}>\n      {children}\n    </ItemComponent>\n  );\n}\n","import React, { ReactElement } from \"react\";\n\nimport type { Item as ItemType, InnerProps } from \"./types\";\nimport Item from \"./Item\";\n\nexport type Props<T = unknown, R extends Element = Element> = InnerProps<T, R> & {\n  item?: ItemType<T>;\n};\n\nexport default function Items<T = unknown, R extends Element = Element>({\n  item: parentItem,\n  selectedIds,\n  expandedIds,\n  index,\n  ...props\n}: Props<T, R>): ReactElement | null {\n  return (\n    <>\n      {parentItem?.children?.map((item, i) => {\n        return (\n          <Item<T, R>\n            {...props}\n            key={item.id}\n            item={item}\n            index={[...index, i]}\n            selectedIds={selectedIds}\n            expandedIds={expandedIds}\n            selected={!!selectedIds?.has(item.id)}\n            expanded={!!expandedIds?.has(item.id)}\n            parentItem={parentItem}\n          />\n        );\n      })}\n    </>\n  );\n}\n","import React, { PropsWithChildren, ReactElement } from \"react\";\n\nimport type { Item, InnerProps } from \"./types\";\nimport Scroll from \"../Scroll\";\nimport Items from \"./Items\";\nimport useHooks from \"./hooks\";\n\nexport type { Item, ItemProps, DropType } from \"./types\";\n\nexport { searchItems } from \"./util\";\n\nexport type Props<T = unknown, R extends Element = Element> = Omit<\n  InnerProps<T, R>,\n  \"index\" | \"selectedIndex\" | \"depth\" | \"onSelect\" | \"parentItemId\"\n> & {\n  className?: string;\n  item: Item<T>;\n  selected?: string[];\n  expanded?: string[];\n  onSelect?: (selected: Item<T>[], index: number[][]) => void;\n  onExpand?: (expanded: Item<T>[], index: number[][]) => void;\n};\n\nexport default function TreeView<T = unknown, R extends Element = Element>({\n  className,\n  item,\n  selected,\n  expanded,\n  onSelect,\n  onExpand,\n  ...props\n}: PropsWithChildren<Props<T, R>>): ReactElement | null {\n  const { selectedIds, expandedIds, select, expand } = useHooks({\n    item,\n    selected,\n    expanded,\n    multiple: props.multiple,\n    onSelect,\n    onExpand,\n  });\n\n  return (\n    <Scroll className={className}>\n      <Items<T, R>\n        {...props}\n        item={item}\n        index={[]}\n        onSelect={select}\n        onExpand={expand}\n        selectedIds={selectedIds}\n        expandedIds={expandedIds}\n        depth={0}\n        shown\n      />\n    </Scroll>\n  );\n}\n","import { useCallback, useRef } from \"react\";\nimport { useShallowCompareEffect, useSet } from \"react-use\";\n\nimport { Item } from \"./types\";\nimport { searchItems } from \"./util\";\n\nexport default function <T = unknown>({\n  item,\n  selected,\n  expanded,\n  multiple,\n  onSelect,\n  onExpand,\n}: {\n  item?: Item<T>;\n  selected?: string[];\n  expanded?: string[];\n  multiple?: boolean;\n  onSelect?: (selected: Item<T>[], index: number[][]) => void;\n  onExpand?: (expanded: Item<T>[], index: number[][]) => void;\n}) {\n  const selectedItems = useRef<Map<string, [Item<T>, number[]]>>(new Map());\n  const expandedItems = useRef<Map<string, [Item<T>, number[]]>>(new Map());\n  const [selectedIds, selectedIdsActions] = useSet<string>();\n  const [expandedIds, expandedIdsActions] = useSet<string>();\n\n  const select = useCallback(\n    (item: Item<T>, index: number[]) => {\n      if (!multiple) {\n        selectedItems.current.clear();\n        selectedItems.current.set(item.id, [item, index]);\n        selectedIdsActions.reset();\n        selectedIdsActions.add(item.id);\n      } else if (selectedItems.current.has(item.id)) {\n        selectedItems.current.delete(item.id);\n        selectedIdsActions.remove(item.id);\n      } else {\n        selectedItems.current.set(item.id, [item, index]);\n        selectedIdsActions.add(item.id);\n      }\n\n      const values = Array.from(selectedItems.current.values());\n      onSelect?.(\n        values.map(v => v[0]),\n        values.map(v => v[1]),\n      );\n    },\n    [multiple, onSelect, selectedIdsActions],\n  );\n\n  const expand = useCallback(\n    (item: Item<T>, index: number[], expanded: boolean) => {\n      if (!expanded && expandedItems.current.has(item.id)) {\n        expandedItems.current.delete(item.id);\n        expandedIdsActions.remove(item.id);\n      } else if (expanded) {\n        expandedItems.current.set(item.id, [item, index]);\n        expandedIdsActions.add(item.id);\n      }\n\n      const values = Array.from(expandedItems.current.values());\n      onExpand?.(\n        values.map(v => v[0]),\n        values.map(v => v[1]),\n      );\n    },\n    [expandedIdsActions, onExpand],\n  );\n\n  useShallowCompareEffect(() => {\n    if (!Array.isArray(selected)) return;\n\n    selectedItems.current.clear();\n    selectedIdsActions.reset();\n\n    if (item?.children?.length) {\n      const items = searchItems(item.children, selected).filter(\n        (i): i is [Item<T>, number[]] => !!i,\n      );\n      items.forEach(i => {\n        if (!i || typeof i[0] === \"undefined\") return;\n        selectedItems.current.set(i[0].id, [i[0], i[1]]);\n        selectedIdsActions.add(i[0].id);\n      });\n    }\n  }, [item, selected]);\n\n  useShallowCompareEffect(() => {\n    if (!Array.isArray(expanded)) return;\n\n    if (item?.children?.length) {\n      const items = searchItems(item.children, expanded).filter(\n        (i): i is [Item<T>, number[]] => !!i,\n      );\n      items.forEach(i => {\n        if (!i || typeof i[0] === \"undefined\") return;\n        expandedItems.current.set(i[0].id, [i[0], i[1]]);\n        expandedIdsActions.add(i[0].id);\n      });\n    }\n  }, [item, expanded]);\n\n  return {\n    select,\n    expand,\n    selectedIds,\n    expandedIds,\n  };\n}\n","import deepFind from \"@reearth/util/deepFind\";\nimport { DropTargetMonitor } from \"react-dnd\";\n\nimport type { DropType, Item } from \"./types\";\n\nexport type DropPosition = {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n  xr: number;\n  yr: number;\n};\n\nexport function searchItems<T = unknown>(items: Item<T>[], ids: string[]) {\n  return ids.map(i =>\n    deepFind(\n      items,\n      item => item.id === i,\n      item => item.children,\n    ),\n  );\n}\n\nexport function calcPosition(\n  monitor: DropTargetMonitor,\n  element: Element | null,\n): DropPosition | undefined {\n  if (!element) return undefined;\n\n  const offset = monitor.getClientOffset();\n  if (!offset) return undefined;\n\n  const wrapperOffset = element.getBoundingClientRect();\n  const x = offset.x - wrapperOffset.left;\n  const y = offset.y - wrapperOffset.top;\n\n  return {\n    x,\n    y,\n    w: wrapperOffset.width,\n    h: wrapperOffset.height,\n    xr: x / wrapperOffset.width,\n    yr: y / wrapperOffset.height,\n  };\n}\n\nexport function getDropType(\n  pos: DropPosition,\n  canDropAtChildren: boolean,\n  expandedAndHasChildren: boolean,\n): DropType {\n  const bottom = pos.yr >= 0.5;\n  return canDropAtChildren\n    ? bottom\n      ? expandedAndHasChildren\n        ? \"topOfChildren\"\n        : \"bottom\"\n      : \"bottomOfChildren\"\n    : bottom\n    ? \"bottom\"\n    : \"top\";\n}\n\nexport function arrayEquals<T>(a: T[], b: T[]) {\n  return a.length === b.length && a.every((e, i) => e === b[i]);\n}\n\nexport function isSameParent(index: number[], index2: number[]) {\n  return arrayEquals(index.slice(0, -1), index2.slice(0, -1));\n}\n\nexport function isAncestor(index: number[], ancestor: number[]) {\n  if (ancestor.length > index.length) return false;\n  return ancestor.every((v, i) => index[i] === v);\n}\n\nexport function getDestIndex(\n  sourceIndex: number[] | undefined,\n  index: number[],\n  type: DropType,\n  childrenCount = 0,\n) {\n  if (sourceIndex && arrayEquals(sourceIndex, index)) return [...index];\n  if (type === \"topOfChildren\") return [...index, 0];\n\n  if (type === \"bottomOfChildren\") {\n    return sourceIndex && arrayEquals(sourceIndex.slice(0, -1), index)\n      ? [...index, childrenCount - 1]\n      : [...index, childrenCount];\n  }\n\n  const sourceIndex2 = sourceIndex?.[sourceIndex.length - 1];\n  const index2 = index[index.length - 1];\n\n  if (sourceIndex && !isSameParent(sourceIndex, index)) {\n    return type === \"bottom\" ? [...index.slice(0, -1), index2 + 1] : [...index];\n  }\n\n  // a x b -> xa b : 0 top -> 0\n  // a x b -> ax b : 0 bottom -> 1 (+1)\n  // -----\n  // a x b -> a xb : 2 top -> 1 (-1)\n  // a x b -> a bx : 2 bottom -> 2\n\n  const bellow = typeof sourceIndex2 === \"number\" && sourceIndex2 < index2;\n  return [\n    ...index.slice(0, -1),\n    index2 + (type === \"bottom\" && !bellow ? 1 : type === \"top\" && bellow ? -1 : 0),\n  ];\n}\n","import React from \"react\";\nimport { check } from \"prettier\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport Flex from \"@reearth/components/atoms/Flex\";\nimport { styled } from \"@reearth/theme\";\n\ntype CardSize = \"small\" | \"medium\" | \"large\";\n\nexport type Props = {\n  className?: string;\n  name: string;\n  url?: string;\n  icon?: string;\n  iconSize?: string;\n  cardSize?: CardSize;\n  checked?: boolean;\n  selected?: boolean;\n  onCheck?: (checked: boolean) => void;\n};\n\nconst AssetCard: React.FC<Props> = ({\n  className,\n  name,\n  url,\n  icon,\n  iconSize,\n  cardSize,\n  checked,\n  selected,\n  onCheck,\n}) => {\n  return (\n    <Wrapper\n      className={className}\n      direction=\"column\"\n      selected={selected}\n      cardSize={cardSize}\n      onClick={() => onCheck?.(!check)}>\n      <ImgWrapper cardSize={cardSize}>\n        {url && /\\.(jpg|jpeg|png|gif|svg|webp|GIF|JPG|JPEG|PNG|SVG|WEBP)$/.test(url) ? (\n          <PreviewImage url={url} />\n        ) : (\n          <Icon icon={icon} size={iconSize} />\n        )}\n      </ImgWrapper>\n      <FileName size={cardSize === \"large\" ? \"m\" : \"xs\"} cardSize={cardSize} customColor>\n        {name}\n      </FileName>\n      {checked && (\n        <StyledIcon\n          icon=\"checkCircle\"\n          alt=\"checked\"\n          size={cardSize === \"small\" ? \"18px\" : \"24px\"}\n        />\n      )}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled(Flex)<{ selected?: boolean; cardSize?: CardSize }>`\n  background: ${({ selected, theme }) => (selected ? theme.assetCard.bgHover : theme.assetCard.bg)};\n  box-shadow: 0 6px 6px -6px ${props => props.theme.other.black};\n  border: 2px solid\n    ${props => (props.selected ? `${props.theme.assetCard.highlight}` : \"transparent\")};\n  padding: ${({ cardSize }) =>\n    cardSize === \"small\" ? \"8px\" : cardSize === \"medium\" ? \"12px\" : \"20px\"};\n  width: ${({ cardSize }) =>\n    cardSize === \"small\" ? \"104px\" : cardSize === \"medium\" ? \"192px\" : \"274px\"};\n  height: ${({ cardSize }) =>\n    cardSize === \"small\" ? \"104px\" : cardSize === \"medium\" ? \"186px\" : \"257px\"};\n  position: relative;\n  cursor: pointer;\n  color: ${({ theme }) => theme.assetCard.text};\n  box-sizing: border-box;\n\n  &:hover {\n    background: ${({ theme }) => theme.assetCard.bgHover};\n    color: ${({ theme }) => theme.assetCard.textHover};\n    box-shadow: 0 8px 7px -6px ${props => props.theme.other.black};\n  }\n`;\n\nconst ImgWrapper = styled.div<{ cardSize?: CardSize; url?: string }>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: ${({ cardSize }) =>\n    cardSize === \"small\" ? \"77px\" : cardSize === \"medium\" ? \"126px\" : \"175px\"};\n`;\n\nconst PreviewImage = styled.div<{ url?: string }>`\n  width: 100%;\n  height: 100%;\n  background-image: ${props => `url(${props.url})`};\n  background-size: cover;\n  background-position: center;\n`;\n\nconst FileName = styled(Text)<{ cardSize?: CardSize }>`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  margin-top: ${({ cardSize }) => (cardSize === \"large\" ? \"16px\" : \"12px\")};\n  color: inherit;\n`;\n\nconst StyledIcon = styled(Icon)`\n  position: absolute;\n  bottom: 7px;\n  right: 7px;\n  color: ${({ theme }) => theme.assetCard.highlight};\n`;\n\nexport default AssetCard;\n","import React from \"react\";\nimport { check } from \"prettier\";\n\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Flex from \"@reearth/components/atoms/Flex\";\nimport Text from \"@reearth/components/atoms/Text\";\n\nimport { styled, useTheme } from \"@reearth/theme\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\n\nexport type Asset = {\n  id: string;\n  teamId?: string;\n  name: string;\n  size?: number;\n  url?: string;\n  contentType?: string;\n};\n\nexport type Props = {\n  asset: Asset;\n  selected?: boolean;\n  checked?: boolean;\n  onCheck?: (checked: boolean) => void;\n};\n\nconst AssetListItem: React.FC<Props> = ({ asset, selected, checked, onCheck }) => {\n  const theme = useTheme();\n  return (\n    <ListItem key={asset.id} align=\"center\" selected={selected} onClick={() => onCheck?.(!check)}>\n      <Icon\n        icon={\n          checked\n            ? \"checkCircle\"\n            : asset.url &&\n              /\\.(jpg|jpeg|png|gif|svg|webp|GIF|JPG|JPEG|PNG|SVG|WEBP)$/.test(asset.url)\n            ? \"image\"\n            : \"file\"\n        }\n        size={16}\n        color={checked ? theme.assetCard.highlight : theme.assetCard.text}\n      />\n      <ListItemName size=\"m\" customColor>\n        {asset.name}\n      </ListItemName>\n      {asset.size && (\n        <ListItemSize size=\"m\" customColor>\n          {parseFloat((asset.size / 1000).toFixed(2))} KB\n        </ListItemSize>\n      )}\n    </ListItem>\n  );\n};\n\nexport default AssetListItem;\n\nconst ListItem = styled(Flex)<{ selected?: boolean }>`\n  background: ${({ selected, theme }) => (selected ? theme.assetCard.bgHover : theme.assetCard.bg)};\n  box-shadow: 0 6px 6px -8px ${props => props.theme.other.black};\n  border: 1px solid\n    ${({ selected, theme }) => (selected ? `${theme.assetCard.highlight}` : \"transparent\")};\n  padding: ${metricsSizes[\"m\"]}px ${metricsSizes[\"xl\"]}px;\n  cursor: pointer;\n  color: ${({ theme }) => theme.main.text};\n  height: 46px;\n  box-sizing: border-box;\n\n  &:hover {\n    background: ${({ theme }) => theme.assetCard.bgHover};\n    color: ${({ theme }) => theme.main.strongText};\n  }\n`;\n\nconst ListItemName = styled(Text)`\n  margin-left: ${metricsSizes[\"l\"]}px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  max-width: 60%;\n`;\n\nconst ListItemSize = styled(Text)`\n  margin-left: auto;\n`;\n","import React, { useState, useCallback } from \"react\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Flex from \"@reearth/components/atoms/Flex\";\nimport { styled, useTheme } from \"@reearth/theme\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\n\nexport type Item<Value extends string | number = string> = {\n  key: Value;\n  label: string;\n  icon?: string;\n};\n\nexport type Props<Value extends string | number = string> = {\n  value: Value;\n  items: Item<Value>[];\n  onChange?: (selected: Value) => void;\n};\n\nconst AssetSelect = <Value extends string | number = string>({\n  value,\n  items,\n  onChange,\n}: Props<Value>) => {\n  const theme = useTheme();\n  const [hidden, setHidden] = useState(true);\n\n  const handleChange = useCallback(\n    key => {\n      onChange?.(key);\n      setHidden(false);\n    },\n    [onChange],\n  );\n\n  return (\n    <Wrapper>\n      <Selected align=\"center\" justify=\"space-between\" onClick={() => setHidden(!hidden)}>\n        <StyledText size=\"xs\" color={theme.main.text}>\n          {items.find(i => i.key === value)?.label}\n        </StyledText>\n        <Icon icon=\"arrowDown\" color={theme.main.text} size={9} />\n      </Selected>\n      <Options onClick={() => setHidden(!hidden)} hidden={hidden}>\n        {items?.map(({ key, label }) => (\n          <Item key={key} align=\"center\" justify=\"space-between\" onClick={() => handleChange(key)}>\n            <ItemText size=\"xs\">{label}</ItemText>\n            {key === value && <Icon icon=\"check\" size={14} />}\n          </Item>\n        ))}\n      </Options>\n    </Wrapper>\n  );\n};\n\nexport default AssetSelect;\n\nconst Wrapper = styled.div`\n  position: relative;\n  user-select: none;\n  width: 100%;\n`;\n\nconst Selected = styled(Flex)`\n  padding: 6px ${metricsSizes[\"s\"]}px;\n  border: 1px solid ${({ theme }) => theme.properties.border};\n  cursor: pointer;\n  user-select: none;\n`;\n\nconst StyledText = styled(Text)`\n  margin-right: ${metricsSizes[\"xs\"]}px;\n`;\n\nconst Options = styled.div<{ hidden?: boolean }>`\n  display: ${({ hidden }) => (hidden ? \"none\" : \"block\")};\n  width: 100%;\n  margin: ${metricsSizes[\"2xs\"]}px 0 0 0;\n  box-sizing: border-box;\n  z-index: ${({ theme }) => theme.zIndexes[\"propertyFieldPopup\"]};\n  background: ${({ theme }) => theme.main.bg};\n  border: 1px solid ${({ theme }) => theme.properties.border};\n  position: absolute;\n  cursor: pointer;\n`;\n\nconst Item = styled(Flex)`\n  padding: ${metricsSizes[\"xs\"]}px ${metricsSizes[\"s\"]}px;\n  color: ${({ theme }) => theme.main.text};\n\n  &:hover {\n    background: ${({ theme }) => theme.main.lighterBg};\n  }\n`;\n\nconst ItemText = styled(Text)`\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  overflow-wrap: break-word;\n`;\n","import React, { PropsWithChildren } from \"react\";\nimport Modal from \"@reearth/components/atoms/Modal\";\n\nimport { styled } from \"@reearth/theme\";\n\nexport type Props<Tab extends string = string> = {\n  title?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n  button1?: React.ReactNode;\n  button2?: React.ReactNode;\n  tabs: Tab[];\n  tabLabels?: { [t in Tab]: string };\n  currentTab: Tab;\n  setCurrentTab: (tab: Tab) => void;\n  isVisible?: boolean;\n  onClose?: () => void;\n};\n\nexport default function TabularModal<Tab extends string = string>({\n  title,\n  size,\n  button1,\n  button2,\n  tabs,\n  tabLabels,\n  currentTab,\n  setCurrentTab,\n  isVisible,\n  children,\n  onClose,\n}: PropsWithChildren<Props<Tab>>) {\n  return (\n    <Modal\n      title={title}\n      size={size}\n      isVisible={isVisible}\n      onClose={onClose}\n      button1={button1}\n      button2={button2}>\n      <Tabs>\n        {tabs.map(t => (\n          <Tab selected={currentTab == t} onClick={() => setCurrentTab(t)} key={t}>\n            {tabLabels?.[t] || t}\n          </Tab>\n        ))}\n      </Tabs>\n      <Content>{children}</Content>\n    </Modal>\n  );\n}\n\nconst Tabs = styled.div`\n  display: flex;\n  color: ${({ theme }) => theme.main.strongText};\n`;\n\nconst Tab = styled.p<{ selected?: boolean }>`\n  background: ${props => (props.selected ? props.theme.modal.innerBg : props.theme.modal.bodyBg)};\n  padding: 16px 24px;\n  cursor: pointer;\n`;\n\nconst Content = styled.div`\n  background: ${props => props.theme.modal.innerBg};\n  padding: 12px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 552px;\n`;\n","import React from \"react\";\nimport { useIntl } from \"react-intl\";\n\nimport Text from \"@reearth/components/atoms/Text\";\nimport Modal from \"@reearth/components/atoms/Modal\";\nimport Divider from \"@reearth/components/atoms/Divider\";\nimport Button from \"@reearth/components/atoms/Button\";\n\nimport { styled } from \"@reearth/theme\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Props {\n  isVisible: boolean;\n  onClose?: () => void;\n  handleRemove?: () => void;\n}\n\nconst AssetDeleteModal: React.FC<Props> = ({ isVisible, onClose, handleRemove }) => {\n  const intl = useIntl();\n  return (\n    <Modal\n      title=\"Delete assets\"\n      isVisible={isVisible}\n      size=\"sm\"\n      onClose={onClose}\n      button1={\n        <Button\n          text={intl.formatMessage({ defaultMessage: \"Delete\" })}\n          buttonType=\"danger\"\n          onClick={handleRemove}\n        />\n      }\n      button2={\n        <Button\n          text={intl.formatMessage({ defaultMessage: \"Cancel\" })}\n          buttonType=\"secondary\"\n          onClick={onClose}\n        />\n      }>\n      <Divider margin=\"0\" />\n      <Message size=\"m\">\n        {intl.formatMessage({\n          defaultMessage: \"You are about to delete one or more assets from the current workspace.\",\n        })}\n      </Message>\n      <Message size=\"m\">\n        {intl.formatMessage({\n          defaultMessage: \"Please make sure no selected assets are in use. This cannot be undone.\",\n        })}\n      </Message>\n    </Modal>\n  );\n};\n\nconst Message = styled(Text)`\n  margin-top: ${`${metricsSizes[\"2xl\"]}px`};\n`;\nexport default AssetDeleteModal;\n","import React from \"react\";\nimport { useIntl } from \"react-intl\";\n\nimport Button from \"@reearth/components/atoms/Button\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Flex from \"@reearth/components/atoms/Flex\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport Divider from \"@reearth/components/atoms/Divider\";\nimport SearchBar from \"@reearth/components/atoms/SearchBar\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\nimport { styled } from \"@reearth/theme\";\n\nimport AssetCard from \"../AssetCard\";\nimport AssetListItem from \"../AssetListItem\";\nimport AssetSelect from \"../AssetSelect\";\nimport AssetDeleteModal from \"@reearth/components/molecules/Common/AssetModal/AssetDeleteModal\";\n\nimport useHooks, { Asset as AssetType, LayoutTypes, FilterTypes } from \"./hooks\";\n\nexport type Asset = AssetType;\n\nexport type Props = {\n  className?: string;\n  assets?: Asset[];\n  isMultipleSelectable?: boolean;\n  accept?: string;\n  onCreateAsset?: (files: FileList) => void;\n  onRemove?: (assetIds: string[]) => void;\n  initialAsset?: Asset;\n  selectedAssets?: Asset[];\n  selectAsset?: (assets: Asset[]) => void;\n  fileType?: \"image\" | \"video\" | \"file\";\n  isHeightFixed?: boolean;\n};\n\nconst AssetContainer: React.FC<Props> = ({\n  assets,\n  isMultipleSelectable = false,\n  accept,\n  onCreateAsset,\n  onRemove,\n  initialAsset,\n  selectedAssets,\n  selectAsset,\n  fileType,\n  isHeightFixed,\n}) => {\n  const intl = useIntl();\n  const {\n    layoutType,\n    setLayoutType,\n    filteredAssets,\n    handleFilterChange,\n    filterSelected,\n    currentSaved,\n    searchResults,\n    iconChoice,\n    handleAssetsSelect,\n    handleUploadToAsset,\n    handleReverse,\n    handleSearch,\n    deleteModalVisible,\n    setDeleteModalVisible,\n    handleRemove,\n  } = useHooks({\n    assets,\n    isMultipleSelectable,\n    accept,\n    onCreateAsset,\n    initialAsset,\n    selectAsset,\n    selectedAssets,\n    onRemove,\n  });\n\n  const filterOptions: { key: FilterTypes; label: string }[] = [\n    { key: \"time\", label: intl.formatMessage({ defaultMessage: \"Time\" }) },\n    { key: \"size\", label: intl.formatMessage({ defaultMessage: \"File size\" }) },\n    { key: \"name\", label: intl.formatMessage({ defaultMessage: \"Alphabetical\" }) },\n  ];\n\n  return (\n    <Wrapper>\n      <Flex justify={onRemove ? \"flex-end\" : \"center\"}>\n        <Button\n          large\n          text={\n            fileType === \"image\"\n              ? intl.formatMessage({ defaultMessage: \"Upload image\" })\n              : intl.formatMessage({ defaultMessage: \"Upload file\" })\n          }\n          icon=\"upload\"\n          type=\"button\"\n          buttonType={onRemove ? \"secondary\" : \"primary\"}\n          onClick={handleUploadToAsset}\n        />\n        {onRemove && (\n          <Button\n            large\n            text={intl.formatMessage({ defaultMessage: \"Delete\" })}\n            icon=\"bin\"\n            type=\"button\"\n            buttonType=\"secondary\"\n            disabled={selectedAssets?.length ? false : true}\n            onClick={() => setDeleteModalVisible(true)}\n          />\n        )}\n      </Flex>\n      <Divider margin=\"0\" />\n      <NavBar align=\"center\" justify=\"space-between\">\n        <SelectWrapper direction=\"row\" justify=\"space-between\" align=\"center\">\n          <AssetSelect<\"time\" | \"size\" | \"name\">\n            value={filterSelected}\n            items={filterOptions}\n            onChange={handleFilterChange}\n          />\n          <StyledIcon icon={iconChoice} onClick={handleReverse} />\n        </SelectWrapper>\n\n        <LayoutButtons justify=\"left\">\n          <StyledIcon\n            icon=\"assetList\"\n            onClick={() => setLayoutType(\"list\")}\n            selected={layoutType === \"list\"}\n          />\n          <StyledIcon\n            icon=\"assetGridSmall\"\n            onClick={() => setLayoutType(\"small\")}\n            selected={layoutType === \"small\"}\n          />\n          <StyledIcon\n            icon=\"assetGrid\"\n            onClick={() => setLayoutType(\"medium\")}\n            selected={layoutType === \"medium\"}\n          />\n        </LayoutButtons>\n        <SearchBar onChange={handleSearch} />\n      </NavBar>\n      <AssetWrapper isHeightFixed={isHeightFixed}>\n        {!filteredAssets || filteredAssets.length < 1 ? (\n          <Template align=\"center\" justify=\"center\">\n            <TemplateText size=\"m\">\n              {fileType === \"image\"\n                ? intl.formatMessage({\n                    defaultMessage:\n                      \"You haven't uploaded any image assets yet. Click the upload button above and select an image from your computer.\",\n                  })\n                : intl.formatMessage({\n                    defaultMessage:\n                      \"You haven't uploaded any file assets yet. Click the upload button above and select a compatible file from your computer.\",\n                  })}\n            </TemplateText>\n          </Template>\n        ) : (\n          <AssetList layoutType={layoutType}>\n            {layoutType === \"list\"\n              ? (searchResults || filteredAssets)?.map(a => (\n                  <AssetListItem\n                    key={a.id}\n                    asset={a}\n                    onCheck={() => handleAssetsSelect(a)}\n                    selected={selectedAssets?.includes(a)}\n                    checked={currentSaved === a}\n                  />\n                ))\n              : (searchResults || filteredAssets)?.map(a => (\n                  <AssetCard\n                    key={a.id}\n                    name={a.name}\n                    cardSize={layoutType}\n                    url={a.url}\n                    onCheck={() => handleAssetsSelect(a)}\n                    selected={selectedAssets?.includes(a)}\n                    checked={currentSaved === a}\n                  />\n                ))}\n          </AssetList>\n        )}\n        <Divider margin=\"0\" />\n      </AssetWrapper>\n      <AssetDeleteModal\n        isVisible={deleteModalVisible}\n        onClose={() => setDeleteModalVisible(false)}\n        handleRemove={handleRemove}\n      />\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  width: 100%;\n`;\n\nconst AssetWrapper = styled.div<{ isHeightFixed?: boolean }>`\n  height: ${({ isHeightFixed }) => (isHeightFixed ? \"\" : \"425px\")};\n  min-height: 400px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nconst AssetList = styled.div<{ layoutType?: LayoutTypes }>`\n  padding: ${metricsSizes[\"l\"]}px ${metricsSizes[\"m\"]}px;\n  overflow-y: scroll;\n  scrollbar-width: none;\n  display: grid;\n  grid-template-columns: ${({ layoutType }) =>\n    (layoutType === \"list\" && \"100%\") ||\n    (layoutType === \"medium\" && \"repeat(auto-fill, 192px)\") ||\n    (layoutType === \"small\" && \"repeat(auto-fill, 104px)\")};\n  grid-template-rows: ${({ layoutType }) =>\n    (layoutType === \"list\" && \"46px\") ||\n    (layoutType === \"medium\" && \"repeat(auto-fill, 186px)\") ||\n    (layoutType === \"small\" && \"repeat(auto-fill, 120px)\")};\n  gap: ${({ layoutType }) =>\n    (layoutType === \"list\" && \"12px\") ||\n    (layoutType === \"medium\" && \"24px\") ||\n    (layoutType === \"small\" && \"16px\")};\n  justify-content: space-between;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nconst NavBar = styled(Flex)`\n  margin: ${metricsSizes[\"m\"]}px;\n  flex: 1;\n`;\n\nconst SelectWrapper = styled(Flex)`\n  flex: 2;\n`;\n\nconst LayoutButtons = styled(Flex)`\n  margin-left: ${metricsSizes[\"l\"]}px;\n  flex: 3;\n`;\n\nconst StyledIcon = styled(Icon)<{ selected?: boolean }>`\n  margin-left: ${metricsSizes[\"m\"]}px;\n  border-radius: 5px;\n  padding: ${metricsSizes[\"2xs\"]}px;\n  color: ${({ selected, theme }) => (selected ? theme.main.text : theme.main.weak)};\n  cursor: pointer;\n  ${({ selected, theme }) => selected && `background: ${theme.main.paleBg};`}\n\n  &:hover {\n    background: ${({ theme }) => theme.main.paleBg};\n    color: ${({ theme }) => theme.main.text};\n  }\n`;\n\nconst Template = styled(Flex)`\n  height: 458px;\n`;\n\nconst TemplateText = styled(Text)`\n  width: 390px;\n`;\n\nexport default AssetContainer;\n","import { useState, useCallback, useEffect } from \"react\";\nimport useFileInput from \"use-file-input\";\n\nexport type FilterTypes = \"time\" | \"size\" | \"name\";\n\nexport type LayoutTypes = \"medium\" | \"small\" | \"list\";\n\nexport type Asset = {\n  id: string;\n  teamId: string;\n  name: string;\n  size: number;\n  url: string;\n  contentType: string;\n};\n\nexport default ({\n  assets,\n  isMultipleSelectable,\n  accept,\n  onCreateAsset,\n  initialAsset,\n  selectAsset,\n  selectedAssets,\n  onRemove,\n}: {\n  assets?: Asset[];\n  isMultipleSelectable?: boolean;\n  accept?: string;\n  onCreateAsset?: (files: FileList) => void;\n  initialAsset?: Asset;\n  selectAsset?: (assets: Asset[]) => void;\n  selectedAssets?: Asset[];\n  onRemove?: (assetIds: string[]) => void;\n}) => {\n  const [layoutType, setLayoutType] = useState<LayoutTypes>(\"medium\");\n  const [currentSaved, setCurrentSaved] = useState(initialAsset);\n  const [reverse, setReverse] = useState(false);\n\n  const [searchResults, setSearchResults] = useState<Asset[]>();\n  const [filterSelected, selectFilter] = useState<FilterTypes>(\"time\");\n\n  const [filteredAssets, setAssets] = useState(assets);\n\n  const [deleteModalVisible, setDeleteModalVisible] = useState(false);\n\n  const handleRemove = useCallback(() => {\n    if (selectedAssets?.length) {\n      onRemove?.(selectedAssets.map(a => a.id));\n      selectAsset?.([]);\n      setDeleteModalVisible(false);\n    }\n  }, [onRemove, selectAsset, selectedAssets]);\n\n  const iconChoice =\n    filterSelected === \"name\"\n      ? reverse\n        ? \"filterNameReverse\"\n        : \"filterName\"\n      : filterSelected === \"size\"\n      ? reverse\n        ? \"filterSizeReverse\"\n        : \"filterSize\"\n      : reverse\n      ? \"filterTimeReverse\"\n      : \"filterTime\";\n\n  const handleFilterChange = useCallback(\n    (f: FilterTypes) => {\n      selectFilter(f);\n      setReverse(false);\n      setCurrentSaved(initialAsset);\n      if (!assets) return;\n      const newArray =\n        f === \"time\"\n          ? [...assets]\n          : [...assets].sort((a: Asset, a2: Asset) => {\n              return f === \"name\"\n                ? a.name.localeCompare(a2.name)\n                : a[f] < a2[f]\n                ? -1\n                : a[f] > a2[f]\n                ? 1\n                : 0;\n            });\n      setAssets(newArray);\n    },\n    [assets, initialAsset],\n  );\n\n  useEffect(() => {\n    if (!assets) return;\n    handleFilterChange(filterSelected);\n  }, [handleFilterChange, filterSelected, assets]);\n\n  const handleAssetsSelect = (asset: Asset) => {\n    selectedAssets?.includes(asset)\n      ? selectAsset?.(selectedAssets?.filter(a => a !== asset))\n      : selectAsset?.(\n          isMultipleSelectable && selectedAssets ? [...selectedAssets, asset] : [asset],\n        );\n  };\n\n  const handleFileSelect = useFileInput(files => onCreateAsset?.(files), {\n    accept,\n    multiple: isMultipleSelectable,\n  });\n\n  const handleUploadToAsset = useCallback(() => {\n    handleFileSelect();\n  }, [handleFileSelect]);\n\n  const handleReverse = useCallback(() => {\n    setReverse(!reverse);\n    if (!filteredAssets) return;\n    setAssets(filteredAssets.reverse());\n  }, [filteredAssets, reverse]);\n\n  const handleSearch = useCallback(\n    (value: string) => {\n      if (!value) {\n        setSearchResults(undefined);\n      } else {\n        if (!filteredAssets) return;\n        setSearchResults(filteredAssets.filter(a => a.name.toLowerCase().includes(value)));\n      }\n    },\n    [filteredAssets],\n  );\n\n  return {\n    layoutType,\n    setLayoutType,\n    filteredAssets,\n    handleFilterChange,\n    filterSelected,\n    currentSaved,\n    searchResults,\n    iconChoice,\n    handleAssetsSelect,\n    handleUploadToAsset,\n    handleReverse,\n    handleSearch,\n    deleteModalVisible,\n    setDeleteModalVisible,\n    handleRemove,\n  };\n};\n","import React, { useCallback, useState, useEffect, useMemo } from \"react\";\nimport { useIntl } from \"react-intl\";\n\nimport { styled } from \"@reearth/theme\";\nimport Button from \"@reearth/components/atoms/Button\";\nimport TabularModal from \"@reearth/components/atoms/TabularModal\";\nimport Modal from \"@reearth/components/atoms/Modal\";\nimport Flex from \"@reearth/components/atoms/Flex\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport TextBox from \"@reearth/components/atoms/TextBox\";\nimport AssetsContainer, { Asset as AssetType } from \"./AssetContainer\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\n\nexport type Mode = \"asset\" | \"url\";\n\nexport type Asset = AssetType;\n\nexport type Props = {\n  className?: string;\n  assets?: Asset[];\n  isMultipleSelectable?: boolean;\n  isOpen?: boolean;\n  onClose?: () => void;\n  onCreateAsset?: (files: FileList) => void;\n  onSelect?: (value: string | null) => void;\n  value?: string;\n  fileType?: \"image\" | \"video\";\n};\n\ntype Tabs = \"assets\" | \"url\";\n\nconst AssetModal: React.FC<Props> = ({\n  assets,\n  isMultipleSelectable = false,\n  isOpen,\n  onClose,\n  onCreateAsset,\n  onSelect,\n  value,\n  fileType,\n}) => {\n  const intl = useIntl();\n  const labels: { [t in Tabs]: string } = {\n    assets: intl.formatMessage({ defaultMessage: \"Assets Library\" }),\n    url: intl.formatMessage({ defaultMessage: \"Use URL\" }),\n  };\n  const showURL = fileType === \"video\" || (value && !assets?.some(e => e.url === value));\n\n  const [selectedTab, selectTab] = useState<Tabs>(showURL ? \"url\" : \"assets\");\n\n  const initialAsset = assets?.find(a => a.url === value);\n\n  const [selectedAssets, selectAsset] = useState<Asset[]>(initialAsset ? [initialAsset] : []);\n  const [textUrl, setTextUrl] = useState(showURL ? value : undefined);\n  const accept =\n    fileType === \"image\"\n      ? \"image/*\"\n      : fileType === \"video\"\n      ? \"video/*\"\n      : fileType\n      ? \"*/*\"\n      : undefined;\n\n  const handleSetUrl = useCallback(() => {\n    onSelect?.(\n      (selectedTab === \"url\" || fileType === \"video\" ? textUrl : selectedAssets[0]?.url) || null,\n    );\n    onClose?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [onClose, selectedAssets, selectedTab, onSelect, fileType, textUrl]);\n\n  const handleTextUrlChange = useCallback(text => {\n    setTextUrl(text);\n  }, []);\n\n  const resetValues = useCallback(() => {\n    setTextUrl(showURL ? value : undefined);\n    selectTab(showURL ? \"url\" : \"assets\");\n    selectAsset(initialAsset ? [initialAsset] : []);\n  }, [value, showURL, initialAsset]);\n\n  const handleModalClose = useCallback(() => {\n    resetValues();\n    onClose?.();\n  }, [onClose, resetValues]);\n\n  useEffect(() => {\n    resetValues();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [initialAsset, showURL, value]);\n\n  const filteredAssets = useMemo(() => {\n    if (!assets) return;\n    return assets\n      .filter(\n        a =>\n          !fileType ||\n          a.url.match(fileType === \"image\" ? /\\.(jpg|jpeg|png|gif|webp)$/ : /\\.(mp4|webm)$/),\n      )\n      .reverse(); // reversed to show newest at the top\n  }, [assets, fileType]);\n\n  return fileType === \"video\" ? (\n    <Modal\n      size=\"sm\"\n      title={intl.formatMessage({ defaultMessage: \"Add video URL\" })}\n      isVisible={isOpen}\n      onClose={handleModalClose}\n      button1={\n        <Button\n          large\n          buttonType=\"primary\"\n          text={intl.formatMessage({ defaultMessage: \"Save\" })}\n          onClick={handleSetUrl}\n        />\n      }\n      button2={\n        <Button\n          large\n          buttonType=\"secondary\"\n          text={intl.formatMessage({ defaultMessage: \"Cancel\" })}\n          onClick={handleModalClose}\n        />\n      }>\n      <Wrapper>\n        <StyledTextField value={textUrl} onChange={handleTextUrlChange} />\n      </Wrapper>\n    </Modal>\n  ) : (\n    <TabularModal<Tabs>\n      title={\n        fileType === \"image\"\n          ? intl.formatMessage({ defaultMessage: \"Select Image\" })\n          : intl.formatMessage({ defaultMessage: \"Select Resource\" })\n      }\n      isVisible={isOpen}\n      size=\"lg\"\n      onClose={handleModalClose}\n      tabs={[\"assets\", \"url\"]}\n      tabLabels={labels}\n      currentTab={selectedTab}\n      setCurrentTab={selectTab}\n      button1={\n        <Button\n          large\n          text={intl.formatMessage({ defaultMessage: \"Select\" })}\n          buttonType=\"primary\"\n          onClick={handleSetUrl}\n        />\n      }\n      button2={\n        <Button\n          large\n          text={intl.formatMessage({ defaultMessage: \"Cancel\" })}\n          buttonType=\"secondary\"\n          onClick={handleModalClose}\n        />\n      }>\n      {selectedTab === \"assets\" && (\n        <AssetsContainer\n          assets={filteredAssets}\n          isMultipleSelectable={isMultipleSelectable}\n          accept={accept}\n          onCreateAsset={onCreateAsset}\n          initialAsset={initialAsset}\n          selectedAssets={selectedAssets}\n          selectAsset={selectAsset}\n          fileType={fileType}\n        />\n      )}\n      {selectedTab === \"url\" && (\n        <TextContainer align=\"center\">\n          <Title size=\"s\">\n            {fileType === \"image\"\n              ? intl.formatMessage({ defaultMessage: \"Image URL\" })\n              : intl.formatMessage({ defaultMessage: \"Resource URL\" })}\n          </Title>\n          <StyledTextField value={textUrl} onChange={handleTextUrlChange} />\n        </TextContainer>\n      )}\n    </TabularModal>\n  );\n};\n\nconst TextContainer = styled(Flex)`\n  align-items: center;\n  width: 100%;\n  margin: ${metricsSizes[\"xl\"]}px;\n`;\n\nconst Wrapper = styled.div`\n  width: 100%;\n`;\n\nconst Title = styled(Text)`\n  margin: ${metricsSizes[\"m\"]}px;\n  flex: 1;\n`;\n\nconst StyledTextField = styled(TextBox)`\n  flex: 3;\n`;\n\nexport default AssetModal;\n","import React, { useCallback, useRef } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { styled, useTheme } from \"@reearth/theme\";\nimport {\n  MenuListItemLabel,\n  MenuList,\n  MenuListItem,\n} from \"@reearth/components/molecules/Common/MenuList\";\nimport Dropdown, { Ref as DropDownRef } from \"@reearth/components/atoms/Dropdown\";\nimport { Team } from \"@reearth/components/molecules/Common/Header\";\nimport Text from \"@reearth/components/atoms/Text\";\n\ntype Props = {\n  currentTeam: Team;\n  teams: Team[];\n  onChangeTeam?: (teamId: string) => void;\n  openModal?: () => void;\n};\n\nconst TeamMenu: React.FC<Props> = ({ currentTeam, teams, onChangeTeam, openModal }) => {\n  const intl = useIntl();\n  const dropDownRef = useRef<DropDownRef>(null);\n\n  const handleTeamChange = useCallback(\n    (t: string) => {\n      dropDownRef.current?.close();\n      onChangeTeam?.(t);\n    },\n    [onChangeTeam],\n  );\n\n  const label = (\n    <MenuListItemLabel text={intl.formatMessage({ defaultMessage: \"Switch Workspace\" })} />\n  );\n  const theme = useTheme();\n\n  return (\n    <Dropdown label={label} direction=\"right\" hasIcon>\n      <DropdownInner>\n        <MenuList>\n          {teams.map(team => (\n            <MenuListItem key={team.id} onClick={() => team.id && handleTeamChange(team.id)}>\n              {team.id === currentTeam.id ? (\n                <TeamStatus>\n                  <Text size=\"m\" color={theme.main.text}>\n                    {currentTeam.name}\n                  </Text>\n                  <TeamStatusIcon isActive />\n                </TeamStatus>\n              ) : (\n                <MenuListItemLabel text={team.name} />\n              )}\n            </MenuListItem>\n          ))}\n          <MenuListItem>\n            <MenuListItemLabel\n              icon=\"workspaces\"\n              linkTo={`/settings/workspaces`}\n              text={intl.formatMessage({ defaultMessage: \"Manage Workspaces\" })}\n            />\n          </MenuListItem>\n          <MenuListItem>\n            <MenuListItemLabel\n              icon=\"workspaceAdd\"\n              onClick={openModal}\n              text={intl.formatMessage({ defaultMessage: \"New Workspace\" })}\n            />\n          </MenuListItem>\n        </MenuList>\n      </DropdownInner>\n    </Dropdown>\n  );\n};\n\nconst DropdownInner = styled.div`\n  padding: 0;\n`;\n\nconst TeamStatus = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  height: 52px;\n  padding: 0 16px;\n`;\n\nconst TeamStatusIcon = styled.div<{ isActive: boolean }>`\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  margin-left: auto;\n  order: 2;\n  background-color: ${({ theme }) => theme.main.highlighted};\n`;\n\nexport default TeamMenu;\n","import React, { useRef } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport Icon from \"@reearth/components/atoms/Icon\";\n\nimport { styled, useTheme } from \"@reearth/theme\";\nimport Dropdown, { Ref as DropDownRef } from \"@reearth/components/atoms/Dropdown\";\nimport {\n  MenuList,\n  MenuListItem,\n  MenuListItemLabel,\n} from \"@reearth/components/molecules/Common/MenuList\";\nimport TeamMenu from \"@reearth/components/molecules/Common/TeamMenu\";\nimport { User, Team, Project } from \"./types\";\nimport Text from \"@reearth/components/atoms/Text\";\n\nexport interface LoginProps {\n  user: User;\n  currentTeam: Team;\n  currentProject: Project;\n}\nexport interface Props {\n  teams: Team[];\n  onSignOut: () => void;\n  onChangeTeam?: (teamId: string) => void;\n  openModal?: () => void;\n}\n\nconst Label: React.FC<Pick<LoginProps, \"user\" | \"currentTeam\">> = ({ user, currentTeam }) => {\n  const theme = useTheme();\n  return (\n    <LabelWrapper>\n      <LabelLeft>\n        <Avatar>\n          <StyledIcon icon=\"avatar\" size={28} />\n        </Avatar>\n      </LabelLeft>\n      <LabelRight>\n        <LabelUserName size=\"m\" weight=\"bold\" color={theme.main.strongText}>\n          {user.name}\n        </LabelUserName>\n        <LabelTeamName size=\"xs\" color={theme.main.strongText}>\n          {currentTeam.name}\n        </LabelTeamName>\n      </LabelRight>\n    </LabelWrapper>\n  );\n};\n\nconst HeaderProfile: React.FC<Props & Partial<LoginProps>> = ({\n  user = { name: \"\" },\n  currentTeam = { id: undefined, name: \"\" },\n  teams = [],\n  onSignOut,\n  onChangeTeam,\n  openModal,\n}) => {\n  const intl = useIntl();\n\n  const dropDownRef = useRef<DropDownRef>(null);\n\n  return (\n    <Wrapper>\n      <StyledDropdown\n        ref={dropDownRef}\n        openOnClick\n        noHoverStyle\n        hasIcon\n        label={<Label user={user} currentTeam={currentTeam} />}>\n        <ChildrenWrapper>\n          <Section>\n            <MenuList>\n              <MenuListItem>\n                <MenuListItemLabel\n                  linkTo={`/settings/account`}\n                  text={intl.formatMessage({ defaultMessage: \"Account Settings\" })}\n                />\n              </MenuListItem>\n              <MenuListItem noHover>\n                <TeamMenu\n                  currentTeam={currentTeam}\n                  teams={teams}\n                  onChangeTeam={onChangeTeam}\n                  openModal={openModal}\n                />\n              </MenuListItem>\n              <MenuListItem>\n                <MenuListItemLabel\n                  icon=\"logout\"\n                  onClick={onSignOut}\n                  text={intl.formatMessage({ defaultMessage: \"Logout\" })}\n                />\n              </MenuListItem>\n            </MenuList>\n          </Section>\n        </ChildrenWrapper>\n      </StyledDropdown>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  cursor: pointer;\n`;\n\nconst StyledDropdown = styled(Dropdown)`\n  height: 100%;\n  padding: 0 24px;\n`;\n\nconst ChildrenWrapper = styled.div`\n  width: 230px;\n`;\n\nconst LabelWrapper = styled.div`\n  display: flex;\n  height: 100%;\n  padding-left: 10px;\n`;\n\nconst LabelRight = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst LabelLeft = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin-right: 16px;\n`;\n\nconst LabelTeamName = styled(Text)`\n  margin-top: 2px;\n`;\n\nconst LabelUserName = styled(Text)`\n  margin-bottom: 2px;\n`;\n\nconst Section = styled.div`\n  padding: 0;\n`;\n\n// need to setup avatars with users\nconst Avatar = styled.div<{ avatar?: string }>`\n  width: 28px;\n  height: 28px;\n  border-radius: 50%;\n  background: ${({ theme, avatar }) => (avatar ? `url(${avatar});` : theme.main.highlighted)};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledIcon = styled(Icon)`\n  padding: 0;\n`;\n\nexport default HeaderProfile;\n","import React from \"react\";\nimport { Link } from \"@reach/router\";\n\nimport { styled, metrics, css } from \"@reearth/theme\";\nimport Icon from \"@reearth/components/atoms/Icon\";\n\n// Components\nimport NotificationBar, { Type } from \"@reearth/components/atoms/NotificationBar\";\nimport WorkspaceCreationModal from \"@reearth/components/molecules/Common/WorkspaceCreationModal\";\nimport Profile from \"./profile\";\n\nimport { User, Team, Project } from \"./types\";\n\nexport * from \"./types\";\n\nexport type NotificationType = Type;\n\nexport interface Props {\n  className?: string;\n  user?: User;\n  currentTeam?: Team;\n  currentProject?: Project;\n  sceneId?: string;\n  teams: Team[];\n  icon?: React.ReactNode;\n  center?: React.ReactNode;\n  right?: React.ReactNode;\n  onBack?: () => void;\n  onForward?: () => void;\n  onSignOut?: () => void;\n  onCreateTeam?: (data: { name: string }) => Promise<void>;\n  onChangeTeam?: (teamId: string) => void;\n  modalShown?: boolean;\n  openModal?: () => void;\n  handleModalClose?: (r?: boolean | undefined) => void;\n  notification?: {\n    type?: NotificationType;\n    text: string;\n  };\n  onNotificationClose?: () => void;\n  dashboard?: boolean;\n}\n\nconst Header: React.FC<Props> = ({\n  className,\n  onSignOut,\n  user,\n  currentTeam,\n  currentProject,\n  teams,\n  center,\n  icon,\n  right,\n  onCreateTeam,\n  onChangeTeam,\n  modalShown,\n  openModal,\n  handleModalClose,\n  notification,\n  onNotificationClose,\n  dashboard,\n}) => {\n  return (\n    <>\n      <Wrapper className={className}>\n        <Content>\n          <LeftArea>\n            <StyledLink to={`/dashboard/${currentTeam?.id}`}>\n              {!dashboard && <StyledIcon icon=\"dashboard\" size={24} />}\n            </StyledLink>\n            {icon}\n            {onSignOut && onChangeTeam && (\n              <>\n                <Profile\n                  user={user}\n                  currentTeam={currentTeam}\n                  currentProject={currentProject}\n                  teams={teams}\n                  onSignOut={onSignOut}\n                  onChangeTeam={onChangeTeam}\n                  openModal={openModal}\n                />\n                <WorkspaceCreationModal\n                  open={modalShown}\n                  onClose={handleModalClose}\n                  onSubmit={onCreateTeam}\n                />\n              </>\n            )}\n          </LeftArea>\n          <CenterArea>{center}</CenterArea>\n          <RightArea>{right}</RightArea>\n        </Content>\n      </Wrapper>\n      {notification && (\n        <NotificationBar\n          text={notification.text}\n          type={notification.type}\n          onClose={onNotificationClose}\n        />\n      )}\n    </>\n  );\n};\n\nconst Wrapper = styled.header`\n  width: 100%;\n  height: ${metrics.headerHeight}px;\n  background: ${props => props.theme.header.bg};\n`;\n\nconst Content = styled.div`\n  display: flex;\n  padding: 0 20px;\n  width: calc(100% - 40px);\n  height: 100%;\n  align-items: center;\n`;\n\nconst itemStyle = css`\n  flex: 1;\n  display: flex;\n  height: 100%;\n  align-items: center;\n`;\n\nconst LeftArea = styled.div`\n  ${itemStyle}\n  justify-content: flex-start;\n`;\n\nconst CenterArea = styled.div`\n  justify-content: center;\n  ${itemStyle}\n`;\n\nconst RightArea = styled.div`\n  ${itemStyle}\n  justify-content: flex-end;\n`;\n\nconst StyledIcon = styled(Icon)`\n  margin-right: 8px;\n  border-radius: 5px;\n  padding: 5px;\n  color: ${props => props.theme.main.text};\n  &:hover {\n    background: ${props => props.theme.main.bg};\n  }\n`;\n\nconst StyledLink = styled(Link)`\n  color: ${props => props.theme.main.text};\n  text-decoration: none;\n  &:hover {\n    text-decoration: none;\n  }\n`;\n\nexport default Header;\n","import React from \"react\";\nimport { Link } from \"@reach/router\";\nimport { styled, useTheme } from \"@reearth/theme\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Text from \"@reearth/components/atoms/Text\";\n\nexport const MenuListItemLabel: React.FC<{\n  icon?: string;\n  text?: string;\n  linkTo?: string;\n  onClick?: () => void;\n  disabled?: boolean;\n  color?: string;\n  center?: boolean;\n}> = ({ icon, text, linkTo, onClick, disabled, color, center }) => {\n  const theme = useTheme();\n  const content = (\n    <MenuItemWrapper\n      size=\"m\"\n      color={(disabled && theme.properties.text) || color || theme.main.text}\n      onClick={onClick}\n      disabled={disabled}>\n      {icon ? <StyledIcon icon={icon} size={20} color={color} disabled={disabled} /> : null}\n      <StyledLabel center={center}>{text}</StyledLabel>\n    </MenuItemWrapper>\n  );\n\n  return typeof linkTo !== \"string\" ? (\n    content\n  ) : (\n    <StyledLinkButton to={linkTo}>{content}</StyledLinkButton>\n  );\n};\n\nexport const MenuList = styled.ul`\n  list-style: none;\n  padding-left: 0;\n  margin: 0;\n`;\n\nexport const MenuListItem = styled.li<{ noHover?: boolean }>`\n  display: flex;\n  &:hover {\n    ${props =>\n      !props.noHover &&\n      `\n      background-color: ${props.theme.main.bg};\n    `}\n  }\n`;\n\nconst MenuItemWrapper = styled(Text)<{ disabled?: boolean }>`\n  flex: auto;\n  display: flex;\n  padding: 0 16px;\n  align-items: center;\n  min-height: 52px;\n  cursor: pointer;\n  height: 100%;\n  pointer-events: ${({ disabled }) => (disabled ? \"none\" : \"auto\")};\n`;\n\nconst StyledLabel = styled.div<{ center?: boolean }>`\n  flex: auto;\n  text-align: ${({ center }) => (center ? \"center\" : \"left\")};\n`;\n\nconst StyledLinkButton = styled(Link)`\n  text-decoration: none;\n  width: 100%;\n  height: 51px;\n  &:hover {\n    text-decoration: none;\n  }\n`;\n\nconst StyledIcon = styled(Icon)<{ color?: string; disabled?: boolean }>`\n  margin-right: 10px;\n  color: ${({ disabled, color, theme }) =>\n    disabled ? theme.properties.text : color ? color : theme.main.text};\n`;\n","import React, { useCallback } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { useFormik } from \"formik\";\n\nimport Modal from \"@reearth/components/atoms/Modal\";\nimport Button from \"@reearth/components/atoms/Button\";\nimport Loading from \"@reearth/components/atoms/Loading\";\n\nimport { styled, useTheme } from \"@reearth/theme\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport fonts from \"@reearth/theme/fonts\";\n\nexport interface FormValues {\n  name: string;\n  // description: string;\n}\n\nexport interface Props {\n  open?: boolean;\n  onClose?: (refetch?: boolean) => void;\n  onSubmit?: (values: FormValues) => Promise<void> | void;\n}\n\nconst initialValues: FormValues = {\n  name: \"\",\n  // description: \"\",\n};\n\nconst WorkspaceCreationModal: React.FC<Props> = ({ open, onClose, onSubmit }) => {\n  const intl = useIntl();\n  const formik = useFormik({\n    initialValues,\n    onSubmit: useCallback(\n      async (data: FormValues) => {\n        await onSubmit?.(data);\n        onClose?.(true);\n      },\n      [onClose, onSubmit],\n    ),\n  });\n\n  const handleClose = useCallback(() => {\n    if (!formik.isSubmitting) {\n      onClose?.();\n      formik.resetForm();\n    }\n  }, [formik, onClose]);\n\n  const theme = useTheme();\n\n  return (\n    <Modal\n      title={intl.formatMessage({ defaultMessage: \"Create New Workspace\" })}\n      isVisible={open}\n      onClose={handleClose}\n      button1={\n        <Button\n          large\n          buttonType=\"primary\"\n          text={intl.formatMessage({ defaultMessage: \"Create\" })}\n          disabled={!formik.values.name}\n          onClick={formik.submitForm}\n        />\n      }\n      button2={\n        <Button\n          large\n          buttonType=\"secondary\"\n          text={intl.formatMessage({ defaultMessage: \"Cancel\" })}\n          onClick={handleClose}\n        />\n      }>\n      {formik.isSubmitting && <Loading overlay />}\n      <NewProjectForm onSubmit={formik.handleSubmit}>\n        <FormInputWrapper>\n          <Text size=\"s\" color={theme.main.text} otherProperties={{ flex: 1, margin: \"1em 0\" }}>\n            {intl.formatMessage({ defaultMessage: \"Workspace Name\" })}\n          </Text>\n          <StyledInput\n            type=\"text\"\n            {...formik.getFieldProps(\"name\")}\n            onBlur={e => {\n              formik.handleBlur(e);\n            }}\n          />\n        </FormInputWrapper>\n      </NewProjectForm>\n    </Modal>\n  );\n};\n\nconst NewProjectForm = styled.form`\n  width: 100%;\n`;\n\nconst FormInputWrapper = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  margin: 40px auto;\n`;\n\nconst StyledInput = styled.input`\n  flex: 2;\n  color: ${props => props.theme.main.text};\n  background: ${props => props.theme.main.deepBg};\n  border: 1px solid #3f3d45;\n  font-size: ${fonts.sizes.s}px;\n  outline: none;\n  cursor: text;\n  padding: 0 10px;\n`;\n\nexport default WorkspaceCreationModal;\n","import { useCallback, useRef, useMemo, useState, useEffect } from \"react\";\nimport { useShallowCompareEffect } from \"react-use\";\nimport { uniqBy } from \"lodash-es\";\nimport arrayMove from \"array-move\";\n\nimport { Item, searchItems } from \"@reearth/components/atoms/TreeView\";\nimport { Layer as LayerType, useLayerTreeViewItem } from \"../LayerTreeViewItem\";\n\nexport type ItemEx = {\n  id: string;\n  children?: Layer[];\n};\n\nexport type Layer = LayerType<ItemEx>;\n\nexport default function ({\n  active,\n  layers,\n  selected,\n  onSelect,\n}: {\n  active?: boolean;\n  layers: Layer[];\n  selected: string[];\n  onSelect?: (layers: Layer[]) => void;\n}) {\n  const selectedLeftLayers = useRef<Item<Layer>[]>([]);\n  const selectedRightLayers = useRef<Item<Layer>[]>([]);\n  const [selectedLeftLayerIds, selectLeftLayerIds] = useState<string[]>([]);\n  const [selectedRightLayerIds, selectRightLayerIds] = useState<string[]>([]);\n\n  const convertedLayers = useMemo(() => convert(layers), [layers]);\n\n  const [rightLayers, setRightLayers] = useState<Item<Layer>>({\n    id: \"\",\n    content: { id: \"\" },\n  });\n\n  const leftLayers: Item<Layer> = useMemo(\n    () => ({\n      id: \"\",\n      content: {\n        id: \"\",\n      },\n      children: filterLayers(convertedLayers, rightLayers.children?.map(l => l.id) ?? []),\n    }),\n    [convertedLayers, rightLayers],\n  );\n\n  const clearSelectedLeftLayers = useCallback(() => {\n    selectedLeftLayers.current = [];\n    selectLeftLayerIds(l => (l.length === 0 ? l : []));\n  }, []);\n\n  const clearSelectedRightLayers = useCallback(() => {\n    selectedRightLayers.current = [];\n    selectRightLayerIds(l => (l.length === 0 ? l : []));\n  }, []);\n\n  const selectLeftLayers = useCallback((layers: Item<Layer>[]) => {\n    selectedLeftLayers.current = layers;\n    selectLeftLayerIds(layers.map(l => l.id));\n  }, []);\n\n  const selectRightLayers = useCallback((layers: Item<Layer>[]) => {\n    selectedRightLayers.current = layers;\n    selectRightLayerIds(layers.map(l => l.id));\n  }, []);\n\n  const ok = useCallback(() => onSelect?.(rightLayers.children?.map(l => l.content) ?? []), [\n    onSelect,\n    rightLayers.children,\n  ]);\n\n  const addLayers = useCallback(() => {\n    const layers = uniqBy(flattenLayers(selectedLeftLayers.current), l => l.id);\n    setRightLayers(l => {\n      const ids = new Set(l.children?.map(l => l.id));\n      return {\n        ...l,\n        children: [...(l.children ?? []), ...layers.filter(l => !ids.has(l.id))],\n      };\n    });\n    selectedLeftLayers.current = [];\n    selectLeftLayers([]);\n  }, [selectLeftLayers]);\n\n  const removeLayers = useCallback(() => {\n    const ids = new Set(selectedRightLayers.current.map(l => l.id));\n    setRightLayers(r => ({ ...r, children: r.children?.filter(i => !ids.has(i.id)) }));\n  }, [selectedRightLayers]);\n\n  const dropRightLayer = useCallback(\n    (_src: any, dest: Item<LayerType>, srcIndex: number[], destIndex: number[]) => {\n      setRightLayers(r => {\n        if (dest !== r || !r.children) return r; // dest must be the root layer\n        return { ...r, children: arrayMove(r.children, srcIndex[0], destIndex[0]) };\n      });\n    },\n    [],\n  );\n\n  const reset = useCallback(() => {\n    const layers = searchItems(convertedLayers, selected)\n      .filter((i): i is [Item<Layer>, number[]] => !!i && typeof i[0] !== \"undefined\")\n      .map(i => i[0]);\n    clearSelectedLeftLayers();\n    clearSelectedRightLayers();\n    setRightLayers(root => ({\n      ...root,\n      children: layers,\n    }));\n  }, [convertedLayers, selected, clearSelectedLeftLayers, clearSelectedRightLayers]);\n\n  const TreeViewItem = useLayerTreeViewItem<ItemEx>();\n\n  useEffect(() => {\n    if (!active) {\n      reset();\n    }\n  }, [active]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useShallowCompareEffect(() => {\n    reset();\n  }, [layers, selected]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    selectedLeftLayers: selectedLeftLayerIds,\n    selectedRightLayers: selectedRightLayerIds,\n    selectLeftLayers,\n    selectRightLayers,\n    leftLayers,\n    rightLayers,\n    ok,\n    addLayers,\n    removeLayers,\n    dropRightLayer,\n    TreeViewItem,\n  };\n}\n\nconst convert = (layers: Layer[]): Item<Layer>[] =>\n  layers\n    .map<Item<Layer> | undefined>(l => ({\n      id: l.id,\n      content: l,\n      children: l.children ? convert(l.children) : undefined,\n      draggable: true,\n      droppable: true,\n      selectable: true,\n      expandable: !!l.children?.length,\n      droppableIntoChildren: !!l.children?.length,\n    }))\n    .filter((i): i is Item<Layer> => !!i);\n\nconst filterLayers = (items: Item<Layer>[], selected: string[]): Item<Layer>[] =>\n  items\n    .map(i => (i.children?.length ? { ...i, children: filterLayers(i.children, selected) } : i))\n    .filter(i => !selected.includes(i.id));\n\nconst flattenLayers = (layers: Item<Layer>[]): Item<Layer>[] =>\n  layers\n    .map(l => (l.content.group && l.children?.length ? flattenLayers(l.children) : [l]))\n    .reduce((a, b) => [...a, ...b], []);\n","import React from \"react\";\nimport { useIntl } from \"react-intl\";\n\nimport { styled } from \"@reearth/theme\";\nimport Modal from \"@reearth/components/atoms/Modal\";\nimport Button from \"@reearth/components/atoms/Button\";\nimport TreeView, { Props as TreeViewProps } from \"@reearth/components/atoms/TreeView\";\nimport useHooks, { Layer as LayerType } from \"./hooks\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\n\nexport type Layer = LayerType;\n\nexport type Props = {\n  active?: boolean;\n  layers?: Layer[];\n  selected?: string[];\n  onSelect?: (layers: Layer[]) => void;\n  onClose?: () => void;\n};\n\nconst LayerMultipleSelectionModal: React.FC<Props> = ({\n  active,\n  layers = [],\n  selected = [],\n  onSelect,\n  onClose,\n}) => {\n  const {\n    selectedLeftLayers,\n    selectedRightLayers,\n    selectLeftLayers,\n    selectRightLayers,\n    leftLayers,\n    rightLayers,\n    ok,\n    addLayers,\n    removeLayers,\n    dropRightLayer,\n    TreeViewItem,\n  } = useHooks({ active, layers, selected, onSelect });\n  const intl = useIntl();\n\n  return (\n    <Modal\n      title={intl.formatMessage({ defaultMessage: \"Layer selection\" })}\n      size=\"md\"\n      isVisible={active}\n      onClose={onClose}\n      button1={\n        <Button\n          large\n          text={intl.formatMessage({ defaultMessage: \"Save\" })}\n          onClick={ok}\n          buttonType=\"primary\"\n        />\n      }\n      button2={\n        <Button\n          large\n          text={intl.formatMessage({ defaultMessage: \"Cancel\" })}\n          onClick={onClose}\n          buttonType=\"secondary\"\n        />\n      }>\n      <Main>\n        <Pane>\n          <TreeViewTitle size=\"s\">\n            {intl.formatMessage({ defaultMessage: \"Selectable Layers\" })}\n          </TreeViewTitle>\n          <StyledTreeView\n            item={leftLayers}\n            selected={selectedLeftLayers}\n            onSelect={selectLeftLayers}\n            renderItem={TreeViewItem}\n            selectable\n            expandable\n            multiple\n          />\n        </Pane>\n        <CenterPane>\n          <Button\n            large\n            text={intl.formatMessage({ defaultMessage: \"Add\" })}\n            icon=\"arrowLongRight\"\n            iconRight\n            buttonType=\"primary\"\n            onClick={addLayers}\n          />\n          <Button\n            large\n            text={intl.formatMessage({ defaultMessage: \"Remove\" })}\n            icon=\"arrowLongLeft\"\n            buttonType=\"primary\"\n            onClick={removeLayers}\n          />\n        </CenterPane>\n        <Pane>\n          <TreeViewTitle size=\"s\">\n            {intl.formatMessage({ defaultMessage: \"Stories\" })}\n          </TreeViewTitle>\n          <StyledTreeView\n            item={rightLayers}\n            selected={selectedRightLayers}\n            onSelect={selectRightLayers}\n            onDrop={dropRightLayer}\n            renderItem={TreeViewItem}\n            selectable\n            expandable\n            draggable\n            droppable\n            multiple\n            dragItemType=\"layerSelectionModalLayer\"\n          />\n        </Pane>\n      </Main>\n    </Modal>\n  );\n};\n\nconst Main = styled.main`\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  box-sizing: border-box;\n  color: ${props => props.theme.main.strongText};\n`;\n\nconst Pane = styled.div`\n  flex: 1;\n  box-sizing: border-box;\n  min-width: 0; /* prevent overflow */\n`;\n\nconst CenterPane = styled.div`\n  padding: ${metricsSizes[\"m\"]}px;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  box-sizing: border-box;\n  flex-flow: column;\n`;\n\nconst InnerTreeView = (props: TreeViewProps<Layer, HTMLDivElement>) => (\n  <TreeView<Layer, HTMLDivElement> {...props} />\n);\n\nconst TreeViewTitle = styled(Text)`\n  padding-bottom: 8px;\n`;\n\nconst StyledTreeView = styled(InnerTreeView)`\n  border: 1px solid ${props => props.theme.main.border};\n  height: 250px;\n  box-sizing: border-box;\n`;\n\nexport default LayerMultipleSelectionModal;\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useIntl } from \"react-intl\";\n\nimport { styled } from \"@reearth/theme\";\nimport Modal from \"@reearth/components/atoms/Modal\";\nimport Button from \"@reearth/components/atoms/Button\";\nimport TreeView, { Item, Props as TreeViewProps } from \"@reearth/components/atoms/TreeView\";\nimport LayerTreeViewItem, { Layer as LayerType } from \"../LayerTreeViewItem\";\n\nexport type Layer = LayerType<{\n  id: string;\n  children?: Layer[];\n}>;\n\nexport type Props = {\n  active?: boolean;\n  layers?: Layer[];\n  selected?: string;\n  multipleSelectable?: boolean;\n  groupSelectable?: boolean;\n  onSelect?: (selected: string) => void;\n  onClose?: () => void;\n};\n\nconst LayerSelectionModal: React.FC<Props> = ({\n  active,\n  layers = [],\n  selected,\n  groupSelectable,\n  multipleSelectable,\n  onSelect,\n  onClose,\n}) => {\n  const item = useMemo<Item<LayerType>>(\n    () => ({ id: \"\", content: {}, children: convert(layers, groupSelectable) }),\n    [layers, groupSelectable],\n  );\n\n  const [selectedLayer, selectLayer] = useState<string[]>(selected ? [selected] : []);\n\n  const ok = useCallback(() => (selectedLayer?.length ? onSelect?.(selectedLayer[0]) : undefined), [\n    onSelect,\n    selectedLayer,\n  ]);\n\n  const select = useCallback((s: Item<LayerType>[]) => {\n    if (s.length) {\n      selectLayer([s[0].id]);\n    }\n  }, []);\n\n  useEffect(() => selectLayer(selected ? [selected] : []), [selected]);\n\n  useEffect(() => {\n    if (!active) {\n      selectLayer(selected ? [selected] : []);\n    }\n  }, [active]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const intl = useIntl();\n\n  return (\n    <Modal\n      title={intl.formatMessage({ defaultMessage: \"Layer selection\" })}\n      size=\"md\"\n      isVisible={active}\n      onClose={onClose}\n      button1={\n        <Button\n          text={intl.formatMessage({ defaultMessage: \"Save\" })}\n          onClick={ok}\n          buttonType=\"primary\"\n        />\n      }\n      button2={\n        <Button\n          text={intl.formatMessage({ defaultMessage: \"Cancel\" })}\n          onClick={onClose}\n          buttonType=\"secondary\"\n        />\n      }>\n      <Main>\n        <StyledTreeView\n          item={item}\n          selected={selectedLayer}\n          onSelect={select}\n          renderItem={LayerTreeViewItem}\n          selectable\n          expandable\n          multiple={multipleSelectable}\n        />\n      </Main>\n    </Modal>\n  );\n};\n\nconst Main = styled.main`\n  padding: 10px;\n  width: 100%;\n  box-sizing: border-box;\n  color: ${props => props.theme.main.strongText};\n`;\n\nconst InnerTreeView = (props: TreeViewProps<LayerType, HTMLDivElement>) => (\n  <TreeView<LayerType, HTMLDivElement> {...props} />\n);\n\nconst StyledTreeView = styled(InnerTreeView)`\n  border: 1px solid ${props => props.theme.main.border};\n  height: 250px;\n  box-sizing: border-box;\n  width: 80%;\n  margin: 0 auto;\n`;\n\nexport default LayerSelectionModal;\n\nconst convert = (layers: Layer[], groupSelectable?: boolean): Item<LayerType>[] =>\n  layers.map<Item<LayerType>>(l => ({\n    id: l.id,\n    content: l,\n    children: l.children ? convert(l.children) : undefined,\n    selectable: !l.children?.length || groupSelectable,\n    expandable: !!l.children?.length,\n  }));\n","import { useCallback, useRef } from \"react\";\n\nconst useDoubleClick = (\n  onClick: () => void,\n  onDoubleClick: (() => void) | undefined,\n): [() => void, () => void] => {\n  const t = useRef<NodeJS.Timeout>();\n\n  const handleClick = useCallback(() => {\n    t.current && clearTimeout(t.current);\n    t.current = setTimeout(onClick, 200);\n  }, [onClick]);\n\n  const handleDoubleClick = useCallback(() => {\n    t.current && clearTimeout(t.current);\n    onDoubleClick?.();\n  }, [onDoubleClick]);\n\n  return [handleClick, handleDoubleClick];\n};\n\nexport default useDoubleClick;\n","import React from \"react\";\n\nimport { styled } from \"@reearth/theme\";\nimport useHooks from \"./hooks\";\nimport HelpButton from \"@reearth/components/atoms/HelpButton\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport { useIntl } from \"react-intl\";\nimport { Format } from \"../Layer\";\n\nexport type Props = {\n  rootLayerId?: string;\n  selectedLayerId?: string;\n  onLayerRemove?: (id: string) => void;\n  onLayerGroupCreate?: () => void;\n  onLayerImport?: (file: File, format: Format) => void;\n};\n\nconst LayerActions: React.FC<Props> = ({\n  rootLayerId,\n  selectedLayerId,\n  onLayerRemove,\n  onLayerImport,\n  onLayerGroupCreate,\n}) => {\n  const intl = useIntl();\n  const { importLayer } = useHooks({\n    onLayerImport,\n  });\n\n  return (\n    <ActionWrapper\n      onClick={e => {\n        e.stopPropagation();\n      }}>\n      <Action\n        disabled={!selectedLayerId}\n        onClick={() => {\n          if (selectedLayerId) {\n            onLayerRemove?.(selectedLayerId);\n          }\n        }}>\n        <HelpButton\n          descriptionTitle={intl.formatMessage({ defaultMessage: \"Delete selected layer.\" })}\n          balloonDirection=\"bottom\">\n          <StyledIcon icon=\"bin\" size={16} disabled={!selectedLayerId} />\n        </HelpButton>\n      </Action>\n      <Action disabled={!rootLayerId} onClick={onLayerGroupCreate}>\n        <HelpButton\n          descriptionTitle={intl.formatMessage({ defaultMessage: \"Create new folder.\" })}\n          balloonDirection=\"bottom\">\n          <StyledIcon icon=\"folderAdd\" size={16} />\n        </HelpButton>\n      </Action>\n      <Action disabled={!rootLayerId} onClick={importLayer}>\n        <HelpButton\n          descriptionTitle={intl.formatMessage({ defaultMessage: \"Add Layer.\" })}\n          balloonDirection=\"bottom\">\n          <StyledIcon icon=\"layerAdd\" size={16} />\n        </HelpButton>\n      </Action>\n    </ActionWrapper>\n  );\n};\n\nconst ActionWrapper = styled.div`\n  flex: 1;\n`;\n\nconst Action = styled.span<{ disabled?: boolean }>`\n  float: right;\n  margin-right: 10px;\n  user-select: none;\n`;\n\nconst StyledIcon = styled(Icon)<{ disabled?: boolean }>`\n  padding: 3px;\n  cursor: ${({ disabled }) => (disabled ? \"default\" : \"pointer\")};\n  color: ${({ disabled, theme }) => (disabled ? theme.main.weak : theme.main.text)};\n  border-radius: 5px;\n  &:hover {\n    background-color: ${({ disabled, theme }) => (disabled ? null : theme.main.bg)};\n  }\n`;\n\nexport default LayerActions;\n","import useFileInput from \"use-file-input\";\n\nexport type Format = \"kml\" | \"czml\" | \"geojson\" | \"shape\" | \"reearth\";\n\nexport default ({ onLayerImport }: { onLayerImport?: (file: File, format: Format) => void }) => {\n  const importLayer = useFileInput(\n    (files: FileList) => {\n      const file = files[0];\n      if (!file) return;\n\n      const extension = file.name.slice(file.name.lastIndexOf(\".\") + 1);\n      const format: Format | undefined = [\"kml\", \"czml\", \"geojson\"].includes(extension)\n        ? (extension as Format)\n        : extension == \"json\"\n        ? \"reearth\"\n        : [\"zip\", \"shp\"].includes(extension)\n        ? \"shape\"\n        : undefined;\n      if (!format) return;\n\n      onLayerImport?.(file, format);\n    },\n    { accept: \".kml,.czml,.geojson,.shp,.zip,.json\" },\n  );\n\n  return {\n    importLayer,\n  };\n};\n","import React, { forwardRef, useState, useEffect, useRef, useCallback } from \"react\";\nimport { useClickAway } from \"react-use\";\nimport { styled, useTheme } from \"@reearth/theme\";\nimport useDoubleClick from \"@reearth/util/use-double-click\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport HelpButton from \"@reearth/components/atoms/HelpButton\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport fonts from \"@reearth/theme/fonts\";\nimport LayerActions from \"./LayerActions\";\n\nexport type Format = \"kml\" | \"czml\" | \"geojson\" | \"shape\" | \"reearth\";\n\nexport type DropType = \"top\" | \"bottom\" | \"bottomOfChildren\";\n\nexport type Layer<T = unknown> = {\n  title?: string;\n  description?: string;\n  icon?: string;\n  type?: string;\n  group?: boolean;\n  childrenCount?: number;\n  linked?: boolean;\n  deactivated?: boolean;\n  visible?: boolean;\n  renamable?: boolean;\n  visibilityChangeable?: boolean;\n  showChildrenCount?: boolean;\n  showLayerActions?: boolean;\n  underlined?: boolean;\n} & T;\n\nexport type Props = {\n  className?: string;\n  rootLayerId?: string;\n  selectedLayerId?: string;\n  layer: Layer;\n  disabled?: boolean;\n  expanded?: boolean;\n  selected?: boolean;\n  childSelected?: boolean;\n  dropType?: DropType;\n  allSiblingsDoesNotHaveChildren?: boolean;\n  onClick: () => void;\n  onExpand?: () => void;\n  onVisibilityChange?: (isVisible: boolean) => void;\n  onRename?: (name: string) => void;\n  onRemove?: (selectedLayerId: string) => void;\n  onGroupCreate?: () => void;\n  onImport?: (file: File, format: Format) => void;\n};\n\nconst Layer: React.ForwardRefRenderFunction<HTMLDivElement, Props> = (\n  {\n    className,\n    rootLayerId,\n    selectedLayerId,\n    layer: {\n      title,\n      description,\n      icon,\n      type,\n      group,\n      linked,\n      childrenCount,\n      visible,\n      renamable,\n      visibilityChangeable,\n      deactivated,\n      showChildrenCount,\n      showLayerActions,\n      underlined,\n    },\n    expanded,\n    selected,\n    childSelected,\n    dropType,\n    allSiblingsDoesNotHaveChildren,\n    onVisibilityChange,\n    onClick,\n    onExpand,\n    onRename,\n    onRemove,\n    onGroupCreate,\n    onImport,\n  },\n  ref,\n) => {\n  const [editing, setEditing] = useState(false);\n  const [editingName, setEditingName] = useState(title || \"\");\n  const [isHover, toggleHover] = useState(false);\n  const editingNameRef = useRef(editingName);\n  const [showHelp, setShowHelp] = useState(false);\n  const mouseEnterSec = 1100;\n\n  const handleVisibilityChange = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (!visibilityChangeable) return;\n      event.stopPropagation();\n      onVisibilityChange?.(!visible);\n    },\n    [visible, onVisibilityChange, visibilityChangeable],\n  );\n\n  const startEditing = useCallback(() => {\n    if (!renamable) return;\n    setEditing(true);\n  }, [renamable]);\n  const finishEditing = useCallback(() => {\n    setEditing(false);\n  }, []);\n  const resetEditing = useCallback(() => {\n    editingNameRef.current = title || \"\";\n    setEditingName(title || \"\");\n  }, [title]);\n  const handleKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === \"Enter\") {\n        finishEditing();\n      } else if (e.key === \"Escape\") {\n        resetEditing();\n        finishEditing();\n      }\n    },\n    [resetEditing, finishEditing],\n  );\n  const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    editingNameRef.current = e.currentTarget.value;\n    setEditingName(e.currentTarget.value);\n  }, []);\n\n  useEffect(() => {\n    if (isHover) {\n      const timer = setTimeout(() => {\n        setShowHelp(true);\n      }, mouseEnterSec);\n      return () => clearTimeout(timer);\n    } else {\n      setShowHelp(false);\n      return;\n    }\n  }, [isHover]);\n\n  useEffect(() => {\n    resetEditing();\n  }, [resetEditing]);\n\n  useEffect(\n    () =>\n      editing\n        ? () => {\n            if (title !== editingNameRef.current) {\n              onRename?.(editingNameRef.current);\n            }\n            resetEditing();\n          }\n        : undefined,\n    [editing, title, onRename, resetEditing],\n  );\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  useClickAway(inputRef, finishEditing);\n\n  const [handleClick, handleDoubleClick] = useDoubleClick(onClick, startEditing);\n  const handleExpand = useCallback(\n    (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (!group) return;\n      e.stopPropagation();\n      onExpand?.();\n    },\n    [onExpand, group],\n  );\n\n  const theme = useTheme();\n\n  return (\n    <Wrapper\n      ref={ref}\n      className={className}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      dropType={dropType}\n      selected={selected}\n      childSelected={childSelected}\n      disabled={deactivated}\n      underlined={underlined}\n      type={type}\n      onMouseEnter={() => toggleHover(true)}\n      onMouseLeave={() => toggleHover(false)}\n      hover={isHover}>\n      <ArrowIconWrapper\n        allSiblingsDoesNotHaveChildren={allSiblingsDoesNotHaveChildren}\n        onClick={handleExpand}>\n        {group && <ArrowIcon open={expanded} icon=\"arrowToggle\" size={10} />}\n      </ArrowIconWrapper>\n      <LayerIconWrapper>\n        <LayerIcon\n          selected={selected}\n          disabled={deactivated}\n          type={type}\n          icon={icon ?? (group ? (linked ? \"dataset\" : \"folder\") : \"layerItem\")}\n          size={16}\n          color={\n            selected\n              ? theme.layers.selectedTextColor\n              : deactivated\n              ? theme.layers.disableTextColor\n              : theme.layers.textColor\n          }\n        />\n      </LayerIconWrapper>\n      {editing ? (\n        <Input\n          ref={inputRef}\n          type=\"text\"\n          value={editingName}\n          onClick={stopPropagation}\n          onBlur={finishEditing}\n          onKeyDown={handleKeyDown}\n          onChange={handleChange}\n        />\n      ) : (\n        <>\n          <LayerName\n            size=\"xs\"\n            selected={selected}\n            disabled={deactivated}\n            color={\n              selected\n                ? theme.layers.selectedTextColor\n                : deactivated\n                ? theme.layers.disableTextColor\n                : theme.layers.textColor\n            }>\n            {title}\n          </LayerName>\n          {group && typeof childrenCount === \"number\" && showChildrenCount && (\n            <LayerCount\n              size=\"xs\"\n              selected={selected}\n              color={\n                selected\n                  ? theme.layers.selectedTextColor\n                  : deactivated\n                  ? theme.layers.disableTextColor\n                  : theme.layers.textColor\n              }>\n              {childrenCount}\n            </LayerCount>\n          )}\n          {typeof visible === \"boolean\" && (\n            <Visibility\n              isVisible={!visible || isHover || selected}\n              onClick={handleVisibilityChange}>\n              <LayerIcon\n                icon={!visible ? \"hidden\" : \"visible\"}\n                size={16}\n                selected={selected}\n                disabled={deactivated}\n                type={type}\n              />\n            </Visibility>\n          )}\n          {showHelp && description && (\n            <HelpButton\n              balloonDirection=\"right\"\n              gap={16}\n              descriptionTitle={title}\n              description={description}>\n              <StyledIcon icon=\"question\" size={\"15px\"} />\n            </HelpButton>\n          )}\n          {showLayerActions && (\n            <LayerActionsWrapper>\n              <LayerActions\n                rootLayerId={rootLayerId}\n                selectedLayerId={selectedLayerId}\n                onLayerImport={onImport}\n                onLayerRemove={onRemove}\n                onLayerGroupCreate={onGroupCreate}></LayerActions>\n            </LayerActionsWrapper>\n          )}\n        </>\n      )}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div<{\n  selected?: boolean;\n  childSelected?: boolean;\n  dropType?: DropType;\n  hover?: boolean;\n  disabled?: boolean;\n  type?: string;\n  underlined?: boolean;\n}>`\n  user-select: none;\n  width: 100%;\n  height: 35px;\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  cursor: pointer;\n  color: ${({ selected, disabled, type, theme }) =>\n    type === \"widget\" && disabled !== undefined\n      ? disabled && !selected\n        ? theme.main.weak\n        : selected || !disabled\n        ? theme.main.strongText\n        : theme.main.text\n      : selected\n      ? theme.main.strongText\n      : theme.main.text};\n  box-sizing: border-box;\n  background-color: ${({ selected, theme, hover }) =>\n    selected ? theme.layers.selectedLayer : hover ? theme.main.bg : \"transparent\"};\n  border: 2px solid transparent;\n  border-color: ${({ dropType, selected, theme }) =>\n    dropType === \"bottomOfChildren\" || dropType === \"top\" || dropType === \"bottom\"\n      ? dropType === \"top\"\n        ? `${theme.main.danger} transparent transparent transparent`\n        : dropType === \"bottom\"\n        ? `transparent transparent ${theme.main.danger} transparent`\n        : theme.main.danger\n      : selected\n      ? theme.layers.selectedLayer\n      : \"transparent\"};\n  border-bottom-color: ${({ underlined, theme }) => underlined && theme.layers.bottomBorder};\n  font-size: ${fonts.sizes.xs}px;\n  border-right: ${({ childSelected, theme }) =>\n    childSelected ? `2px solid ${theme.main.select}` : undefined};\n`;\n\nconst ArrowIconWrapper = styled.div<{ allSiblingsDoesNotHaveChildren?: boolean }>`\n  flex: 0 0\n    ${({ allSiblingsDoesNotHaveChildren }) => (allSiblingsDoesNotHaveChildren ? \"2px\" : \"14px\")};\n  display: flex;\n  align-items: center;\n  align-self: stretch;\n  text-align: center;\n`;\n\nconst StyledIcon = styled(Icon)`\n  color: ${props => props.theme.main.strongText};\n`;\n\nconst ArrowIcon = styled(Icon)<{ open?: boolean }>`\n  transition: transform 0.15s ease;\n  transform: ${({ open }) => open && \"translateY(10%) rotate(90deg)\"};\n`;\n\nconst Input = styled.input`\n  border: none;\n  background: ${props => props.theme.properties.deepBg};\n  outline: none;\n  color: ${props => props.theme.leftMenu.text};\n  padding: 3px;\n  flex: auto;\n  overflow: hidden;\n`;\n\nconst LayerIconWrapper = styled.div`\n  flex: 0 0 26px;\n  text-align: center;\n`;\n\nconst LayerIcon = styled(Icon)<{ disabled?: boolean; selected?: boolean; type?: string }>`\n  margin: 0 5px;\n  flex: 0 0 auto;\n`;\n\nconst LayerName = styled(Text)<{ disabled?: boolean; selected?: boolean }>`\n  user-select: none;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  flex: auto;\n  overflow: hidden;\n`;\n\nconst LayerCount = styled(Text)<{ selected?: boolean }>`\n  margin-right: 10px;\n\n  &::before {\n    content: \"(\";\n  }\n\n  &::after {\n    content: \")\";\n  }\n`;\n\nconst Visibility = styled.div<{ isVisible?: boolean }>`\n  opacity: ${({ isVisible }) => (isVisible ? 1 : 0)};\n  align-self: stretch;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0 5px;\n`;\n\nconst LayerActionsWrapper = styled.div``;\n\nconst stopPropagation = <E extends any>(event: React.MouseEvent<E, MouseEvent>) =>\n  event.stopPropagation();\n\nexport default forwardRef(Layer);\n","import React, { forwardRef, PropsWithChildren, Ref, useCallback, useMemo } from \"react\";\n\nimport type { ItemProps, DropType } from \"@reearth/components/atoms/TreeView\";\nimport { styled } from \"@reearth/theme\";\nimport Layer, { Layer as LayerType } from \"./Layer\";\nimport { Format } from \"./LayerActions/hooks\";\n\nexport type Layer<T = unknown> = LayerType<T>;\n\nexport type Props<T = unknown> = ItemProps<Layer<T>> & {\n  className?: string;\n  rootLayerId?: string;\n  selectedLayerId?: string;\n  onVisibilityChange?: (isVisible: boolean) => void;\n  onRename?: (name: string) => void;\n  onRemove?: (selectedLayerId: string) => void;\n  onGroupCreate?: () => void;\n  onImport?: (file: File, format: Format) => void;\n};\n\nfunction LayerTreeViewItem<T = unknown>(\n  {\n    className,\n    rootLayerId,\n    selectedLayerId,\n    children,\n    shown,\n    item,\n    selected,\n    childSelected,\n    expanded,\n    dropType,\n    canDrop,\n    selectable,\n    siblings,\n    onSelect,\n    onExpand,\n    onVisibilityChange,\n    onRename,\n    onRemove,\n    onGroupCreate,\n    onImport,\n  }: PropsWithChildren<Props<T>>,\n  ref: Ref<HTMLDivElement>,\n) {\n  const handleClick = useCallback(() => {\n    if (!item.selectable) {\n      onExpand?.();\n    } else {\n      onSelect?.();\n    }\n  }, [item.selectable, onExpand, onSelect]);\n\n  const allSiblingsDoesNotHaveChildren = !!siblings?.every(s => !s.content.group);\n\n  return (\n    <Wrapper\n      className={className}\n      shown={shown}\n      selected={selected}\n      dropType={canDrop ? dropType : undefined}>\n      <Layer\n        ref={ref}\n        rootLayerId={rootLayerId}\n        selectedLayerId={selectedLayerId}\n        selected={selected}\n        expanded={expanded}\n        disabled={!selectable}\n        layer={item.content}\n        dropType={\n          canDrop && dropType !== \"topOfChildren\" && (dropType !== \"bottom\" || !expanded)\n            ? dropType\n            : undefined\n        }\n        allSiblingsDoesNotHaveChildren={allSiblingsDoesNotHaveChildren}\n        onClick={handleClick}\n        onExpand={onExpand}\n        onVisibilityChange={onVisibilityChange}\n        onRename={onRename}\n        onRemove={onRemove}\n        onGroupCreate={onGroupCreate}\n        onImport={onImport}\n        childSelected={childSelected}\n      />\n      {children && (\n        <Children expanded={expanded} dropType={canDrop ? dropType : undefined}>\n          {children}\n        </Children>\n      )}\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div<{ shown: boolean; selected?: boolean; dropType?: DropType }>`\n  display: ${({ shown }) => (shown ? \"block\" : \"none\")};\n`;\n\nconst Children = styled.div<{ dropType?: DropType; expanded?: boolean }>`\n  margin-left: 18px;\n  box-sizing: border-box;\n  border: 2px ${({ expanded }) => (expanded ? \"solid\" : \"none\")} transparent;\n  border-top-color: ${({ dropType, expanded, theme }) =>\n    dropType === \"topOfChildren\"\n      ? theme.main.danger\n      : dropType === \"bottom\" && expanded\n      ? `transparent transparent ${theme.main.danger} transparent`\n      : \"transparent\"};\n`;\n\nexport default forwardRef(LayerTreeViewItem);\n\n// forwardRef function does not support generic types,\n// so we have to generate a new component to use my own type as items.\nexport function useLayerTreeViewItem<T>({\n  rootLayerId,\n  selectedLayerId,\n  className,\n  onVisibilityChange,\n  onRename,\n  onRemove,\n  onGroupCreate,\n  onImport,\n}: {\n  rootLayerId?: string;\n  selectedLayerId?: string;\n  className?: string;\n  onVisibilityChange?: (props: Props<T>, isVisible: boolean) => void;\n  onRename?: (props: Props<T>, name: string) => void;\n  onRemove?: (selectedLayerId: string) => void;\n  onGroupCreate?: () => void;\n  onImport?: (file: File, format: Format) => void;\n} = {}) {\n  return useMemo(() => {\n    function InnerLayerTreeViewItem(props: Props<T>, ref: Ref<HTMLDivElement>) {\n      return LayerTreeViewItem<T>(\n        {\n          ...props,\n          rootLayerId,\n          selectedLayerId,\n          className,\n          onVisibilityChange: (isVisible: boolean) => onVisibilityChange?.(props, isVisible),\n          onRename: (name: string) => onRename?.(props, name),\n          onRemove: (selectedLayerId: string) => onRemove?.(selectedLayerId),\n          onImport: (file: File, format: Format) => onImport?.(file, format),\n          onGroupCreate: () => onGroupCreate?.(),\n        },\n        ref,\n      );\n    }\n    return forwardRef(InnerLayerTreeViewItem);\n  }, [\n    className,\n    onVisibilityChange,\n    onRename,\n    onRemove,\n    onGroupCreate,\n    onImport,\n    rootLayerId,\n    selectedLayerId,\n  ]);\n}\n","import { useDrag } from \"@reearth/util/use-dnd\";\n\nexport default (\n  onDrop?: (\n    layerId?: string,\n    index?: number,\n    location?: {\n      lat: number;\n      lng: number;\n      height: number;\n    },\n  ) => void,\n) => {\n  const { ref } = useDrag<\"primitive\">({ type: \"primitive\" }, false, async (item, dropper) => {\n    const layerId =\n      (dropper?.type !== \"earth\" && dropper?.type !== \"layer\") ||\n      (dropper?.type === \"earth\" && !dropper.position)\n        ? undefined\n        : dropper.layerId;\n    onDrop?.(\n      layerId,\n      dropper?.type === \"layer\" ? dropper.index : undefined,\n      dropper?.type === \"earth\" ? dropper.position : undefined,\n    );\n  });\n\n  return { ref };\n};\n","import React from \"react\";\n\nimport { styled } from \"@reearth/theme\";\nimport Icon from \"@reearth/components/atoms/Icon\";\n\nimport useHooks from \"./hooks\";\nimport HelpButton from \"@reearth/components/atoms/HelpButton\";\n\ninterface Props {\n  className?: string;\n  name: string;\n  description: string;\n  icon?: string;\n  onDrop?: (\n    layerId?: string,\n    index?: number,\n    location?: {\n      lat: number;\n      lng: number;\n      height: number;\n    },\n  ) => void;\n}\n\nconst PrimitiveCell: React.FC<Props> = ({ className, icon, name, description, onDrop }) => {\n  const { ref } = useHooks(onDrop);\n\n  return (\n    <HelpButton\n      descriptionTitle={name}\n      description={description}\n      balloonDirection=\"bottom\"\n      gap={15}>\n      <Wrapper ref={ref} className={className}>\n        <StyledIcon icon={icon} alt={name} size={20} />\n      </Wrapper>\n    </HelpButton>\n  );\n};\n\nconst Wrapper = styled.div`\n  height: 30px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 3px 30px;\n  border-radius: 3px;\n  user-select: none;\n`;\n\nconst StyledIcon = styled(Icon)`\n  padding: 8px;\n  width: 20px;\n  height: 20px;\n  border-radius: 3px;\n  cursor: pointer;\n  color: ${({ theme }) => theme.main.text};\n  &:hover {\n    background: ${({ theme }) => theme.main.lighterBg};\n    color: ${({ theme }) => theme.main.strongText};\n  }\n`;\n\nexport default PrimitiveCell;\n","import React from \"react\";\nimport { styled, css, useTheme } from \"@reearth/theme\";\nimport useHooks from \"./hooks\";\nimport { useIntl } from \"react-intl\";\n\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Button from \"@reearth/components/atoms/Button\";\nimport { Camera } from \"@reearth/util/value\";\nimport { FieldProps } from \"../types\";\nimport Text from \"@reearth/components/atoms/Text\";\n\nexport type Props = FieldProps<Camera> & {\n  onDelete?: () => void;\n  isCapturing?: boolean;\n  onIsCapturingChange?: (isCapturing: boolean) => void;\n  camera?: Camera;\n  onCameraChange?: (camera: Partial<Camera>) => void;\n  onlyPose?: boolean;\n};\n\nconst CameraField: React.FC<Props> = ({\n  value,\n  onChange,\n  onDelete,\n  disabled,\n  isCapturing,\n  onIsCapturingChange,\n  camera: cameraState,\n  onCameraChange,\n  onlyPose,\n}) => {\n  const intl = useIntl();\n\n  const {\n    wrapperRef,\n    cameraWrapperRef,\n    popper,\n    camera,\n    open,\n    openPopup,\n    startCapture,\n    handleLatChange,\n    handleLngChange,\n    handleAltitudeChange,\n    handleHeadingChange,\n    handlePitchChange,\n    handleRollChange,\n    handleClickCancelButton,\n    handleClickSubmitButton,\n    jump,\n  } = useHooks({\n    cameraValue: value,\n    onSubmit: onChange,\n    isCapturing,\n    onIsCapturingChange,\n    cameraState,\n    onCameraChange,\n    disabled,\n    onlyPose,\n  });\n\n  const lat = camera?.lat && Math.round(camera?.lat * 1000) / 1000;\n  const lng = camera?.lng && Math.round(camera?.lng * 1000) / 1000;\n  const height = camera?.height && Math.round(camera?.height);\n  const heading = camera?.heading && Math.round(camera?.heading * 1000) / 1000;\n  const pitch = camera?.pitch && Math.round(camera?.pitch * 1000) / 1000;\n  const roll = camera?.roll && Math.round(camera?.roll * 1000) / 1000;\n  const theme = useTheme();\n  return (\n    <Wrapper ref={wrapperRef} onClick={value ? undefined : startCapture} data-camera-popup>\n      <CameraWrapper ref={cameraWrapperRef}>\n        <StyledText\n          size=\"xs\"\n          color={value ? theme.properties.contentsFloatText : theme.properties.contentsText}\n          onClick={value ? openPopup : undefined}>\n          {value\n            ? onlyPose\n              ? intl.formatMessage({ defaultMessage: \"Pose Set\" })\n              : intl.formatMessage({ defaultMessage: \"Position Set\" })\n            : intl.formatMessage({ defaultMessage: \"Not Set\" })}\n        </StyledText>\n        {value ? (\n          <StyledIcon icon=\"bin\" size={16} onClick={onDelete} />\n        ) : (\n          <StyledIcon icon=\"capture\" size={16} onClick={value ? openPopup : undefined} />\n        )}\n      </CameraWrapper>\n      <Popup ref={popper.ref} open={open} style={popper.styles} {...popper.attributes}>\n        {!onlyPose && (\n          <FormGroup>\n            <FormIcon icon=\"marker\" size={16} />\n            <FormFieldGroup>\n              <FormFieldRow>\n                <FormWrapper>\n                  <Input type=\"number\" value={lat} onChange={handleLatChange} />\n                  <FloatText size=\"2xs\" color={theme.properties.contentsFloatText}>\n                    {intl.formatMessage({ defaultMessage: \"Latitude\" })}\n                  </FloatText>\n                </FormWrapper>\n                <FormWrapper>\n                  <Input type=\"number\" value={lng} onChange={handleLngChange} />\n                  <FloatText size=\"2xs\" color={theme.properties.contentsFloatText}>\n                    {intl.formatMessage({ defaultMessage: \"Longtitude\" })}\n                  </FloatText>\n                </FormWrapper>\n                <FormWrapper>\n                  <Input\n                    type=\"number\"\n                    value={height}\n                    onChange={handleAltitudeChange}\n                    step={10 ** 6}\n                  />\n                  <FloatText size=\"2xs\" color={theme.properties.contentsFloatText}>\n                    {intl.formatMessage({ defaultMessage: \"Altitude\" })}\n                  </FloatText>\n                </FormWrapper>\n              </FormFieldRow>\n            </FormFieldGroup>\n          </FormGroup>\n        )}\n        <FormGroup>\n          <FormIcon icon=\"camera\" size={16} />\n          <FormFieldGroup>\n            <FormFieldRow>\n              <FormWrapper>\n                <Input type=\"number\" value={heading} onChange={handleHeadingChange} step=\"0.01\" />\n                <FloatText size=\"2xs\" color={theme.properties.contentsFloatText}>\n                  {intl.formatMessage({ defaultMessage: \"Heading\" })}\n                </FloatText>\n              </FormWrapper>\n              <FormWrapper>\n                <Input type=\"number\" value={pitch} onChange={handlePitchChange} step=\"0.01\" />\n                <FloatText size=\"2xs\" color={theme.properties.contentsFloatText}>\n                  {intl.formatMessage({ defaultMessage: \"Pitch\" })}\n                </FloatText>\n              </FormWrapper>\n              <FormWrapper>\n                <Input type=\"number\" value={roll} onChange={handleRollChange} step=\"0.01\" />\n                <FloatText size=\"2xs\" color={theme.properties.contentsFloatText}>\n                  {intl.formatMessage({ defaultMessage: \"Roll\" })}\n                </FloatText>\n              </FormWrapper>\n            </FormFieldRow>\n          </FormFieldGroup>\n        </FormGroup>\n        <FormGroup>\n          {value && !isCapturing && (\n            <FormButtonGroup>\n              <Button\n                buttonType=\"secondary\"\n                text={\n                  onlyPose\n                    ? intl.formatMessage({ defaultMessage: \"Check Pose\" })\n                    : intl.formatMessage({ defaultMessage: \"Jump\" })\n                }\n                onClick={jump}\n              />\n            </FormButtonGroup>\n          )}\n        </FormGroup>\n        <FormGroup>\n          <FormButtonGroup>\n            <Button\n              buttonType=\"secondary\"\n              text={intl.formatMessage({ defaultMessage: \"Cancel\" })}\n              onClick={handleClickCancelButton}\n            />\n            {!isCapturing && (\n              <Button\n                buttonType=\"primary\"\n                text={\n                  value && onlyPose\n                    ? intl.formatMessage({ defaultMessage: \"Edit Pose\" })\n                    : intl.formatMessage({ defaultMessage: \"Edit Position\" })\n                }\n                onClick={startCapture}\n              />\n            )}\n            {isCapturing && (\n              <Button\n                buttonType=\"primary\"\n                text={intl.formatMessage({ defaultMessage: \"Capture\" })}\n                onClick={handleClickSubmitButton}\n              />\n            )}\n          </FormButtonGroup>\n        </FormGroup>\n      </Popup>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  width: 100%;\n  border: solid 1px ${props => props.theme.properties.border};\n`;\n\nconst CameraWrapper = styled.div`\n  border-radius: 3px;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  box-sizing: border-box;\n  cursor: pointer;\n  user-select: none;\n`;\n\nconst StyledIcon = styled(Icon)`\n  color: ${props => props.theme.properties.contentsText};\n  margin-right: 5px;\n`;\n\nconst StyledText = styled(Text)`\n  flex: 1;\n  padding: 8px;\n  margin: auto;\n`;\n\nconst Popup = styled.ul<{ open: boolean }>`\n  ${({ open }) =>\n    !open &&\n    css`\n      visibility: hidden;\n      pointer-events: none;\n    `}\n  display: flex;\n  flex-direction: column;\n  width: 286px;\n  margin: 0;\n  border: solid 1px ${props => props.theme.properties.border};\n  border-radius: 5px;\n  background: ${props => props.theme.properties.bg};\n  box-sizing: border-box;\n  padding: 10px 16px;\n  z-index: ${props => props.theme.zIndexes.propertyFieldPopup};\n`;\n\nconst FormGroup = styled.div`\n  display: flex;\n`;\n\nconst FormIcon = styled(Icon)`\n  margin: 10px 10px 10px 0;\n  color: ${props => props.theme.properties.contentsText};\n`;\n\nconst FormButtonGroup = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  flex: 1;\n`;\n\nconst FormFieldGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst FormFieldRow = styled.div`\n  display: flex;\n  margin: 5px;\n`;\n\nconst FormWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  flex: 1;\n  flex-direction: column;\n  box-sizing: border-box;\n\n  &:not(:last-child) {\n    margin-right: 5px;\n  }\n`;\n\nconst Input = styled.input`\n  font-size: 11px;\n  display: block;\n  border: solid 1px ${props => props.theme.properties.border};\n  border-radius: 3px;\n  background: ${({ theme }) => theme.main.deepBg};\n  outline: none;\n  color: ${({ theme }) => theme.properties.contentsText};\n  width: 100%;\n  padding: 5px;\n  box-sizing: border-box;\n`;\n\nconst FloatText = styled(Text)`\n  user-select: none;\n`;\n\nexport default CameraField;\n","import { useRef, useState, useCallback, useEffect } from \"react\";\nimport { usePopper } from \"react-popper\";\nimport { useClickAway } from \"react-use\";\nimport { Camera } from \"@reearth/util/value\";\n\ntype Params = {\n  cameraValue: Camera | undefined;\n  onSubmit?: (value: Camera) => void;\n  isCapturing?: boolean;\n  onIsCapturingChange?: (isCapturing: boolean) => void;\n  cameraState?: Camera;\n  onCameraChange?: (camera: Partial<Camera>) => void;\n  disabled?: boolean;\n  onlyPose?: boolean;\n};\n\nexport default ({\n  cameraValue,\n  onSubmit,\n  isCapturing,\n  onIsCapturingChange,\n  cameraState,\n  onCameraChange,\n  disabled,\n  onlyPose,\n}: Params) => {\n  const camera = isCapturing ? cameraState : cameraValue;\n  const [open, setOpen] = useState(false);\n\n  const openPopup = useCallback(() => setOpen(true), [setOpen]);\n  const closePopup = useCallback(() => setOpen(false), [setOpen]);\n\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const cameraWrapperRef = useRef<HTMLDivElement>(null);\n  const popperRef = useRef<HTMLUListElement>(null);\n  const { styles, attributes } = usePopper(cameraWrapperRef.current, popperRef.current, {\n    placement: \"bottom-start\",\n    modifiers: [\n      {\n        name: \"offset\",\n        options: {\n          offset: [0, 8],\n        },\n      },\n      {\n        name: \"eventListeners\",\n        enabled: !open,\n        options: {\n          scroll: false,\n          resize: false,\n        },\n      },\n    ],\n  });\n\n  useEffect(() => {\n    if (!isCapturing) closePopup();\n  }, [isCapturing, openPopup, closePopup]);\n\n  const startCapture = useCallback(() => {\n    if (disabled) return;\n    openPopup();\n    onIsCapturingChange?.(true);\n  }, [disabled, onIsCapturingChange, openPopup]);\n\n  const finishCapture = useCallback(() => {\n    closePopup();\n    onIsCapturingChange?.(false);\n  }, [closePopup, onIsCapturingChange]);\n\n  const updateCamera = useCallback(\n    (value: Partial<Camera>) => !disabled && value && onCameraChange?.(value),\n    [disabled, onCameraChange],\n  );\n\n  const cancelCapture = useCallback(() => {\n    finishCapture();\n  }, [finishCapture]);\n\n  const submitCapture = useCallback(() => {\n    if (disabled) return;\n    finishCapture();\n    if (cameraState) {\n      onSubmit?.(cameraState);\n      updateCamera(cameraState);\n    }\n  }, [disabled, finishCapture, cameraState, onSubmit, updateCamera]);\n\n  const handleLatChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => updateCamera({ lat: Number(e.target.value) }),\n    [updateCamera],\n  );\n\n  const handleLngChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => updateCamera({ lng: Number(e.target.value) }),\n    [updateCamera],\n  );\n\n  const updateAltitude = useCallback(\n    (fov: number) => updateCamera({ height: Math.max(500, Math.min(fov, 10 ** 10)) }),\n    [updateCamera],\n  );\n\n  const handleAltitudeChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => updateAltitude(Number(e.target.value)),\n    [updateAltitude],\n  );\n\n  const handleHeadingChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => updateCamera({ heading: Number(e.target.value) }),\n    [updateCamera],\n  );\n\n  const handlePitchChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => updateCamera({ pitch: Number(e.target.value) }),\n    [updateCamera],\n  );\n\n  const handleRollChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => updateCamera({ roll: Number(e.target.value) }),\n    [updateCamera],\n  );\n\n  const handleClickCancelButton = useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      e.stopPropagation();\n      cancelCapture();\n    },\n    [cancelCapture],\n  );\n\n  const handleClickSubmitButton = useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      e.stopPropagation();\n      submitCapture();\n    },\n    [submitCapture],\n  );\n\n  const isAwayTarget = useCallback((e: Event) => {\n    const target = e.target as HTMLElement | null;\n    const popups = Array.from(document.querySelectorAll(\"[data-camera-popup]\"));\n    return !popups.some(element => element.contains(target));\n  }, []);\n\n  useClickAway(wrapperRef, e => {\n    if (isAwayTarget(e) && isCapturing) {\n      cancelCapture();\n      closePopup();\n    }\n  });\n\n  const jump = useCallback(() => {\n    if (!cameraValue) return;\n    onCameraChange?.(\n      onlyPose\n        ? {\n            height: cameraValue.height,\n            heading: cameraValue.heading,\n            pitch: cameraValue.pitch,\n            roll: cameraValue.roll,\n            fov: cameraValue.fov,\n          }\n        : cameraValue,\n    );\n  }, [cameraValue, onCameraChange, onlyPose]);\n\n  return {\n    wrapperRef,\n    cameraWrapperRef,\n    popper: {\n      ref: popperRef,\n      styles: styles.popper,\n      attributes,\n    },\n    camera,\n    open,\n    openPopup,\n    startCapture,\n    updateCamera,\n    handleLatChange,\n    handleLngChange,\n    handleAltitudeChange,\n    handleHeadingChange,\n    handlePitchChange,\n    handleRollChange,\n    handleClickCancelButton,\n    handleClickSubmitButton,\n    jump,\n  };\n};\n","import api from \"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../../../node_modules/@storybook/builder-webpack5/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[7].use[1]!./styles.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport Button from \"@reearth/components/atoms/Button\";\nimport { styled, css, useTheme } from \"@reearth/theme\";\nimport \"./styles.css\";\n\nimport tinycolor, { ColorInput } from \"tinycolor2\";\nimport { useIntl } from \"react-intl\";\nimport { usePopper } from \"react-popper\";\nimport { RgbaColorPicker } from \"react-colorful\";\nimport \"react-colorful/dist/index.css\";\nimport Text from \"@reearth/components/atoms/Text\";\n\nimport { FieldProps } from \"../types\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\n\nexport type Props = FieldProps<string>;\n\nexport type RGBA = {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n};\n\nconst getHexString = (value?: ColorInput) => {\n  if (!value) return undefined;\n  const color = tinycolor(value);\n  return color.getAlpha() === 1 ? color.toHexString() : color.toHex8String();\n};\n\nconst ColorField: React.FC<Props> = ({ value, onChange, overridden, linked }) => {\n  const intl = useIntl();\n  const [colorState, setColor] = useState<string | null>(null);\n  const [rgba, setRgba] = useState<RGBA>(tinycolor().toRgb());\n  const [open, setOpen] = useState(false);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const pickerRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (value) {\n      setColor(value);\n      setRgba(tinycolor(value).toRgb());\n    } else {\n      setColor(null);\n    }\n  }, [value]);\n\n  useEffect(() => {\n    if (colorState == null) return;\n    const color = getHexString(rgba);\n    if (!color) return;\n    if (color != colorState) {\n      setColor(color);\n    }\n  }, [rgba]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const { styles, attributes } = usePopper(wrapperRef.current, pickerRef.current, {\n    placement: \"bottom-start\",\n    modifiers: [\n      {\n        name: \"offset\",\n        options: {\n          offset: [0, 8],\n        },\n      },\n      {\n        name: \"eventListeners\",\n        enabled: !open,\n        options: {\n          scroll: false,\n          resize: false,\n        },\n      },\n    ],\n  });\n\n  const handleChange = useCallback(newColor => {\n    const color = getHexString(newColor);\n    if (!color) return;\n    setColor(color);\n    setRgba(newColor);\n  }, []);\n\n  const handleRgbaInput = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      e.preventDefault();\n\n      if (e.target.name === \"a\") {\n        setRgba({\n          ...rgba,\n          [e.target.name]: Number(e.target.value) / 100,\n        });\n      } else {\n        setRgba({\n          ...rgba,\n          [e.target.name]: e.target.value ? Number(e.target.value) : undefined,\n        });\n      }\n    },\n    [rgba],\n  );\n\n  const handleHexInput = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    setColor(e.target.value);\n  }, []);\n\n  const handleClick = useCallback(() => setOpen(!open), [open]);\n\n  const handleClose = useCallback(() => {\n    if (value) {\n      setColor(value);\n      setRgba(tinycolor(value).toRgb());\n    } else {\n      setColor(null);\n      setRgba(tinycolor(colorState == null ? undefined : colorState).toRgb());\n    }\n    setOpen(false);\n  }, [value, colorState]);\n\n  const handleSave = useCallback(() => {\n    if (!onChange) return;\n    if (colorState != value) {\n      onChange(colorState);\n    }\n    setOpen(false);\n  }, [colorState, onChange, value]);\n\n  const handleHexSave = useCallback(() => {\n    const hexPattern = /^#?([a-fA-F0-9]{3,4}|[a-fA-F0-9]{6}|[a-fA-F0-9]{8})$/;\n    if (colorState && hexPattern.test(colorState)) {\n      handleSave();\n    } else {\n      value && setColor(value);\n    }\n  }, [colorState, handleSave, value]);\n\n  const handleKeyPress = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === \"Enter\") {\n        handleHexSave();\n      }\n    },\n    [handleHexSave],\n  );\n\n  useEffect(() => {\n    const handleClickOutside = (e: MouseEvent | TouchEvent) => {\n      if (open && wrapperRef.current && !wrapperRef.current.contains(e.target as Node)) {\n        if (colorState != value && !open) {\n          handleSave();\n        }\n        handleClose();\n        setOpen(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    document.addEventListener(\"touchstart\", handleClickOutside);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n      document.removeEventListener(\"touchstart\", handleClickOutside);\n    };\n  }, [handleClose]); // eslint-disable-line react-hooks/exhaustive-deps\n  const theme = useTheme();\n\n  return (\n    <Wrapper ref={wrapperRef}>\n      <InputWrapper>\n        <Layers onClick={handleClick}>\n          <CheckedPattern />\n          <Swatch c={colorState || \"transparent\"} />\n        </Layers>\n        <Input\n          value={colorState || \"\"}\n          placeholder={intl.formatMessage({ defaultMessage: \"Not set\" })}\n          onChange={handleHexInput}\n          onKeyPress={handleKeyPress}\n          onBlur={handleHexSave}\n          overridden={overridden}\n          linked={linked}\n        />\n      </InputWrapper>\n      <PickerWrapper ref={pickerRef} open={open} style={styles.popper} {...attributes.popper}>\n        <RgbaColorPicker className=\"colorPicker\" color={rgba} onChange={handleChange} />\n        <RgbaInputWrapper>\n          <Field>\n            <Input\n              name=\"r\"\n              type=\"number\"\n              value={rgba.r}\n              min={0}\n              max={255}\n              onChange={handleRgbaInput}\n              overridden={overridden}\n              linked={linked}\n            />\n            <PickerText size=\"2xs\" color={theme.properties.contentsFloatText}>\n              Red\n            </PickerText>\n          </Field>\n          <Field>\n            <Input\n              name=\"g\"\n              type=\"number\"\n              value={rgba.g}\n              min={0}\n              max={255}\n              onChange={handleRgbaInput}\n              overridden={overridden}\n              linked={linked}\n            />\n            <PickerText size=\"2xs\" color={theme.properties.contentsFloatText}>\n              Green\n            </PickerText>\n          </Field>\n          <Field>\n            <Input\n              name=\"b\"\n              type=\"number\"\n              value={rgba.b}\n              min={0}\n              max={255}\n              onChange={handleRgbaInput}\n              overridden={overridden}\n              linked={linked}\n            />\n            <PickerText size=\"2xs\" color={theme.properties.contentsFloatText}>\n              Blue\n            </PickerText>\n          </Field>\n          <Field>\n            <Input\n              name=\"a\"\n              type=\"number\"\n              value={rgba.a ? Math.round(rgba.a * 100) : undefined}\n              onChange={handleRgbaInput}\n              overridden={overridden}\n              linked={linked}\n            />\n            <PickerText size=\"2xs\" color={theme.properties.contentsFloatText}>\n              Alpha\n            </PickerText>\n          </Field>\n        </RgbaInputWrapper>\n        <FormButtonGroup>\n          <Button\n            buttonType=\"secondary\"\n            text={intl.formatMessage({ defaultMessage: \"Cancel\" })}\n            onClick={handleClose}\n          />\n          <Button\n            buttonType=\"primary\"\n            text={intl.formatMessage({ defaultMessage: \"Save\" })}\n            onClick={handleSave}\n          />\n        </FormButtonGroup>\n      </PickerWrapper>\n    </Wrapper>\n  );\n};\n\nexport default ColorField;\n\nconst Wrapper = styled.div`\n  text-align: center;\n  width: 100%;\n  cursor: pointer;\n`;\n\nconst InputWrapper = styled.div`\n  display: flex;\n  background: ${props => props.theme.properties.bg};\n`;\n\nconst Layers = styled.div`\n  position: relative;\n  min-width: 28px;\n  min-height: 28px;\n  border-radius: 2px;\n`;\n\nconst layerStyle = css`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\n\nconst check = (color: string) => ` \nlinear-gradient(\n  45deg, \n  ${color} 25%, \n  transparent 25%, \n  transparent 75%, \n  ${color} 25%, \n  ${color} \n) \n`;\n\nconst CheckedPattern = styled.div`\n  background-color: ${({ theme }) => theme.main.border};\n  background-image: ${({ theme }) => check(theme.toggleButton.bg)},\n    ${({ theme }) => check(theme.toggleButton.bg)};\n  background-position: 0 0, 6px 6px;\n  background-size: 12px 12px;\n  ${layerStyle};\n`;\n\nconst Swatch = styled.div<{ c?: string }>`\n  background: ${({ c }) => c || \"transparent\"};\n  ${layerStyle};\n`;\n\nconst PickerWrapper = styled.div<{ open: boolean }>`\n  ${({ open }) =>\n    !open &&\n    css`\n      visibility: hidden;\n      pointer-events: none;\n    `}\n  width: 286px;\n  cursor: default;\n  padding: 0;\n  box-sizing: border-box;\n  border: solid 1px ${props => props.theme.properties.border};\n  border-radius: 5px;\n  background: ${props => props.theme.properties.bg};\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);\n  z-index: ${props => props.theme.zIndexes.propertyFieldPopup};\n`;\n\nconst FormButtonGroup = styled.div`\n  margin-right: 5px;\n  display: flex;\n  justify-content: flex-end;\n  flex: 1;\n`;\n\nconst Field = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-left: 5px;\n  flex: 1;\n`;\n\nconst Input = styled.input<{ type?: string; overridden?: boolean; linked?: boolean }>`\n  width: 100%;\n  height: 30px;\n  padding: 6px ${metricsSizes[\"s\"]}px;\n  background: ${props => props.theme.properties.bg};\n  box-sizing: border-box;\n  color: ${({ linked, overridden, theme }) =>\n    overridden ? theme.main.warning : linked ? theme.main.link : theme.properties.contentsText};\n  outline: none;\n  border: 1px solid ${({ theme }) => theme.properties.border};\n  &:focus {\n    border-color: ${({ theme }) => theme.properties.focusBorder};\n  }\n  ::placeholder {\n    color: ${({ theme }) => theme.properties.text};\n  }\n  &::-webkit-inner-spin-button,\n  &::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n  }\n  &[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n`;\n\nconst PickerText = styled(Text)`\n  user-select: none;\n  overflow: hidden;\n`;\n\nconst RgbaInputWrapper = styled.div`\n  display: flex;\n  width: 256px;\n  margin: 0 auto;\n`;\n","import React, { useCallback, useMemo, useState } from \"react\";\n\nimport { styled } from \"@reearth/theme\";\nimport deepFind from \"@reearth/util/deepFind\";\nimport Button from \"@reearth/components/atoms/Button\";\nimport LayerSelectionModal, {\n  Layer as LayerType,\n} from \"@reearth/components/molecules/EarthEditor/LayerSelectionModal\";\nimport { FieldProps } from \"../types\";\n\nexport type Layer = LayerType;\n\nexport type Props = FieldProps<string> & {\n  className?: string;\n  layers?: Layer[];\n};\n\nconst LayerField: React.FC<Props> = ({\n  className,\n  value,\n  onChange,\n  disabled,\n  overridden,\n  linked,\n  layers,\n}) => {\n  const [modalActive, setModalActive] = useState(false);\n  const handleOpen = useCallback(() => setModalActive(true), []);\n  const handleClose = useCallback(() => setModalActive(false), []);\n  const handleChange = useCallback(\n    (v: string) => {\n      setModalActive(false);\n      onChange?.(v);\n    },\n    [onChange],\n  );\n  const layerTitle = useMemo(\n    () =>\n      deepFind(\n        layers,\n        l => l.id === value,\n        l => l.children,\n      )[0]?.title,\n    [layers, value],\n  );\n\n  return (\n    <Wrapper className={className}>\n      <Title selected={!!(layerTitle || value)} linked={linked} overridden={overridden}>\n        {layerTitle || value || \"Not selected\"}\n      </Title>\n      <Button disabled={disabled} onClick={handleOpen}>\n        Select\n      </Button>\n      <LayerSelectionModal\n        active={modalActive}\n        layers={layers}\n        selected={value}\n        onSelect={handleChange}\n        onClose={handleClose}\n      />\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled.div<{ selected?: boolean; linked?: boolean; overridden?: boolean }>`\n  flex: auto;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  overflow-wrap: break-word;\n  padding-right: 10px;\n  color: ${({ selected, overridden, linked, theme }) =>\n    selected\n      ? overridden\n        ? theme.main.danger\n        : linked\n        ? theme.main.link\n        : theme.main.text\n      : theme.main.paleBg};\n`;\n\nexport default LayerField;\n","import React from \"react\";\nimport { styled } from \"@reearth/theme\";\nimport { useIntl } from \"react-intl\";\n\nimport { FieldProps } from \"../types\";\nimport NumberField from \"../NumberField\";\n\nexport type Location = {\n  lat: number;\n  lng: number;\n  height?: number;\n};\n\nexport type Props = FieldProps<Location> & {\n  className?: string;\n  isAltitudeEnabled?: boolean;\n};\n\nexport const LngLatMinMax = {\n  lngMin: -180,\n  lngMax: 180,\n  latMin: -90,\n  latMax: 90,\n};\n\nconst LocationField: React.FC<Props> = ({\n  className,\n  value,\n  onChange,\n  isAltitudeEnabled,\n  linked,\n  overridden,\n  disabled,\n}) => {\n  const intl = useIntl();\n\n  return (\n    <Wrapper className={className}>\n      <NumberField\n        name={intl.formatMessage({ defaultMessage: \"Latitude\" })}\n        value={value?.lat}\n        onChange={v =>\n          onChange && v !== null && !isNaN(v) && onChange({ lat: v, lng: value?.lng ?? 0 })\n        }\n        linked={linked}\n        overridden={overridden}\n        disabled={disabled}\n        min={LngLatMinMax[\"latMin\"]}\n        max={LngLatMinMax[\"latMax\"]}\n      />\n      <NumberField\n        name={intl.formatMessage({ defaultMessage: \"Longitude\" })}\n        value={value?.lng}\n        onChange={v =>\n          onChange && v !== null && !isNaN(v) && onChange({ lat: value?.lat ?? 0, lng: v })\n        }\n        linked={linked}\n        overridden={overridden}\n        disabled={disabled}\n        min={LngLatMinMax[\"lngMin\"]}\n        max={LngLatMinMax[\"lngMax\"]}\n      />\n      {isAltitudeEnabled && (\n        <NumberField\n          name={intl.formatMessage({ defaultMessage: \"Altitude\" })}\n          value={value?.height}\n          linked={linked}\n          overridden={overridden}\n          disabled={disabled}\n        />\n      )}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  width: 100%;\n\n  > * {\n    margin-right: 10px;\n\n    :last-child {\n      margin-right: 0;\n    }\n  }\n`;\n\nexport default LocationField;\n","import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { styled, metrics } from \"@reearth/theme\";\n\nimport Text from \"@reearth/components/atoms/Text\";\nimport Flex from \"@reearth/components/atoms/Flex\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\nimport { FieldProps } from \"../types\";\n\nexport type Props = FieldProps<number> & {\n  suffix?: string;\n  range?: boolean;\n  min?: number;\n  max?: number;\n};\n\nconst NumberField: React.FC<Props> = ({\n  value,\n  name,\n  suffix,\n  linked,\n  overridden,\n  disabled,\n  onChange,\n  // range,\n  min,\n  max,\n}) => {\n  const [innerValue, setInnerValue] = useState(typeof value === \"number\" ? value + \"\" : \"\");\n  const isEditing = useRef(false);\n  const isDirty = useRef(false);\n\n  useEffect(() => {\n    isDirty.current = false;\n    setInnerValue(typeof value === \"number\" ? value + \"\" : \"\");\n  }, [value]);\n\n  const callChange = useCallback(\n    (newValue: string) => {\n      if (!onChange || !isEditing.current || !isDirty.current) return;\n      if (newValue === \"\") {\n        onChange(null);\n        isDirty.current = false;\n      } else {\n        const floatValue = parseFloat(newValue);\n        if (\n          (typeof max === \"number\" && isFinite(max) && floatValue > max) ||\n          (typeof min === \"number\" && isFinite(min) && floatValue < min)\n        ) {\n          setInnerValue(value || value === 0 ? value + \"\" : \"\");\n          isDirty.current = false;\n          return;\n        }\n        if (!isNaN(floatValue)) {\n          onChange(floatValue);\n          isDirty.current = false;\n        }\n      }\n    },\n    [onChange, min, max, value],\n  );\n\n  const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setInnerValue(e.currentTarget.value);\n    isDirty.current = isEditing.current;\n  }, []);\n\n  const handleKeyPress = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === \"Enter\") {\n        callChange(e.currentTarget.value);\n      }\n    },\n    [callChange],\n  );\n\n  const handleFocus = useCallback(() => {\n    isEditing.current = true;\n  }, []);\n\n  const handleBlur = useCallback(\n    (e: React.SyntheticEvent<HTMLInputElement>) => {\n      callChange(e.currentTarget.value);\n      isEditing.current = false;\n    },\n    [callChange],\n  );\n\n  return (\n    <Wrapper>\n      <FormWrapper align=\"center\" linked={linked} overridden={overridden} inactive={!!disabled}>\n        <StyledInput\n          type=\"number\"\n          value={innerValue ?? \"\"}\n          disabled={disabled}\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          min={min}\n          max={max}\n          step=\"any\"\n        />\n        {suffix && (\n          <Text size=\"xs\" customColor otherProperties={{ userSelect: \"none\" }}>\n            {suffix}\n          </Text>\n        )}\n      </FormWrapper>\n      <Text size=\"xs\">{name}</Text>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  text-align: center;\n  width: 100%;\n`;\n\ntype FormProps = Pick<Props, \"linked\" | \"overridden\"> & { inactive: boolean };\n\nconst FormWrapper = styled(Flex)<FormProps>`\n  border: 1px solid ${props => props.theme.properties.border};\n  width: 100%;\n  box-sizing: border-box;\n  height: ${metrics.propertyTextInputHeight}px;\n  padding-left: ${metricsSizes.s}px;\n  padding-right: ${metricsSizes.s}px;\n  color: ${({ inactive, linked, overridden, theme }) =>\n    overridden\n      ? theme.main.warning\n      : linked\n      ? theme.main.link\n      : inactive\n      ? theme.text.pale\n      : theme.properties.contentsText};\n  &:focus-within {\n    border-color: ${({ theme }) => theme.properties.contentsText};\n  }\n`;\n\nconst StyledInput = styled.input`\n  display: block;\n  border: none;\n  background: ${props => props.theme.properties.bg};\n  outline: none;\n  color: inherit;\n  width: 100%;\n  &::-webkit-inner-spin-button,\n  &::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n  }\n  &[type=\"number\"] {\n    -moz-appearance: textfield;\n  }\n`;\n\nexport default NumberField;\n","import React, { Fragment } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport Divider from \"@reearth/components/atoms/Divider\";\n\nimport { styled } from \"@reearth/theme\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\n\nexport interface Props {\n  className?: string;\n  items?: { id: string; name?: string; type?: string }[];\n  selectableType?: string;\n  selectedItem?: string;\n  onSelect?: (id: string) => void;\n}\n\nconst List: React.FC<Props> = ({ className, items, selectableType, onSelect, selectedItem }) => {\n  const intl = useIntl();\n  const sType = selectableType === \"url\" ? \"string\" : selectableType;\n  const visibleItems =\n    items?.filter(item => !sType || (\"type\" in item && item.type === sType)) ?? [];\n  return (\n    <Wrapper className={className}>\n      {visibleItems.map(item => (\n        <Fragment key={item.id}>\n          <StyledText\n            size=\"xs\"\n            customColor\n            onClick={() => onSelect?.(item.id)}\n            selected={item.id === selectedItem}>\n            {item.name || item.id}\n          </StyledText>\n          <Divider margin=\"0\" />\n        </Fragment>\n      ))}\n      {visibleItems.length === 0 && (\n        <NoContent>{intl.formatMessage({ defaultMessage: \"No selectable items\" })}</NoContent>\n      )}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  flex: auto;\n  overflow: auto;\n`;\n\nconst StyledText = styled(Text)<{ disabled?: boolean; selected?: boolean }>`\n  padding: ${metricsSizes[\"s\"]}px;\n  cursor: pointer;\n  user-select: none;\n  transition: background-color 0.1s ease;\n  color: ${({ theme, selected }) => (selected ? theme.main.strongText : theme.text.default)};\n  background-color: ${({ selected, theme }) => (selected ? theme.main.select : null)};\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  &:hover {\n    background-color: ${({ theme, selected }) => (selected ? \"\" : theme.main.bg)};\n  }\n`;\n\nconst NoContent = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n`;\n\nexport default List;\n","import React from \"react\";\nimport { styled, useTheme } from \"@reearth/theme\";\nimport Icon from \"@reearth/components/atoms/Icon\";\n\nexport type Props = {\n  className?: string;\n  title?: string;\n  onBack?: () => void;\n};\n\nconst Header: React.FC<Props> = ({ className, title, onBack }) => {\n  const theme = useTheme();\n  return (\n    <Wrapper className={className}>\n      <StyledIcon icon=\"arrowLeft\" size={16} onClick={onBack} color={theme.main.text} />\n      <Title>{title}</Title>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  flex: 0 0 auto;\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n  height: 32px;\n`;\n\nconst Title = styled.div`\n  padding: 0 0.5em;\n  flex: auto;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n`;\n\nconst StyledIcon = styled(Icon)`\n  cursor: pointer;\n  user-select: none;\n  margin-left: 5px;\n`;\n\nexport default Header;\n","import React from \"react\";\nimport { useIntl } from \"react-intl\";\n\nimport Slide from \"@reearth/components/atoms/Slide\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Divider from \"@reearth/components/atoms/Divider\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport Flex from \"@reearth/components/atoms/Flex\";\nimport List from \"./List\";\nimport Header from \"./Header\";\nimport { DatasetSchema, Type } from \"./types\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\nimport useHooks from \"./hooks\";\n\nimport { styled, useTheme } from \"@reearth/theme\";\n\nexport { DatasetSchema, Dataset, DatasetField, Type } from \"./types\";\n\nexport type Props = {\n  className?: string;\n  linkedDataset?: {\n    schema: string;\n    dataset?: string;\n    field: string;\n    schemaName?: string;\n    datasetName?: string;\n    fieldName?: string;\n  };\n  isOverridden?: boolean;\n  isLinkable?: boolean;\n  isLinked?: boolean;\n  isTemplate?: boolean;\n  linkedFieldName?: string;\n  fixedDatasetSchemaId?: string;\n  fixedDatasetId?: string;\n  linkableType?: Type;\n  datasetSchemas?: DatasetSchema[];\n  onDatasetPickerOpen?: () => void;\n  onClear?: () => void;\n  onLink?: (datasetSchemaId: string, datasetId: string | undefined, fieldId: string) => void;\n};\n\nconst PropertyLinkPanel: React.FC<Props> = ({\n  className,\n  linkedDataset,\n  isLinkable,\n  isLinked,\n  isTemplate,\n  linkedFieldName,\n  isOverridden,\n  fixedDatasetSchemaId,\n  fixedDatasetId,\n  linkableType,\n  datasetSchemas,\n  onLink,\n  onDatasetPickerOpen,\n  onClear,\n}) => {\n  const intl = useIntl();\n  const {\n    selected,\n    pos,\n    startDatasetSelection,\n    finishDatasetSelection,\n    proceed,\n    back,\n    visibleDatasetSchemas,\n    selectedSchema,\n    selectedDatasetPath,\n    clear,\n  } = useHooks({\n    onDatasetPickerOpen,\n    linkedDataset,\n    onLink,\n    onClear,\n    linkableType,\n    datasetSchemas,\n    fixedDatasetSchemaId,\n    fixedDatasetId,\n    isLinkable,\n  });\n  const theme = useTheme();\n\n  return (\n    <Wrapper className={className}>\n      <Slide pos={pos}>\n        <FirstSlidePage>\n          {!isOverridden && isLinkable && (\n            <>\n              <Link align=\"center\" justify=\"space-between\" onClick={startDatasetSelection}>\n                <Text size=\"xs\" color={theme.main.link}>\n                  {linkedDataset\n                    ? intl.formatMessage({ defaultMessage: \"Linkable data\" })\n                    : intl.formatMessage({ defaultMessage: \"Link to dataset\" })}\n                </Text>\n                <Icon icon=\"arrowRight\" size={16} color={theme.main.link} />\n              </Link>\n              <Divider margin=\"0\" />\n            </>\n          )}\n          {!isLinkable && ((!isOverridden && !isLinked) || (!linkedDataset && isTemplate)) && (\n            <Text\n              size=\"xs\"\n              color={theme.main.weak}\n              otherProperties={{ padding: `${metricsSizes[\"s\"]}px` }}>\n              {intl.formatMessage({ defaultMessage: \"No linked data\" })}\n            </Text>\n          )}\n          {!isLinkable && isLinked && !isOverridden && !isTemplate && (\n            <Text\n              size=\"xs\"\n              color={theme.main.strongText}\n              otherProperties={{ padding: `${metricsSizes[\"s\"]}px 0 0 ${metricsSizes[\"s\"]}px` }}>\n              {intl.formatMessage({ defaultMessage: \"From\" })}\n            </Text>\n          )}\n          <LinkedData>\n            {!isLinkable && linkedFieldName ? (\n              <LinkedDataDetailContent>\n                {isOverridden && (\n                  <Text size=\"xs\" color={theme.main.warning}>\n                    {intl.formatMessage({ defaultMessage: \"Overridden\" })}\n                  </Text>\n                )}\n                {((isLinked && !linkedDataset && !isTemplate) || isOverridden) && (\n                  <Text size=\"xs\" color={isOverridden ? theme.main.weak : theme.main.link}>\n                    {intl.formatMessage({ defaultMessage: \"Parent.\" })}\n                    {linkedFieldName}\n                  </Text>\n                )}\n                {isLinked && !isOverridden && selectedDatasetPath && (\n                  <>\n                    <Text\n                      size=\"xs\"\n                      color={isOverridden ? theme.main.weak : theme.main.link}\n                      otherProperties={{\n                        textDecoration: \"underline\",\n                        overflow: \"hidden\",\n                        textOverflow: \"ellipsis\",\n                        whiteSpace: \"nowrap\",\n                      }}>\n                      {selectedDatasetPath.join(\"/\")}\n                    </Text>\n                    <Text size=\"xs\" color={isOverridden ? theme.main.weak : theme.main.link}>\n                      {selectedDatasetPath[selectedDatasetPath.length - 1]}\n                    </Text>\n                  </>\n                )}\n              </LinkedDataDetailContent>\n            ) : null}\n          </LinkedData>\n          <Divider margin=\"0\" />\n          <Link align=\"center\" justify=\"space-between\" onClick={clear}>\n            <Text size=\"xs\" color={theme.main.danger}>\n              {isOverridden\n                ? intl.formatMessage({ defaultMessage: \"Reset this field\" })\n                : intl.formatMessage({ defaultMessage: \"Clear this field\" })}\n            </Text>\n            <Icon icon=\"fieldClear\" size={16} color={theme.main.danger} />\n          </Link>\n        </FirstSlidePage>\n        {!fixedDatasetSchemaId && (\n          <SlidePage>\n            <Header title=\"\" onBack={back} />\n            <List\n              items={visibleDatasetSchemas}\n              onSelect={id => proceed({ schema: id })}\n              selectedItem={selected.schema}\n            />\n          </SlidePage>\n        )}\n        <SlidePage>\n          <Header title=\"\" onBack={back} />\n          <List\n            items={selectedSchema?.fields}\n            selectableType={linkableType}\n            onSelect={id => finishDatasetSelection(id)}\n            selectedItem={selected.field}\n          />\n        </SlidePage>\n      </Slide>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled(Flex)`\n  background-color: ${({ theme }) => theme.main.lighterBg};\n  border-radius: 5px;\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);\n  width: 200px;\n  height: 200px;\n  z-index: ${props => props.theme.zIndexes.propertyFieldPopup};\n`;\n\nconst SlidePage = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n`;\n\nconst FirstSlidePage = styled(SlidePage)`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n`;\n\nconst LinkedData = styled.div`\n  padding: 7px 10px;\n  flex: auto;\n`;\n\nconst LinkedDataDetailContent = styled.div`\n  width: 135px;\n  * {\n    margin: 4px 0;\n  }\n`;\n\nconst Link = styled(Flex)`\n  cursor: pointer;\n  user-select: none;\n  padding: ${metricsSizes[\"s\"]}px;\n`;\n\nexport default PropertyLinkPanel;\n","import { useState, useCallback, useEffect, useMemo } from \"react\";\nimport { DatasetSchema, Type } from \"./types\";\n\nexport default ({\n  linkedDataset,\n  onDatasetPickerOpen,\n  onClose,\n  onLink,\n  onClear,\n  linkableType,\n  datasetSchemas,\n  fixedDatasetSchemaId,\n  fixedDatasetId,\n  isLinkable,\n}: {\n  linkedDataset?: {\n    schema: string;\n    dataset?: string;\n    field: string;\n    schemaName?: string;\n    datasetName?: string;\n    fieldName?: string;\n  };\n  onDatasetPickerOpen?: () => void;\n  onClose?: () => void;\n  onLink?: (ds: string, s: string | undefined, f: string) => void;\n  onClear?: () => void;\n  linkableType?: Type;\n  datasetSchemas?: DatasetSchema[];\n  fixedDatasetSchemaId?: string;\n  fixedDatasetId?: string;\n  isLinkable?: boolean;\n}) => {\n  const [selected, select] = useState<{\n    source?: string;\n    schema?: string;\n    dataset?: string;\n    field?: string;\n  }>({});\n\n  const [pos, setPos] = useState(0);\n\n  const visibleDatasetSchemas = useMemo(\n    () =>\n      linkableType\n        ? datasetSchemas?.filter(s => !!s.fields?.find(f => f.type === linkableType))\n        : datasetSchemas,\n    [datasetSchemas, linkableType],\n  );\n\n  const selectedSchema = useMemo(\n    () => (selected.schema ? datasetSchemas?.find(s => s.id === selected.schema) : undefined),\n    [datasetSchemas, selected.schema],\n  );\n\n  const selectedDatasetPath = linkedDataset\n    ? [\n        linkedDataset.schemaName ?? linkedDataset.schema,\n        linkedDataset.datasetName ?? linkedDataset.dataset,\n        linkedDataset.fieldName ?? linkedDataset.field,\n      ].filter((s): s is string => !!s)\n    : undefined;\n\n  const startDatasetSelection = useCallback(() => {\n    setPos(1);\n    onDatasetPickerOpen?.();\n  }, [onDatasetPickerOpen]);\n\n  const finishDatasetSelection = useCallback(\n    (field: string) => {\n      setPos(0);\n      onClose?.();\n      if (selected.schema) {\n        onLink?.(\n          fixedDatasetSchemaId ?? selected.schema,\n          fixedDatasetId ?? selected.dataset,\n          field,\n        );\n      }\n    },\n    [onClose, selected.schema, selected.dataset, onLink, fixedDatasetSchemaId, fixedDatasetId],\n  );\n\n  const proceed = useCallback(\n    (selected: { source?: string; schema?: string; dataset?: string; field?: string }) => {\n      select(s => ({\n        ...s,\n        ...selected,\n      }));\n      setPos(p => p + 1);\n    },\n    [],\n  );\n\n  const back = useCallback(() => {\n    setPos(s => (s <= 0 ? 0 : s - 1));\n  }, []);\n\n  const clear = useCallback(() => {\n    onClear?.();\n    onClose?.();\n  }, [onClear, onClose]);\n\n  useEffect(() => {\n    select({\n      schema: fixedDatasetSchemaId ?? linkedDataset?.schema,\n      dataset: fixedDatasetId ?? linkedDataset?.dataset,\n      field: linkedDataset?.field,\n    });\n  }, [fixedDatasetId, fixedDatasetSchemaId, linkedDataset]);\n\n  useEffect(() => {\n    setPos(0);\n  }, [isLinkable, fixedDatasetSchemaId]);\n\n  return {\n    selected,\n    pos,\n    startDatasetSelection,\n    finishDatasetSelection,\n    proceed,\n    back,\n    visibleDatasetSchemas,\n    selectedSchema,\n    selectedDatasetPath,\n    clear,\n  };\n};\n","import React, { useState, useCallback, useRef } from \"react\";\nimport { usePopper } from \"react-popper\";\nimport { useClickAway } from \"react-use\";\n\nimport { styled, css } from \"@reearth/theme\";\nimport PropertyLinkPanel, { Props as PropertyLinkPanelProps } from \"./PropertyLinkPanel\";\nimport HelpButton from \"@reearth/components/atoms/HelpButton\";\nimport fonts from \"@reearth/theme/fonts\";\n\nexport { Dataset, DatasetField, DatasetSchema, Type } from \"./PropertyLinkPanel\";\n\nexport type Props = {\n  className?: string;\n  isLinked?: boolean;\n  isTemplate?: boolean;\n  linkedFieldName?: string;\n  title?: string;\n  description?: string;\n} & Pick<\n  PropertyLinkPanelProps,\n  | \"onClear\"\n  | \"onLink\"\n  | \"onDatasetPickerOpen\"\n  | \"isLinkable\"\n  | \"isOverridden\"\n  | \"linkedDataset\"\n  | \"linkableType\"\n  | \"datasetSchemas\"\n  | \"fixedDatasetSchemaId\"\n  | \"fixedDatasetId\"\n>;\n\nconst PropertyTitle: React.FC<Props> = ({\n  className,\n  isLinked,\n  isTemplate,\n  linkedFieldName,\n  isOverridden,\n  title,\n  description,\n  ...props\n}) => {\n  const [visible, setVisible] = useState(false);\n\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const referenceRef = useRef<HTMLDivElement>(null);\n  const popperRef = useRef<HTMLDivElement>(null);\n  const { styles, attributes } = usePopper(referenceRef.current, popperRef.current, {\n    placement: \"auto\",\n    strategy: \"fixed\",\n    modifiers: [\n      {\n        name: \"eventListeners\",\n        enabled: true,\n        options: {\n          scroll: visible,\n          resize: visible,\n        },\n      },\n    ],\n  });\n\n  const handleClick = useCallback(() => {\n    setVisible(!visible);\n  }, [visible]);\n  const handleClose = useCallback(() => {\n    if (visible) {\n      setVisible(false);\n    }\n  }, [visible]);\n\n  useClickAway(wrapperRef, handleClose);\n\n  return (\n    <Wrapper ref={wrapperRef}>\n      <HelpButton\n        descriptionTitle={title}\n        description={description}\n        balloonDirection=\"left\"\n        gap={28}>\n        <Title\n          className={className}\n          ref={referenceRef}\n          onClick={handleClick}\n          isLinked={isLinked}\n          isOverridden={isOverridden}>\n          {title}\n        </Title>\n      </HelpButton>\n      <PropertyLinkPanelWrapper\n        ref={popperRef}\n        visible={visible}\n        style={styles.popper}\n        {...attributes.popper}>\n        <PropertyLinkPanel\n          isOverridden={isOverridden}\n          isLinked={isLinked}\n          isTemplate={isTemplate}\n          linkedFieldName={linkedFieldName}\n          {...props}\n        />\n      </PropertyLinkPanelWrapper>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n`;\n\nconst Title = styled.div<{ isLinked?: boolean; isOverridden?: boolean }>`\n  display: flex;\n  height: 100%;\n  font-size: ${fonts.sizes.xs}px;\n  color: ${({ isLinked, isOverridden, theme }) =>\n    isOverridden ? theme.main.warning : isLinked ? theme.main.link : theme.main.text};\n  align-items: center;\n  cursor: pointer;\n`;\n\nconst PropertyLinkPanelWrapper = styled.div<{ visible: boolean }>`\n  ${({ visible }) =>\n    !visible &&\n    css`\n      visibility: hidden;\n      pointer-events: none;\n    `}\n  z-index: ${props => props.theme.zIndexes.propertyFieldPopup};\n`;\n\nexport default PropertyTitle;\n","import React from \"react\";\n\n// Components\nimport RadioGroup from \"@reearth/components/atoms/RadioGroup\";\nimport Radio from \"@reearth/components/atoms/Radio\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport { FieldProps } from \"../types\";\n\nexport type Props = FieldProps<string> & {\n  className?: string;\n  items?: { key: string; label?: string; icon?: string }[];\n};\n\nconst RadioField: React.FC<Props> = ({\n  className,\n  value,\n  items = [],\n  linked,\n  overridden,\n  disabled,\n  onChange,\n}) => {\n  const inactive = !!linked || !!overridden || !!disabled;\n\n  return (\n    <RadioGroup className={className} value={value} inactive={inactive} onChange={onChange}>\n      {items.map(({ key, label, icon }) => (\n        <Radio key={key} value={key} linked={linked} overridden={overridden}>\n          {icon ? <Icon icon={icon} size={16} alt={label || key} /> : label || key}\n        </Radio>\n      ))}\n    </RadioGroup>\n  );\n};\n\nexport default RadioField;\n","import React from \"react\";\nimport { useTheme } from \"@reearth/theme\";\nimport SelectBox, { Item as ItemType } from \"@reearth/components/atoms/SelectBox\";\nimport { FieldProps } from \"../types\";\n\nexport type Item<Value extends string | number = string> = ItemType<Value>;\n\nexport type Props<Value extends string | number = string> = FieldProps<Value> & {\n  className?: string;\n  items?: Item<Value>[];\n};\n\nconst SelectField = <Value extends string | number = string>({\n  className,\n  value: selected,\n  items = [],\n  linked,\n  overridden,\n  onChange,\n}: Props<Value>) => {\n  const theme = useTheme();\n  const color = overridden ? theme.main.warning : linked ? theme.main.link : undefined;\n\n  return (\n    <SelectBox<Value>\n      className={className}\n      selected={selected}\n      items={items}\n      color={color}\n      onChange={onChange}\n    />\n  );\n};\n\nexport default SelectField;\n","import React from \"react\";\nimport { styled } from \"@reearth/theme\";\n\nimport ToggleButton from \"@reearth/components/atoms/ToggleButton\";\nimport { FieldProps } from \"../types\";\n\nexport type Props = FieldProps<boolean>;\n\nconst SwitchField: React.FC<Props> = ({ value: checked, name, onChange, disabled }) => {\n  return (\n    <Wrapper>\n      <ToggleButton disabled={disabled} checked={checked} onChange={onChange} label={name} />\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  width: 100%;\n  vertical-align: middle;\n`;\n\nexport default SwitchField;\n","import React from \"react\";\nimport { styled, useTheme } from \"@reearth/theme\";\n\nimport Text from \"@reearth/components/atoms/Text\";\nimport TextBox from \"@reearth/components/atoms/TextBox\";\nimport { FieldProps } from \"../types\";\n\nexport type Props = FieldProps<string> & {\n  className?: string;\n  placeholder?: string;\n  prefix?: string;\n  suffix?: string;\n  multiline?: boolean;\n  onClick?: () => void;\n};\n\nconst TextField: React.FC<Props> = ({\n  className,\n  name,\n  value,\n  placeholder,\n  prefix,\n  suffix,\n  multiline,\n  linked,\n  overridden,\n  onChange,\n  onClick,\n}) => {\n  const theme = useTheme();\n  const color = overridden ? theme.main.warning : linked ? theme.main.link : undefined;\n\n  return (\n    <Wrapper className={className} onClick={onClick}>\n      <TextBox\n        value={value}\n        placeholder={placeholder}\n        onChange={onChange}\n        multiline={multiline}\n        prefix={prefix}\n        suffix={suffix}\n        color={color}\n      />\n      {name && <Text size=\"xs\">{name}</Text>}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  width: 100%;\n`;\n\nexport default TextField;\n","import React from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { styled } from \"@reearth/theme\";\n\nimport Select from \"@reearth/components/atoms/Select\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Option, { Props as OptionProps } from \"@reearth/components/atoms/SelectOption\";\nimport Text from \"@reearth/components/atoms/Text\";\n\nconst safeFonts = {\n  Arial: { displayName: \"Arial\" } as const,\n  \"Comic Sans MS\": { displayName: \"Comic Sans MS\" } as const,\n  \"Courier New\": { displayName: \"Courier New\" } as const,\n  Georgia: { displayName: \"Georgia\" } as const,\n  Tahoma: { displayName: \"Tahoma\" } as const,\n  \"Times New Roman\": { displayName: \"Times New Roman\" } as const,\n  \"Trebuchet MS\": { displayName: \"Trebuchet MS\" } as const,\n  Verdana: { displayName: \"Verdana\" } as const,\n  YuGothic: { displayName: \"游ゴシック\" } as const,\n};\n\nexport type SafeFontFamilies = keyof typeof safeFonts;\n\nconst safeFontItems = Object.entries(safeFonts).map(([name, { displayName }]) => ({\n  key: name as SafeFontFamilies,\n  label: displayName,\n}));\n\ntype Props = {\n  className?: string;\n  value?: SafeFontFamilies;\n  color?: string;\n  onChange?: (value: SafeFontFamilies) => void;\n};\n\nconst FontFamilyField: React.FC<Props> = ({ className, value: selectedKey, color, onChange }) => {\n  const intl = useIntl();\n\n  return (\n    <Select\n      className={className}\n      value={selectedKey}\n      onChange={onChange}\n      placeholder={intl.formatMessage({ defaultMessage: \"Font family\" })}\n      color={color}>\n      {safeFontItems.map(({ key, label }) => (\n        <StyledOption key={key} fontFamily={key} value={key} label={label}>\n          <OptionCheck size=\"xs\">\n            {key === selectedKey && <Icon icon=\"check\" size={10} />}\n          </OptionCheck>\n          {label}\n        </StyledOption>\n      ))}\n    </Select>\n  );\n};\n\nconst StyledOption = styled(Option)<OptionProps & { fontFamily: SafeFontFamilies }>`\n  font-family: ${({ fontFamily }) => fontFamily};\n`;\n\nconst OptionCheck = styled(Text)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 20px;\n  margin-right: 6px;\n`;\n\nexport default FontFamilyField;\n","import React from \"react\";\n\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport CheckGroup from \"@reearth/components/atoms/CheckGroup\";\nimport Check from \"@reearth/components/atoms/Check\";\n\nconst formatItems = [\n  { key: \"bold\", icon: \"bold\" } as const,\n  { key: \"italic\", icon: \"italic\" } as const,\n  { key: \"underline\", icon: \"underline\" } as const,\n];\n\nexport type FontFormatKey = \"bold\" | \"italic\" | \"underline\" | \"link\";\n\ntype Props = {\n  className?: string;\n  values?: FontFormatKey[];\n  linked?: boolean;\n  overridden?: boolean;\n  disabled?: boolean;\n  onChange?: (values: FontFormatKey[]) => void;\n};\n\nconst FontFormatField: React.FC<Props> = ({\n  className,\n  values: selectedValues,\n  linked,\n  overridden,\n  disabled,\n  onChange,\n}) => {\n  const inactive = !!linked || !!overridden || !!disabled;\n\n  return (\n    <>\n      <CheckGroup<FontFormatKey>\n        className={className}\n        values={selectedValues}\n        inactive={inactive}\n        onChange={onChange}>\n        {formatItems.map(({ key, icon }) => (\n          <Check key={key} value={key} linked={linked} overridden={overridden}>\n            <Icon icon={icon} size={16} />\n          </Check>\n        ))}\n      </CheckGroup>\n    </>\n  );\n};\n\nexport default FontFormatField;\n","import React from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { styled } from \"@reearth/theme\";\n\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Select from \"@reearth/components/atoms/Select\";\nimport Option from \"@reearth/components/atoms/SelectOption\";\nimport Text from \"@reearth/components/atoms/Text\";\n\nconst sizes = [6, 7, 8, 9, 10, 11, 12, 14, 16, 18, 21, 24, 36, 48, 60, 72] as const;\n\nexport type FontSize = typeof sizes[number];\n\nconst sizeItems = sizes.map(size => ({ key: size, label: size }));\n\ntype Props = {\n  className?: string;\n  value?: FontSize;\n  items?: { key: string; label: string; icon?: string }[];\n  color?: string;\n  onChange?: (value: FontSize) => void;\n};\n\nconst FontSizeField: React.FC<Props> = ({ className, value: selectedKey, color, onChange }) => {\n  const intl = useIntl();\n\n  return (\n    <Select<FontSize>\n      className={className}\n      value={selectedKey}\n      onChange={onChange}\n      placeholder={intl.formatMessage({ defaultMessage: \"Font size\" })}\n      color={color}>\n      {sizeItems.map(({ key, label }) => (\n        <Option key={key} value={key} label={String(label)}>\n          <OptionCheck size=\"xs\">\n            {key === selectedKey && <Icon icon=\"check\" size={10} />}\n          </OptionCheck>\n          {label}\n        </Option>\n      ))}\n    </Select>\n  );\n};\n\nconst OptionCheck = styled(Text)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 20px;\n  margin-right: 6px;\n`;\n\nexport default FontSizeField;\n","import React, { useMemo, useCallback } from \"react\";\nimport { difference } from \"lodash-es\";\n\nimport { styled, useTheme } from \"@reearth/theme\";\nimport { Typography } from \"@reearth/util/value\";\n\nimport FontFamilyField, { SafeFontFamilies } from \"./FontFamilyField\";\nimport FontSizeField, { FontSize } from \"./FontSizeField\";\nimport ColorField from \"../ColorField\";\nimport RadioField from \"../RadioField\";\nimport FontFormatField, { FontFormatKey } from \"./FontFormatField\";\nimport { FieldProps } from \"../types\";\n\ntype Props = FieldProps<Typography> & {\n  className?: string;\n};\n\nconst horizontalAlignItems = [\n  { key: \"left\", label: \"left\", icon: \"alignLeft\" } as const,\n  { key: \"center\", label: \"center\", icon: \"alignCenter\" } as const,\n  { key: \"right\", label: \"right\", icon: \"alignRight\" } as const,\n  { key: \"justify\", label: \"justify\", icon: \"alignJustify\" } as const,\n];\n\ntype HorizontalAlignKey = typeof horizontalAlignItems[number][\"label\"];\n\n// const verticalAlignItems = [\n//   { key: \"top\", label: \"top\", icon: \"verticalAlignTop\" },\n//   { key: \"center\", label: \"center\", icon: \"verticalAlignCenter\" },\n//   { key: \"bottom\", label: \"bottom\", icon: \"verticalAlignBottom\" },\n// ];\n\nconst TypographyField: React.FC<Props> = ({\n  className,\n  value,\n  onChange,\n  linked,\n  overridden,\n  disabled,\n}) => {\n  const { fontFamily, fontSize, color, textAlign, bold, italic, underline } = value ?? {};\n  const theme = useTheme();\n  const tColor = overridden ? theme.main.warning : linked ? theme.main.link : undefined;\n\n  const updateTypography = useCallback(\n    (typography: Partial<Typography>) => onChange?.({ ...(value ?? {}), ...typography }),\n    [onChange, value],\n  );\n\n  const handleChangeFamily = useCallback(\n    (value: string) => updateTypography({ fontFamily: value }),\n    [updateTypography],\n  );\n\n  const handleChangeSize = useCallback(\n    (value: FontSize) => updateTypography({ fontSize: value }),\n    [updateTypography],\n  );\n\n  const handleChangeColor = useCallback(\n    (hex: string | null) => updateTypography({ color: hex ?? undefined }),\n    [updateTypography],\n  );\n\n  const handleChangeAlign = useCallback(\n    (value: string | null) =>\n      updateTypography({ textAlign: (value ?? undefined) as HorizontalAlignKey | undefined }),\n    [updateTypography],\n  );\n\n  const fontFormatValues = useMemo(\n    () =>\n      [bold && \"bold\", italic && \"italic\", underline && \"underline\"].filter(\n        Boolean,\n      ) as FontFormatKey[],\n    [bold, italic, underline],\n  );\n\n  const handleChangeFormat = useCallback(\n    (values: FontFormatKey[]) => {\n      return updateTypography(\n        Object.fromEntries(\n          values\n            .map(value => [value, true])\n            .concat(difference(fontFormatValues, values).map(value => [value, false])),\n        ) as Record<FontFormatKey, boolean>,\n      );\n    },\n    [updateTypography, fontFormatValues],\n  );\n\n  return (\n    <Wrapper className={className}>\n      <Row>\n        <FontFamilyField\n          value={fontFamily as SafeFontFamilies}\n          color={tColor}\n          onChange={handleChangeFamily}\n        />\n      </Row>\n      <Row>\n        <FontSizeField value={fontSize as FontSize} color={tColor} onChange={handleChangeSize} />\n      </Row>\n      <Row>\n        <ColorField disabled={disabled} value={color} onChange={handleChangeColor} />\n      </Row>\n      <FontHorizontalAlignField\n        value={textAlign}\n        items={horizontalAlignItems}\n        onChange={handleChangeAlign}\n      />\n      {/* <FontVerticalAlignField\n        value={textAlign}\n        items={verticalAlignItems}\n        onChange={handleChangeVerticalAlign}\n      /> */}\n      <FontFormatField values={fontFormatValues} onChange={handleChangeFormat} />\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  width: 100%;\n`;\n\nconst Row = styled.div`\n  margin-bottom: 8px;\n`;\n\nconst FontHorizontalAlignField = styled(RadioField)`\n  margin-right: 8px;\n  margin-bottom: 8px;\n`;\n\n// const FontVerticalAlignField = styled(RadioField)`\n//   margin-right: 8px;\n//   margin-bottom: 8px;\n// `;\n\nexport default TypographyField;\n","import React, { useCallback, useState } from \"react\";\nimport { useIntl } from \"react-intl\";\n\nimport { styled } from \"@reearth/theme\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport TextField from \"../TextField\";\nimport { FieldProps } from \"../types\";\nimport AssetModal, { Asset as AssetType } from \"@reearth/components/molecules/Common/AssetModal\";\n\nexport type Asset = AssetType;\n\nexport type Props = FieldProps<string> & {\n  fileType?: \"image\" | \"video\";\n  assets?: Asset[];\n  onRemoveFile?: () => void;\n  onCreateAsset?: (files: FileList) => void;\n};\n\nconst URLField: React.FC<Props> = ({\n  name,\n  value,\n  linked,\n  overridden,\n  fileType,\n  assets,\n  onChange,\n  onCreateAsset,\n}) => {\n  const intl = useIntl();\n  const [isAssetModalOpen, setAssetModalOpen] = useState(false);\n  const openAssetModal = useCallback(() => setAssetModalOpen(true), []);\n  const closeAssetModal = useCallback(() => setAssetModalOpen(false), []);\n\n  return (\n    <Wrapper>\n      <InputWrapper>\n        <StyledTextField\n          name={name}\n          value={value}\n          onChange={onChange}\n          placeholder={intl.formatMessage({ defaultMessage: \"Not set\" })}\n          linked={linked}\n          overridden={overridden}\n          disabled\n          onClick={openAssetModal}\n        />\n        {value ? (\n          <AssetButton icon=\"bin\" size={18} onClick={() => onChange?.(null)} />\n        ) : fileType === \"image\" ? (\n          <AssetButton icon=\"image\" size={18} active={!linked} onClick={openAssetModal} />\n        ) : fileType === \"video\" ? (\n          <AssetButton icon=\"video\" size={18} active={!linked} onClick={openAssetModal} />\n        ) : (\n          <AssetButton icon=\"resource\" size={18} active={!linked} onClick={openAssetModal} />\n        )}\n      </InputWrapper>\n      <AssetModal\n        isOpen={isAssetModalOpen}\n        onClose={closeAssetModal}\n        assets={assets}\n        fileType={fileType}\n        onCreateAsset={onCreateAsset}\n        onSelect={onChange}\n        value={value}\n      />\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: flex-start;\n`;\n\nconst InputWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst AssetButton = styled(Icon)<{ active?: boolean }>`\n  cursor: pointer;\n  margin-left: 6px;\n  padding: 4px;\n  border-radius: 6px;\n  color: ${props => props.theme.main.text};\n\n  &:hover {\n    background: ${props => props.theme.main.bg};\n  }\n`;\n\nconst StyledTextField = styled(TextField)<{ canUpload?: boolean }>``;\n\nexport default URLField;\n","import React from \"react\";\nimport { styled, useTheme } from \"@reearth/theme\";\nimport { useIntl } from \"react-intl\";\n\nimport { FieldProps } from \"../types\";\nimport Text from \"@reearth/components/atoms/Text\";\n\nexport type Props = FieldProps<any> & {\n  className?: string;\n  linkedDatasetFieldName?: string;\n};\n\nconst NonEditableField: React.FC<Props> = ({ className, linkedDatasetFieldName }) => {\n  const intl = useIntl();\n  const theme = useTheme();\n  return (\n    <Wrapper\n      size=\"2xs\"\n      color={linkedDatasetFieldName ? theme.main.link : theme.layers.smallText}\n      className={className}>\n      {linkedDatasetFieldName\n        ? intl.formatMessage(\n            {\n              defaultMessage: \"This field is linked to {datasetField}.\",\n            },\n            { datasetField: linkedDatasetFieldName },\n          )\n        : intl.formatMessage({\n            defaultMessage: \"This field is not editable currently.\",\n          })}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled(Text)`\n  width: 100%;\n`;\n\nexport default NonEditableField;\n","import React, { useCallback } from \"react\";\n\nimport { styled } from \"@reearth/theme\";\nimport PropertyTitle, {\n  Props as PropertyTitleProps,\n} from \"@reearth/components/molecules/EarthEditor/PropertyPane/PropertyField/PropertyTitle\";\nimport {\n  ValueType as ValueTypeType,\n  ValueTypes as ValueTypesType,\n  LatLng as LatLngType,\n  Camera,\n} from \"@reearth/util/value\";\nimport { useBind } from \"@reearth/util/use-bind\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\n\nimport SwitchField from \"./SwitchField\";\nimport LocationField, { Location as LocationType } from \"./LocationField\";\nimport TextField from \"./TextField\";\nimport NumberField from \"./NumberField\";\nimport URLField, { Asset as AssetType } from \"./URLField\";\nimport CameraField from \"./CameraField\";\nimport ColorField from \"./ColorField\";\nimport SelectField from \"./SelectField\";\nimport RadioField from \"./RadioField\";\nimport NonEditableField from \"./NonEditableField\";\nimport TypographyField from \"./TypographyField\";\nimport LayerField, { Layer as LayerType } from \"./LayerField\";\nimport { FieldProps } from \"./types\";\nimport Flex from \"@reearth/components/atoms/Flex\";\n\nexport { Dataset, DatasetSchema, DatasetField, Type as DatasetType } from \"./PropertyTitle\";\n\nexport type ValueType = ValueTypeType;\nexport type ValueTypes = ValueTypesType;\nexport type LatLng = LatLngType;\nexport type Location = LocationType;\nexport type Layer = LayerType;\nexport type Asset = AssetType;\n\nexport type SchemaField<T extends ValueType = ValueType> = {\n  id: string;\n  type: T;\n  defaultValue?: ValueTypes[T];\n  prefix?: string;\n  suffix?: string;\n  name?: string;\n  description?: string;\n  isLinkable?: boolean;\n  isTemplate?: boolean;\n  ui?:\n    | \"color\"\n    | \"multiline\"\n    | \"selection\"\n    | \"buttons\"\n    | \"range\"\n    | \"image\"\n    | \"video\"\n    | \"file\"\n    | \"layer\"\n    | \"cameraPose\";\n  choices?: {\n    key: string;\n    label: string;\n    icon?: string | undefined;\n  }[];\n  min?: number;\n  max?: number;\n};\n\nexport type Field<T extends ValueType = ValueType> = {\n  id: string;\n  type: T;\n  value?: ValueTypes[T];\n  mergedValue?: ValueTypes[T];\n  overridden?: boolean;\n  link?: {\n    inherited?: boolean;\n    schema: string;\n    dataset?: string;\n    field: string;\n    schemaName?: string;\n    datasetName?: string;\n    fieldName?: string;\n  };\n};\n\nexport type Props<T extends ValueType = ValueType> = {\n  field?: Field;\n  schema?: SchemaField;\n  linkedDatasetSchemaId?: string;\n  linkedDatasetId?: string;\n  hidden?: boolean;\n  isLinkable?: boolean;\n  isTemplate?: boolean;\n  isCapturing?: boolean;\n  camera?: Camera;\n  layers?: LayerType[];\n  assets?: Asset[];\n  onChange?: (id: string, value: ValueTypes[T] | null, type: ValueType) => void;\n  onRemove?: (id: string) => void;\n  onLink?: (id: string, schema: string, dataset: string | undefined, field: string) => void;\n  onUploadFile?: (id: string, file: File) => void;\n  onRemoveFile?: (id: string) => void;\n  onCreateAsset?: (files: FileList) => void;\n  onIsCapturingChange?: (isCapturing: boolean) => void;\n  onCameraChange?: (camera: Partial<Camera>) => void;\n} & Pick<PropertyTitleProps, \"datasetSchemas\" | \"onDatasetPickerOpen\">;\n\nconst PropertyField: React.FC<Props> = ({\n  onChange,\n  onRemove: onClear,\n  field,\n  schema,\n  onUploadFile,\n  onCreateAsset,\n  onRemoveFile,\n  hidden,\n  isCapturing,\n  onIsCapturingChange,\n  camera,\n  onCameraChange,\n  onLink,\n  datasetSchemas,\n  isLinkable,\n  isTemplate,\n  onDatasetPickerOpen,\n  linkedDatasetSchemaId,\n  linkedDatasetId,\n  layers,\n  assets,\n}) => {\n  const events = useBind(\n    {\n      onClear,\n      onUploadFile,\n      onRemoveFile,\n      onLink,\n    },\n    schema?.id,\n  );\n\n  const commonProps: FieldProps<any> = {\n    linked:\n      !!field?.link || (isTemplate && !!field?.value) || (!!field?.mergedValue && !field?.value),\n    linkedFieldName: field?.id,\n    overridden: !!field?.overridden,\n    value: field?.mergedValue ?? field?.value ?? schema?.defaultValue,\n    onChange: useCallback(\n      (value: ValueTypes[keyof ValueTypes] | null) => {\n        if (!onChange || !schema) return;\n        onChange(schema.id, value, schema.type);\n      },\n      [schema, onChange],\n    ),\n    ...events,\n  };\n\n  const linkedDatasetFieldName =\n    field?.link && !field.link.dataset ? field.link.fieldName ?? field.link.field : undefined;\n\n  const type = schema?.type;\n\n  return hidden ? null : (\n    <FormItemWrapper\n      schema={schema}\n      direction={schema?.ui === \"multiline\" ? \"column\" : \"row\"}\n      align={schema?.ui === \"multiline\" || schema?.type === \"typography\" ? \"flex-start\" : \"center\"}>\n      <StyledPropertyTitleWrapper>\n        <PropertyTitle\n          title={schema?.name || schema?.id || field?.id || \"\"}\n          description={schema?.description}\n          isLinked={commonProps.linked}\n          isTemplate={isTemplate}\n          linkedFieldName={commonProps.linkedFieldName}\n          isOverridden={commonProps.overridden}\n          isLinkable={isLinkable ?? schema?.isLinkable}\n          linkedDataset={field?.link}\n          datasetSchemas={datasetSchemas}\n          linkableType={schema?.type}\n          onDatasetPickerOpen={onDatasetPickerOpen}\n          fixedDatasetSchemaId={linkedDatasetSchemaId}\n          fixedDatasetId={linkedDatasetId}\n          {...events}\n        />\n      </StyledPropertyTitleWrapper>\n      <StyledPropertyFieldWrapper>\n        {linkedDatasetFieldName || !schema ? (\n          <NonEditableField linkedDatasetFieldName={linkedDatasetFieldName} />\n        ) : type === \"bool\" ? (\n          <SwitchField {...commonProps} />\n        ) : type === \"latlng\" ? (\n          <LocationField {...commonProps} />\n        ) : type === \"number\" ? (\n          <NumberField\n            {...commonProps}\n            suffix={schema.suffix}\n            range={schema.ui === \"range\"}\n            max={schema.max}\n            min={schema.min}\n          />\n        ) : type === \"string\" ? (\n          schema.ui === \"color\" ? (\n            <ColorField {...commonProps} />\n          ) : schema.ui === \"selection\" || schema.choices ? (\n            <SelectField {...commonProps} items={schema.choices} />\n          ) : schema.ui === \"buttons\" ? (\n            <RadioField {...commonProps} items={schema.choices} />\n          ) : (\n            <TextField\n              {...commonProps}\n              prefix={schema?.prefix}\n              suffix={schema?.suffix}\n              multiline={schema.ui === \"multiline\"}\n            />\n          )\n        ) : type === \"url\" ? (\n          <URLField\n            {...commonProps}\n            fileType={schema.ui === \"image\" || schema.ui === \"video\" ? schema.ui : undefined}\n            assets={assets}\n            onCreateAsset={onCreateAsset}\n          />\n        ) : type === \"typography\" ? (\n          <TypographyField {...commonProps} />\n        ) : type === \"camera\" ? (\n          <CameraField\n            {...commonProps}\n            isCapturing={isCapturing}\n            onIsCapturingChange={onIsCapturingChange}\n            camera={camera}\n            onCameraChange={onCameraChange}\n            onDelete={events.onClear}\n            onlyPose={schema.ui === \"cameraPose\"}\n          />\n        ) : type === \"ref\" && schema.ui === \"layer\" ? (\n          <LayerField {...commonProps} layers={layers} />\n        ) : (\n          <NonEditableField />\n        )}\n      </StyledPropertyFieldWrapper>\n    </FormItemWrapper>\n  );\n};\n\nconst FormItemWrapper = styled(Flex)<{ schema?: SchemaField }>`\n  margin-bottom: ${metricsSizes.l}px;\n`;\n\nconst StyledPropertyTitleWrapper = styled.div`\n  flex: 1;\n  font-size: 12px;\n  margin-right: ${metricsSizes.s}px;\n`;\n\nconst StyledPropertyFieldWrapper = styled.div`\n  flex: 2;\n  width: 100%;\n`;\n\nexport default PropertyField;\n","import React, { forwardRef } from \"react\";\n\nimport { styled, useTheme } from \"@reearth/theme\";\nimport { DropType, ItemProps } from \"@reearth/components/atoms/TreeView\";\nimport Text from \"@reearth/components/atoms/Text\";\n\nexport type Item = {\n  id: string;\n  title?: string;\n};\n\nexport type Props = ItemProps<Item> & {\n  className?: string;\n};\n\nconst PropertyListItem: React.ForwardRefRenderFunction<HTMLDivElement, Props> = (\n  { className, item, selected, index, onSelect, dropType, canDrop },\n  ref,\n) => {\n  const theme = useTheme();\n  return (\n    <Wrapper\n      ref={ref}\n      className={className}\n      dropType={canDrop ? dropType : undefined}\n      onClick={onSelect}\n      selected={selected}>\n      <Text size=\"xs\" color={theme.main.strongText} otherProperties={{ marginRight: \"10px\" }}>\n        {index[index.length - 1] + 1}\n      </Text>\n      <Text size=\"xs\" color={theme.main.strongText} otherProperties={{ flex: 1 }}>\n        {item.content.title}\n      </Text>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div<{ dropType?: DropType; selected?: boolean }>`\n  display: flex;\n  padding: 10px;\n  background: ${({ selected, theme }) => (selected ? theme.main.select : \"transparent\")};\n  color: ${({ selected, theme }) =>\n    selected ? theme.properties.titleText : theme.properties.contentsText};\n  align-items: center;\n  cursor: pointer;\n  user-select: none;\n  border: 2px solid transparent;\n  border-top-color: ${({ dropType, selected, theme }) =>\n    dropType === \"top\" ? theme.main.danger : selected ? theme.layers.selectedLayer : \"transparent\"};\n  border-bottom-color: ${({ dropType, selected, theme }) =>\n    dropType === \"bottom\" ? theme.main.alert : selected ? theme.main.select : \"transparent\"};\n  &:hover {\n    background: ${({ selected, theme }) => (selected ? null : theme.main.paleBg)};\n  }\n`;\n\nexport default forwardRef(PropertyListItem);\n","import { differenceBy } from \"lodash\";\n\nexport default function arrayDiff<T>(oldList: T[], newList: T[]): [T, number, number][] {\n  const newIds = newList.map<[T, number]>((e, i) => [e, i]);\n  const oldIds = oldList.map<[T, number]>((e, i) => [e, i]);\n\n  const added = differenceBy(newIds, oldIds, ([element]) => element);\n  const left = differenceBy(newIds, added, ([element]) => element);\n  const removed = differenceBy(oldIds, newIds, ([element]) => element);\n\n  // [element, oldIndex]\n  const newAndRemoved = mergeArrays(\n    newIds.map<[T, number]>(([element]) => [\n      element,\n      oldList.findIndex(element2 => element === element2),\n    ]),\n    removed.map<[[T, number], number]>(([element, oldIndex]) => [[element, oldIndex], oldIndex]),\n  );\n\n  return added\n    .map<[T, number, number]>(([element]) => [\n      element,\n      -1,\n      newAndRemoved.findIndex(([element2]) => element === element2),\n    ])\n    .concat(\n      left\n        .map<[T, number, number]>(([element]) => [\n          element,\n          oldList.findIndex(f => f === element),\n          newAndRemoved.findIndex(([element2]) => element === element2),\n        ])\n        .filter(\n          ([, oldIndex, newIndex]) =>\n            oldIndex +\n              // Consider the number of newrly added element, or elements that were located behind me\n              newAndRemoved\n                .slice(0, newIndex)\n                .filter(([, oldIndex2]) => oldIndex2 === -1 || oldIndex < oldIndex2).length !==\n            newIndex,\n        ),\n    )\n    .sort(([, , newIndex], [, , newIndex2]) => newIndex - newIndex2)\n    .concat(\n      removed.map<[T, number, number]>(([element, oldIndex]) => [element, oldIndex, -1]),\n    );\n}\n\nfunction mergeArrays<T>(array1: T[], array2: [T, number][]): T[] {\n  const result = [...array1];\n  array2.forEach(([element, index]) => {\n    result.splice(index, 0, element);\n  });\n  return result;\n}\n","import { useCallback, useMemo, useRef, useState } from \"react\";\n\nimport deepFind from \"@reearth/util/deepFind\";\nimport arrayDiff from \"@reearth/util/arrayDiff\";\nimport type { Item as TreeViewItem } from \"@reearth/components/atoms/TreeView\";\nimport type { Item as ItemType } from \"./item\";\nimport type { Layer as LayerType } from \"../PropertyItem\";\n\nexport type Item = ItemType & { layerId?: string };\nexport type Layer = LayerType;\n\nexport default ({\n  items = [],\n  layers,\n  layerMode,\n  selectedIndex,\n  onItemSelect,\n  onItemAdd,\n  onItemMove,\n  onItemRemove,\n  onItemsUpdate,\n}: {\n  items?: Item[];\n  selectedIndex?: number;\n  layers?: LayerType[];\n  layerMode?: boolean;\n  onItemSelect?: (index: number) => void;\n  onItemAdd?: (defaultValue?: string) => void;\n  onItemMove?: (from: number, to: number) => void;\n  onItemRemove?: (index: number) => void;\n  onItemsUpdate?: (\n    items: {\n      itemId?: string;\n      layerId?: string;\n      from: number;\n      to: number;\n    }[],\n  ) => void;\n}) => {\n  // const [innerItems, setItems] = useState<Item[]>(items);\n  const innerSelectedIndex = useRef(selectedIndex);\n  const [layerModalActive, setLayerModalActive] = useState(false);\n  const selectedLayers = useMemo(\n    () => items.map(l => l.layerId).filter((id): id is string => !!id),\n    [items],\n  );\n\n  const addItem = useCallback(() => {\n    if (layerMode) {\n      setLayerModalActive(true);\n      return;\n    }\n    onItemAdd?.();\n  }, [onItemAdd, layerMode]);\n  const moveItem = useCallback(\n    (_src: any, _dest: any, [from]: number[], [to]: number[]) => {\n      if (!items[from]) return;\n      // items.splice(to, 0, items.splice(from, 1)[0]);\n      // setItems([...items]);\n      onItemMove?.(from, to);\n      onItemSelect?.(to);\n    },\n    [items, onItemMove, onItemSelect],\n  );\n  const removeItem = useCallback(() => {\n    if (typeof innerSelectedIndex.current !== \"number\") return;\n    // setItems([...items.slice(0, selectedIndex), ...items.slice(selectedIndex + 1)]);\n    onItemRemove?.(innerSelectedIndex.current);\n  }, [onItemRemove]);\n  const handleSelect = useCallback(\n    (_: any, index: number[][]) => {\n      innerSelectedIndex.current = index[0]?.[0];\n      onItemSelect?.(index[0]?.[0]);\n    },\n    [onItemSelect],\n  );\n\n  const closeLayerModal = useCallback(() => setLayerModalActive(false), []);\n  const handleLayerSelect = useCallback(\n    (newLayers: Layer[]) => {\n      if (items.some(v => !v.layerId)) {\n        // prevent wrong diff result to be output\n        return;\n      }\n\n      const diff = arrayDiff(\n        items.map(i => i.layerId).filter((i): i is string => !!i),\n        newLayers.map(l => l.id),\n      );\n\n      const ops = diff.map(d => ({\n        itemId: d[1] !== -1 ? items[d[1]]?.id : undefined,\n        layerId: d[0],\n        from: d[1],\n        to: d[2],\n      }));\n\n      onItemsUpdate?.(ops);\n      setLayerModalActive(false);\n    },\n    [items, onItemsUpdate],\n  );\n\n  const treeViewItem = useMemo(\n    () => ({ id: \"\", content: { id: \"\" }, children: convert(items, layers) }),\n    [items, layers],\n  );\n  const treeViewSelected = useMemo(\n    () => (typeof selectedIndex === \"number\" ? [items?.[selectedIndex]?.id] : undefined),\n    [items, selectedIndex],\n  );\n\n  return {\n    layerModalActive,\n    selectedLayers,\n    treeViewItem,\n    treeViewSelected,\n    closeLayerModal,\n    handleLayerSelect,\n    addItem,\n    moveItem,\n    removeItem,\n    handleSelect,\n  };\n};\n\nconst convert = (items: Item[], layers?: Layer[]): TreeViewItem<Item>[] =>\n  items.map<TreeViewItem<Item>>(i => ({\n    id: i.id,\n    content:\n      layers && i.layerId\n        ? {\n            ...i,\n            title:\n              deepFind(\n                layers,\n                l => l.id === i.layerId,\n                l => l.children,\n              )?.[0]?.title || i.title,\n          }\n        : i,\n    draggable: true,\n    droppable: true,\n    selectable: true,\n  }));\n","import React from \"react\";\n\nimport { styled } from \"@reearth/theme\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport type { Layer as LayerType } from \"../PropertyItem\";\nimport TreeView, { Props as TreeViewProps } from \"@reearth/components/atoms/TreeView\";\nimport PropertyListItem, { Item as ItemType } from \"./item\";\nimport LayerMultipleSelectionModal from \"../../LayerMultipleSelectionModal\";\nimport useHooks from \"./hooks\";\nimport { useIntl } from \"react-intl\";\nimport Text from \"@reearth/components/atoms/Text\";\n\nexport type Item = ItemType & { layerId?: string };\nexport type Layer = LayerType;\n\nexport type Props = {\n  className?: string;\n  name?: string;\n  items?: Item[];\n  selectedIndex?: number;\n  layers?: LayerType[];\n  layerMode?: boolean;\n  onItemSelect?: (index: number) => void;\n  onItemAdd?: (defaultValue?: string) => void;\n  onItemMove?: (from: number, to: number) => void;\n  onItemRemove?: (index: number) => void;\n  onItemsUpdate?: (\n    items: {\n      itemId?: string;\n      layerId?: string;\n      from: number;\n      to: number;\n    }[],\n  ) => void;\n};\n\nconst PropertyList: React.FC<Props> = ({\n  className,\n  name,\n  items = [],\n  layers,\n  layerMode,\n  selectedIndex,\n  onItemSelect,\n  onItemAdd,\n  onItemMove,\n  onItemRemove,\n  onItemsUpdate,\n}) => {\n  const intl = useIntl();\n  const {\n    layerModalActive,\n    selectedLayers,\n    treeViewItem,\n    treeViewSelected,\n    closeLayerModal,\n    handleLayerSelect,\n    addItem,\n    moveItem,\n    removeItem,\n    handleSelect,\n  } = useHooks({\n    layers,\n    items,\n    layerMode,\n    selectedIndex,\n    onItemSelect,\n    onItemAdd,\n    onItemMove,\n    onItemRemove,\n    onItemsUpdate,\n  });\n\n  return (\n    <Wrapper className={className}>\n      <Header>\n        <Text size=\"xs\" otherProperties={{ flex: 1 }}>\n          {name} {intl.formatMessage({ defaultMessage: \"List\" })}\n        </Text>\n        <AddItemIcon icon=\"plus\" size={16} onClick={addItem} />\n        <RemoveItemIcon icon=\"bin\" size={16} onClick={removeItem} />\n      </Header>\n      <StyledTreeView\n        item={treeViewItem}\n        selected={treeViewSelected}\n        renderItem={PropertyListItem}\n        onDrop={moveItem}\n        onSelect={handleSelect}\n        selectable\n        draggable\n        droppable\n        dragItemType=\"propertyGroup\"\n      />\n      <LayerMultipleSelectionModal\n        active={layerModalActive}\n        onClose={closeLayerModal}\n        onSelect={handleLayerSelect}\n        layers={layers}\n        selected={selectedLayers}\n      />\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div``;\n\nconst Header = styled.header`\n  display: flex;\n  padding: 0 0 8px 0;\n  color: ${props => props.theme.properties.contentsText};\n`;\n\nconst InnerTreeView = (props: TreeViewProps<Item, HTMLDivElement>) => (\n  <TreeView<Item, HTMLDivElement> {...props} />\n);\n\nconst StyledTreeView = styled(InnerTreeView)`\n  min-height: 100px;\n  max-height: 320px;\n  border: 1px solid #414141;\n`;\n\nconst AddItemIcon = styled(Icon)`\n  user-select: none;\n  cursor: pointer;\n  padding: 0 5px;\n`;\n\nconst RemoveItemIcon = styled(Icon)`\n  user-select: none;\n  cursor: pointer;\n  padding: 0 0 0 5px;\n`;\n\nexport default PropertyList;\n","import React, { useState } from \"react\";\nimport { useIntl } from \"react-intl\";\n\n// Components\nimport PublicationStatus, {\n  Status as StatusType,\n} from \"@reearth/components/atoms/PublicationStatus\";\nimport { styled, useTheme } from \"@reearth/theme\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\n\nimport defaultProjectImage from \"./defaultProjectImage.jpg\";\n\nexport type Status = StatusType;\n\nexport type Project = {\n  id: string;\n  name: string;\n  imageUrl?: string;\n  status: Status;\n  isArchived?: boolean;\n  description: string;\n  sceneId?: string;\n};\n\nexport type Props = {\n  project: Project;\n  onSelect?: (p: Project) => void;\n};\n\nconst ProjectCell: React.FC<Props> = ({ project, onSelect }) => {\n  const intl = useIntl();\n  const theme = useTheme();\n  const [isHover, setHover] = useState(false);\n\n  return (\n    <StyledWrapper project={project}>\n      <Wrapper\n        onClick={() => onSelect?.(project)}\n        isHover={isHover}\n        onMouseEnter={() => setHover(true)}\n        onMouseLeave={() => setHover(false)}>\n        <Title size=\"l\" color={theme.projectCell.title}>\n          {project.name ? project.name : intl.formatMessage({ defaultMessage: \"No Title Project\" })}\n        </Title>\n        {isHover && (\n          <DescriptionWrapper>\n            <Desc size=\"s\" color={theme.projectCell.description} isParagraph={true}>\n              {project.description\n                ? project.description\n                : intl.formatMessage({ defaultMessage: \"No Description...\" })}\n            </Desc>\n          </DescriptionWrapper>\n        )}\n        <Public status={project.status} />\n      </Wrapper>\n    </StyledWrapper>\n  );\n};\n\nconst StyledWrapper = styled.div<{ project: Project }>`\n  background: ${props =>\n    props.project.imageUrl ? `url(${props.project.imageUrl})` : `url(${defaultProjectImage})`};\n  background-size: ${props => (props.project.imageUrl ? \"cover\" : \"400px 240px\")};\n  background-position: center;\n  box-shadow: 0 0 5px ${props => props.theme.projectCell.shadow};\n  height: 240px;\n`;\n\nconst Wrapper = styled.div<{ isHover?: boolean }>`\n  box-sizing: border-box;\n  padding: ${metricsSizes[\"2xl\"]}px ${metricsSizes[\"l\"]}px;\n  cursor: pointer;\n  height: 100%;\n  background-color: ${props => (props.isHover ? props.theme.main.lightTransparentBg : \"\")};\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nconst Title = styled(Text)`\n  text-align: left;\n  user-select: none;\n`;\n\nconst DescriptionWrapper = styled.div`\n  margin-top: ${metricsSizes[\"2xl\"]}px;\n  flex: 1;\n  width: 90%;\n`;\n\nconst Desc = styled(Text)`\n  text-align: left;\n  user-select: none;\n  -webkit-line-clamp: 5;\n  -webkit-box-orient: vertical;\n  display: -webkit-inline-box;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst Public = styled(PublicationStatus)`\n  color: ${props => props.theme.projectCell.description};\n`;\n\nexport default ProjectCell;\n","import React, { Fragment, useCallback, useState } from \"react\";\n\nimport { styled } from \"@reearth/theme\";\nimport { Typography, typographyStyles } from \"@reearth/util/value\";\nimport Icon from \"@reearth/components/atoms/Icon\";\n\nimport { Border, Title } from \"../common\";\nimport { Props as BlockProps } from \"..\";\n\nexport type Props = BlockProps<Property>;\n\nexport type Item = {\n  id: string;\n  item_title?: string;\n  item_datatype?: \"string\" | \"number\";\n  item_datastr?: string;\n  item_datanum?: number;\n};\n\nexport type Property = {\n  default?: {\n    title?: string;\n    typography?: Typography;\n  };\n  items?: Item[];\n};\n\nconst DataList: React.FC<Props> = ({ block, infoboxProperty, isSelected, isEditable, onClick }) => {\n  const { items } = (block?.property as Property | undefined) ?? {};\n  const { title, typography } = block?.property?.default ?? {};\n  const isTemplate = !title && !items;\n\n  const [isHovered, setHovered] = useState(false);\n  const handleMouseEnter = useCallback(() => setHovered(true), []);\n  const handleMouseLeave = useCallback(() => setHovered(false), []);\n  const handleClick = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      e.stopPropagation();\n      onClick?.();\n    },\n    [onClick],\n  );\n\n  return (\n    <Wrapper\n      onClick={handleClick}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      typography={typography}\n      isHovered={isHovered}\n      isEditable={isEditable}\n      isSelected={isSelected}>\n      {isTemplate && isEditable ? (\n        <Template>\n          <StyledIcon icon=\"dl\" isHovered={isHovered} isSelected={isSelected} size={24} />\n        </Template>\n      ) : (\n        <>\n          {title && <Title infoboxProperty={infoboxProperty}>{title}</Title>}\n          <Dl>\n            {items?.map(i => (\n              <Fragment key={i.id}>\n                <Dt>{i.item_title}</Dt>\n                <Dd>{i.item_datatype === \"number\" ? i.item_datanum : i.item_datastr}</Dd>\n              </Fragment>\n            ))}\n          </Dl>\n        </>\n      )}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled(Border)<{\n  typography?: Typography;\n}>`\n  margin: 0 8px;\n  ${({ typography }) => typographyStyles({ ...typography })}\n  min-height: 70px;\n`;\n\nconst Dl = styled.dl`\n  display: flex;\n  flex-wrap: wrap;\n  min-height: 15px;\n`;\n\nconst Dt = styled.dt`\n  width: 30%;\n  padding: 10px;\n  padding-left: 0;\n  box-sizing: border-box;\n  font-weight: bold;\n`;\n\nconst Dd = styled.dd`\n  width: 70%;\n  margin: 0;\n  padding: 10px;\n  padding-right: 0;\n  box-sizing: border-box;\n`;\n\nconst Template = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  justify-content: center;\n  width: 100%;\n  height: 185px;\n  margin: 0 auto;\n  user-select: none;\n`;\n\nconst StyledIcon = styled(Icon)<{ isSelected?: boolean; isHovered?: boolean }>`\n  color: ${props =>\n    props.isHovered\n      ? props.theme.infoBox.border\n      : props.isSelected\n      ? props.theme.infoBox.accent2\n      : props.theme.infoBox.weakText};\n`;\n\nexport default DataList;\n","import React, { useCallback, useState } from \"react\";\nimport { styled } from \"@reearth/theme\";\n\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport { Border, Title } from \"../common\";\nimport { Props as BlockProps } from \"..\";\n\nexport type Props = BlockProps<Property>;\n\nexport type Property = {\n  default?: {\n    image?: string;\n    title?: string;\n    fullSize?: boolean;\n    imageSize?: \"contain\" | \"cover\";\n    imagePositionX?: \"left\" | \"center\" | \"right\";\n    imagePositionY?: \"top\" | \"center\" | \"bottom\";\n  };\n};\n\nconst ImageBlock: React.FC<Props> = ({\n  block,\n  infoboxProperty,\n  onClick,\n  isSelected,\n  isEditable,\n}) => {\n  const {\n    title,\n    fullSize,\n    image: src,\n    imageSize,\n    imagePositionX,\n    imagePositionY,\n  } = (block?.property as Property | undefined)?.default ?? {};\n  const { size: infoboxSize } = infoboxProperty?.default ?? {};\n  const isTemplate = !src && !title;\n\n  const [isHovered, setHovered] = useState(false);\n  const handleMouseEnter = useCallback(() => setHovered(true), []);\n  const handleMouseLeave = useCallback(() => setHovered(false), []);\n  const handleClick = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      e.stopPropagation();\n      onClick?.();\n    },\n    [onClick],\n  );\n\n  return (\n    <Wrapper\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onClick={handleClick}\n      fullSize={fullSize}\n      infoboxSize={infoboxSize}\n      isHovered={isHovered}\n      isEditable={isEditable}\n      isSelected={isSelected}>\n      {title && <Title infoboxProperty={infoboxProperty}>{title}</Title>}\n      {isTemplate && isEditable ? (\n        <Template infoboxSize={infoboxSize}>\n          <StyledIcon icon=\"photooverlay\" isHovered={isHovered} isSelected={isSelected} size={24} />\n        </Template>\n      ) : (\n        <Image\n          src={src}\n          fullSize={fullSize}\n          imageSize={imageSize}\n          imagePositionX={imagePositionX}\n          imagePositionY={imagePositionY}\n          isSelected={isSelected}\n          name={title}\n          infoboxSize={infoboxSize}\n        />\n      )}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled(Border)<{\n  fullSize?: boolean;\n  infoboxSize?: string;\n}>`\n  margin: ${({ fullSize }) => (fullSize ? \"0\" : \"0 8px\")};\n  height: ${props => (props.infoboxSize === \"large\" ? \"340px\" : \"200px\")};\n`;\n\nconst Image = styled.img<{\n  fullSize?: boolean;\n  imageSize?: \"contain\" | \"cover\";\n  imagePositionX?: \"left\" | \"center\" | \"right\";\n  imagePositionY?: \"top\" | \"center\" | \"bottom\";\n  isHovered?: boolean;\n  isSelected?: boolean;\n  name?: string;\n  infoboxSize?: string;\n}>`\n  display: block;\n  width: 100%;\n  max-width: 100%;\n  height: auto;\n  max-height: ${props =>\n    props.infoboxSize === \"large\"\n      ? props.name\n        ? \"326px\"\n        : \"340px\"\n      : props.name\n      ? \"181px\"\n      : \"200px\"};\n  object-fit: ${({ imageSize }) => imageSize || \"cover\"};\n  object-position: ${({ imagePositionX, imagePositionY }) =>\n    `${imagePositionX || \"center\"} ${imagePositionY || \"center\"}`};\n  outline: none;\n`;\n\nconst Template = styled.div<{ infoboxSize?: string }>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: ${props => (props.infoboxSize === \"large\" ? \"340px\" : \"200px\")};\n`;\n\nconst StyledIcon = styled(Icon)<{ isSelected?: boolean; isHovered?: boolean }>`\n  color: ${props =>\n    props.isHovered\n      ? props.theme.infoBox.border\n      : props.isSelected\n      ? props.theme.infoBox.accent2\n      : props.theme.infoBox.weakText};\n`;\n\nexport default ImageBlock;\n","import React, { useCallback, useRef, useState } from \"react\";\nimport L, { LeafletMouseEvent } from \"leaflet\";\nimport { Map, TileLayer, Marker } from \"react-leaflet\";\n\nimport { styled } from \"@reearth/theme\";\nimport { LatLng } from \"@reearth/util/value\";\n\nimport { Border, Title } from \"../common\";\nimport { Props as BlockProps } from \"..\";\n\nimport \"leaflet/dist/leaflet.css\";\n\nexport type Props = BlockProps<Property>;\n\nexport type Property = {\n  default?: {\n    location?: LatLng;\n    title?: string;\n    fullSize?: boolean;\n  };\n};\n\nconst defaultCenter = { lat: 0, lng: 0 };\n\nexport default function LocationBlock({\n  block,\n  infoboxProperty,\n  isBuilt,\n  isSelected,\n  isEditable,\n  onClick,\n  onChange,\n}: Props): JSX.Element {\n  const map = useRef<Map>(null);\n\n  const { location, title, fullSize } = (block?.property as Property | undefined)?.default ?? {};\n  const { size: infoboxSize } = infoboxProperty?.default ?? {};\n\n  const handleChange = ({ lat, lng }: { lat: number; lng: number }) => {\n    if (isBuilt || !isEditable) return;\n    onChange?.(\"default\", \"location\", { lat, lng }, \"latlng\");\n  };\n\n  const [isHovered, setHovered] = useState(false);\n  const handleMouseEnter = useCallback(() => setHovered(true), []);\n  const handleMouseLeave = useCallback(() => setHovered(false), []);\n  const handleClick = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      e.stopPropagation();\n      onClick?.();\n    },\n    [onClick],\n  );\n\n  return (\n    <Wrapper\n      fullSize={fullSize}\n      onClick={handleClick}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      isHovered={isHovered}\n      isEditable={isEditable}\n      isSelected={isSelected}>\n      {title && <Title infoboxProperty={infoboxProperty}>{title}</Title>}\n      <Map\n        style={{\n          height: infoboxSize === \"large\" ? (title ? \"236px\" : \"250px\") : title ? \"232px\" : \"250px\",\n          overflow: \"hidden\",\n          zIndex: 1,\n        }}\n        center={location ?? defaultCenter}\n        zoom={13}\n        ref={map}\n        onclick={(e: LeafletMouseEvent) => handleChange(e.latlng)}>\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {location && (\n          <Marker\n            icon={icon}\n            position={location}\n            draggable={!isBuilt && isEditable}\n            ondragend={e => handleChange(e.target?.getLatLng())}\n          />\n        )}\n      </Map>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled(Border)<{\n  fullSize?: boolean;\n}>`\n  margin: ${({ fullSize }) => (fullSize ? \"0\" : \"0 8px\")};\n  border-radius: 6px;\n  height: 250px;\n`;\n\nconst iconSvg = `<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fillRule=\"evenodd\" clipRule=\"evenodd\"\n  d=\"M14.0292 22.7354C15.1183 21.8682 16.207 20.8883 17.226 19.8127C20.1976 16.676 22 13.3716 22 10C22 4.47715 17.5228 0 12 0C6.47715 0 2 4.47715 2 10C2 13.3716 3.8024 16.676 6.77405 19.8127C7.793 20.8883 8.88175 21.8682 9.97082 22.7354C10.3526 23.0394 10.7078 23.3081 11.0278 23.5392C11.2228 23.68 11.3649 23.7784 11.4453 23.8321C11.7812 24.056 12.2188 24.056 12.5547 23.8321C12.6351 23.7784 12.7772 23.68 12.9722 23.5392C13.2922 23.3081 13.6474 23.0394 14.0292 22.7354ZM15.774 18.4373C14.8242 19.4398 13.8036 20.3584 12.7833 21.1708C12.5048 21.3926 12.2423 21.5936 12 21.7726C11.7577 21.5936 11.4952 21.3926 11.2167 21.1708C10.1964 20.3584 9.17575 19.4398 8.22595 18.4373C5.5726 15.6365 4 12.7534 4 10C4 5.58172 7.58172 2 12 2C16.4183 2 20 5.58172 20 10C20 12.7534 18.4274 15.6365 15.774 18.4373ZM12 14C9.79086 14 8 12.2091 8 10C8 7.79086 9.79086 6 12 6C14.2091 6 16 7.79086 16 10C16 12.2091 14.2091 14 12 14ZM14 10C14 11.1046 13.1046 12 12 12C10.8954 12 10 11.1046 10 10C10 8.89543 10.8954 8 12 8C13.1046 8 14 8.89543 14 10Z\"\n  fill=\"#00A0E8\" />\n<mask id=\"mask0\" mask-type=\"alpha\" maskUnits=\"userSpaceOnUse\" x=\"2\" y=\"0\" width=\"20\" height=\"24\">\n  <path fillRule=\"evenodd\" clipRule=\"evenodd\"\n    d=\"M14.0292 22.7354C15.1183 21.8682 16.207 20.8883 17.226 19.8127C20.1976 16.676 22 13.3716 22 10C22 4.47715 17.5228 0 12 0C6.47715 0 2 4.47715 2 10C2 13.3716 3.8024 16.676 6.77405 19.8127C7.793 20.8883 8.88175 21.8682 9.97082 22.7354C10.3526 23.0394 10.7078 23.3081 11.0278 23.5392C11.2228 23.68 11.3649 23.7784 11.4453 23.8321C11.7812 24.056 12.2188 24.056 12.5547 23.8321C12.6351 23.7784 12.7772 23.68 12.9722 23.5392C13.2922 23.3081 13.6474 23.0394 14.0292 22.7354ZM15.774 18.4373C14.8242 19.4398 13.8036 20.3584 12.7833 21.1708C12.5048 21.3926 12.2423 21.5936 12 21.7726C11.7577 21.5936 11.4952 21.3926 11.2167 21.1708C10.1964 20.3584 9.17575 19.4398 8.22595 18.4373C5.5726 15.6365 4 12.7534 4 10C4 5.58172 7.58172 2 12 2C16.4183 2 20 5.58172 20 10C20 12.7534 18.4274 15.6365 15.774 18.4373ZM12 14C9.79086 14 8 12.2091 8 10C8 7.79086 9.79086 6 12 6C14.2091 6 16 7.79086 16 10C16 12.2091 14.2091 14 12 14ZM14 10C14 11.1046 13.1046 12 12 12C10.8954 12 10 11.1046 10 10C10 8.89543 10.8954 8 12 8C13.1046 8 14 8.89543 14 10Z\"\n    fill=\"#00A0E8\" />\n</mask>\n<g mask=\"url(#mask0)\">\n  <rect width=\"24\" height=\"24\" fill=\"#00A0E8\" />\n</g>\n</svg>`;\n\nconst icon = L.divIcon({\n  className: \"custom-icon\",\n  html: iconSvg,\n});\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport nl2br from \"react-nl2br\";\n\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Markdown from \"@reearth/components/atoms/Markdown\";\nimport { styled, useTheme } from \"@reearth/theme\";\nimport fonts from \"@reearth/theme/fonts\";\nimport { Typography, typographyStyles } from \"@reearth/util/value\";\n\nimport { Border } from \"../common\";\nimport { Props as BlockProps } from \"..\";\n\nexport type Props = BlockProps<Property>;\n\nexport type Property = {\n  default?: {\n    text?: string;\n    title?: string;\n    markdown?: boolean;\n    typography?: Typography;\n  };\n};\n\nconst TextBlock: React.FC<Props> = ({\n  block,\n  infoboxProperty,\n  isSelected,\n  isEditable,\n  onChange,\n  onClick,\n}) => {\n  const intl = useIntl();\n  const theme = useTheme();\n  const { text, title, markdown, typography } =\n    (block?.property as Property | undefined)?.default ?? {};\n  const { bgcolor: bg } = infoboxProperty?.default ?? {};\n\n  const ref = useRef<HTMLTextAreaElement>(null);\n  const isDirty = useRef(false);\n  const [editingText, setEditingText] = useState<string | undefined>();\n  const isEditing = typeof editingText === \"string\";\n  const isTemplate = !text && !title && !isEditing;\n\n  const startEditing = useCallback(() => {\n    if (!isEditable) return;\n    setEditingText(text ?? \"\");\n  }, [isEditable, text]);\n\n  const finishEditing = useCallback(() => {\n    if (!isEditing) return;\n    if (onChange && isDirty.current) {\n      onChange(\"default\", \"text\", editingText ?? \"\", \"string\");\n    }\n    isDirty.current = false;\n    setEditingText(undefined);\n  }, [editingText, onChange, isEditing]);\n\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      setEditingText(e.currentTarget.value);\n      isDirty.current = true;\n    },\n    [],\n  );\n\n  useEffect(() => {\n    if (isEditing) {\n      ref.current?.focus();\n    }\n  }, [isEditing]);\n\n  const isSelectedPrev = useRef(false);\n  useEffect(() => {\n    if (isEditing && !isSelected && isSelectedPrev.current) {\n      finishEditing();\n    }\n  }, [finishEditing, isSelected, isEditing]);\n  useEffect(() => {\n    isSelectedPrev.current = !!isSelected;\n  }, [isSelected]);\n\n  const [isHovered, setHovered] = useState(false);\n  const handleMouseEnter = useCallback(() => setHovered(true), []);\n  const handleMouseLeave = useCallback(() => setHovered(false), []);\n  const handleClick = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      e.stopPropagation();\n      if (isEditing) return;\n      onClick?.();\n    },\n    [isEditing, onClick],\n  );\n\n  return (\n    <Wrapper\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onClick={handleClick}\n      isSelected={isSelected}\n      isHovered={isHovered}\n      isEditable={isEditable}\n      isTemplate={isTemplate}>\n      {isTemplate && isEditable && !isEditing ? (\n        <Template onDoubleClick={startEditing}>\n          <StyledIcon icon=\"text\" isSelected={isSelected} isHovered={isHovered} size={24} />\n          <Text isSelected={isSelected} isHovered={isHovered}>\n            {intl.formatMessage({ defaultMessage: \"Double click here to write.\" })}\n          </Text>\n        </Template>\n      ) : (\n        <>\n          {title && <Title>{title}</Title>}\n          {isEditing ? (\n            <InputField\n              ref={ref}\n              value={editingText ?? \"\"}\n              onChange={handleChange}\n              onBlur={finishEditing}\n              rows={10}\n            />\n          ) : markdown ? (\n            <Markdown\n              styles={typography}\n              backgroundColor={bg || theme.infoBox.bg}\n              onDoubleClick={startEditing}>\n              {text}\n            </Markdown>\n          ) : (\n            <Field styles={typography} onDoubleClick={startEditing}>\n              {nl2br(text ?? \"\")}\n            </Field>\n          )}\n        </>\n      )}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled(Border)<{ isTemplate: boolean }>`\n  margin: 0 8px;\n  border: 1px solid\n    ${({ isSelected, isHovered, isTemplate, isEditable, theme }) =>\n      (!isTemplate && !isHovered && !isSelected) || !isEditable\n        ? \"transparent\"\n        : isHovered\n        ? theme.infoBox.border\n        : isSelected\n        ? theme.infoBox.accent2\n        : theme.infoBox.weakText};\n  border-radius: 6px;\n`;\n\nconst Title = styled.div`\n  font-size: 12px;\n`;\n\nconst Field = styled.div<{ styles?: Typography }>`\n  ${({ styles }) => typographyStyles(styles)}\n  padding: 5px;\n  min-height: 15px;\n`;\n\nconst InputField = styled.textarea`\n  display: block;\n  width: 100%;\n  min-height: 15px;\n  height: 185px;\n  resize: none;\n  box-sizing: border-box;\n  background-color: transparent;\n  color: ${props => props.theme.infoBox.mainText};\n  font-size: ${fonts.sizes.s}px;\n  outline: none;\n  border: none;\n  padding: 4px;\n`;\n\nconst Template = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  justify-content: center;\n  width: 100%;\n  height: 185px;\n  margin: 0 auto;\n  user-select: none;\n`;\n\nconst Text = styled.p<{ isSelected?: boolean; isHovered?: boolean }>`\n  color: ${({ isSelected, isHovered, theme }) =>\n    isHovered ? theme.infoBox.border : isSelected ? theme.main.select : theme.infoBox.weakText};\n`;\n\nconst StyledIcon = styled(Icon)<{ isSelected?: boolean; isHovered?: boolean }>`\n  color: ${({ isSelected, isHovered, theme }) =>\n    isHovered ? theme.infoBox.border : isSelected ? theme.main.select : theme.infoBox.weakText};\n`;\n\nexport default TextBlock;\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport Player from \"react-player\";\n\nimport { styled } from \"@reearth/theme\";\nimport Icon from \"@reearth/components/atoms/Icon\";\n\nimport { Border, Title } from \"../common\";\nimport { Props as BlockProps } from \"..\";\n\nexport type Props = BlockProps<Property>;\n\nexport type Property = {\n  default?: {\n    url?: string;\n    title?: string;\n    fullSize?: boolean;\n  };\n};\n\nconst VideoBlock: React.FC<Props> = ({\n  block,\n  infoboxProperty,\n  isSelected,\n  isEditable,\n  onClick,\n}) => {\n  const {\n    url: videoUrl,\n    fullSize,\n    title,\n  } = (block?.property as Property | undefined)?.default ?? {};\n  const { size: infoboxSize } = infoboxProperty?.default ?? {};\n  const isTemplate = !videoUrl && !title;\n\n  const ref = useRef<Player>(null);\n\n  useEffect(() => {\n    // detect click event on video iframe\n    const cb = () => {\n      const player = ref.current?.getInternalPlayer() as any;\n      if (!player) return;\n      const internal = player.getIframe?.() as HTMLIFrameElement | undefined;\n      if (document.activeElement == internal) {\n        onClick?.();\n      }\n    };\n    window.addEventListener(\"blur\", cb);\n    return () => window.removeEventListener(\"blur\", cb);\n  }, [onClick, isSelected]);\n\n  const [isHovered, setHovered] = useState(false);\n  const handleMouseEnter = useCallback(() => setHovered(true), []);\n  const handleMouseLeave = useCallback(() => setHovered(false), []);\n  const handleClick = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      e.stopPropagation();\n      onClick?.();\n    },\n    [onClick],\n  );\n\n  return (\n    <Wrapper\n      onClick={handleClick}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      isEditable={isEditable}\n      isSelected={isSelected}\n      isHovered={isHovered}\n      fullSize={fullSize}\n      infoboxSize={infoboxSize}>\n      {title && <Title infoboxProperty={infoboxProperty}>{title}</Title>}\n      {isTemplate && isEditable ? (\n        <Template infoboxSize={infoboxSize}>\n          <StyledIcon icon=\"video\" isHovered={isHovered} isSelected={isSelected} size={24} />\n        </Template>\n      ) : (\n        <Player\n          ref={ref}\n          url={videoUrl}\n          width=\"100%\"\n          height={infoboxSize === \"large\" ? (title ? \"326px\" : \"340px\") : title ? \"185px\" : \"200px\"}\n          playsinline\n          pip\n          controls\n          preload\n          isHovered={isHovered}\n          isSelected={isSelected}\n        />\n      )}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled(Border)<{\n  fullSize?: boolean;\n  infoboxSize?: string;\n}>`\n  margin: ${({ fullSize }) => (fullSize ? \"0\" : \"0 8px\")};\n  height: ${props => (props.infoboxSize === \"large\" ? \"340px\" : \"200px\")};\n`;\n\nconst Template = styled.div<{ infoboxSize?: string }>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: ${props => (props.infoboxSize === \"large\" ? \"340px\" : \"200px\")};\n  border-radius: 3px;\n`;\n\nconst StyledIcon = styled(Icon)<{ isSelected?: boolean; isHovered?: boolean }>`\n  color: ${props =>\n    props.isHovered\n      ? props.theme.infoBox.border\n      : props.isSelected\n      ? props.theme.infoBox.accent2\n      : props.theme.infoBox.weakText};\n`;\n\nexport default VideoBlock;\n","import { styled } from \"@reearth/theme\";\nimport fonts from \"@reearth/theme/fonts\";\nimport { typographyStyles } from \"@reearth/util/value\";\nimport type { InfoboxProperty } from \"../Infobox\";\n\nexport const Title = styled.div<{ infoboxProperty?: InfoboxProperty }>`\n  color: ${props => props.theme.infoBox.mainText};\n  font-size: ${fonts.sizes.xs}px;\n  ${({ infoboxProperty }) => typographyStyles(infoboxProperty?.default?.typography)}\n`;\n\nexport const Border = styled.div<{\n  isSelected?: boolean;\n  isHovered?: boolean;\n  isEditable?: boolean;\n}>`\n  border: 1px solid\n    ${({ isSelected, isHovered, isEditable, theme }) =>\n      (!isHovered && !isSelected) || !isEditable\n        ? \"transparent\"\n        : isHovered\n        ? theme.infoBox.border\n        : isSelected\n        ? theme.infoBox.accent2\n        : theme.infoBox.weakText};\n  border-radius: 6px;\n`;\n","import type { Component } from \".\";\n\nimport DataList from \"./DataList\";\nimport Image from \"./Image\";\nimport Location from \"./Location\";\nimport Text from \"./Text\";\nimport Video from \"./Video\";\n\nconst builtin: Record<string, Component> = {\n  \"reearth/dlblock\": DataList,\n  \"reearth/imageblock\": Image,\n  \"reearth/locationblock\": Location,\n  \"reearth/textblock\": Text,\n  \"reearth/videoblock\": Video,\n};\n\nexport default builtin;\n","import React, { ComponentType } from \"react\";\n\nimport { styled } from \"@reearth/theme\";\nimport { ValueType, ValueTypes } from \"@reearth/util/value\";\nimport builtin from \"./builtin\";\nimport Plugin, { Block, Primitive } from \"../Plugin\";\n\nexport type { Primitive, Block } from \"../Plugin\";\n\nexport type Props<PP = any, IP = any, SP = any> = {\n  isEditable?: boolean;\n  isBuilt?: boolean;\n  isSelected?: boolean;\n  primitive?: Primitive;\n  block?: Block;\n  sceneProperty?: SP;\n  infoboxProperty?: IP;\n  pluginProperty?: PP;\n  pluginBaseUrl?: string;\n  onClick?: () => void;\n  onChange?: <T extends ValueType>(\n    schemaItemId: string,\n    fieldId: string,\n    value: ValueTypes[T],\n    type: T,\n  ) => void;\n};\n\nexport type Component<PP = any, IP = any, SP = any> = ComponentType<Props<PP, IP, SP>>;\n\nexport default function BlockComponent<PP = any, IP = any, SP = any>({\n  pluginBaseUrl,\n  ...props\n}: Props<PP, IP, SP>): JSX.Element | null {\n  const Builtin =\n    props.block?.pluginId && props.block.extensionId\n      ? builtin[`${props.block.pluginId}/${props.block.extensionId}`]\n      : undefined;\n\n  return Builtin ? (\n    <Builtin {...props} />\n  ) : (\n    <Wrapper editable={props?.isEditable} onClick={props?.onClick} selected={props?.isSelected}>\n      <Plugin\n        pluginId={props.block?.pluginId}\n        extensionId={props.block?.extensionId}\n        sourceCode={(props.block as any)?.__REEARTH_SOURCECODE} // for debugging\n        extensionType=\"block\"\n        pluginBaseUrl={pluginBaseUrl}\n        visible\n        property={props.pluginProperty}\n        sceneProperty={props.sceneProperty}\n        primitive={props.primitive}\n        block={props.block}\n      />\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div<{ editable?: boolean; selected?: boolean }>`\n  border: 1px solid\n    ${({ selected, editable, theme }) =>\n      editable && selected ? theme.infoBox.accent2 : \"transparent\"};\n  border-radius: 6px;\n\n  &:hover {\n    border-color: ${({ editable, theme }) => (editable ? theme.infoBox.border : null)};\n  }\n`;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useMemo } from \"react\";\nimport { Entity, EllipsoidGraphics } from \"resium\";\nimport { Cartesian3 } from \"cesium\";\n\nimport { LatLng, toColor } from \"@reearth/util/value\";\n\nimport type { Props as PrimitiveProps } from \"../../../Primitive\";\nimport { heightReference, shadowMode } from \"../common\";\n\nexport type Props = PrimitiveProps<Property>;\n\nexport type Property = {\n  default?: {\n    position?: LatLng;\n    height?: number;\n    heightReference?: \"none\" | \"clamp\" | \"relative\";\n    shadows?: \"disabled\" | \"enabled\" | \"cast_only\" | \"receive_only\";\n    radius?: number;\n    fillColor?: string;\n  };\n};\n\nconst Ellipsoid: React.FC<PrimitiveProps<Property>> = ({ primitive }) => {\n  const { id, isVisible, property } = primitive ?? {};\n  const {\n    heightReference: hr,\n    shadows,\n    radius = 1000,\n    fillColor,\n  } = (property as Property | undefined)?.default ?? {};\n\n  const position = useMemo(() => {\n    const { position, height } = property?.default ?? {};\n    return position ? Cartesian3.fromDegrees(position.lng, position.lat, height ?? 0) : undefined;\n  }, [\n    property?.default?.position?.lat,\n    property?.default?.position?.lng,\n    property?.default?.height,\n  ]);\n\n  const raddi = useMemo(() => {\n    return new Cartesian3(radius, radius, radius);\n  }, [radius]);\n\n  const material = useMemo(() => toColor(fillColor), [fillColor]);\n\n  return !isVisible ? null : (\n    <Entity id={id} position={position}>\n      <EllipsoidGraphics\n        radii={raddi}\n        material={material}\n        heightReference={heightReference(hr)}\n        shadows={shadowMode(shadows)}\n      />\n    </Entity>\n  );\n};\n\nexport default Ellipsoid;\n","import React, { useMemo, useRef, useEffect } from \"react\";\nimport {\n  Entity,\n  BillboardGraphics,\n  PointGraphics,\n  LabelGraphics,\n  PolylineGraphics,\n  CesiumComponentRef,\n} from \"resium\";\nimport {\n  Entity as CesiumEntity,\n  Cartesian3,\n  Color,\n  HorizontalOrigin,\n  VerticalOrigin,\n  Cartesian2,\n  PropertyBag,\n} from \"cesium\";\n\nimport { Typography, toCSSFont, toColor } from \"@reearth/util/value\";\n\nimport type { Props as PrimitiveProps } from \"../../../Primitive\";\nimport { useIcon, ho, vo, heightReference } from \"../common\";\nimport marker from \"./marker.svg\";\n\nexport type Props = PrimitiveProps<Property>;\n\ntype Property = {\n  default?: {\n    location?: { lat: number; lng: number };\n    height?: number;\n    heightReference?: \"none\" | \"clamp\" | \"relative\";\n    style?: \"none\" | \"point\" | \"image\";\n    pointSize?: number;\n    pointColor?: string;\n    pointOutlineColor?: string;\n    pointOutlineWidth?: number;\n    image?: string;\n    imageSize?: number;\n    imageHorizontalOrigin?: \"left\" | \"center\" | \"right\";\n    imageVerticalOrigin?: \"top\" | \"center\" | \"baseline\" | \"bottom\";\n    imageColor?: string;\n    imageCrop?: \"none\" | \"rounded\" | \"circle\";\n    imageShadow?: boolean;\n    imageShadowColor?: string;\n    imageShadowBlur?: number;\n    imageShadowPositionX?: number;\n    imageShadowPositionY?: number;\n    label?: boolean;\n    labelText?: string;\n    labelPosition?:\n      | \"left\"\n      | \"right\"\n      | \"top\"\n      | \"bottom\"\n      | \"lefttop\"\n      | \"leftbottom\"\n      | \"righttop\"\n      | \"rightbottom\";\n    labelTypography?: Typography;\n    labelBackground?: boolean;\n    extrude?: boolean;\n  };\n};\n\nconst tag = \"reearth_unselectable\";\n\nconst Marker: React.FC<PrimitiveProps<Property>> = ({ primitive }) => {\n  const { id, isVisible, property } = primitive ?? {};\n  const {\n    location,\n    height = 0,\n    extrude,\n    pointSize = 10,\n    style,\n    pointColor,\n    pointOutlineColor,\n    pointOutlineWidth,\n    label,\n    labelTypography,\n    labelText,\n    labelPosition: labelPos = \"right\",\n    labelBackground,\n    image = marker,\n    imageSize,\n    imageHorizontalOrigin: horizontalOrigin,\n    imageVerticalOrigin: verticalOrigin,\n    imageColor,\n    imageCrop: crop,\n    imageShadow: shadow,\n    imageShadowColor: shadowColor,\n    imageShadowBlur: shadowBlur,\n    imageShadowPositionX: shadowOffsetX,\n    imageShadowPositionY: shadowOffsetY,\n    heightReference: hr,\n  } = (property as Property | undefined)?.default ?? {};\n\n  const pos = useMemo(() => {\n    return location ? Cartesian3.fromDegrees(location.lng, location.lat, height ?? 0) : undefined;\n  }, [location, height]);\n\n  const extrudePoints = useMemo(() => {\n    return extrude && location\n      ? [\n          Cartesian3.fromDegrees(location.lng, location.lat, height),\n          Cartesian3.fromDegrees(location.lng, location.lat, 0),\n        ]\n      : undefined;\n  }, [extrude, location, height]);\n\n  const [canvas, img] = useIcon({\n    image,\n    imageSize,\n    crop,\n    shadow,\n    shadowColor,\n    shadowBlur,\n    shadowOffsetX,\n    shadowOffsetY,\n  });\n\n  const cesiumImageColor = useMemo(\n    () => (imageColor ? Color.fromCssColorString(imageColor) : undefined),\n    [imageColor],\n  );\n\n  const pixelOffset = useMemo(() => {\n    const padding = 15;\n    const x = (img?.width && style == \"image\" ? img.width : pointSize) / 2 + padding;\n    const y = (img?.height && style == \"image\" ? img.height : pointSize) / 2 + padding;\n    return new Cartesian2(\n      labelPos.includes(\"left\") || labelPos.includes(\"right\")\n        ? x * (labelPos.includes(\"left\") ? -1 : 1)\n        : 0,\n      labelPos.includes(\"top\") || labelPos.includes(\"bottom\")\n        ? y * (labelPos.includes(\"top\") ? -1 : 1)\n        : 0,\n    );\n  }, [img?.width, img?.height, style, pointSize, labelPos]);\n\n  const e = useRef<CesiumComponentRef<CesiumEntity>>(null);\n  useEffect(() => {\n    // disable selecting polyline\n    const ent = e.current?.cesiumElement;\n    if (!ent) return;\n    if (!ent.properties) {\n      ent.properties = new PropertyBag({ [tag]: true });\n    } else if (!ent.properties.hasProperty(tag)) {\n      ent.properties.addProperty(tag, true);\n    }\n  }, [extrudePoints]);\n\n  return !pos || !isVisible ? null : (\n    <>\n      {extrudePoints && (\n        <Entity ref={e}>\n          <PolylineGraphics\n            positions={extrudePoints}\n            material={Color.WHITE.withAlpha(0.4)}\n            width={0.5}\n          />\n        </Entity>\n      )}\n      <Entity id={id} position={pos}>\n        {style === \"point\" ? (\n          <PointGraphics\n            pixelSize={pointSize}\n            color={toColor(pointColor)}\n            outlineColor={toColor(pointOutlineColor)}\n            outlineWidth={pointOutlineWidth}\n            heightReference={heightReference(hr)}\n          />\n        ) : (\n          <BillboardGraphics\n            image={canvas}\n            color={cesiumImageColor}\n            horizontalOrigin={ho(horizontalOrigin)}\n            verticalOrigin={vo(verticalOrigin)}\n            heightReference={heightReference(hr)}\n          />\n        )}\n        {label && (\n          <LabelGraphics\n            horizontalOrigin={\n              labelPos === \"right\" || labelPos == \"righttop\" || labelPos === \"rightbottom\"\n                ? HorizontalOrigin.LEFT\n                : labelPos === \"left\" || labelPos === \"lefttop\" || labelPos === \"leftbottom\"\n                ? HorizontalOrigin.RIGHT\n                : HorizontalOrigin.CENTER\n            }\n            verticalOrigin={\n              labelPos === \"bottom\" || labelPos === \"rightbottom\" || labelPos === \"leftbottom\"\n                ? VerticalOrigin.TOP\n                : labelPos === \"top\" || labelPos === \"righttop\" || labelPos === \"lefttop\"\n                ? VerticalOrigin.BOTTOM\n                : VerticalOrigin.CENTER\n            }\n            pixelOffset={pixelOffset}\n            fillColor={toColor(labelTypography?.color)}\n            font={toCSSFont(labelTypography, { fontSize: 30 })}\n            text={labelText}\n            showBackground={labelBackground}\n            heightReference={heightReference(hr)}\n          />\n        )}\n      </Entity>\n    </>\n  );\n};\n\nexport default Marker;\n","import { toColor } from \"@reearth/util/value\";\nimport { Cartesian3, HeadingPitchRoll, Math as CesiumMath, Transforms } from \"cesium\";\nimport React, { useMemo } from \"react\";\nimport { ModelGraphics, Entity } from \"resium\";\n\nimport type { Props as PrimitiveProps } from \"../../../Primitive\";\nimport { colorBlendMode, heightReference, shadowMode } from \"../common\";\n\nexport type Props = PrimitiveProps<Property>;\n\nexport type Property = {\n  default?: {\n    model?: string;\n    location?: { lat: number; lng: number };\n    height?: number;\n    heightReference?: \"none\" | \"clamp\" | \"relative\";\n    heading?: number;\n    pitch?: number;\n    roll?: number;\n    scale?: number;\n    maximumScale?: number;\n    minimumPixelSize?: number;\n    animation?: boolean; // default: true\n  };\n  appearance?: {\n    shadows?: \"disabled\" | \"enabled\" | \"cast_only\" | \"receive_only\";\n    colorBlend?: \"none\" | \"highlight\" | \"replace\" | \"mix\";\n    color?: string;\n    colorBlendAmount?: number;\n    lightColor?: string;\n    silhouette?: boolean;\n    silhouetteColor?: string;\n    silhouetteSize?: number; // default: 1\n  };\n};\n\nexport default function Model({ primitive }: PrimitiveProps<Property>) {\n  const { id, isVisible, property } = primitive ?? {};\n  const {\n    model,\n    location,\n    height,\n    heightReference: hr,\n    heading,\n    pitch,\n    roll,\n    scale,\n    maximumScale,\n    minimumPixelSize,\n    animation = true,\n  } = (property as Property | undefined)?.default ?? {};\n  const {\n    shadows = \"disabled\",\n    colorBlend = \"none\",\n    color,\n    colorBlendAmount,\n    lightColor,\n    silhouette,\n    silhouetteColor,\n    silhouetteSize = 1,\n  } = (property as Property | undefined)?.appearance ?? {};\n\n  const position = useMemo(() => {\n    return location ? Cartesian3.fromDegrees(location.lng, location.lat, height ?? 0) : undefined;\n  }, [location, height]);\n  const orientation = useMemo(\n    () =>\n      position\n        ? Transforms.headingPitchRollQuaternion(\n            position,\n            new HeadingPitchRoll(\n              CesiumMath.toRadians(heading ?? 0),\n              CesiumMath.toRadians(pitch ?? 0),\n              CesiumMath.toRadians(roll ?? 0),\n            ),\n          )\n        : undefined,\n    [heading, pitch, position, roll],\n  );\n  const modelColor = useMemo(() => (colorBlend ? toColor(color) : undefined), [colorBlend, color]);\n  const modelLightColor = useMemo(() => toColor(lightColor), [lightColor]);\n  const modelSilhouetteColor = useMemo(() => toColor(silhouetteColor), [silhouetteColor]);\n\n  return !isVisible || !model || !position ? null : (\n    <Entity id={id} position={position} orientation={orientation as any}>\n      <ModelGraphics\n        uri={model}\n        scale={scale}\n        shadows={shadowMode(shadows)}\n        colorBlendMode={colorBlendMode(colorBlend)}\n        colorBlendAmount={colorBlendAmount}\n        color={modelColor}\n        lightColor={modelLightColor}\n        runAnimations={animation}\n        silhouetteColor={modelSilhouetteColor}\n        silhouetteSize={silhouette ? silhouetteSize : undefined}\n        heightReference={heightReference(hr)}\n        maximumScale={maximumScale}\n        minimumPixelSize={minimumPixelSize}\n      />\n    </Entity>\n  );\n}\n","import { useRef, useState, useCallback, useEffect } from \"react\";\nimport { usePreviousDistinct } from \"react-use\";\n\nexport type Durations =\n  | [number | null | undefined, number | null | undefined][]\n  | (number | null | undefined)[];\n\nexport const useDelayedCount = (durations: Durations = []) => {\n  const [mode, setMode] = useState(0);\n  const prevMode = usePreviousDistinct(mode);\n  const exit = useRef(false);\n  const timeout = useRef<number>();\n\n  const advanceMode = useCallback(() => {\n    setMode(m => Math.max(0, Math.min(durations.length + 1, m + (exit.current ? -1 : 1))));\n  }, [durations.length]);\n\n  const startTransition = useCallback(\n    (e: boolean, skipAnimation?: boolean) => {\n      if (timeout.current) {\n        clearTimeout(timeout.current);\n        timeout.current = undefined;\n      }\n\n      if (skipAnimation) {\n        setMode(e ? 0 : durations.length + 1);\n        return;\n      }\n\n      exit.current = e;\n      advanceMode();\n    },\n    [advanceMode, durations.length],\n  );\n\n  useEffect(() => {\n    if (timeout.current !== undefined) {\n      clearTimeout(timeout.current);\n      timeout.current = undefined;\n    }\n\n    if (mode <= 0 || mode >= durations.length + 1) return;\n\n    const next = durations?.[mode - 1];\n    const duration = Array.isArray(next) ? next[exit.current ? 1 : 0] : next;\n\n    timeout.current = window.setTimeout(() => {\n      timeout.current = undefined;\n      advanceMode();\n    }, duration ?? 0);\n  }, [advanceMode, durations, mode]);\n\n  // clear timeout on unmount\n  useEffect(\n    () => () => {\n      if (timeout.current) {\n        clearTimeout(timeout.current);\n        timeout.current = undefined;\n      }\n    },\n    [],\n  );\n\n  return [mode, prevMode, startTransition] as const;\n};\n","import { useCallback, useEffect, useRef } from \"react\";\nimport { Math as CesiumMath, EasingFunction } from \"cesium\";\nimport useTransition, { TransitionStatus } from \"@rot1024/use-transition\";\n\nimport { Camera } from \"@reearth/util/value\";\nimport { useDelayedCount, Durations } from \"@reearth/util/use-delayed-count\";\nimport { useVisualizerContext } from \"../../../context\";\n\nexport type { TransitionStatus } from \"@rot1024/use-transition\";\n\nconst cameraDuration = 2;\nconst cameraExitDuration = 2;\nconst fovDuration = 0.5;\nconst fovExitDuration = 0.5;\nexport const photoDuration = 1;\nexport const photoExitDuration = 0.5;\nconst defaultFOV = CesiumMath.toRadians(60);\n\nconst durations: Durations = [\n  [cameraDuration * 1000, cameraExitDuration * 1000],\n  [fovDuration * 1000, fovExitDuration * 1000],\n  [photoDuration * 1000, photoExitDuration * 1000],\n];\n\nexport default function ({ isSelected, camera }: { isSelected?: boolean; camera?: Camera }): {\n  photoOverlayImageTransiton: TransitionStatus;\n  exitPhotoOverlay: () => void;\n} {\n  const ctx = useVisualizerContext();\n  const { flyTo, getCamera } = ctx?.engine ?? {};\n\n  // mode 0 = idle, 1 = idle<->fly, 2 = fly<->fov, 3 = fov<->photo, 4 = photo\n  const [mode, prevMode, startTransition] = useDelayedCount(durations);\n  const cameraRef = useRef(camera);\n  cameraRef.current = camera;\n  const storytelling = useRef(false);\n  storytelling.current = ctx?.primitiveSelectionReason === \"storytelling\";\n  const prevCamera = useRef<Camera>();\n\n  // camera flight\n  useEffect(() => {\n    if ((prevMode ?? 0) > 1 && mode === 1 && prevCamera.current) {\n      flyTo?.(prevCamera.current, {\n        duration: cameraExitDuration,\n        easing: EasingFunction.CUBIC_IN_OUT,\n      });\n      prevCamera.current = undefined;\n    } else if ((prevMode ?? 0) === 0 && mode === 1 && cameraRef.current) {\n      prevCamera.current = getCamera?.();\n      flyTo?.(\n        { ...cameraRef.current, fov: prevCamera.current?.fov },\n        {\n          duration: cameraDuration,\n          easing: EasingFunction.CUBIC_IN_OUT,\n        },\n      );\n    } else if (mode === 2) {\n      const fov =\n        (prevMode ?? 0) === 1 ? cameraRef.current?.fov : prevCamera.current?.fov ?? defaultFOV;\n      flyTo?.(\n        { fov },\n        {\n          duration: (prevMode ?? 0) === 1 ? fovDuration : fovExitDuration,\n          easing: EasingFunction.CUBIC_IN_OUT,\n        },\n      );\n    }\n  }, [flyTo, getCamera, mode, prevMode]);\n\n  // start transition: when selection was changed\n  useEffect(() => {\n    // restore fov\n    if (!isSelected && storytelling.current) {\n      const fov = prevCamera.current?.fov ?? defaultFOV;\n      flyTo?.({ fov }, { duration: 0 });\n    }\n    // skip camera flight when selected primitive was changed by storytelling widget\n    startTransition(!isSelected, storytelling.current ? !isSelected : !cameraRef.current);\n  }, [flyTo, startTransition, isSelected]);\n\n  const transition = useTransition(\n    !!isSelected && mode >= 3,\n    (prevMode ?? 0) > 3 ? photoExitDuration * 1000 : photoDuration * 1000,\n    {\n      mountOnEnter: true,\n      unmountOnExit: true,\n    },\n  );\n\n  const exitPhotoOverlay = useCallback(\n    () => startTransition(true, !camera),\n    [camera, startTransition],\n  );\n\n  return {\n    photoOverlayImageTransiton: transition,\n    exitPhotoOverlay,\n  };\n}\n","import React, { useMemo } from \"react\";\nimport { Entity, BillboardGraphics } from \"resium\";\nimport { Cartesian3 } from \"cesium\";\nimport nl2br from \"react-nl2br\";\n\nimport { styled, useTheme } from \"@reearth/theme\";\nimport { Camera, LatLng } from \"@reearth/util/value\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport defaultImage from \"@reearth/components/atoms/Icon/Icons/primPhotoIcon.svg\";\n\nimport type { Props as PrimitiveProps } from \"../../../Primitive\";\nimport { useIcon, ho, vo, heightReference } from \"../common\";\nimport useHooks, { TransitionStatus, photoDuration, photoExitDuration } from \"./hooks\";\n\nexport type Props = PrimitiveProps<Property>;\n\nexport type Property = {\n  default?: {\n    location?: LatLng;\n    height?: number;\n    heightReference?: \"none\" | \"clamp\" | \"relative\";\n    camera?: Camera; // You may also update the field name in storytelling widget\n    image?: string;\n    imageSize?: number;\n    imageHorizontalOrigin?: \"left\" | \"center\" | \"right\";\n    imageVerticalOrigin?: \"top\" | \"center\" | \"baseline\" | \"bottom\";\n    imageClop?: \"none\" | \"rounded\" | \"circle\";\n    imageShadow?: boolean;\n    imageShadowColor?: string;\n    imageShadowBlur?: number;\n    imageShadowPositionX?: number;\n    imageShadowPositionY?: number;\n    photoOverlayImage?: string;\n    photoOverlayDescription?: string;\n  };\n};\n\nconst PhotoOverlay: React.FC<PrimitiveProps<Property>> = ({ primitive, isSelected }) => {\n  const { id, isVisible, property } = primitive ?? {};\n  const {\n    image,\n    imageSize,\n    imageHorizontalOrigin,\n    imageVerticalOrigin,\n    imageClop,\n    imageShadow,\n    imageShadowColor,\n    imageShadowBlur,\n    imageShadowPositionX,\n    imageShadowPositionY,\n    location,\n    height,\n    heightReference: hr,\n    camera,\n    photoOverlayImage,\n    photoOverlayDescription,\n  } = (property as Property | undefined)?.default ?? {};\n\n  const [canvas] = useIcon({\n    image: image || defaultImage,\n    imageSize: image ? imageSize : undefined,\n    crop: image ? imageClop : undefined,\n    shadow: image ? imageShadow : undefined,\n    shadowColor: image ? imageShadowColor : undefined,\n    shadowBlur: image ? imageShadowBlur : undefined,\n    shadowOffsetX: image ? imageShadowPositionX : undefined,\n    shadowOffsetY: image ? imageShadowPositionY : undefined,\n  });\n\n  const theme = useTheme();\n\n  const pos = useMemo(() => {\n    return location ? Cartesian3.fromDegrees(location.lng, location.lat, height ?? 0) : undefined;\n  }, [location, height]);\n\n  const { photoOverlayImageTransiton, exitPhotoOverlay } = useHooks({\n    camera,\n    isSelected: isSelected && !!photoOverlayImage,\n  });\n\n  return !isVisible ? null : (\n    <>\n      <Entity id={id} position={pos}>\n        <BillboardGraphics\n          image={canvas}\n          horizontalOrigin={ho(imageHorizontalOrigin)}\n          verticalOrigin={vo(imageVerticalOrigin)}\n          heightReference={heightReference(hr)}\n        />\n      </Entity>\n      {photoOverlayImageTransiton === \"unmounted\" ? null : (\n        <PhotoWrapper transition={photoOverlayImageTransiton} onClick={exitPhotoOverlay}>\n          <Photo src={photoOverlayImage} />\n          {photoOverlayDescription && (\n            <Description size=\"xs\" color={theme.main.text}>\n              {nl2br(photoOverlayDescription)}\n            </Description>\n          )}\n        </PhotoWrapper>\n      )}\n    </>\n  );\n};\n\nconst PhotoWrapper = styled.div<{ transition: TransitionStatus }>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transition: ${({ transition }) =>\n    transition === \"entering\" || transition === \"exiting\"\n      ? `all ${transition === \"exiting\" ? photoExitDuration : photoDuration}s ease`\n      : null};\n  opacity: ${({ transition }) => (transition === \"entering\" || transition === \"entered\" ? 1 : 0)};\n`;\n\nconst Photo = styled.img`\n  max-width: 95%;\n  max-height: 80%;\n  box-shadow: 0 0 15px rgba(0, 0, 0, 1);\n`;\n\nconst Description = styled(Text)`\n  position: absolute;\n  bottom: 10px;\n  left: 20px;\n  right: 20px;\n  text-align: left;\n`;\n\nexport default PhotoOverlay;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useMemo } from \"react\";\nimport { PolygonGraphics, Entity } from \"resium\";\nimport { PolygonHierarchy, Cartesian3 } from \"cesium\";\n\nimport { Polygon as PolygonValue, toColor } from \"@reearth/util/value\";\nimport type { Props as PrimitiveProps } from \"../../../Primitive\";\nimport { heightReference, shadowMode } from \"../common\";\n\nexport type Props = PrimitiveProps<Property>;\n\nexport type Property = {\n  default?: {\n    polygon?: PolygonValue;\n    fill?: boolean;\n    fillColor?: string;\n    stroke?: boolean;\n    strokeColor?: string;\n    strokeWidth?: number;\n    heightReference?: \"none\" | \"clamp\" | \"relative\";\n    shadows?: \"disabled\" | \"enabled\" | \"cast_only\" | \"receive_only\";\n  };\n};\n\nconst Polygon: React.FC<PrimitiveProps<Property>> = ({ primitive }) => {\n  const { id, isVisible, property } = primitive ?? {};\n  const {\n    polygon,\n    fill = true,\n    stroke,\n    fillColor,\n    strokeColor,\n    strokeWidth = 1,\n    heightReference: hr,\n    shadows,\n  } = (property as Property | undefined)?.default ?? {};\n\n  const hierarchy = useMemo(\n    () =>\n      polygon?.[0]\n        ? new PolygonHierarchy(\n            polygon[0].map(c => Cartesian3.fromDegrees(c.lng, c.lat, c.height)),\n            polygon\n              .slice(1)\n              .map(\n                p =>\n                  new PolygonHierarchy(p.map(c => Cartesian3.fromDegrees(c.lng, c.lat, c.height))),\n              ),\n          )\n        : undefined,\n    [polygon],\n  );\n\n  const memoStrokeColor = useMemo(\n    () => (stroke ? toColor(strokeColor) : undefined),\n    [stroke, strokeColor],\n  );\n  const memoFillColor = useMemo(() => (fill ? toColor(fillColor) : undefined), [fill, fillColor]);\n\n  return !isVisible ? null : (\n    <Entity id={id}>\n      <PolygonGraphics\n        hierarchy={hierarchy}\n        fill={fill}\n        material={memoFillColor}\n        outline={!!memoStrokeColor}\n        outlineColor={memoStrokeColor}\n        outlineWidth={strokeWidth}\n        heightReference={heightReference(hr)}\n        shadows={shadowMode(shadows)}\n      />\n    </Entity>\n  );\n};\n\nexport default Polygon;\n","import React, { useMemo } from \"react\";\nimport { PolylineGraphics, Entity } from \"resium\";\nimport { Cartesian3 } from \"cesium\";\n\nimport { Coordinates, toColor } from \"@reearth/util/value\";\nimport type { Props as PrimitiveProps } from \"../../../Primitive\";\nimport { shadowMode } from \"../common\";\n\nexport type Props = PrimitiveProps<Property>;\n\nexport type Property = {\n  default?: {\n    coordinates?: Coordinates;\n    clampToGround?: boolean;\n    strokeColor?: string;\n    strokeWidth?: number;\n    shadows?: \"disabled\" | \"enabled\" | \"cast_only\" | \"receive_only\";\n  };\n};\n\nconst Polyline: React.FC<PrimitiveProps<Property>> = ({ primitive }) => {\n  const { id, isVisible, property } = primitive ?? {};\n  const {\n    coordinates,\n    clampToGround,\n    strokeColor,\n    strokeWidth = 1,\n    shadows,\n  } = (property as Property | undefined)?.default ?? {};\n\n  const positions = useMemo(\n    () => coordinates?.map(c => Cartesian3.fromDegrees(c.lng, c.lat, c.height)),\n    [coordinates],\n  );\n  const material = useMemo(() => toColor(strokeColor), [strokeColor]);\n\n  return !isVisible ? null : (\n    <Entity id={id}>\n      <PolylineGraphics\n        positions={positions}\n        width={strokeWidth}\n        material={material}\n        clampToGround={clampToGround}\n        shadows={shadowMode(shadows)}\n      />\n    </Entity>\n  );\n};\n\nexport default Polyline;\n","import React, { useMemo } from \"react\";\nimport { RectangleGraphics, Entity } from \"resium\";\nimport { Rectangle, Color, ImageMaterialProperty } from \"cesium\";\n\nimport { Rect as RectValue } from \"@reearth/util/value\";\nimport type { Props as PrimitiveProps } from \"../../../Primitive\";\nimport { heightReference, shadowMode } from \"../common\";\n\nexport type Props = PrimitiveProps<Property>;\n\nexport type Property = {\n  default?: {\n    rect?: RectValue;\n    height?: number;\n    extrudedHeight?: number;\n    style?: \"color\" | \"image\";\n    fillColor?: string;\n    image?: string;\n    outlineColor?: string;\n    outlineWidth?: number;\n    heightReference?: \"none\" | \"clamp\" | \"relative\";\n    shadows?: \"disabled\" | \"enabled\" | \"cast_only\" | \"receive_only\";\n  };\n};\n\nconst Rect: React.FC<PrimitiveProps<Property>> = ({ primitive }) => {\n  const { id, isVisible, property } = primitive ?? {};\n  const {\n    rect,\n    image,\n    style,\n    fillColor,\n    height,\n    extrudedHeight,\n    outlineColor,\n    outlineWidth,\n    heightReference: hr,\n    shadows,\n  } = (property as Property | undefined)?.default ?? {};\n\n  const coordinates = useMemo(\n    () =>\n      rect &&\n      rect.west <= rect.east &&\n      rect.south <= rect.north &&\n      rect.east >= -180 &&\n      rect.east <= 180 &&\n      rect.west >= -180 &&\n      rect.west <= 180 &&\n      rect.south >= -90 &&\n      rect.south <= 90 &&\n      rect.north >= -90 &&\n      rect.north <= 90\n        ? Rectangle.fromDegrees(rect.west, rect.south, rect.east, rect.north)\n        : undefined,\n    [rect],\n  );\n\n  const material = useMemo(\n    () =>\n      style === \"image\"\n        ? image\n          ? new ImageMaterialProperty({\n              image,\n            })\n          : undefined\n        : fillColor\n        ? Color.fromCssColorString(fillColor)\n        : undefined,\n    [style, image, fillColor],\n  );\n\n  const outline = useMemo(\n    () => (outlineColor ? Color.fromCssColorString(outlineColor) : undefined),\n    [outlineColor],\n  );\n\n  return !isVisible ? null : (\n    <Entity id={id}>\n      <RectangleGraphics\n        height={height}\n        extrudedHeight={extrudedHeight}\n        coordinates={coordinates}\n        material={material}\n        fill={!!material}\n        outline={!!outline}\n        outlineColor={outline}\n        outlineWidth={outlineWidth}\n        heightReference={heightReference(hr)}\n        shadows={shadowMode(shadows)}\n      />\n    </Entity>\n  );\n};\n\nexport default Rect;\n","import React, { useMemo } from \"react\";\nimport { KmlDataSource, CzmlDataSource, GeoJsonDataSource } from \"resium\";\n\nimport type { Props as PrimitiveProps } from \"../../../Primitive\";\n\nexport type Props = PrimitiveProps<Property>;\n\nexport type Property = {\n  default?: {\n    url?: string;\n    type?: Type | \"auto\";\n  };\n};\n\ntype Type = \"geojson\" | \"kml\" | \"czml\";\n\nconst types: Record<string, Type> = {\n  kml: \"kml\",\n  geojson: \"geojson\",\n  czml: \"czml\",\n};\n\nconst comps = {\n  kml: KmlDataSource,\n  czml: CzmlDataSource,\n  geojson: GeoJsonDataSource,\n};\n\nconst Resource: React.FC<Props> = ({ primitive }) => {\n  const { isVisible, property } = primitive ?? {};\n  const { url, type } = (property as Property | undefined)?.default ?? {};\n  const ext = useMemo(\n    () => (!type || type === \"auto\" ? url?.match(/\\.([a-z]+?)(?:\\?.*?)?$/) : undefined),\n    [type, url],\n  );\n  const actualType = ext ? types[ext[1]] : type !== \"auto\" ? type : undefined;\n  const Component = actualType ? comps[actualType] : undefined;\n\n  if (!isVisible || !Component || !url) return null;\n  return <Component data={url} />;\n};\n\nexport default Resource;\n","import { Cesium3DTileset as Cesium3DTilesetType, Cesium3DTileStyle } from \"cesium\";\nimport React, { useCallback, useMemo } from \"react\";\nimport { Cesium3DTileset, CesiumComponentRef, useCesium } from \"resium\";\n\nimport type { Props as PrimitiveProps } from \"../../../Primitive\";\nimport { shadowMode } from \"../common\";\n\nexport type Props = PrimitiveProps<Property>;\n\nexport type Property = {\n  default?: {\n    tileset?: string;\n    styleUrl?: string;\n    shadows?: \"disabled\" | \"enabled\" | \"cast_only\" | \"receive_only\";\n  };\n};\n\nexport default function Tileset({ primitive }: PrimitiveProps<Property>): JSX.Element | null {\n  const { viewer } = useCesium();\n  const { isVisible, property } = primitive ?? {};\n  const { tileset, styleUrl, shadows } = (property as Property | undefined)?.default ?? {};\n  const style = useMemo<Cesium3DTileStyle | undefined>(\n    () => (styleUrl ? new Cesium3DTileStyle(styleUrl) : undefined),\n    [styleUrl],\n  );\n  const ref = useCallback(\n    (tileset: CesiumComponentRef<Cesium3DTilesetType> | null) => {\n      if (tileset?.cesiumElement) {\n        (tileset?.cesiumElement as any).__resium_primitive_id = primitive?.id;\n      }\n    },\n    [primitive],\n  );\n\n  return !isVisible || !tileset ? null : (\n    <Cesium3DTileset\n      ref={ref}\n      url={tileset}\n      shadows={shadowMode(shadows)}\n      style={style}\n      onReady={_debugFlight ? t => viewer?.zoomTo(t) : undefined}\n    />\n  );\n}\n\nconst _debugFlight = false;\n","import { useState, useEffect, useMemo, useRef } from \"react\";\n\nexport const useImage = (src?: string): HTMLImageElement | undefined => {\n  const imgRef = useRef<HTMLImageElement>();\n  const [img, setImg] = useState<HTMLImageElement>();\n\n  useEffect(() => {\n    if (!src) {\n      setImg(undefined);\n      if (imgRef.current) {\n        imgRef.current.src = \"\";\n      }\n      return;\n    }\n    const img = new Image();\n    img.crossOrigin = \"anonymous\";\n    img.onload = () => {\n      setImg(imgRef.current);\n    };\n    img.src = src;\n    imgRef.current = img;\n  }, [src]);\n\n  return img;\n};\n\nexport const useCanvas = (cb: (canvas: HTMLCanvasElement) => void) => {\n  const canvas1 = useMemo(() => document.createElement(\"canvas\"), []);\n  const canvas2 = useMemo(() => document.createElement(\"canvas\"), []);\n  const [canvas, setCanvas] = useState(canvas1);\n  useEffect(() => {\n    const can = canvas === canvas2 ? canvas1 : canvas2;\n    cb(can);\n    setCanvas(can);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [canvas1, canvas2, cb]); // ignore canvas\n  return canvas;\n};\n","import { easing as tweenEasing, IEasingMap } from \"ts-easing\";\n\nexport type Easing = keyof IEasingMap;\n\nexport function interval(callback: (t: number) => boolean, delay?: number): () => void {\n  let prev = 0;\n  let raf = 0;\n  let to = 0;\n\n  const cb = () => {\n    if (callback(prev === 0 ? 0 : Date.now() - prev)) {\n      raf = window.requestAnimationFrame(cb);\n    }\n    if (prev === 0) {\n      prev = Date.now();\n    }\n  };\n\n  if (typeof delay === \"number\") {\n    to = window.setTimeout(cb, delay);\n  } else {\n    raf = window.requestAnimationFrame(cb);\n  }\n\n  return () => {\n    window.clearTimeout(to);\n    window.cancelAnimationFrame(raf);\n  };\n}\n\nexport function intervalDuring(\n  callback: (time: number) => void,\n  duration: number,\n  delay?: number,\n): () => void {\n  if (duration < 0) return () => {};\n  return interval(d => {\n    const t = Math.min(1, duration === 0 ? 1 : d / duration);\n    callback(t);\n    return t < 1;\n  }, delay);\n}\n\nexport function tweenInterval(\n  callback: (v: number, t: number) => void,\n  easing: Easing | ((t: number) => number),\n  duration: number,\n  delay?: number,\n): () => void {\n  const e = typeof easing === \"function\" ? easing : tweenEasing[easing];\n  return intervalDuring(\n    d => {\n      callback(e(d), d);\n    },\n    duration,\n    delay,\n  );\n}\n","import { useCallback } from \"react\";\nimport {\n  ColorBlendMode,\n  BoundingSphere,\n  HeadingPitchRange,\n  HorizontalOrigin,\n  VerticalOrigin,\n  Camera as CesiumCamera,\n  Math as CesiumMath,\n  Scene,\n  Cartesian2,\n  Cartesian3,\n  CesiumWidget,\n  PerspectiveFrustum,\n  Viewer,\n  HeightReference,\n  ShadowMode,\n} from \"cesium\";\n\nimport { useCanvas, useImage } from \"@reearth/util/image\";\nimport { Camera } from \"@reearth/util/value\";\nimport { tweenInterval } from \"@reearth/util/raf\";\n\nconst defaultImageSize = 50;\n\nexport const drawIcon = (\n  c: HTMLCanvasElement,\n  image: HTMLImageElement | undefined,\n  imageSize: number | undefined,\n  crop: \"circle\" | \"rounded\" | \"none\" = \"none\",\n  shadow = false,\n  shadowColor = \"rgba(0, 0, 0, 0.7)\",\n  shadowBlur = 3,\n  shadowOffsetX = 0,\n  shadowOffsetY = 0,\n) => {\n  const ctx = c.getContext(\"2d\");\n  if (!image || !ctx) return;\n\n  ctx.save();\n\n  const w =\n    typeof imageSize === \"number\"\n      ? Math.floor(image.width * imageSize)\n      : Math.min(defaultImageSize, image.width);\n  const h =\n    typeof imageSize === \"number\"\n      ? Math.floor(image.height * imageSize)\n      : Math.floor((w / image.width) * image.height);\n  c.width = w + shadowBlur;\n  c.height = h + shadowBlur;\n  ctx.shadowBlur = shadowBlur;\n  ctx.shadowOffsetX = shadowOffsetX;\n  ctx.shadowOffsetY = shadowOffsetY;\n  ctx.globalCompositeOperation = \"source-over\";\n  ctx.clearRect(0, 0, c.width, c.height);\n  ctx.drawImage(image, (c.width - w) / 2, (c.height - h) / 2, w, h);\n\n  if (crop === \"circle\") {\n    ctx.fillStyle = \"black\";\n    ctx.globalCompositeOperation = \"destination-in\";\n    ctx.arc(w / 2, h / 2, Math.min(w, h) / 2, 0, 2 * Math.PI);\n    ctx.fill();\n\n    if (shadow) {\n      ctx.shadowColor = shadowColor;\n      ctx.globalCompositeOperation = \"destination-over\";\n      ctx.fillStyle = \"black\";\n      ctx.arc(w / 2, h / 2, Math.min(w, h) / 2, 0, 2 * Math.PI);\n      ctx.fill();\n    }\n  } else if (shadow) {\n    ctx.shadowColor = shadowColor;\n    ctx.globalCompositeOperation = \"destination-over\";\n    ctx.fillStyle = \"black\";\n    ctx.rect((c.width - w) / 2, (c.height - h) / 2, w, h);\n    ctx.fill();\n  }\n\n  ctx.restore();\n};\n\nexport const useIcon = ({\n  image,\n  imageSize,\n  crop,\n  shadow,\n  shadowColor,\n  shadowBlur,\n  shadowOffsetX,\n  shadowOffsetY,\n}: {\n  image?: string;\n  imageSize?: number;\n  crop?: \"circle\" | \"rounded\" | \"none\";\n  shadow?: boolean;\n  shadowColor?: string;\n  shadowBlur?: number;\n  shadowOffsetX?: number;\n  shadowOffsetY?: number;\n}): [HTMLCanvasElement, HTMLImageElement | undefined] => {\n  const img = useImage(image);\n  const draw = useCallback(\n    can =>\n      drawIcon(\n        can,\n        img,\n        imageSize,\n        crop,\n        shadow,\n        shadowColor,\n        shadowBlur,\n        shadowOffsetX,\n        shadowOffsetY,\n      ),\n    [crop, imageSize, img, shadow, shadowBlur, shadowColor, shadowOffsetX, shadowOffsetY],\n  );\n  const canvas = useCanvas(draw);\n  return [canvas, img];\n};\n\nexport const ho = (o: \"left\" | \"center\" | \"right\" | undefined): HorizontalOrigin | undefined =>\n  ({\n    left: HorizontalOrigin.LEFT,\n    center: HorizontalOrigin.CENTER,\n    right: HorizontalOrigin.RIGHT,\n    [\"\"]: undefined,\n  }[o || \"\"]);\n\nexport const vo = (\n  o: \"top\" | \"center\" | \"baseline\" | \"bottom\" | undefined,\n): VerticalOrigin | undefined =>\n  ({\n    top: VerticalOrigin.TOP,\n    center: VerticalOrigin.CENTER,\n    baseline: VerticalOrigin.BASELINE,\n    bottom: VerticalOrigin.BOTTOM,\n    [\"\"]: undefined,\n  }[o || \"\"]);\n\nexport const getLocationFromScreenXY = (scene: Scene | undefined | null, x: number, y: number) => {\n  if (!scene) return undefined;\n  const camera = scene.camera;\n  const ellipsoid = scene.globe.ellipsoid;\n  const cartesian = camera?.pickEllipsoid(new Cartesian2(x, y), ellipsoid);\n  if (!cartesian) return undefined;\n  const { latitude, longitude, height } = ellipsoid.cartesianToCartographic(cartesian);\n  return {\n    lat: CesiumMath.toDegrees(latitude),\n    lng: CesiumMath.toDegrees(longitude),\n    height,\n  };\n};\n\nexport const flyTo = (\n  cesiumCamera?: CesiumCamera,\n  camera?: {\n    /** degrees */\n    lat?: number;\n    /** degrees */\n    lng?: number;\n    /** meters */\n    height?: number;\n    /** radians */\n    heading?: number;\n    /** radians */\n    pitch?: number;\n    /** radians */\n    roll?: number;\n    /** Field of view expressed in radians */\n    fov?: number;\n  },\n  options?: {\n    /** Seconds */\n    duration?: number;\n    easing?: (time: number) => number;\n  },\n) => {\n  if (!cesiumCamera || !camera) return () => {};\n\n  const cancelFov = animateFOV({\n    fov: camera.fov,\n    camera: cesiumCamera,\n    duration: options?.duration,\n    easing: options?.easing,\n  });\n\n  const position =\n    typeof camera.lat === \"number\" &&\n    typeof camera.lng === \"number\" &&\n    typeof camera.height === \"number\"\n      ? Cartesian3.fromDegrees(camera.lng, camera.lat, camera.height)\n      : undefined;\n\n  if (position) {\n    cesiumCamera.flyTo({\n      destination: position,\n      orientation: {\n        heading: camera.heading,\n        pitch: camera.pitch,\n        roll: camera.roll,\n      },\n      duration: options?.duration ?? 0,\n      easingFunction: options?.easing,\n    });\n  }\n\n  return () => {\n    cancelFov?.();\n    cesiumCamera?.cancelFlight();\n  };\n};\n\nexport const lookAt = (\n  cesiumCamera?: CesiumCamera,\n  camera?: {\n    /** degrees */\n    lat?: number;\n    /** degrees */\n    lng?: number;\n    /** meters */\n    height?: number;\n    /** radians */\n    heading?: number;\n    /** radians */\n    pitch?: number;\n    /** radians */\n    range?: number;\n    /** Field of view expressed in radians */\n    fov?: number;\n  },\n  options?: {\n    /** Seconds */\n    duration?: number;\n    easing?: (time: number) => number;\n  },\n) => {\n  if (!cesiumCamera || !camera) return () => {};\n\n  const cancelFov = animateFOV({\n    fov: camera.fov,\n    camera: cesiumCamera,\n    duration: options?.duration,\n    easing: options?.easing,\n  });\n\n  const position =\n    typeof camera.lat === \"number\" &&\n    typeof camera.lng === \"number\" &&\n    typeof camera.height === \"number\"\n      ? Cartesian3.fromDegrees(camera.lng, camera.lat, camera.height)\n      : undefined;\n\n  if (position) {\n    cesiumCamera.flyToBoundingSphere(new BoundingSphere(position), {\n      offset: new HeadingPitchRange(camera.heading, camera.pitch, camera.range),\n      duration: options?.duration,\n      easingFunction: options?.easing,\n    });\n  }\n\n  return () => {\n    cancelFov?.();\n    cesiumCamera?.cancelFlight();\n  };\n};\n\nexport const animateFOV = ({\n  fov,\n  camera,\n  easing,\n  duration,\n}: {\n  fov?: number;\n  camera: CesiumCamera;\n  easing?: (t: number) => number;\n  duration?: number;\n}): (() => void) | undefined => {\n  // fov animation\n  if (\n    typeof fov === \"number\" &&\n    camera.frustum instanceof PerspectiveFrustum &&\n    typeof camera.frustum.fov === \"number\" &&\n    camera.frustum.fov !== fov\n  ) {\n    const fromFov = camera.frustum.fov;\n    return tweenInterval(\n      t => {\n        if (!(camera.frustum instanceof PerspectiveFrustum)) return;\n        camera.frustum.fov = (fov - fromFov) * t + fromFov;\n      },\n      easing || \"inOutCubic\",\n      (duration ?? 0) * 1000,\n    );\n  }\n  return undefined;\n};\n\nexport const getCamera = (viewer: Viewer | CesiumWidget | undefined): Camera | undefined => {\n  if (!viewer || viewer.isDestroyed() || !viewer.camera || !viewer.scene) return undefined;\n  const { camera } = viewer;\n  if (!(camera.frustum instanceof PerspectiveFrustum)) return;\n\n  const ellipsoid = viewer.scene.globe.ellipsoid;\n  const { latitude, longitude, height } = ellipsoid.cartesianToCartographic(camera.position);\n  const lat = CesiumMath.toDegrees(latitude);\n  const lng = CesiumMath.toDegrees(longitude);\n  const { heading, pitch, roll } = camera;\n  const { fov } = camera.frustum;\n\n  return { lng, lat, height, heading, pitch, roll, fov };\n};\n\nexport const colorBlendMode = (colorBlendMode?: \"highlight\" | \"replace\" | \"mix\" | \"none\") =>\n  ((\n    {\n      highlight: ColorBlendMode.HIGHLIGHT,\n      replace: ColorBlendMode.REPLACE,\n      mix: ColorBlendMode.MIX,\n    } as { [key in string]?: ColorBlendMode }\n  )[colorBlendMode || \"\"]);\n\nexport const heightReference = (\n  heightReference?: \"none\" | \"clamp\" | \"relative\",\n): HeightReference | undefined =>\n  ((\n    { clamp: HeightReference.CLAMP_TO_GROUND, relative: HeightReference.RELATIVE_TO_GROUND } as {\n      [key in string]?: HeightReference;\n    }\n  )[heightReference || \"\"]);\n\nexport const shadowMode = (\n  shadows?: \"disabled\" | \"enabled\" | \"cast_only\" | \"receive_only\",\n): ShadowMode | undefined =>\n  ((\n    {\n      enabled: ShadowMode.ENABLED,\n      cast_only: ShadowMode.CAST_ONLY,\n      receive_only: ShadowMode.RECEIVE_ONLY,\n    } as {\n      [key in string]?: ShadowMode;\n    }\n  )[shadows || \"\"]);\n","import {\n  ImageryProvider,\n  ArcGisMapServerImageryProvider,\n  IonImageryProvider,\n  OpenStreetMapImageryProvider,\n  IonWorldImageryStyle,\n  createWorldImagery,\n  UrlTemplateImageryProvider,\n} from \"cesium\";\n\nexport default {\n  default: () => createWorldImagery(),\n  default_label: () =>\n    createWorldImagery({\n      style: IonWorldImageryStyle.AERIAL_WITH_LABELS,\n    }),\n  default_road: () =>\n    createWorldImagery({\n      style: IonWorldImageryStyle.ROAD,\n    }),\n  stamen_watercolor: () =>\n    new OpenStreetMapImageryProvider({\n      url: \"https://stamen-tiles.a.ssl.fastly.net/watercolor/\",\n      credit: \"Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under CC BY SA.\",\n    }),\n  stamen_toner: () =>\n    new OpenStreetMapImageryProvider({\n      url: \"https://stamen-tiles.a.ssl.fastly.net/toner/\",\n      credit: \"Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under CC BY SA.\",\n    }),\n  open_street_map: () =>\n    new OpenStreetMapImageryProvider({\n      url: \"https://a.tile.openstreetmap.org/\",\n      credit:\n        \"Copyright: Tiles © Esri — Source: Esri, DeLorme, NAVTEQ, USGS, Intermap, iPC, NRCAN, Esri Japan, METI, Esri China (Hong Kong), Esri (Thailand), TomTom, 2012\",\n    }),\n  esri_world_topo: () =>\n    new ArcGisMapServerImageryProvider({\n      url: \"https://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer\",\n      credit:\n        \"Copyright: Tiles © Esri — Esri, DeLorme, NAVTEQ, TomTom, Intermap, iPC, USGS, FAO, NPS, NRCAN, GeoBase, Kadaster NL, Ordnance Survey, Esri Japan, METI, Esri China (Hong Kong), and the GIS User Communit\",\n      enablePickFeatures: false,\n    }),\n  black_marble: () => new IonImageryProvider({ assetId: 3812 }),\n  japan_gsi_standard: () =>\n    new OpenStreetMapImageryProvider({\n      url: \"https://cyberjapandata.gsi.go.jp/xyz/std/\",\n    }),\n  url: url => (url ? new UrlTemplateImageryProvider({ url }) : null),\n} as { [key: string]: (url?: string) => ImageryProvider | null };\n","import type { Component } from \"../../Primitive\";\n\nimport Marker from \"./Marker\";\nimport Polyline from \"./Polyline\";\nimport Polygon from \"./Polygon\";\nimport Rect from \"./Rect\";\nimport Ellipsoid from \"./Ellipsoid\";\nimport PhotoOverlay from \"./PhotoOverlay\";\nimport Resource from \"./Resource\";\nimport Model from \"./Model\";\nimport Tileset from \"./TIleset\";\n\nconst builtin: Record<string, Component> = {\n  \"reearth/marker\": Marker,\n  \"reearth/polyline\": Polyline,\n  \"reearth/polygon\": Polygon,\n  \"reearth/rect\": Rect,\n  \"reearth/ellipsoid\": Ellipsoid,\n  \"reearth/photooverlay\": PhotoOverlay,\n  \"reearth/resource\": Resource,\n  \"reearth/model\": Model,\n  \"reearth/tileset\": Tileset,\n};\n\nexport default builtin;\n","import { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from \"react\";\nimport { useDeepCompareEffect } from \"react-use\";\nimport {\n  createWorldTerrain,\n  Color,\n  Entity,\n  Ion,\n  EllipsoidTerrainProvider,\n  Cesium3DTileFeature,\n  Cartesian2,\n} from \"cesium\";\nimport { isEqual } from \"lodash-es\";\nimport type { CesiumComponentRef } from \"resium\";\nimport type { Viewer as CesiumViewer, ImageryProvider, TerrainProvider } from \"cesium\";\n\nimport { Camera } from \"@reearth/util/value\";\n\nimport type { SelectPrimitiveOptions, Ref as EngineRef, SceneProperty } from \"..\";\nimport imagery from \"./imagery\";\nimport useEngineRef from \"./useEngineRef\";\nimport { getCamera } from \"./common\";\n\nexport default ({\n  ref,\n  property,\n  camera,\n  selectedPrimitiveId,\n  onPrimitiveSelect,\n  onCameraChange,\n}: {\n  ref: React.ForwardedRef<EngineRef>;\n  property?: SceneProperty;\n  camera?: Camera;\n  selectedPrimitiveId?: string;\n  onPrimitiveSelect?: (id?: string, options?: SelectPrimitiveOptions) => void;\n  onCameraChange?: (camera: Camera) => void;\n}) => {\n  const cesium = useRef<CesiumComponentRef<CesiumViewer>>(null);\n\n  // Ensure to set Cesium Ion access token before the first rendering\n  useLayoutEffect(() => {\n    const { ion } = property?.default ?? {};\n    if (ion) {\n      Ion.defaultAccessToken = ion;\n    }\n  }, [property?.default]);\n\n  // expose ref\n  const engineAPI = useEngineRef(ref, cesium);\n\n  // imagery layers\n  const [imageryLayers, setImageryLayers] =\n    useState<[string, ImageryProvider, number | undefined, number | undefined][]>();\n\n  useDeepCompareEffect(() => {\n    const newTiles = (property?.tiles?.length ? property.tiles : undefined)\n      ?.map(\n        t =>\n          [t.id, t.tile_type || \"default\", t.tile_url, t.tile_minLevel, t.tile_maxLevel] as const,\n      )\n      .map<[string, ImageryProvider | null, number | undefined, number | undefined]>(\n        ([id, type, url, min, max]) => [\n          id,\n          type ? (url ? imagery[type](url) : imagery[type]()) : null,\n          min,\n          max,\n        ],\n      )\n      .filter(\n        (t): t is [string, ImageryProvider, number | undefined, number | undefined] => !!t[1],\n      );\n    setImageryLayers(newTiles);\n  }, [property?.tiles ?? []]);\n\n  const terrainProvider = useMemo((): TerrainProvider | undefined => {\n    return property?.default?.terrain ? createWorldTerrain() : new EllipsoidTerrainProvider();\n  }, [property?.default?.terrain]);\n\n  const backgroundColor = useMemo(\n    () =>\n      property?.default?.bgcolor ? Color.fromCssColorString(property.default.bgcolor) : undefined,\n    [property?.default?.bgcolor],\n  );\n\n  // move to initial position at startup\n  const initialCameraFlight = useRef(false);\n\n  useEffect(() => {\n    if (!property?.default?.camera || initialCameraFlight.current) return;\n    initialCameraFlight.current = true;\n    engineAPI.flyTo(property.default.camera, { duration: 0 });\n  }, [engineAPI, property?.default?.camera]);\n\n  useEffect(() => {\n    if (initialCameraFlight.current && !property) {\n      initialCameraFlight.current = false;\n    }\n  }, [property]);\n\n  // call onCameraChange event after moving camera\n  const onCameraMoveEnd = useCallback(() => {\n    const viewer = cesium?.current?.cesiumElement;\n    if (!viewer || viewer.isDestroyed()) return;\n\n    const c = getCamera(viewer);\n    if (c && !isEqual(c, camera)) {\n      onCameraChange?.(c);\n    }\n  }, [onCameraChange, camera]);\n\n  // manage layer selection\n  useEffect(() => {\n    const viewer = cesium.current?.cesiumElement;\n    if (!viewer || viewer.isDestroyed()) return;\n\n    const entity = selectedPrimitiveId ? viewer.entities.getById(selectedPrimitiveId) : undefined;\n    if (viewer.selectedEntity === entity || (entity && !selectable(entity))) return;\n\n    viewer.selectedEntity = entity;\n  }, [cesium, selectedPrimitiveId]);\n\n  const selectViewerEntity = useCallback(\n    (ev: { position: Cartesian2 }) => {\n      const viewer = cesium.current?.cesiumElement;\n      if (!viewer || viewer.isDestroyed()) return;\n\n      let target = viewer.scene.pick(ev.position);\n      if (target && target.id instanceof Entity) {\n        target = target.id;\n      }\n\n      if (target instanceof Entity && selectable(target)) {\n        onPrimitiveSelect?.(target.id);\n        return;\n      }\n\n      if (target instanceof Cesium3DTileFeature) {\n        const primitiveId = (target.primitive as any)?.__resium_primitive_id as string | undefined;\n        if (primitiveId) {\n          onPrimitiveSelect?.(primitiveId, {\n            overriddenInfobox: {\n              title: target.getProperty(\"name\"),\n              content: tileProperties(target),\n            },\n          });\n        }\n        return;\n      }\n\n      onPrimitiveSelect?.();\n    },\n    [onPrimitiveSelect],\n  );\n\n  // E2E test\n  useEffect(() => {\n    if (window.REEARTH_E2E_ACCESS_TOKEN) {\n      window.REEARTH_E2E_CESIUM_VIEWER = cesium.current?.cesiumElement;\n      return () => {\n        delete window.REEARTH_E2E_CESIUM_VIEWER;\n      };\n    }\n    return;\n  }, [cesium.current?.cesiumElement]);\n\n  // update\n  useEffect(() => {\n    const viewer = cesium.current?.cesiumElement;\n    if (!viewer || viewer.isDestroyed()) return;\n\n    viewer.scene.requestRender();\n  });\n\n  return {\n    terrainProvider,\n    backgroundColor,\n    imageryLayers,\n    cesium,\n    selectViewerEntity,\n    onCameraMoveEnd,\n  };\n};\n\nconst tag = \"reearth_unselectable\";\nconst selectable = (e: Entity | undefined) => {\n  if (!e) return false;\n  const p = e.properties;\n  return !p || !p.hasProperty(tag);\n};\n\nfunction tileProperties(t: Cesium3DTileFeature): { key: string; value: any }[] {\n  return t\n    .getPropertyNames()\n    .reduce<{ key: string; value: any }[]>(\n      (a, b) => [...a, { key: b, value: t.getProperty(b) }],\n      [],\n    );\n}\n","import { useImperativeHandle, Ref, RefObject, useMemo } from \"react\";\nimport { Viewer } from \"cesium\";\nimport type { CesiumComponentRef } from \"resium\";\n\nimport type { Ref as EngineRef } from \"..\";\nimport { getLocationFromScreenXY, flyTo, lookAt, getCamera } from \"./common\";\nimport builtinPrimitives from \"./builtin\";\n\nexport default function useEngineRef(\n  ref: Ref<EngineRef>,\n  cesium: RefObject<CesiumComponentRef<Viewer>>,\n): EngineRef {\n  const e = useMemo(\n    (): EngineRef => ({\n      name: \"cesium\",\n      requestRender: () => {\n        const viewer = cesium.current?.cesiumElement;\n        if (!viewer || viewer.isDestroyed()) return;\n        viewer.scene?.requestRender();\n      },\n      getCamera: () => {\n        const viewer = cesium.current?.cesiumElement;\n        if (!viewer || viewer.isDestroyed()) return;\n        return getCamera(viewer);\n      },\n      getLocationFromScreenXY: (x, y) => {\n        const viewer = cesium.current?.cesiumElement;\n        if (!viewer || viewer.isDestroyed()) return;\n        return getLocationFromScreenXY(viewer.scene, x, y);\n      },\n      flyTo: (camera, options) => {\n        const viewer = cesium.current?.cesiumElement;\n        if (!viewer || viewer.isDestroyed()) return;\n        flyTo(viewer.scene?.camera, { ...getCamera(viewer), ...camera }, options);\n      },\n      lookAt: (camera, options) => {\n        const viewer = cesium.current?.cesiumElement;\n        if (!viewer || viewer.isDestroyed()) return;\n        lookAt(viewer.scene?.camera, { ...getCamera(viewer), ...camera }, options);\n      },\n      zoomIn: amount => {\n        const viewer = cesium.current?.cesiumElement;\n        if (!viewer || viewer.isDestroyed()) return;\n        viewer.scene?.camera.zoomIn(amount);\n      },\n      zoomOut: amount => {\n        const viewer = cesium.current?.cesiumElement;\n        if (!viewer || viewer.isDestroyed()) return;\n        viewer?.scene?.camera.zoomOut(amount);\n      },\n      builtinPrimitives,\n    }),\n    [cesium],\n  );\n\n  useImperativeHandle(ref, () => e, [e]);\n\n  return e;\n}\n","import { useEffect, useRef } from \"react\";\nimport { useCesium } from \"resium\";\nimport { isEqual } from \"lodash-es\";\n\nimport { Camera } from \"@reearth/util/value\";\nimport { flyTo } from \"./common\";\n\nexport type Props = {\n  camera?: Camera;\n  duration?: number;\n  easing?: (time: number) => number;\n};\n\nconst CameraFlyTo = ({ camera, duration, easing }: Props): null => {\n  const { viewer } = useCesium() ?? {};\n  const prev = useRef<Camera>();\n\n  useEffect(() => {\n    if (!viewer || !camera || isEqual(camera, prev.current)) return;\n    prev.current = { ...camera };\n    flyTo(viewer.camera, camera, { duration, easing });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [viewer, camera]); // ignore duration and easing\n\n  return null;\n};\n\nexport default CameraFlyTo;\n","import React, { forwardRef } from \"react\";\nimport {\n  Viewer,\n  Clock,\n  Globe,\n  Fog,\n  Sun,\n  SkyAtmosphere,\n  ImageryLayer,\n  Scene,\n  SkyBox,\n  Camera,\n  ScreenSpaceEventHandler,\n  ScreenSpaceEvent,\n} from \"resium\";\nimport { ScreenSpaceEventType } from \"cesium\";\n\nimport Loading from \"@reearth/components/atoms/Loading\";\nimport useHooks from \"./hooks\";\nimport CameraFlyTo from \"./CameraFlyTo\";\nimport type { EngineProps, Ref as EngineRef } from \"..\";\n\nexport type { EngineProps as Props } from \"..\";\n\nconst Cesium: React.ForwardRefRenderFunction<EngineRef, EngineProps> = (\n  {\n    className,\n    style,\n    property,\n    camera,\n    small,\n    ready,\n    children,\n    selectedPrimitiveId,\n    onPrimitiveSelect,\n    onCameraChange,\n  },\n  ref,\n) => {\n  const {\n    terrainProvider,\n    backgroundColor,\n    imageryLayers,\n    cesium,\n    selectViewerEntity,\n    onCameraMoveEnd,\n  } = useHooks({\n    ref,\n    property,\n    camera,\n    selectedPrimitiveId,\n    onPrimitiveSelect,\n    onCameraChange,\n  });\n\n  return (\n    <>\n      <Viewer\n        ref={cesium}\n        className={className}\n        animation={false}\n        timeline={false}\n        fullscreenButton={false}\n        homeButton={false}\n        geocoder={false}\n        infoBox={false}\n        imageryProvider={false}\n        baseLayerPicker={false}\n        navigationHelpButton={false}\n        projectionPicker={false}\n        sceneModePicker={false}\n        creditContainer={creditContainer}\n        style={{\n          width: small ? \"300px\" : \"auto\",\n          height: small ? \"300px\" : \"100%\",\n          display: ready ? undefined : \"none\",\n          ...style,\n        }}\n        requestRenderMode={!property?.timeline?.animation}\n        maximumRenderTimeChange={property?.timeline?.animation ? undefined : Infinity}\n        shadows={!!property?.atmosphere?.shadows}>\n        <Clock shouldAnimate={!!property?.timeline?.animation} />\n        <ScreenSpaceEventHandler useDefault>\n          <ScreenSpaceEvent type={ScreenSpaceEventType.LEFT_CLICK} action={selectViewerEntity} />\n          {/* remove default double click event */}\n          <ScreenSpaceEvent type={ScreenSpaceEventType.LEFT_DOUBLE_CLICK} />\n        </ScreenSpaceEventHandler>\n        <Camera onMoveEnd={onCameraMoveEnd} />\n        <CameraFlyTo camera={camera} duration={0} />\n        <Scene backgroundColor={backgroundColor} />\n        <SkyBox show={property?.default?.skybox ?? true} />\n        <Fog\n          enabled={property?.atmosphere?.fog ?? true}\n          density={property?.atmosphere?.fog_density}\n        />\n        <Sun show={property?.atmosphere?.enable_sun ?? true} />\n        <SkyAtmosphere show={property?.atmosphere?.sky_atmosphere ?? true} />\n        <Globe\n          terrainProvider={terrainProvider}\n          depthTestAgainstTerrain={!!property?.default?.depthTestAgainstTerrain}\n          enableLighting={!!property?.atmosphere?.enable_lighting}\n          showGroundAtmosphere={property?.atmosphere?.ground_atmosphere ?? true}\n          atmosphereSaturationShift={property?.atmosphere?.surturation_shift}\n          atmosphereHueShift={property?.atmosphere?.hue_shift}\n          atmosphereBrightnessShift={property?.atmosphere?.brightness_shift}\n          {...{\n            // TODO: update resium\n            terrainExaggeration: property?.default?.terrainExaggeration,\n            terrainExaggerationRelativeHeight: property?.default?.terrainExaggerationRelativeHeight,\n          }}\n        />\n        {imageryLayers?.map(([id, im, min, max]) => (\n          <ImageryLayer\n            key={id}\n            imageryProvider={im}\n            minimumTerrainLevel={min}\n            maximumTerrainLevel={max}\n          />\n        ))}\n        {ready ? children : null}\n      </Viewer>\n      {!ready && <Loading />}\n    </>\n  );\n};\n\nconst creditContainer = document.createElement(\"div\");\n\nexport default forwardRef(Cesium);\n","import React from \"react\";\nimport { CameraFlyTo, CameraFlyToBoundingSphere } from \"resium\";\nimport { BoundingSphere, Cartesian3 } from \"cesium\";\nimport { action } from \"@storybook/addon-actions\";\n\nimport { Provider } from \"../../context\";\nimport { context } from \"../../storybook\";\nimport CesiumEngine from \".\";\nimport { SceneProperty } from \"..\";\n\nexport type { SceneProperty } from \"..\";\n\nexport const location = { lat: 35.652832, lng: 139.839478, height: 1000 };\n\n// For storybook\nexport const V: React.FC<{\n  location?: { lat: number; lng: number };\n  lookAt?: { lat: number; lng: number; height: number; range: number };\n  property?: SceneProperty;\n}> = ({ children, location: l = location, lookAt, property }) => {\n  return (\n    <Provider value={context}>\n      <CesiumEngine\n        ready\n        property={{\n          ...property,\n          tiles: property?.tiles ?? [{ id: \"default\", tile_type: \"default\" }],\n        }}\n        onPrimitiveSelect={action(\"Cesium: onLayerSelect\")}>\n        {lookAt ? (\n          <CameraFlyToBoundingSphere\n            boundingSphere={\n              new BoundingSphere(\n                Cartesian3.fromDegrees(lookAt.lng, lookAt.lat, lookAt.height),\n                lookAt.range,\n              )\n            }\n            duration={0}\n            once\n          />\n        ) : (\n          <CameraFlyTo\n            destination={Cartesian3.fromDegrees((l ?? location).lng, (l ?? location).lat, 10000)}\n            duration={0}\n            once\n          />\n        )}\n        {children}\n      </CesiumEngine>\n    </Provider>\n  );\n};\n","import React, { useRef, useCallback, useEffect } from \"react\";\nimport { usePopper } from \"react-popper\";\nimport Icon from \"@reearth/components/atoms/Icon\";\n\nimport { styled, css } from \"@reearth/theme\";\nimport Portal from \"../Portal\";\n\nexport interface Props {\n  className?: string;\n  pos?: \"top\" | \"bottom\";\n  mode?: \"hidden\" | \"dragging\" | \"visible\";\n  onButtonClick?: () => void;\n  children?: React.ReactNode;\n}\n\nconst InsertionBar: React.FC<Props> = ({\n  className,\n  children,\n  pos,\n  mode = \"visible\",\n  onButtonClick,\n}) => {\n  const referenceElement = useRef<HTMLDivElement>(null);\n  const popperElement = useRef<HTMLDivElement>(null);\n  const { styles, attributes, update: updatePopper } = usePopper(\n    referenceElement.current,\n    popperElement.current,\n    {\n      placement: \"bottom\",\n      strategy: \"fixed\",\n      modifiers: [\n        {\n          name: \"eventListeners\",\n          enabled: false,\n          options: {\n            scroll: false,\n            resize: false,\n          },\n        },\n      ],\n    },\n  );\n\n  const handleClick = useCallback(() => {\n    if (mode !== \"visible\") return;\n    onButtonClick?.();\n  }, [mode, onButtonClick]);\n\n  // TODO: わかりずらい。もっといい方法ありそう。\n  useEffect(() => {\n    if (children) {\n      updatePopper?.();\n    }\n  }, [children, updatePopper]);\n\n  return (\n    <>\n      <Wrapper\n        ref={referenceElement}\n        className={className}\n        hovered={!!children}\n        pos={pos}\n        mode={mode}\n        onClick={handleClick}>\n        <InsertLine className=\"WORKAROUND_INSERTION_BAR\" circleVisible={mode === \"dragging\"} />\n        <ButtonWrapper\n          className=\"WORKAROUND_INSERTION_BAR\"\n          visible={mode === \"visible\"}\n          hovered={!!children}>\n          <StyledAddButton onClick={handleClick} icon=\"plusSquare\" size={13} />\n        </ButtonWrapper>\n      </Wrapper>\n      <Portal>\n        <div ref={popperElement} style={{ ...styles.popper, zIndex: 1000 }} {...attributes.popper}>\n          {children}\n        </div>\n      </Portal>\n    </>\n  );\n};\n\nconst StyledAddButton = styled(Icon)`\n  background: ${props => props.theme.infoBox.bg};\n  cursor: pointer;\n  display: block;\n  user-select: nocolor: ${props => props.theme.infoBox.accent};\n  padding: 0 3px;\n  `;\n\nconst ButtonWrapper = styled.div<{ visible?: boolean; hovered?: boolean }>`\n  display: ${props => (props.visible ? \"block\" : \"none\")};\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: ${props => (props.hovered ? props.theme.infoBox.mainText : props.theme.infoBox.accent)};\n`;\n\nconst InsertLine = styled.div<{ circleVisible?: boolean }>`\n  position: absolute;\n  left: 15px;\n  right: 15px;\n  top: 50%;\n  transform: translateY(-50%);\n  height: 2px;\n  background: ${props => props.theme.main.accent};\n\n  &::before {\n    display: ${props => (props.circleVisible ? \"block\" : \"none\")};\n    content: \"\";\n    position: absolute;\n    left: 0;\n    top: -4px;\n    width: 6px;\n    height: 6px;\n    border: 2px solid ${props => props.theme.main.accent};\n    border-radius: 50%;\n    background: ${props => props.theme.layers.bg};\n  }\n`;\n\ntype WrapperProps = {\n  mode?: \"visible\" | \"dragging\" | \"hidden\";\n  pos?: \"top\" | \"bottom\";\n  hovered?: boolean;\n};\n\nconst Wrapper = styled.div<WrapperProps>`\n  ${({ mode }) =>\n    mode === \"hidden\" &&\n    css`\n      visibility: hidden;\n      pointer-events: none;\n    `}\n  position: absolute;\n  left: 0;\n  width: 100%;\n  z-index: ${props => props.theme.zIndexes.infoBox};\n  top: ${props => (props.pos === \"top\" ? \"0%\" : \"100%\")};\n  transform: translateY(-50%);\n  height: 15px;\n  cursor: pointer;\n\n  & .WORKAROUND_INSERTION_BAR {\n    opacity: ${props => (!props.hovered && props.mode === \"visible\" ? \"0\" : \"1\")};\n    transition: all 0.5s;\n  }\n\n  &:hover .WORKAROUND_INSERTION_BAR {\n    opacity: 1;\n  }\n`;\n\nexport default InsertionBar;\n","import React, { PropsWithChildren, useState } from \"react\";\n\nimport { styled } from \"@reearth/theme\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport InsertionBar from \"@reearth/components/atoms/InsertionBar\";\n\nimport useHooks from \"./hooks\";\n\nexport type Props = {\n  id?: string;\n  index?: number;\n  isEditable?: boolean;\n  isBuilt?: boolean;\n  isSelected?: boolean;\n  insertionPopUpPosition?: \"top\" | \"bottom\";\n  isInfoboxHovered?: boolean;\n  dragDisabled?: boolean;\n  renderInsertionPopUp?: React.ReactNode;\n  onInsert?: (pos: \"top\" | \"bottom\") => void;\n  onMove?: (blockId: string, fromIndex: number, toIndex: number) => void;\n};\n\nexport default function Field({\n  children,\n  id,\n  index,\n  isEditable,\n  isBuilt,\n  isSelected,\n  renderInsertionPopUp,\n  insertionPopUpPosition,\n  dragDisabled,\n  onMove,\n  onInsert,\n}: PropsWithChildren<Props>): JSX.Element | null {\n  const { dragRef, dropRef, isHovered, isDragging, previewRef } = useHooks({\n    id,\n    index,\n    onMove,\n  });\n  const [hover, setHover] = useState(false);\n\n  return (\n    <Wrapper ref={dropRef}>\n      <BlockWrapper\n        onMouseEnter={() => setHover(true)}\n        onMouseLeave={() => setHover(false)}\n        isDragging={isDragging}\n        isEditable={isEditable && !isBuilt}\n        ref={previewRef}>\n        {children}\n        {isEditable && !isBuilt && !dragDisabled && hover && (\n          <Handle\n            ref={dragRef}\n            isHovered={!!isEditable && !isBuilt && hover && !isSelected}\n            isSelected={!!isEditable && !isBuilt && !!isSelected}>\n            <Icon icon=\"arrowUpDown\" size={24} />\n          </Handle>\n        )}\n      </BlockWrapper>\n      {!isBuilt && isEditable && (\n        <>\n          <InsertionBar\n            mode={\n              isEditable && isHovered === \"top\"\n                ? \"dragging\"\n                : isEditable && !isHovered && index === 0\n                ? \"visible\"\n                : \"hidden\"\n            }\n            pos=\"top\"\n            onButtonClick={() => onInsert?.(\"top\")}>\n            {insertionPopUpPosition === \"top\" && renderInsertionPopUp}\n          </InsertionBar>\n          <InsertionBar\n            mode={\n              isEditable && isHovered === \"bottom\"\n                ? \"dragging\"\n                : !isEditable || isHovered\n                ? \"hidden\"\n                : \"visible\"\n            }\n            pos=\"bottom\"\n            onButtonClick={() => onInsert?.(\"bottom\")}>\n            {insertionPopUpPosition === \"bottom\" && renderInsertionPopUp}\n          </InsertionBar>\n        </>\n      )}\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  position: relative;\n  margin: 0;\n  padding: 10px 0;\n  border-radius: 6px;\n`;\n\nconst BlockWrapper = styled.div<{\n  isDragging?: boolean;\n  isEditable?: boolean;\n}>`\n  position: relative;\n  opacity: ${props => (props.isDragging ? \"0.4\" : \"1\")};\n  cursor: ${props => (props.isEditable ? \"pointer\" : \"\")};\n  box-sizing: border-box;\n`;\n\nconst Handle = styled.div<{ isHovered: boolean; isSelected: boolean }>`\n  position: absolute;\n  z-index: 2;\n  top: 0;\n  right: 0;\n  padding: 5px;\n  margin: 3px 6px;\n  color: ${props =>\n    props.isHovered\n      ? props.theme.infoBox.border\n      : props.isSelected\n      ? props.theme.infoBox.accent2\n      : \"none\"};\n  cursor: grab;\n  user-select: none;\n\n  &:active {\n    cursor: grabbing;\n  }\n`;\n","import { useState, useRef, useMemo } from \"react\";\nimport { useDrag, useDrop, DropOptions } from \"@reearth/util/use-dnd\";\n\nexport default ({\n  id,\n  index,\n  onMove,\n}: {\n  id?: string;\n  index?: number;\n  onMove?: (blockId: string, fromIndex: number, toIndex: number) => void;\n}) => {\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const isHoveredRef = useRef<\"top\" | \"bottom\">();\n  const [isHovered, setHovered] = useState<\"top\" | \"bottom\">();\n\n  const {\n    ref: dragRef,\n    isDragging,\n    previewRef,\n  } = useDrag<\"block\">(\n    id && typeof index === \"number\"\n      ? {\n          type: \"block\",\n          id,\n          index,\n        }\n      : undefined,\n    false,\n    (_item, dropper) => {\n      if (!dropper || !onMove || !id || dropper.type !== \"block\" || typeof index !== \"number\")\n        return;\n      onMove(id, index, dropper.index);\n    },\n  );\n\n  const { ref: dropRef } = useDrop(\n    useMemo<DropOptions<\"block\">>(\n      () => ({\n        accept: [\"block\"],\n        canDrop: item => item.id !== id,\n        hover(_item, context) {\n          if (!context.canDrop || !context.position) {\n            isHoveredRef.current = undefined;\n            setHovered(undefined);\n            return;\n          }\n\n          const r = context.position.y / context.position.h;\n          const hovered = r >= 0 && r <= 1 ? (r <= 0.5 ? \"top\" : \"bottom\") : undefined;\n\n          setHovered(hovered);\n          isHoveredRef.current = hovered;\n        },\n        drop(item) {\n          const hovered = isHoveredRef.current;\n          setHovered(undefined);\n          isHoveredRef.current = undefined;\n          if (item.type !== \"block\" || !id || typeof index !== \"number\") return;\n          const newIndex = index + (item.index <= index ? 0 : hovered === \"bottom\" ? 1 : 0);\n          if (newIndex === item.index) {\n            return; // not moved\n          }\n          return {\n            type: \"block\",\n            id: id,\n            index: newIndex,\n          };\n        },\n        wrapperRef,\n      }),\n      [id, index],\n    ),\n  );\n\n  dropRef(wrapperRef);\n\n  return {\n    isHovered,\n    dragRef,\n    dropRef: wrapperRef,\n    previewRef,\n    isDragging,\n  };\n};\n","import { useRef } from \"react\";\n\nconst useBuffered = <T>(state: T, dep: boolean): T => {\n  const bufferedState = useRef(state);\n  if (dep) {\n    bufferedState.current = state;\n  }\n  return bufferedState.current;\n};\n\nexport default useBuffered;\n","import React, { useRef, useEffect } from \"react\";\nimport { useClickAway } from \"react-use\";\nimport { useTransition, TransitionStatus } from \"@rot1024/use-transition\";\n\nimport { styled } from \"@reearth/theme\";\nimport useBuffered from \"@reearth/util/use-buffered\";\nimport { SerializedStyles } from \"@emotion/react\";\n\nexport type Props = {\n  className?: string;\n  visible?: boolean;\n  styles?: SerializedStyles;\n  onClose?: () => void;\n  onHover?: (hovered: boolean) => void;\n  onClickAway?: (e: Event) => void;\n  onEnter?: () => void;\n  onEntered?: () => void;\n  onExit?: () => void;\n  onExited?: () => void;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nconst FloatedPanel: React.FC<Props> = ({\n  className,\n  visible,\n  styles,\n  children,\n  onHover,\n  onClick,\n  onClickAway,\n  onEnter,\n  onEntered,\n  onExit,\n  onExited,\n}) => {\n  const ref = useRef<HTMLDivElement>(null);\n  useClickAway(ref, e => onClickAway?.(e));\n  const transition = useTransition(!!visible, 200, {\n    mountOnEnter: true,\n    unmountOnExit: true,\n  });\n\n  // visibleがtrueの時のみ更新することで、InfoBoxを閉じるアニメーションが走る際に中身が消えないようにする\n  const bChildren = useBuffered<typeof children>(children, !!visible);\n  const bStyles = useBuffered(styles, !!visible);\n\n  useEffect(() => {\n    if (transition === \"entering\") onEnter?.();\n    if (transition === \"entered\") onEntered?.();\n    if (transition === \"exiting\") onExit?.();\n    if (transition === \"exited\") onExited?.();\n  }, [transition, onEnter, onEntered, onExit, onExited]);\n\n  return transition === \"unmounted\" ? null : (\n    <Wrapper\n      ref={ref}\n      className={className}\n      onClick={onClick}\n      onMouseEnter={() => onHover?.(true)}\n      onMouseLeave={() => onHover?.(false)}\n      transition={transition}\n      styles={bStyles}>\n      {bChildren}\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div<{\n  transition?: TransitionStatus;\n  styles?: SerializedStyles;\n}>`\n  position: absolute;\n  transition: ${({ transition }) =>\n    transition === \"entering\" || transition === \"exiting\" ? \"all 0.2s ease\" : \"\"};\n  transform: ${({ transition }) =>\n    transition === \"entering\" || transition === \"entered\" ? \"translateX(0%)\" : \"translateX(100%)\"};\n  opacity: ${({ transition }) =>\n    transition === \"entering\" || transition === \"entered\" ? \"1\" : \"0\"};\n  ${({ styles }) => styles}\n`;\n\nexport default FloatedPanel;\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { useClickAway, useMedia } from \"react-use\";\n\nimport { styled, css, useTheme } from \"@reearth/theme\";\nimport fonts from \"@reearth/theme/fonts\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\nimport { Typography, typographyStyles } from \"@reearth/util/value\";\nimport Flex from \"@reearth/components/atoms/Flex\";\nimport FloatedPanel from \"@reearth/components/atoms/FloatedPanel\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport Text from \"@reearth/components/atoms/Text\";\n\nexport type InfoboxStyles = {\n  typography?: Typography;\n  bgcolor?: string;\n};\n\nexport type Props = {\n  className?: string;\n  infoboxKey?: string;\n  title?: string;\n  size?: \"small\" | \"large\";\n  visible?: boolean;\n  noContent?: boolean;\n  styles?: InfoboxStyles;\n  onClick?: () => void;\n  onClickAway?: () => void;\n  onEnter?: () => void;\n  onEntered?: () => void;\n  onExit?: () => void;\n  onExited?: () => void;\n};\n\nconst InfoBox: React.FC<Props> = ({\n  className,\n  infoboxKey,\n  title,\n  size,\n  visible,\n  noContent,\n  styles,\n  children,\n  onClick,\n  onClickAway,\n  onEnter,\n  onEntered,\n  onExit,\n  onExited,\n}) => {\n  const theme = useTheme();\n  const isSmallWindow = useMedia(\"(max-width: 624px)\");\n  const ref = useRef<HTMLDivElement>(null);\n  const ref2 = useRef<HTMLDivElement>(null);\n  const [open, setOpen] = useState(!isSmallWindow);\n  useClickAway(ref, () => onClickAway?.());\n\n  const handleOpen = useCallback(() => {\n    if (open || (noContent && isSmallWindow)) return;\n    setOpen(true);\n  }, [open, noContent, isSmallWindow]);\n\n  const handleClose = useCallback(() => {\n    setOpen(false);\n  }, []);\n\n  useEffect(() => {\n    if (isSmallWindow) setOpen(false);\n  }, [infoboxKey, isSmallWindow]);\n\n  useEffect(() => {\n    if (!ref2.current) return;\n    ref2.current.scrollLeft = 0;\n    ref2.current.scrollTop = 0;\n  }, [infoboxKey]);\n\n  const wrapperStyles = useMemo(\n    () => css`\n      background-color: ${styles?.bgcolor || theme.infoBox.bg};\n      ${typographyStyles({ color: theme.infoBox.mainText, ...styles?.typography })}\n    `,\n    [theme.infoBox.mainText, theme.infoBox.bg, styles?.bgcolor, styles?.typography],\n  );\n\n  return (\n    <StyledFloatedPanel\n      className={className}\n      visible={visible}\n      styles={wrapperStyles}\n      onClick={onClick}\n      onEnter={onEnter}\n      onEntered={onEntered}\n      onExit={onExit}\n      onExited={onExited}\n      floated>\n      <Wrapper ref={ref} size={size} open={open}>\n        <TitleFlex\n          flex=\"0 0 auto\"\n          justify={open ? \"flex-start\" : \"space-evenly\"}\n          direction=\"column\"\n          onClick={handleOpen}>\n          {isSmallWindow && !noContent && <StyledIcon icon=\"arrowUp\" size={24} open={open} />}\n          <Text size=\"m\" weight=\"bold\">\n            <TitleText>{title || \" \"}</TitleText>\n          </Text>\n          {!isSmallWindow && <StyledIcon icon=\"arrowDown\" size={24} open={open} />}\n        </TitleFlex>\n        <CloseBtn icon=\"cancel\" size={16} onClick={handleClose} open={open} />\n        <Content ref={ref2} open={open}>\n          {children}\n        </Content>\n      </Wrapper>\n    </StyledFloatedPanel>\n  );\n};\n\nconst StyledFloatedPanel = styled(FloatedPanel)<{\n  floated?: boolean;\n}>`\n  position: ${props => (props.floated ? \"absolute\" : \"static\")};\n  top: 50px;\n  right: 10px;\n  max-height: calc(100% - 85px);\n  box-shadow: 0 4px 4px rgba(0, 0, 0, 0.25);\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  z-index: ${props => props.theme.zIndexes.propertyFieldPopup};\n\n  @media (max-width: 624px) {\n    left: 16px;\n    right: 16px;\n    top: auto;\n    bottom: 80px;\n  }\n`;\n\nconst Wrapper = styled.div<{ size?: \"small\" | \"large\"; open?: boolean }>`\n  overflow: hidden;\n  width: ${props => (props.size == \"large\" ? \"624px\" : \"346px\")};\n  max-height: calc(100% - 85px);\n  display: flex;\n  flex-direction: column;\n  min-height: ${({ open }) => (open ? \"280px\" : \"100%\")};\n\n  @media (max-width: 624px) {\n    width: auto;\n  }\n`;\n\nconst TitleFlex = styled(Flex)`\n  margin: ${metricsSizes[\"m\"]}px auto;\n  text-align: center;\n  box-sizing: border-box;\n  cursor: pointer;\n  width: 75%;\n`;\n\nconst StyledIcon = styled(Icon)<{ open?: boolean }>`\n  display: ${({ open }) => (open ? \"none\" : \"block\")};\n`;\n\nconst TitleText = styled.span`\n  line-height: ${metricsSizes[\"2xl\"]}px;\n`;\n\nconst CloseBtn = styled(Icon)<{ open?: boolean }>`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  cursor: pointer;\n  color: ${props => props.theme.main.text};\n  display: ${({ open }) => (open ? \"block\" : \"none\")};\n`;\n\nconst Content = styled.div<{ open?: boolean }>`\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  flex: auto;\n  font-size: ${fonts.sizes.s}px;\n  padding: 10px 0 20px 0;\n\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n\n  a {\n    color: inherit;\n  }\n\n  max-height: ${({ open }) => (open ? \"50vh\" : \"0\")};\n  padding: ${({ open }) => (open ? \"20px 0\" : \"0\")};\n`;\n\nexport default InfoBox;\n","import React, { useState } from \"react\";\nimport { useIntl } from \"react-intl\";\n\nimport { styled, useTheme } from \"@reearth/theme\";\nimport { ValueTypes, ValueType, Typography } from \"@reearth/util/value\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport AdditionButton from \"@reearth/components/atoms/AdditionButton\";\nimport Icon from \"@reearth/components/atoms/Icon\";\n\nimport PluginBlock, { Block as BlockType, Primitive } from \"../Block\";\nimport Frame from \"./Frame\";\nimport Field from \"./Field\";\nimport useHooks from \"./hooks\";\n\nexport type { Primitive } from \"../Block\";\n\nexport type Block = BlockType & {\n  propertyId?: string;\n  pluginProperty?: any;\n};\n\nexport type InfoboxProperty = {\n  default?: {\n    title?: string;\n    size?: \"small\" | \"large\";\n    typography?: Typography;\n    bgcolor?: string;\n  };\n};\n\nexport type Props = {\n  className?: string;\n  infoboxKey?: string;\n  property?: InfoboxProperty;\n  sceneProperty?: any;\n  primitive?: Primitive;\n  blocks?: Block[];\n  title?: string;\n  isEditable?: boolean;\n  isBuilt?: boolean;\n  selectedBlockId?: string;\n  visible?: boolean;\n  pluginBaseUrl?: string;\n  onBlockSelect?: (id?: string) => void;\n  onBlockChange?: <T extends ValueType>(\n    propertyId: string,\n    schemaItemId: string,\n    fieldId: string,\n    value: ValueTypes[T],\n    type: T,\n  ) => void;\n  onBlockMove?: (id: string, fromIndex: number, toIndex: number) => void;\n  onBlockDelete?: (id: string) => void;\n  onBlockInsert?: (bi: number, i: number, pos?: \"top\" | \"bottom\") => void;\n  renderInsertionPopUp?: (onSelect: (bi: number) => void, onClose: () => void) => React.ReactNode;\n};\n\nconst Infobox: React.FC<Props> = ({\n  className,\n  infoboxKey,\n  property,\n  sceneProperty,\n  primitive,\n  blocks,\n  title: name,\n  isEditable,\n  isBuilt,\n  selectedBlockId,\n  visible,\n  pluginBaseUrl,\n  onBlockSelect,\n  onBlockChange,\n  onBlockMove,\n  renderInsertionPopUp,\n  onBlockInsert,\n}) => {\n  const {\n    insertionPopUpPosition,\n    onInsertionButtonClick,\n    onInsertionPopUpClose,\n    handleBlockInsert,\n  } = useHooks(onBlockInsert);\n  const theme = useTheme();\n  const intl = useIntl();\n  const [isReadyToRender, setIsReadyToRender] = useState(false);\n\n  return (\n    <Frame\n      className={className}\n      infoboxKey={infoboxKey}\n      title={property?.default?.title || name}\n      size={property?.default?.size}\n      visible={visible}\n      noContent={!blocks?.length}\n      styles={property?.default}\n      onClick={() => selectedBlockId && onBlockSelect?.(undefined)}\n      onEnter={() => setIsReadyToRender(false)}\n      onEntered={() => setIsReadyToRender(true)}\n      onExit={() => setIsReadyToRender(false)}>\n      {blocks?.map((b, i) => (\n        <Field\n          key={b.id}\n          id={b.id}\n          index={i}\n          isEditable={isEditable}\n          isBuilt={isBuilt}\n          isSelected={selectedBlockId === b.id}\n          dragDisabled={blocks.length < 2}\n          renderInsertionPopUp={\n            isReadyToRender &&\n            insertionPopUpPosition?.[0] === i &&\n            renderInsertionPopUp?.(handleBlockInsert, onInsertionPopUpClose)\n          }\n          insertionPopUpPosition={insertionPopUpPosition?.[1]}\n          onMove={onBlockMove}\n          onInsert={p => onInsertionButtonClick?.(i, p)}>\n          <PluginBlock\n            block={b}\n            isSelected={!!isEditable && !isBuilt && selectedBlockId === b.id}\n            isEditable={isEditable}\n            isBuilt={isBuilt}\n            infoboxProperty={property}\n            pluginProperty={b.pluginProperty}\n            sceneProperty={sceneProperty}\n            onChange={(...args) =>\n              b.propertyId ? onBlockChange?.(b.propertyId, ...args) : undefined\n            }\n            onClick={() => {\n              if (b.id && selectedBlockId !== b.id) {\n                onBlockSelect?.(b.id);\n              }\n            }}\n            primitive={primitive}\n            pluginBaseUrl={pluginBaseUrl}\n          />\n        </Field>\n      ))}\n      {isEditable && (blocks?.length ?? 0) === 0 && (\n        <>\n          <AdditionButton onClick={() => onInsertionButtonClick?.(0)}>\n            {isReadyToRender &&\n              insertionPopUpPosition &&\n              renderInsertionPopUp?.(handleBlockInsert, onInsertionPopUpClose)}\n          </AdditionButton>\n          <NoContentInfo>\n            <InnerWrapper size=\"xs\" color={theme.infoBox.weakText}>\n              <StyledIcon icon=\"arrowLong\" />\n              <p>\n                {intl.formatMessage({\n                  defaultMessage: `Move mouse here and click \"+\" to add content`,\n                })}\n              </p>\n            </InnerWrapper>\n          </NoContentInfo>\n        </>\n      )}\n    </Frame>\n  );\n};\n\nconst NoContentInfo = styled.div`\n  display: flex;\n  justify-content: center;\n  color: ${props => props.theme.main.weak};\n  text-align: left;\n`;\n\nconst StyledIcon = styled(Icon)`\n  margin: 0 auto 15px auto;\n  height: 66px;\n`;\n\nconst InnerWrapper = styled(Text)`\n  display: flex;\n  flex-direction: column;\n  width: 184px;\n`;\n\nexport default Infobox;\n","import { useState, useCallback } from \"react\";\n\nexport default (onBlockInsert?: (bi: number, i: number, p?: \"top\" | \"bottom\") => void) => {\n  const [insertionPopUpPosition, setInsertionPopUpPosition] =\n    useState<[number, \"top\" | \"bottom\" | undefined]>();\n\n  const onInsertionButtonClick = useCallback((i: number, p?: \"top\" | \"bottom\") => {\n    setInsertionPopUpPosition(p ? [i, p] : [i, undefined]);\n  }, []);\n\n  const onInsertionPopUpClose = useCallback(() => {\n    setInsertionPopUpPosition(undefined);\n  }, []);\n\n  const handleBlockInsert = useCallback(\n    (bi: number) => {\n      if (insertionPopUpPosition) {\n        onBlockInsert?.(bi, insertionPopUpPosition[0], insertionPopUpPosition[1]);\n        onInsertionPopUpClose();\n      }\n    },\n    [insertionPopUpPosition, onBlockInsert, onInsertionPopUpClose],\n  );\n\n  return {\n    insertionPopUpPosition,\n    onInsertionButtonClick,\n    onInsertionPopUpClose,\n    handleBlockInsert,\n  };\n};\n","export type EventCallback = (...args: any[]) => void;\nexport type EventEmitter = (type: string, ...args: any[]) => void;\n\nexport type Events = {\n  readonly on: (type: string, callback: EventCallback) => void;\n  readonly off: (type: string, callback: EventCallback) => void;\n  readonly once: (type: string, callback: EventCallback) => void;\n};\n\nexport default function events(): [\n  Events,\n  EventEmitter,\n  (name: string) => [() => EventCallback | undefined, (callback?: EventCallback) => void],\n] {\n  const e = new EventTarget();\n  const callbacks = new Map<string, Map<EventCallback, (e: Event) => void>>();\n  const getEventCallback = (type: string, cb: EventCallback): ((e: Event) => void) => {\n    let ecbs = callbacks.get(type);\n    if (!ecbs) {\n      ecbs = new Map();\n      callbacks.set(type, ecbs);\n    }\n\n    let ecb = ecbs.get(cb);\n    if (!ecb) {\n      ecb = (e: Event): void => {\n        cb(...(e as CustomEvent).detail);\n      };\n      ecbs.set(cb, ecb);\n    }\n\n    return ecb;\n  };\n  const deleteEventCallback = (type: string, cb: EventCallback): void => {\n    callbacks.get(type)?.delete(cb);\n  };\n\n  const on = (type: string, callback: EventCallback) => {\n    const ecb = getEventCallback(type, callback);\n    e.addEventListener(type, ecb);\n  };\n  const off = (type: string, callback: EventCallback) => {\n    const ecb = getEventCallback(type, callback);\n    e.removeEventListener(type, ecb);\n    deleteEventCallback(type, ecb);\n  };\n  const once = (type: string, callback: EventCallback) => {\n    const ecb = getEventCallback(type, callback);\n    e.addEventListener(type, ecb, { once: true });\n  };\n\n  const events = {\n    get on() {\n      return on;\n    },\n    get off() {\n      return off;\n    },\n    get once() {\n      return once;\n    },\n  };\n\n  return [\n    events,\n    (type: string, ...args: any[]) => e.dispatchEvent(new CustomEvent(type, { detail: args })),\n    (name: string) => eventFn(name, events),\n  ];\n}\n\nfunction eventFn(\n  name: string,\n  e: Events,\n): [() => EventCallback | undefined, (callback?: EventCallback) => void] {\n  let cb: EventCallback | undefined;\n  return [\n    () => cb,\n    (value?: EventCallback) => {\n      if (typeof cb === \"function\") {\n        e.off(name, cb);\n        cb = undefined;\n      }\n      if (value) {\n        cb = value;\n        e.on(name, value);\n      }\n    },\n  ];\n}\n","import React, { CSSProperties } from \"react\";\n\nexport type { Primitive, Block, Widget } from \"@reearth/plugin\";\nimport { Primitive, Widget, Block } from \"@reearth/plugin\";\nimport P, { Props as PluginProps } from \"@reearth/components/atoms/Plugin\";\n\nimport useHooks from \"./hooks\";\n\nexport type Props = {\n  className?: string;\n  style?: CSSProperties;\n  sourceCode?: string;\n  pluginId?: string;\n  extensionId?: string;\n  extensionType?: string;\n  visible?: boolean;\n  iFrameProps?: PluginProps[\"iFrameProps\"];\n  property?: any;\n  sceneProperty?: any;\n  pluginBaseUrl?: string;\n  primitive?: Primitive;\n  widget?: Widget;\n  block?: Block;\n};\n\nexport default function Plugin({\n  className,\n  style,\n  sourceCode,\n  pluginId,\n  extensionId,\n  extensionType,\n  iFrameProps,\n  property,\n  visible,\n  pluginBaseUrl = \"/plugins\",\n  primitive,\n  widget,\n  block,\n  sceneProperty,\n}: Props): JSX.Element | null {\n  const { skip, src, exposed, isMarshalable, staticExposed, handleError, handleMessage } = useHooks(\n    {\n      pluginId,\n      extensionId,\n      sourceCode,\n      extensionType,\n      property,\n      pluginBaseUrl,\n      primitive,\n      widget,\n      block,\n      sceneProperty,\n    },\n  );\n\n  return !skip && (src || sourceCode) ? (\n    <P\n      className={className}\n      style={style}\n      src={src}\n      sourceCode={sourceCode}\n      iFrameProps={iFrameProps}\n      canBeVisible={visible}\n      exposed={exposed}\n      isMarshalable={isMarshalable}\n      staticExposed={staticExposed}\n      onError={handleError}\n      onMessage={handleMessage}\n    />\n  ) : null;\n\n  return null;\n}\n","import { useCallback, useEffect, useMemo } from \"react\";\nimport { cloneDeep } from \"lodash-es\";\n\nimport type { GlobalThis, Primitive, Widget, Block } from \"@reearth/plugin\";\nimport type { IFrameAPI } from \"@reearth/components/atoms/Plugin\";\nimport events from \"@reearth/util/event\";\nimport { useVisualizerContext } from \"../context\";\n\nexport default function ({\n  pluginId,\n  extensionId,\n  sourceCode,\n  pluginBaseUrl,\n  extensionType,\n  block,\n}: // primitive,\n// widget,\n// property,\n// sceneProperty,\n{\n  pluginId?: string;\n  extensionId?: string;\n  sourceCode?: string;\n  pluginBaseUrl?: string;\n  extensionType?: string;\n  primitive?: Primitive;\n  widget?: Widget;\n  block?: Block;\n  property?: any;\n  sceneProperty?: any;\n}) {\n  const ctx = useVisualizerContext();\n\n  const [reearthEvents, emitReearthEvent] = useMemo(() => {\n    const [ev, emit] = events();\n    return [ev, emit] as const;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [pluginId, extensionId, sourceCode, pluginBaseUrl]);\n\n  const handleError = useCallback(\n    (err: any) => {\n      console.error(`plugin error from ${pluginId}/${extensionId}: `, err);\n    },\n    [pluginId, extensionId],\n  );\n\n  const handleMessage = useCallback(\n    (msg: any) => {\n      emitReearthEvent(\"message\", msg);\n    },\n    [emitReearthEvent],\n  );\n\n  const src =\n    pluginId && extensionId\n      ? `${pluginBaseUrl}/${`${pluginId}/${extensionId}`.replace(/\\.\\./g, \"\")}.js`\n      : undefined;\n\n  const staticExposed = useCallback(\n    ({ render, postMessage }: IFrameAPI): GlobalThis | undefined => {\n      const pluginAPI = ctx?.pluginAPI;\n      if (!pluginAPI) return;\n\n      // TODO: quickjs-emscripten throws \"Lifetime not alive\" error when iFrameApi funcs are wrapped with another function\n      const ui = {\n        show: (\n          html: string,\n          options?:\n            | {\n                visible?: boolean | undefined;\n              }\n            | undefined,\n        ) => {\n          render(html, options);\n        },\n        postMessage,\n      };\n\n      return {\n        ...pluginAPI,\n        // ...((extensionType === \"primitive\" && ctx?.engine?.pluginApi) || {}), // TODO: fix \"Lifetime not alive\" error\n        reearth: {\n          ...pluginAPI.reearth,\n          ui,\n          plugin: {\n            get id() {\n              return pluginId || \"\";\n            },\n            get extensionType() {\n              return extensionType || \"\";\n            },\n            get extensionId() {\n              return extensionId || \"\";\n            },\n          },\n          ...(reearthEvents as any),\n        },\n      };\n    },\n    [ctx?.pluginAPI, extensionId, extensionType, pluginId, reearthEvents],\n  );\n\n  const exposed = useMemo(\n    // TODO: object must be cloned to prevent \"already registered\" error from qes\n    () => {\n      return {\n        // TODO: called several times, very heavy\n        // \"reearth.primitives.primitives\": cloneDeep(ctx?.primitives),\n        // \"reearth.primitives.selected\": cloneDeep(ctx?.selectedPrimitive),\n        // \"reearth.primitives.selectionReason\": cloneDeep(ctx?.primitiveSelectionReason),\n        // \"reearth.primitives.overriddenInfobox\": cloneDeep(ctx?.primitiveOverriddenInfobox),\n        // \"reearth.plugin.property\": cloneDeep(property),\n        // \"reearth.visualizer.camera\": cloneDeep(ctx?.camera),\n        // \"reearth.visualizer.property\": cloneDeep(sceneProperty),\n        // \"reearth.primitive\": cloneDeep(primitive),\n        // \"reearth.widget\": cloneDeep(widget),\n        \"reearth.block\": cloneDeep(block),\n      };\n    },\n    [\n      // ctx?.selectedPrimitive,\n      // ctx?.primitiveSelectionReason,\n      // ctx?.primitiveOverriddenInfobox,\n      // ctx?.camera,\n      // property,\n      // sceneProperty,\n      // primitive,\n      // widget,\n      block,\n    ],\n  );\n\n  useEffect(() => {\n    return () => {\n      emitReearthEvent(\"close\");\n    };\n  }, [emitReearthEvent]);\n\n  useEffect(() => {\n    emitReearthEvent(\"update\");\n  }, [exposed, emitReearthEvent]);\n\n  useEffect(() => {\n    emitReearthEvent(\"select\", cloneDeep(ctx?.selectedPrimitive));\n  }, [ctx?.selectedPrimitive, emitReearthEvent]);\n\n  useEffect(() => {\n    if (ctx?.camera) {\n      emitReearthEvent(\"cameramove\", cloneDeep(ctx.camera));\n    }\n  }, [ctx?.camera, emitReearthEvent]);\n\n  return {\n    skip: !ctx,\n    src,\n    exposed,\n    isMarshalable: ctx?.engine?.isMarshalable,\n    staticExposed,\n    handleError,\n    handleMessage,\n  };\n}\n","import React, { useRef, useCallback, useState } from \"react\";\nimport { ScreenSpaceEvent, ScreenSpaceEventHandler } from \"resium\";\nimport { ScreenSpaceEventType } from \"cesium\";\nimport { usePopper } from \"react-popper\";\nimport { useClickAway } from \"react-use\";\n\nimport { Camera } from \"@reearth/util/value\";\nimport { fonts, styled } from \"@reearth/theme\";\nimport Icon from \"@reearth/components/atoms/Icon\";\nimport { useVisualizerContext } from \"../../context\";\n\nexport type Position = \"topleft\" | \"topright\" | \"bottomleft\" | \"bottomright\";\n\nexport type Button = {\n  id: string;\n  buttonInvisible?: boolean;\n  buttonType?: \"menu\" | \"link\" | \"camera\";\n  buttonTitle?: string;\n  buttonPosition?: Position;\n  buttonStyle?: \"text\" | \"icon\" | \"texticon\";\n  buttonIcon?: string;\n  buttonLink?: string;\n  buttonColor?: string;\n  buttonBgcolor?: string;\n  buttonCamera?: Camera;\n};\n\nexport type MenuItem = {\n  id: string;\n  menuTitle?: string;\n  menuIcon?: string;\n  menuType?: \"link\" | \"camera\" | \"border\";\n  menuLink?: string;\n  menuCamera?: Camera;\n};\n\nexport type Props = {\n  button: Button;\n  menuItems?: MenuItem[];\n  pos: Position;\n};\n\nexport default function ({ button: b, menuItems, pos }: Props): JSX.Element {\n  const ctx = useVisualizerContext();\n  const [visibleMenuButton, setVisibleMenuButton] = useState<string>();\n  const flyTo = ctx?.engine?.flyTo;\n\n  const referenceElement = useRef<HTMLDivElement>(null);\n  const popperElement = useRef<HTMLDivElement>(null);\n  const { styles, attributes } = usePopper(referenceElement.current, popperElement.current, {\n    placement:\n      pos === \"topleft\"\n        ? \"bottom-start\"\n        : pos === \"topright\"\n        ? \"bottom-end\"\n        : pos === \"bottomleft\"\n        ? \"top-start\"\n        : \"top-end\",\n    strategy: \"fixed\",\n    modifiers: [\n      {\n        name: \"eventListeners\",\n        enabled: !visibleMenuButton,\n        options: {\n          scroll: false,\n          resize: false,\n        },\n      },\n    ],\n  });\n\n  const handleClick = useCallback(\n    (b: Button | MenuItem) => () => {\n      const t = \"buttonType\" in b ? b.buttonType : \"menuType\" in b ? b.menuType : undefined;\n      if (t === \"menu\") {\n        setVisibleMenuButton(v => (v === b.id ? undefined : b.id));\n        return;\n      }\n      setVisibleMenuButton(undefined);\n\n      if (t === \"camera\") {\n        const camera =\n          \"buttonCamera\" in b ? b.buttonCamera : \"menuCamera\" in b ? b.menuCamera : undefined;\n        if (camera) {\n          flyTo?.(camera, { duration: 2 });\n        }\n        return;\n      }\n\n      let link = \"buttonLink\" in b ? b.buttonLink : \"menuLink\" in b ? b.menuLink : undefined;\n      if (!link) return;\n\n      const splitLink = link?.split(\"/\");\n      if (splitLink?.[0] !== \"http:\" && splitLink?.[0] !== \"https:\") {\n        link = \"https://\" + link;\n      }\n      window.open(link, \"_blank\", \"noopener\");\n    },\n    [flyTo],\n  );\n\n  const wrappperRef = useRef<HTMLDivElement>(null);\n  useClickAway(wrappperRef, () => setVisibleMenuButton(undefined));\n\n  return (\n    <Wrapper ref={wrappperRef}>\n      <ScreenSpaceEventHandler>\n        <ScreenSpaceEvent\n          type={ScreenSpaceEventType.LEFT_CLICK}\n          action={() => setVisibleMenuButton(undefined)}\n        />\n      </ScreenSpaceEventHandler>\n      <Button tabIndex={0} button={b} onClick={handleClick(b)} ref={referenceElement}>\n        {(b.buttonStyle === \"icon\" || b.buttonStyle === \"texticon\") && b.buttonIcon && (\n          <StyledIcon icon={b.buttonIcon} size={25} margin={!!b.buttonTitle} />\n        )}\n        {b.buttonStyle !== \"icon\" && b.buttonTitle}\n      </Button>\n      <div\n        ref={popperElement}\n        style={{\n          minWidth: \"200px\",\n          width: \"100%\",\n          position: \"absolute\",\n          display: visibleMenuButton ? styles.popper.display : \"none\",\n        }}\n        {...attributes}>\n        {visibleMenuButton && (\n          <MenuWrapper>\n            {menuItems?.map(i => (\n              <MenuItem tabIndex={0} key={i.id} item={i} onClick={handleClick(i)}>\n                {i.menuType !== \"border\" && i.menuTitle}\n              </MenuItem>\n            ))}\n          </MenuWrapper>\n        )}\n      </div>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  position: relative;\n  margin-left: 5px;\n\n  &:first-of-type {\n    margin-left: 0;\n  }\n`;\n\nconst StyledIcon = styled(Icon)<{ margin: boolean }>`\n  vertical-align: middle;\n  margin-right: ${({ margin }) => (margin ? \"5px\" : null)};\n`;\n\nconst MenuWrapper = styled.div<{ visible?: boolean }>`\n  width: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  background-color: #2b2a2f;\n  border-radius: 3px;\n  overflow-wrap: break-word;\n  hyphens: auto;\n`;\n\nconst MenuItem = styled.a<{ item?: MenuItem }>`\n  display: block;\n  font-size: ${fonts.sizes.xs}px;\n  margin: ${({ item }) => (item?.menuType === \"border\" ? \"0 5px\" : null)};\n  padding: ${({ item }) => (item?.menuType === \"border\" ? null : \"5px 20px\")};\n  cursor: ${({ item }) => (item?.menuType === \"border\" ? null : \"pointer\")};\n  border-top: ${({ item }) => (item?.menuType === \"border\" ? \"1px solid #fff\" : null)};\n  opacity: ${({ item }) => (item?.menuType === \"border\" ? \"0.5\" : null)};\n`;\n\nconst Button = styled.div<{ button?: Button }>`\n  display: flex;\n  border-radius: 3px;\n  min-width: 32px;\n  height: 32px;\n  padding: 0 10px;\n  font-size: ${fonts.sizes[\"2xs\"]}px;\n  line-height: 32px;\n  box-sizing: border-box;\n  background-color: ${({ button }) => button?.buttonBgcolor || \"#2B2A2F\"};\n  color: ${({ button }) => button?.buttonColor || \"#fff\"};\n  cursor: pointer;\n  align-items: center;\n  user-select: none;\n`;\n","import React, { useMemo } from \"react\";\nimport { groupBy } from \"lodash-es\";\n\nimport { styled } from \"@reearth/theme\";\n\nimport { Props as WidgetProps } from \"../../Widget\";\nimport MenuButton, {\n  Button as ButtonType,\n  Position as PositionType,\n  MenuItem as MenuItemType,\n} from \"./MenuButton\";\n\nexport type Props = WidgetProps<Property>;\nexport type Position = PositionType;\nexport type Button = ButtonType;\nexport type MenuItem = MenuItemType;\nexport type Property = {\n  buttons?: Button[];\n  menu?: MenuItem[];\n};\n\nconst Menu = ({ widget }: Props): JSX.Element => {\n  const { buttons, menu: menuItems } = (widget?.property as Property | undefined) ?? {};\n  const buttonsByPosition = useMemo(\n    () => groupBy(buttons, v => v.buttonPosition || \"topleft\") as { [p in Position]: Button[] },\n    [buttons],\n  );\n\n  return (\n    <>\n      {Object.entries(buttonsByPosition).map(([p, buttons]) =>\n        buttons?.length ? (\n          <Wrapper key={p} position={p as Position}>\n            {buttons.map(b =>\n              !b.buttonInvisible ? (\n                <MenuButton key={b.id} button={b} pos={p as Position} menuItems={menuItems} />\n              ) : null,\n            )}\n          </Wrapper>\n        ) : null,\n      )}\n    </>\n  );\n};\n\nconst Wrapper = styled.div<{ position?: \"topleft\" | \"topright\" | \"bottomleft\" | \"bottomright\" }>`\n  position: absolute;\n  top: ${({ position }) => (position === \"topleft\" || position === \"topright\" ? \"0\" : null)};\n  bottom: ${({ position }) =>\n    position === \"bottomleft\" || position === \"bottomright\" ? \"0\" : null};\n  left: ${({ position }) => (position === \"topleft\" || position === \"bottomleft\" ? \"0\" : null)};\n  right: ${({ position }) => (position === \"topright\" || position === \"bottomright\" ? \"0\" : null)};\n  padding: 5px;\n  display: flex;\n`;\n\nexport default Menu;\n","import React, { useState, useEffect } from \"react\";\nimport { useTransition, TransitionStatus } from \"@rot1024/use-transition\";\nimport { useTimeoutFn } from \"react-use\";\n\nimport { styled } from \"@reearth/theme\";\nimport { Camera } from \"@reearth/util/value\";\n\nimport { Props as WidgetProps } from \"../../Widget\";\nimport { useVisualizerContext } from \"../../context\";\n\nexport type Props = WidgetProps<Property>;\n\nexport type Property = {\n  overlay: {\n    overlayEnabled?: boolean;\n    overlayDelay?: number;\n    overlayDuration?: number;\n    overlayTransitionDuration?: number;\n    overlayBgcolor?: string;\n    overlayImage?: string;\n    overlayImageW?: number;\n    overlayImageH?: number;\n    overlayTitle?: string;\n  };\n  camera?: {\n    cameraPosition?: Camera;\n    cameraDuration?: number;\n    cameraDelay?: number;\n  }[];\n};\n\nconst SplashScreen = ({ widget, isBuilt }: Props): JSX.Element | null => {\n  const ctx = useVisualizerContext();\n  const { property } = widget ?? {};\n  const {\n    overlayEnabled: enabled,\n    overlayDelay: delay = 0,\n    overlayDuration: duration = 3,\n    overlayTransitionDuration: transitionDuration = 1,\n    overlayBgcolor: bgcolor,\n    overlayImage: image,\n    overlayImageW: imageW,\n    overlayImageH: imageH,\n    overlayTitle: title,\n  } = (property as Property | undefined)?.overlay ?? {};\n  const camera = (property as Property | undefined)?.camera?.filter(c => !!c.cameraPosition);\n\n  const [cameraSequence, setCameraSequence] = useState(0);\n  const [delayedCameraSequence, setDelayedCameraSequence] = useState(-1);\n  const currentCamera = camera?.[cameraSequence];\n  const delayedCurrentCamera = camera?.[delayedCameraSequence];\n\n  const flyTo = ctx?.engine?.flyTo;\n  useEffect(() => {\n    if (!flyTo) return;\n    const { cameraPosition, cameraDuration, cameraDelay } = delayedCurrentCamera ?? {};\n    if (!cameraPosition) return;\n    const to = window.setTimeout(() => {\n      flyTo(cameraPosition, {\n        duration: cameraDuration ?? 0,\n      });\n    }, (cameraDelay ?? 0) * 1000);\n    return () => clearTimeout(to);\n  }, [delayedCurrentCamera, flyTo]);\n\n  const [isActive, setActive] = useState(false);\n  const state = useTransition(isActive, transitionDuration * 1000, {\n    mountOnEnter: true,\n    unmountOnExit: true,\n  });\n\n  useTimeoutFn(() => {\n    if (isBuilt && enabled) {\n      setActive(true);\n    }\n  }, delay * 1000);\n\n  useTimeoutFn(() => {\n    setActive(false);\n  }, (delay + transitionDuration + duration) * 1000);\n\n  useEffect(() => {\n    if (!isBuilt || !currentCamera) return;\n    const t = setTimeout(() => {\n      setDelayedCameraSequence(i => i + 1);\n    }, (currentCamera?.cameraDelay ?? 0) * 1000);\n    return () => clearTimeout(t);\n  }, [currentCamera, isBuilt]);\n\n  useEffect(() => {\n    if (!isBuilt || !delayedCurrentCamera) return;\n    const t = setTimeout(() => {\n      setCameraSequence(i => i + 1);\n    }, (delayedCurrentCamera?.cameraDuration ?? 0) * 1000);\n    return () => clearTimeout(t);\n  }, [delayedCurrentCamera, isBuilt]);\n\n  return state === \"unmounted\" ? null : (\n    <Wrapper state={state} bgcolor={bgcolor} duration={transitionDuration}>\n      <Image src={image} alt={title} width={imageW} height={imageH} />\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div<{ state: TransitionStatus; bgcolor?: string; duration: number }>`\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  transition: ${({ state, duration }) =>\n    state === \"entering\" || state === \"exiting\" ? `all ${duration}s ease` : \"\"};\n  opacity: ${({ state }) => (state === \"entering\" || state === \"entered\" ? 1 : 0)};\n  background-color: ${({ bgcolor }) => bgcolor || \"rgba(0, 0, 0, 0.7)\"};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #fff;\n  padding: 16px;\n  z-index: ${props => props.theme.zIndexes.splashScreen};\n`;\n\nconst Image = styled.img`\n  max-width: 100%;\n`;\n\nexport default SplashScreen;\n","import { useState, useCallback, useEffect, useMemo } from \"react\";\nimport { Math as CesiumMath } from \"cesium\";\n\nimport { Camera as CameraValue } from \"@reearth/util/value\";\nimport { useVisualizerContext } from \"../../context\";\n\nimport type { Primitive } from \"../../Primitive\";\n\nexport type Story = {\n  title: string;\n  layer?: string;\n  layerDuration?: number;\n  layerRange?: number;\n  layerCamera?: CameraValue;\n};\n\nconst defaultRange = 50000;\nconst defaultDuration = 3;\nconst defaultCamera = {\n  lat: 0,\n  lng: 0,\n  height: 0,\n  heading: CesiumMath.toRadians(0),\n  pitch: CesiumMath.toRadians(-30),\n  roll: 0,\n  fov: CesiumMath.toRadians(60),\n};\n\nexport default function ({\n  duration = defaultDuration,\n  range = defaultRange,\n  camera = defaultCamera,\n  autoStart,\n  stories: storiesData,\n}: {\n  duration?: number;\n  camera?: CameraValue;\n  range?: number;\n  autoStart?: boolean;\n  stories?: Story[];\n}) {\n  const [menuOpen, openMenu] = useState(false);\n  const [selected, select] =\n    useState<{\n      index: number;\n      story: Story;\n      primitive?: Primitive;\n      duration: number;\n      camera: CameraValue;\n      range: number;\n      noCameraFlight?: boolean;\n    }>();\n\n  const ctx = useVisualizerContext();\n  const { flyTo, lookAt } = ctx?.engine ?? {};\n  const selectPrimitive = ctx?.pluginAPI?.reearth.primitives.select;\n  const { primitives, selectedPrimitive } = ctx ?? {};\n\n  const stories = useMemo<Story[]>(() => {\n    if (!storiesData || !primitives) return [];\n    return storiesData.map(story => {\n      const primitive = primitives.find(l => l.id === story.layer);\n      return {\n        ...story,\n        title: story.title || primitive?.title || \"\",\n      };\n    });\n  }, [primitives, storiesData]);\n\n  const selectAt = useCallback(\n    (index: number) => {\n      const story = stories?.[index];\n      if (!story) {\n        select(undefined);\n        return;\n      }\n\n      const id = story?.layer;\n\n      const primitive = id ? primitives?.find(p => p.id === id) : undefined;\n      select({\n        index,\n        story,\n        primitive,\n        duration,\n        camera,\n        range,\n      });\n      selectPrimitive?.(id, { reason: \"storytelling\" });\n    },\n    [camera, duration, primitives, range, selectPrimitive, stories],\n  );\n\n  const handleNext = useCallback(() => {\n    selectAt(typeof selected?.index === \"undefined\" ? 0 : selected.index + 1);\n  }, [selectAt, selected?.index]);\n\n  const handlePrev = useCallback(() => {\n    selectAt(typeof selected?.index === \"undefined\" ? 0 : selected.index - 1);\n  }, [selectAt, selected?.index]);\n\n  useEffect(() => {\n    openMenu(false);\n  }, [selectedPrimitive]);\n\n  useEffect(() => {\n    const id = selectedPrimitive?.id;\n    const index = id ? stories?.findIndex(l => l.layer === id) : undefined;\n    select(\n      typeof index === \"number\" && index >= 0\n        ? {\n            index,\n            story: stories[index],\n            primitive: selectedPrimitive,\n            duration,\n            camera,\n            range,\n            noCameraFlight: true,\n          }\n        : undefined,\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedPrimitive]); // ignore camera, duration, range, stories\n\n  useEffect(() => {\n    if (\n      !selected?.primitive ||\n      selected.noCameraFlight ||\n      // Photooverlays have own camera flight and that is the priority here.\n      isPhotoOverlay(selected.primitive)\n    ) {\n      return;\n    }\n\n    if (selected.story.layerCamera) {\n      flyTo?.(selected.story.layerCamera, {\n        duration: selected.story.layerDuration ?? selected.duration,\n      });\n      return;\n    }\n\n    const position = {\n      lat: selected.primitive?.property?.default?.location?.lat as number | undefined,\n      lng: selected.primitive?.property?.default?.location?.lng as number | undefined,\n      height: (selected.primitive?.property?.default?.height as number | undefined) ?? 0,\n    };\n\n    if (typeof position.lat !== \"number\" && typeof position.lng !== \"number\") return;\n\n    lookAt?.(\n      {\n        ...position,\n        heading: selected.camera.heading,\n        pitch: selected.camera.pitch,\n        range: selected.story.layerRange ?? selected.range,\n      },\n      {\n        duration: selected.story.layerDuration ?? selected.duration,\n      },\n    );\n  }, [flyTo, lookAt, selected]);\n\n  useEffect(() => {\n    if (!autoStart) return;\n    selectAt(0);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [autoStart]); // ignore selectAt\n\n  return {\n    stories,\n    menuOpen,\n    selected,\n    handleNext,\n    handlePrev,\n    selectAt,\n    openMenu,\n  };\n}\n\nfunction isPhotoOverlay(primitive: Primitive): boolean {\n  return (\n    primitive.pluginId === \"reearth\" &&\n    primitive.extensionId === \"photooverlay\" &&\n    !!primitive.property?.default?.camera\n  );\n}\n","import React, { useRef } from \"react\";\nimport { useClickAway, useMedia } from \"react-use\";\n\nimport { useTheme, styled } from \"@reearth/theme\";\nimport { metricsSizes } from \"@reearth/theme/metrics\";\nimport { Camera as CameraValue } from \"@reearth/util/value\";\nimport Flex from \"@reearth/components/atoms/Flex\";\nimport Text from \"@reearth/components/atoms/Text\";\nimport Icon from \"@reearth/components/atoms/Icon\";\n\nimport { Props as WidgetProps } from \"../../Widget\";\nimport useHooks, { Story as StoryType } from \"./hooks\";\n\nexport type { Story } from \"./hooks\";\nexport type Props = WidgetProps<Property>;\n\nexport type Property = {\n  default?: {\n    duration?: number;\n    range?: number;\n    camera?: CameraValue;\n    autoStart?: boolean;\n  };\n  stories?: StoryType[];\n};\n\nconst Storytelling = ({ widget }: Props): JSX.Element | null => {\n  const theme = useTheme();\n  const isExtraSmallWindow = useMedia(\"(max-width: 420px)\");\n\n  const storiesData = (widget?.property as Property | undefined)?.stories;\n  const { camera, duration, autoStart, range } =\n    (widget?.property as Property | undefined)?.default ?? {};\n\n  const { stories, menuOpen, selected, handleNext, handlePrev, selectAt, openMenu } = useHooks({\n    camera,\n    autoStart,\n    range,\n    duration,\n    stories: storiesData,\n  });\n\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  useClickAway(wrapperRef, () => {\n    openMenu(false);\n  });\n\n  return stories?.length > 0 ? (\n    <>\n      <Menu ref={wrapperRef} menuOpen={menuOpen}>\n        {stories?.map((story, i) => (\n          <MenuItem\n            key={story.layer}\n            selected={selected?.story.layer === story.layer}\n            align=\"center\"\n            onClick={selectAt.bind(undefined, i)}>\n            <StyledIcon\n              icon=\"marker\"\n              size={16}\n              color={\n                selected?.story.layer === story.layer ? theme.main.strongText : theme.main.text\n              }\n            />\n            <Text\n              size=\"m\"\n              color={\n                selected?.story.layer === story.layer ? theme.main.strongText : theme.main.text\n              }\n              otherProperties={{\n                textOverflow: \"ellipsis\",\n                overflow: \"hidden\",\n                whiteSpace: \"nowrap\",\n              }}>\n              {story.title}\n            </Text>\n          </MenuItem>\n        ))}\n      </Menu>\n      <Wrapper>\n        <ArrowButton disabled={!selected?.index} onClick={handlePrev}>\n          <Icon icon=\"arrowLeft\" size={24} />\n        </ArrowButton>\n        <Current align=\"center\" justify=\"space-between\">\n          <MenuIcon icon=\"storytellingMenu\" onClick={() => openMenu(o => !o)} menuOpen={menuOpen} />\n          <Title size=\"m\" weight=\"bold\">\n            {selected?.story.title}\n          </Title>\n          <Text\n            size={isExtraSmallWindow ? \"xs\" : \"m\"}\n            weight=\"bold\"\n            otherProperties={{ userSelect: \"none\" }}>\n            {typeof selected === \"undefined\" ? \"-\" : selected.index + 1} / {stories.length}\n          </Text>\n        </Current>\n        <ArrowButton disabled={selected?.index === stories.length - 1} onClick={handleNext}>\n          <Icon icon=\"arrowRight\" size={24} />\n        </ArrowButton>\n      </Wrapper>\n    </>\n  ) : null;\n};\n\nconst Wrapper = styled.div`\n  background-color: ${props => props.theme.main.paleBg};\n  color: ${props => props.theme.main.text};\n  z-index: ${props => props.theme.zIndexes.infoBox};\n  position: absolute;\n  bottom: 80px;\n  left: 80px;\n  display: flex;\n  align-items: stretch;\n  border-radius: ${metricsSizes[\"s\"]}px;\n  overflow: hidden;\n  height: 80px;\n  width: 500px;\n  box-shadow: 0 4px 4px rgba(0, 0, 0, 0.25);\n\n  @media (max-width: 1366px) {\n    left: 30px;\n    bottom: 30px;\n  }\n\n  @media (max-width: 560px) {\n    left: 16px;\n    right: 16px;\n    bottom: 16px;\n    width: auto;\n    height: 56px;\n  }\n`;\n\nconst ArrowButton = styled.button`\n  background-color: ${props => props.theme.main.paleBg};\n  display: flex;\n  flex-flow: column;\n  justify-content: center;\n  text-align: center;\n  border: none;\n  padding: ${metricsSizes[\"s\"]}px;\n  cursor: pointer;\n  color: inherit;\n\n  &:disabled {\n    color: #888;\n    cursor: auto;\n  }\n\n  @media (max-width: 420px) {\n    padding: ${metricsSizes[\"2xs\"]}px;\n  }\n`;\n\nconst Current = styled(Flex)`\n  width: 100%;\n  padding: ${metricsSizes[\"2xl\"]}px;\n\n  @media (max-width: 420px) {\n    padding: ${metricsSizes[\"s\"]}px;\n  }\n`;\n\nconst Title = styled(Text)`\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  box-sizing: border-box;\n  margin: 0 auto;\n  max-width: 250px;\n  text-align: center;\n\n  @media (max-width: 420px) {\n    max-width: 190px;\n  }\n`;\n\nconst StyledIcon = styled(Icon)`\n  color: ${props => props.theme.main.text};\n  margin-right: ${metricsSizes[\"l\"]}px;\n`;\n\nconst MenuIcon = styled(Icon)<{ menuOpen?: boolean }>`\n  background: ${props => (props.menuOpen ? props.theme.main.bg : props.theme.main.paleBg)};\n  border-radius: 25px;\n  padding: ${metricsSizes[\"xs\"]}px;\n  margin-right: ${metricsSizes[\"xs\"]}px;\n  cursor: pointer;\n  user-select: none;\n`;\n\nconst Menu = styled.div<{ menuOpen?: boolean }>`\n  background-color: ${props => props.theme.main.paleBg};\n  z-index: ${props => props.theme.zIndexes.dropDown};\n  position: absolute;\n  bottom: 168px;\n  left: 80px;\n  width: 324px;\n  max-height: 500px;\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  border-radius: ${metricsSizes[\"s\"]}px;\n  display: ${({ menuOpen }) => (!menuOpen ? \"none\" : \"\")};\n  padding: ${metricsSizes[\"m\"]}px ${metricsSizes[\"s\"]}px;\n\n  @media (max-width: 1366px) {\n    left: 30px;\n    bottom: 118px;\n  }\n\n  @media (max-width: 560px) {\n    right: 16px;\n    left: 16px;\n    bottom: 80px;\n    border: 1px solid ${props => props.theme.main.text};\n  }\n\n  @media (max-width: 420px) {\n    width: auto;\n  }\n`;\n\nconst MenuItem = styled(Flex)<{ selected?: boolean }>`\n  border-radius: ${metricsSizes[\"m\"]}px;\n  padding: ${metricsSizes[\"m\"]}px ${metricsSizes[\"s\"]}px;\n  background: ${({ theme, selected }) => (selected ? theme.main.highlighted : \"inherit\")};\n  cursor: pointer;\n  user-select: none;\n\n  &:hover {\n    background: ${props => !props.selected && props.theme.main.bg};\n  }\n`;\n\nexport default Storytelling;\n","import type { Component } from \".\";\n\nimport Menu from \"./Menu\";\nimport SplashScreen from \"./SplashScreen\";\nimport Storytelling from \"./Storytelling\";\n\nconst builtin: Record<string, Component> = {\n  \"reearth/menu\": Menu,\n  \"reearth/splashscreen\": SplashScreen,\n  \"reearth/storytelling\": Storytelling,\n};\n\nexport default builtin;\n","import React, { ComponentType } from \"react\";\n\nimport { Widget } from \"../Plugin\";\n// import Plugins, { Widget } from \"../Plugin\";\nimport builtin from \"./builtin\";\n\nexport type { Widget } from \"../Plugin\";\n\nexport type Props<PP = any, SP = any> = {\n  isEditable?: boolean;\n  isBuilt?: boolean;\n  widget?: Widget;\n  sceneProperty?: SP;\n  pluginProperty?: PP;\n  pluginBaseUrl?: string;\n};\n\nexport type Component<PP = any, SP = any> = ComponentType<Props<PP, SP>>;\n\nexport default function WidgetComponent<PP = any, SP = any>({\n  pluginBaseUrl: _pluginBaseUrl,\n  ...props\n}: Props<PP, SP>) {\n  const Builtin =\n    props.widget?.pluginId && props.widget.extensionId\n      ? builtin[`${props.widget.pluginId}/${props.widget.extensionId}`]\n      : undefined;\n\n  return Builtin ? <Builtin {...props} /> : null; // TODO: widget plugin is not supported yet\n  // <Plugin\n  //   pluginId={props.widget?.pluginId}\n  //   extensionId={props.widget?.extensionId}\n  //   sourceCode={(props.widget as any)?.__REEARTH_SOURCECODE} // for debugging\n  //   extensionType=\"widget\"\n  //   visible\n  //   style={{ position: \"absolute\", top: 0, left: 0 }} // TODO: widget align system\n  //   pluginBaseUrl={pluginBaseUrl}\n  //   property={props.pluginProperty}\n  //   sceneProperty={props.sceneProperty}\n  //   widget={props.widget}\n  // />\n}\n","import { createContext, useContext } from \"react\";\n\nimport type { GlobalThis, Camera, Primitive, OverriddenInfobox } from \"@reearth/plugin\";\nimport type { Ref as EngineRef } from \"./Engine\";\n\nexport type { GlobalThis } from \"@reearth/plugin\";\n\nexport type CommonGlobalThis = Omit<GlobalThis, \"reearth\" | \"cesium\"> & {\n  reearth: Omit<\n    GlobalThis[\"reearth\"],\n    \"visualizer\" | \"primitives\" | \"plugin\" | \"ui\" | \"on\" | \"off\" | \"once\"\n  > & {\n    primitives: Omit<GlobalThis[\"reearth\"][\"primitives\"], \"primitives\">;\n    visualizer: Omit<GlobalThis[\"reearth\"][\"visualizer\"], \"camera\">;\n  };\n};\n\nexport type VisualizerContext = {\n  engine?: EngineRef;\n  camera?: Camera;\n  primitives?: Primitive[];\n  selectedPrimitive?: Primitive;\n  primitiveSelectionReason?: string;\n  primitiveOverridenInfobox?: OverriddenInfobox;\n  pluginAPI?: CommonGlobalThis;\n};\n\nexport const context = createContext<VisualizerContext | undefined>(undefined);\nexport const { Provider } = context;\nexport const useVisualizerContext = (): VisualizerContext | undefined => useContext(context);\n","import { action } from \"@storybook/addon-actions\";\nimport type { VisualizerContext, GlobalThis } from \"./context\";\nimport type { Primitive } from \".\";\n\nconst primitives: Primitive[] = [\n  {\n    id: \"a\",\n    title: \"A\",\n    isVisible: true,\n    property: {\n      default: {\n        location: {\n          lat: 10,\n          lng: 10,\n        },\n        height: 10,\n      },\n    },\n  },\n  {\n    id: \"b\",\n    title: \"B\",\n    isVisible: true,\n    property: {\n      default: {\n        location: {\n          lat: 20,\n          lng: 20,\n        },\n        height: 20,\n      },\n    },\n  },\n  {\n    id: \"c\",\n    title: \"C\",\n    isVisible: true,\n    property: {\n      default: {\n        location: {\n          lat: 30,\n          lng: 30,\n        },\n        height: 30,\n      },\n    },\n  },\n];\n\nexport const context: VisualizerContext = {\n  engine: {\n    name: \"cesium\",\n    getCamera() {\n      return {\n        lat: 0,\n        lng: 0,\n        height: 0,\n        heading: 0,\n        pitch: 0,\n        roll: 0,\n        fov: Math.PI * (60 / 180),\n      };\n    },\n    flyTo: act(\"flyTo\"),\n    lookAt: act(\"lookAt\"),\n    zoomIn: act(\"zoomIn\"),\n    zoomOut: act(\"zoomOut\"),\n    requestRender: act(\"requestRender\"),\n    getLocationFromScreenXY: act(\"getLocationFromScreenXY\", () => undefined),\n  },\n  pluginAPI: {\n    console: {\n      log: act(\"console.log\"),\n      error: act(\"console.error\"),\n    },\n    reearth: {\n      version: \"0.0.0\",\n      apiVersion: 0,\n      primitives: {\n        primitives,\n        select: act(\"primitive.select\"),\n        show: act(\"primitive.show\"),\n        hide: act(\"primitive.hide\"),\n      },\n      visualizer: {\n        engine: \"cesium\",\n        camera: {\n          lat: 0,\n          lng: 0,\n          height: 0,\n          heading: 0,\n          pitch: 0,\n          roll: 0,\n          fov: Math.PI * (60 / 180),\n        },\n        flyTo: act(\"visualizer.flyTo\"),\n        lookAt: act(\"visualizer.lookAt\"),\n        zoomIn: act(\"visualizer.zoomIn\"),\n        zoomOut: act(\"visualizer.zoomOut\"),\n      },\n      on: act(\"reearth.on\"),\n      off: act(\"reearth.off\"),\n      once: act(\"reearth.once\"),\n    },\n  } as GlobalThis,\n};\n\nfunction act<T extends any[], M extends (...args: T) => any>(\n  name: string,\n  mock?: M,\n): (...args: T) => ReturnType<M> {\n  const a = action(`Common API: ${name}`);\n  return (...args) => {\n    a(...args);\n    return mock?.(...args);\n  };\n}\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Any: any;\n  Cursor: string;\n  DatasetSchemaFieldID: string;\n  DateTime: Date;\n  FileSize: number;\n  Lang: string;\n  PluginExtensionID: string;\n  PluginID: string;\n  PropertySchemaFieldID: string;\n  PropertySchemaID: string;\n  TranslatedString: { [lang in string]?: string } | null;\n  URL: string;\n  Upload: any;\n};\n\n\n\nexport type AddDatasetSchemaInput = {\n  sceneId: Scalars['ID'];\n  name: Scalars['String'];\n  representativefield?: Maybe<Scalars['ID']>;\n};\n\nexport type AddDatasetSchemaPayload = {\n  __typename?: 'AddDatasetSchemaPayload';\n  datasetSchema?: Maybe<DatasetSchema>;\n};\n\nexport type AddDynamicDatasetInput = {\n  datasetSchemaId: Scalars['ID'];\n  author: Scalars['String'];\n  content: Scalars['String'];\n  lat?: Maybe<Scalars['Float']>;\n  lng?: Maybe<Scalars['Float']>;\n  target?: Maybe<Scalars['String']>;\n};\n\nexport type AddDynamicDatasetPayload = {\n  __typename?: 'AddDynamicDatasetPayload';\n  datasetSchema?: Maybe<DatasetSchema>;\n  dataset?: Maybe<Dataset>;\n};\n\nexport type AddDynamicDatasetSchemaInput = {\n  sceneId: Scalars['ID'];\n};\n\nexport type AddDynamicDatasetSchemaPayload = {\n  __typename?: 'AddDynamicDatasetSchemaPayload';\n  datasetSchema?: Maybe<DatasetSchema>;\n};\n\nexport type AddInfoboxFieldInput = {\n  layerId: Scalars['ID'];\n  pluginId: Scalars['PluginID'];\n  extensionId: Scalars['PluginExtensionID'];\n  index?: Maybe<Scalars['Int']>;\n};\n\nexport type AddInfoboxFieldPayload = {\n  __typename?: 'AddInfoboxFieldPayload';\n  infoboxField: InfoboxField;\n  layer: Layer;\n};\n\nexport type AddLayerGroupInput = {\n  parentLayerId: Scalars['ID'];\n  pluginId?: Maybe<Scalars['PluginID']>;\n  extensionId?: Maybe<Scalars['PluginExtensionID']>;\n  index?: Maybe<Scalars['Int']>;\n  linkedDatasetSchemaID?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n  representativeFieldId?: Maybe<Scalars['DatasetSchemaFieldID']>;\n};\n\nexport type AddLayerGroupPayload = {\n  __typename?: 'AddLayerGroupPayload';\n  layer: LayerGroup;\n  parentLayer: LayerGroup;\n  index?: Maybe<Scalars['Int']>;\n};\n\nexport type AddLayerItemInput = {\n  parentLayerId: Scalars['ID'];\n  pluginId: Scalars['PluginID'];\n  extensionId: Scalars['PluginExtensionID'];\n  index?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  lat?: Maybe<Scalars['Float']>;\n  lng?: Maybe<Scalars['Float']>;\n};\n\nexport type AddLayerItemPayload = {\n  __typename?: 'AddLayerItemPayload';\n  layer: LayerItem;\n  parentLayer: LayerGroup;\n  index?: Maybe<Scalars['Int']>;\n};\n\nexport type AddMemberToTeamInput = {\n  teamId: Scalars['ID'];\n  userId: Scalars['ID'];\n  role: Role;\n};\n\nexport type AddMemberToTeamPayload = {\n  __typename?: 'AddMemberToTeamPayload';\n  team: Team;\n};\n\nexport type AddPropertyItemInput = {\n  propertyId: Scalars['ID'];\n  schemaItemId: Scalars['PropertySchemaFieldID'];\n  index?: Maybe<Scalars['Int']>;\n  nameFieldValue?: Maybe<Scalars['Any']>;\n  nameFieldType?: Maybe<ValueType>;\n};\n\nexport type AddWidgetInput = {\n  sceneId: Scalars['ID'];\n  pluginId: Scalars['PluginID'];\n  extensionId: Scalars['PluginExtensionID'];\n};\n\nexport type AddWidgetPayload = {\n  __typename?: 'AddWidgetPayload';\n  scene: Scene;\n  sceneWidget: SceneWidget;\n};\n\n\nexport type Asset = Node & {\n  __typename?: 'Asset';\n  id: Scalars['ID'];\n  createdAt: Scalars['DateTime'];\n  teamId: Scalars['ID'];\n  name: Scalars['String'];\n  size: Scalars['FileSize'];\n  url: Scalars['String'];\n  contentType: Scalars['String'];\n  team?: Maybe<Team>;\n};\n\nexport type AssetConnection = {\n  __typename?: 'AssetConnection';\n  edges: Array<AssetEdge>;\n  nodes: Array<Maybe<Asset>>;\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\nexport type AssetEdge = {\n  __typename?: 'AssetEdge';\n  cursor: Scalars['Cursor'];\n  node?: Maybe<Asset>;\n};\n\nexport type Camera = {\n  __typename?: 'Camera';\n  lat: Scalars['Float'];\n  lng: Scalars['Float'];\n  altitude: Scalars['Float'];\n  heading: Scalars['Float'];\n  pitch: Scalars['Float'];\n  roll: Scalars['Float'];\n  fov: Scalars['Float'];\n};\n\nexport type CheckProjectAliasPayload = {\n  __typename?: 'CheckProjectAliasPayload';\n  alias: Scalars['String'];\n  available: Scalars['Boolean'];\n};\n\nexport type CreateAssetInput = {\n  teamId: Scalars['ID'];\n  file: Scalars['Upload'];\n};\n\nexport type CreateAssetPayload = {\n  __typename?: 'CreateAssetPayload';\n  asset: Asset;\n};\n\nexport type CreateInfoboxInput = {\n  layerId: Scalars['ID'];\n};\n\nexport type CreateInfoboxPayload = {\n  __typename?: 'CreateInfoboxPayload';\n  layer: Layer;\n};\n\nexport type CreateProjectInput = {\n  teamId: Scalars['ID'];\n  visualizer: Visualizer;\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  imageUrl?: Maybe<Scalars['URL']>;\n  alias?: Maybe<Scalars['String']>;\n  archived?: Maybe<Scalars['Boolean']>;\n};\n\nexport type CreateSceneInput = {\n  projectId: Scalars['ID'];\n};\n\nexport type CreateScenePayload = {\n  __typename?: 'CreateScenePayload';\n  scene: Scene;\n};\n\nexport type CreateTeamInput = {\n  name: Scalars['String'];\n};\n\nexport type CreateTeamPayload = {\n  __typename?: 'CreateTeamPayload';\n  team: Team;\n};\n\n\nexport type Dataset = Node & {\n  __typename?: 'Dataset';\n  id: Scalars['ID'];\n  source: Scalars['String'];\n  schemaId: Scalars['ID'];\n  fields: Array<DatasetField>;\n  schema?: Maybe<DatasetSchema>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type DatasetConnection = {\n  __typename?: 'DatasetConnection';\n  edges: Array<DatasetEdge>;\n  nodes: Array<Maybe<Dataset>>;\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\nexport type DatasetEdge = {\n  __typename?: 'DatasetEdge';\n  cursor: Scalars['Cursor'];\n  node?: Maybe<Dataset>;\n};\n\nexport type DatasetField = {\n  __typename?: 'DatasetField';\n  fieldId: Scalars['ID'];\n  schemaId: Scalars['ID'];\n  source: Scalars['String'];\n  type: ValueType;\n  value?: Maybe<Scalars['Any']>;\n  schema?: Maybe<DatasetSchema>;\n  field?: Maybe<DatasetSchemaField>;\n  valueRef?: Maybe<Dataset>;\n};\n\nexport type DatasetSchema = Node & {\n  __typename?: 'DatasetSchema';\n  id: Scalars['ID'];\n  source: Scalars['String'];\n  name: Scalars['String'];\n  sceneId: Scalars['ID'];\n  fields: Array<DatasetSchemaField>;\n  representativeFieldId?: Maybe<Scalars['ID']>;\n  dynamic?: Maybe<Scalars['Boolean']>;\n  datasets: DatasetConnection;\n  scene?: Maybe<Scene>;\n  representativeField?: Maybe<DatasetSchemaField>;\n};\n\n\nexport type DatasetSchemaDatasetsArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['Cursor']>;\n  before?: Maybe<Scalars['Cursor']>;\n};\n\nexport type DatasetSchemaConnection = {\n  __typename?: 'DatasetSchemaConnection';\n  edges: Array<DatasetSchemaEdge>;\n  nodes: Array<Maybe<DatasetSchema>>;\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\nexport type DatasetSchemaEdge = {\n  __typename?: 'DatasetSchemaEdge';\n  cursor: Scalars['Cursor'];\n  node?: Maybe<DatasetSchema>;\n};\n\nexport type DatasetSchemaField = Node & {\n  __typename?: 'DatasetSchemaField';\n  id: Scalars['ID'];\n  source: Scalars['String'];\n  name: Scalars['String'];\n  type: ValueType;\n  schemaId: Scalars['ID'];\n  refId?: Maybe<Scalars['ID']>;\n  schema?: Maybe<DatasetSchema>;\n  ref?: Maybe<DatasetSchema>;\n};\n\n\n\nexport type DeleteMeInput = {\n  userId: Scalars['ID'];\n};\n\nexport type DeleteMePayload = {\n  __typename?: 'DeleteMePayload';\n  userId: Scalars['ID'];\n};\n\nexport type DeleteProjectInput = {\n  projectId: Scalars['ID'];\n};\n\nexport type DeleteProjectPayload = {\n  __typename?: 'DeleteProjectPayload';\n  projectId: Scalars['ID'];\n};\n\nexport type DeleteTeamInput = {\n  teamId: Scalars['ID'];\n};\n\nexport type DeleteTeamPayload = {\n  __typename?: 'DeleteTeamPayload';\n  teamId: Scalars['ID'];\n};\n\n\nexport type ImportDatasetFromGoogleSheetInput = {\n  accessToken: Scalars['String'];\n  fileId: Scalars['String'];\n  sheetName: Scalars['String'];\n  sceneId: Scalars['ID'];\n  datasetSchemaId?: Maybe<Scalars['ID']>;\n};\n\nexport type ImportDatasetInput = {\n  file: Scalars['Upload'];\n  sceneId: Scalars['ID'];\n  datasetSchemaId?: Maybe<Scalars['ID']>;\n};\n\nexport type ImportDatasetPayload = {\n  __typename?: 'ImportDatasetPayload';\n  datasetSchema: DatasetSchema;\n};\n\nexport type ImportLayerInput = {\n  layerId: Scalars['ID'];\n  file: Scalars['Upload'];\n  format: LayerEncodingFormat;\n};\n\nexport type ImportLayerPayload = {\n  __typename?: 'ImportLayerPayload';\n  layers: Array<Layer>;\n  parentLayer: LayerGroup;\n};\n\nexport type Infobox = {\n  __typename?: 'Infobox';\n  sceneId: Scalars['ID'];\n  layerId: Scalars['ID'];\n  propertyId: Scalars['ID'];\n  fields: Array<InfoboxField>;\n  linkedDatasetId?: Maybe<Scalars['ID']>;\n  layer: Layer;\n  property?: Maybe<Property>;\n  linkedDataset?: Maybe<Dataset>;\n  merged?: Maybe<MergedInfobox>;\n  scene?: Maybe<Scene>;\n};\n\nexport type InfoboxField = {\n  __typename?: 'InfoboxField';\n  id: Scalars['ID'];\n  sceneId: Scalars['ID'];\n  layerId: Scalars['ID'];\n  propertyId: Scalars['ID'];\n  pluginId: Scalars['PluginID'];\n  extensionId: Scalars['PluginExtensionID'];\n  linkedDatasetId?: Maybe<Scalars['ID']>;\n  layer: Layer;\n  infobox: Infobox;\n  property?: Maybe<Property>;\n  plugin?: Maybe<Plugin>;\n  extension?: Maybe<PluginExtension>;\n  linkedDataset?: Maybe<Dataset>;\n  merged?: Maybe<MergedInfoboxField>;\n  scene?: Maybe<Scene>;\n  scenePlugin?: Maybe<ScenePlugin>;\n};\n\nexport type InstallPluginInput = {\n  sceneId: Scalars['ID'];\n  pluginId: Scalars['PluginID'];\n};\n\nexport type InstallPluginPayload = {\n  __typename?: 'InstallPluginPayload';\n  scene: Scene;\n  scenePlugin: ScenePlugin;\n};\n\n\nexport type LatLng = {\n  __typename?: 'LatLng';\n  lat: Scalars['Float'];\n  lng: Scalars['Float'];\n};\n\nexport type LatLngHeight = {\n  __typename?: 'LatLngHeight';\n  lat: Scalars['Float'];\n  lng: Scalars['Float'];\n  height: Scalars['Float'];\n};\n\nexport type Layer = {\n  id: Scalars['ID'];\n  sceneId: Scalars['ID'];\n  name: Scalars['String'];\n  isVisible: Scalars['Boolean'];\n  propertyId?: Maybe<Scalars['ID']>;\n  pluginId?: Maybe<Scalars['PluginID']>;\n  extensionId?: Maybe<Scalars['PluginExtensionID']>;\n  infobox?: Maybe<Infobox>;\n  parentId?: Maybe<Scalars['ID']>;\n  parent?: Maybe<LayerGroup>;\n  property?: Maybe<Property>;\n  plugin?: Maybe<Plugin>;\n  extension?: Maybe<PluginExtension>;\n  scenePlugin?: Maybe<ScenePlugin>;\n};\n\nexport enum LayerEncodingFormat {\n  Kml = 'KML',\n  Czml = 'CZML',\n  Geojson = 'GEOJSON',\n  Shape = 'SHAPE',\n  Reearth = 'REEARTH'\n}\n\nexport type LayerGroup = Layer & {\n  __typename?: 'LayerGroup';\n  id: Scalars['ID'];\n  sceneId: Scalars['ID'];\n  name: Scalars['String'];\n  isVisible: Scalars['Boolean'];\n  propertyId?: Maybe<Scalars['ID']>;\n  pluginId?: Maybe<Scalars['PluginID']>;\n  extensionId?: Maybe<Scalars['PluginExtensionID']>;\n  infobox?: Maybe<Infobox>;\n  parentId?: Maybe<Scalars['ID']>;\n  linkedDatasetSchemaId?: Maybe<Scalars['ID']>;\n  root: Scalars['Boolean'];\n  layerIds: Array<Scalars['ID']>;\n  parent?: Maybe<LayerGroup>;\n  property?: Maybe<Property>;\n  plugin?: Maybe<Plugin>;\n  extension?: Maybe<PluginExtension>;\n  linkedDatasetSchema?: Maybe<DatasetSchema>;\n  layers: Array<Maybe<Layer>>;\n  scene?: Maybe<Scene>;\n  scenePlugin?: Maybe<ScenePlugin>;\n};\n\nexport type LayerItem = Layer & {\n  __typename?: 'LayerItem';\n  id: Scalars['ID'];\n  sceneId: Scalars['ID'];\n  name: Scalars['String'];\n  isVisible: Scalars['Boolean'];\n  propertyId?: Maybe<Scalars['ID']>;\n  pluginId?: Maybe<Scalars['PluginID']>;\n  extensionId?: Maybe<Scalars['PluginExtensionID']>;\n  infobox?: Maybe<Infobox>;\n  parentId?: Maybe<Scalars['ID']>;\n  linkedDatasetId?: Maybe<Scalars['ID']>;\n  parent?: Maybe<LayerGroup>;\n  property?: Maybe<Property>;\n  plugin?: Maybe<Plugin>;\n  extension?: Maybe<PluginExtension>;\n  linkedDataset?: Maybe<Dataset>;\n  merged?: Maybe<MergedLayer>;\n  scene?: Maybe<Scene>;\n  scenePlugin?: Maybe<ScenePlugin>;\n};\n\nexport type Layers = LayerItem | LayerGroup;\n\nexport type LinkDatasetToPropertyValueInput = {\n  propertyId: Scalars['ID'];\n  schemaItemId?: Maybe<Scalars['PropertySchemaFieldID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  fieldId: Scalars['PropertySchemaFieldID'];\n  datasetSchemaIds: Array<Scalars['ID']>;\n  datasetSchemaFieldIds: Array<Scalars['ID']>;\n  datasetIds?: Maybe<Array<Scalars['ID']>>;\n};\n\nexport enum ListOperation {\n  Add = 'ADD',\n  Move = 'MOVE',\n  Remove = 'REMOVE'\n}\n\nexport type MergedInfobox = {\n  __typename?: 'MergedInfobox';\n  sceneID: Scalars['ID'];\n  property?: Maybe<MergedProperty>;\n  fields: Array<MergedInfoboxField>;\n  scene?: Maybe<Scene>;\n};\n\nexport type MergedInfoboxField = {\n  __typename?: 'MergedInfoboxField';\n  originalId: Scalars['ID'];\n  sceneID: Scalars['ID'];\n  pluginId: Scalars['PluginID'];\n  extensionId: Scalars['PluginExtensionID'];\n  property?: Maybe<MergedProperty>;\n  plugin?: Maybe<Plugin>;\n  extension?: Maybe<PluginExtension>;\n  scene?: Maybe<Scene>;\n  scenePlugin?: Maybe<ScenePlugin>;\n};\n\nexport type MergedLayer = {\n  __typename?: 'MergedLayer';\n  originalId: Scalars['ID'];\n  parentId?: Maybe<Scalars['ID']>;\n  sceneID: Scalars['ID'];\n  property?: Maybe<MergedProperty>;\n  infobox?: Maybe<MergedInfobox>;\n  original?: Maybe<LayerItem>;\n  parent?: Maybe<LayerGroup>;\n  scene?: Maybe<Scene>;\n};\n\nexport type MergedProperty = {\n  __typename?: 'MergedProperty';\n  originalId?: Maybe<Scalars['ID']>;\n  parentId?: Maybe<Scalars['ID']>;\n  schemaId?: Maybe<Scalars['PropertySchemaID']>;\n  linkedDatasetId?: Maybe<Scalars['ID']>;\n  original?: Maybe<Property>;\n  parent?: Maybe<Property>;\n  schema?: Maybe<PropertySchema>;\n  linkedDataset?: Maybe<Dataset>;\n  groups: Array<MergedPropertyGroup>;\n};\n\nexport type MergedPropertyField = {\n  __typename?: 'MergedPropertyField';\n  schemaId: Scalars['PropertySchemaID'];\n  fieldId: Scalars['PropertySchemaFieldID'];\n  value?: Maybe<Scalars['Any']>;\n  type: ValueType;\n  links?: Maybe<Array<PropertyFieldLink>>;\n  overridden: Scalars['Boolean'];\n  schema?: Maybe<PropertySchema>;\n  field?: Maybe<PropertySchemaField>;\n  actualValue?: Maybe<Scalars['Any']>;\n};\n\nexport type MergedPropertyGroup = {\n  __typename?: 'MergedPropertyGroup';\n  originalPropertyId?: Maybe<Scalars['ID']>;\n  parentPropertyId?: Maybe<Scalars['ID']>;\n  originalId?: Maybe<Scalars['ID']>;\n  parentId?: Maybe<Scalars['ID']>;\n  schemaGroupId: Scalars['PropertySchemaFieldID'];\n  schemaId?: Maybe<Scalars['PropertySchemaID']>;\n  linkedDatasetId?: Maybe<Scalars['ID']>;\n  fields: Array<MergedPropertyField>;\n  groups: Array<MergedPropertyGroup>;\n  originalProperty?: Maybe<Property>;\n  parentProperty?: Maybe<Property>;\n  original?: Maybe<PropertyGroup>;\n  parent?: Maybe<PropertyGroup>;\n  schema?: Maybe<PropertySchema>;\n  linkedDataset?: Maybe<Dataset>;\n};\n\nexport type MoveInfoboxFieldInput = {\n  layerId: Scalars['ID'];\n  infoboxFieldId: Scalars['ID'];\n  index: Scalars['Int'];\n};\n\nexport type MoveInfoboxFieldPayload = {\n  __typename?: 'MoveInfoboxFieldPayload';\n  infoboxFieldId: Scalars['ID'];\n  layer: Layer;\n  index: Scalars['Int'];\n};\n\nexport type MoveLayerInput = {\n  layerId: Scalars['ID'];\n  destLayerId?: Maybe<Scalars['ID']>;\n  index?: Maybe<Scalars['Int']>;\n};\n\nexport type MoveLayerPayload = {\n  __typename?: 'MoveLayerPayload';\n  layerId: Scalars['ID'];\n  fromParentLayer: LayerGroup;\n  toParentLayer: LayerGroup;\n  index: Scalars['Int'];\n};\n\nexport type MovePropertyItemInput = {\n  propertyId: Scalars['ID'];\n  schemaItemId: Scalars['PropertySchemaFieldID'];\n  itemId: Scalars['ID'];\n  index: Scalars['Int'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createAsset?: Maybe<CreateAssetPayload>;\n  removeAsset?: Maybe<RemoveAssetPayload>;\n  signup?: Maybe<SignupPayload>;\n  updateMe?: Maybe<UpdateMePayload>;\n  removeMyAuth?: Maybe<UpdateMePayload>;\n  deleteMe?: Maybe<DeleteMePayload>;\n  createTeam?: Maybe<CreateTeamPayload>;\n  deleteTeam?: Maybe<DeleteTeamPayload>;\n  updateTeam?: Maybe<UpdateTeamPayload>;\n  addMemberToTeam?: Maybe<AddMemberToTeamPayload>;\n  removeMemberFromTeam?: Maybe<RemoveMemberFromTeamPayload>;\n  updateMemberOfTeam?: Maybe<UpdateMemberOfTeamPayload>;\n  createProject?: Maybe<ProjectPayload>;\n  updateProject?: Maybe<ProjectPayload>;\n  publishProject?: Maybe<ProjectPayload>;\n  deleteProject?: Maybe<DeleteProjectPayload>;\n  uploadPlugin?: Maybe<UploadPluginPayload>;\n  createScene?: Maybe<CreateScenePayload>;\n  addWidget?: Maybe<AddWidgetPayload>;\n  updateWidget?: Maybe<UpdateWidgetPayload>;\n  removeWidget?: Maybe<RemoveWidgetPayload>;\n  installPlugin?: Maybe<InstallPluginPayload>;\n  uninstallPlugin?: Maybe<UninstallPluginPayload>;\n  upgradePlugin?: Maybe<UpgradePluginPayload>;\n  updateDatasetSchema?: Maybe<UpdateDatasetSchemaPayload>;\n  syncDataset?: Maybe<SyncDatasetPayload>;\n  addDynamicDatasetSchema?: Maybe<AddDynamicDatasetSchemaPayload>;\n  addDynamicDataset?: Maybe<AddDynamicDatasetPayload>;\n  removeDatasetSchema?: Maybe<RemoveDatasetSchemaPayload>;\n  importDataset?: Maybe<ImportDatasetPayload>;\n  importDatasetFromGoogleSheet?: Maybe<ImportDatasetPayload>;\n  addDatasetSchema?: Maybe<AddDatasetSchemaPayload>;\n  updatePropertyValue?: Maybe<PropertyFieldPayload>;\n  updatePropertyValueLatLng?: Maybe<PropertyFieldPayload>;\n  updatePropertyValueLatLngHeight?: Maybe<PropertyFieldPayload>;\n  updatePropertyValueCamera?: Maybe<PropertyFieldPayload>;\n  updatePropertyValueTypography?: Maybe<PropertyFieldPayload>;\n  removePropertyField?: Maybe<PropertyFieldPayload>;\n  uploadFileToProperty?: Maybe<PropertyFieldPayload>;\n  linkDatasetToPropertyValue?: Maybe<PropertyFieldPayload>;\n  unlinkPropertyValue?: Maybe<PropertyFieldPayload>;\n  addPropertyItem?: Maybe<PropertyItemPayload>;\n  movePropertyItem?: Maybe<PropertyItemPayload>;\n  removePropertyItem?: Maybe<PropertyItemPayload>;\n  updatePropertyItems?: Maybe<PropertyItemPayload>;\n  addLayerItem?: Maybe<AddLayerItemPayload>;\n  addLayerGroup?: Maybe<AddLayerGroupPayload>;\n  removeLayer?: Maybe<RemoveLayerPayload>;\n  updateLayer?: Maybe<UpdateLayerPayload>;\n  moveLayer?: Maybe<MoveLayerPayload>;\n  createInfobox?: Maybe<CreateInfoboxPayload>;\n  removeInfobox?: Maybe<RemoveInfoboxPayload>;\n  addInfoboxField?: Maybe<AddInfoboxFieldPayload>;\n  moveInfoboxField?: Maybe<MoveInfoboxFieldPayload>;\n  removeInfoboxField?: Maybe<RemoveInfoboxFieldPayload>;\n  importLayer?: Maybe<ImportLayerPayload>;\n};\n\n\nexport type MutationCreateAssetArgs = {\n  input: CreateAssetInput;\n};\n\n\nexport type MutationRemoveAssetArgs = {\n  input: RemoveAssetInput;\n};\n\n\nexport type MutationSignupArgs = {\n  input: SignupInput;\n};\n\n\nexport type MutationUpdateMeArgs = {\n  input: UpdateMeInput;\n};\n\n\nexport type MutationRemoveMyAuthArgs = {\n  input: RemoveMyAuthInput;\n};\n\n\nexport type MutationDeleteMeArgs = {\n  input: DeleteMeInput;\n};\n\n\nexport type MutationCreateTeamArgs = {\n  input: CreateTeamInput;\n};\n\n\nexport type MutationDeleteTeamArgs = {\n  input: DeleteTeamInput;\n};\n\n\nexport type MutationUpdateTeamArgs = {\n  input: UpdateTeamInput;\n};\n\n\nexport type MutationAddMemberToTeamArgs = {\n  input: AddMemberToTeamInput;\n};\n\n\nexport type MutationRemoveMemberFromTeamArgs = {\n  input: RemoveMemberFromTeamInput;\n};\n\n\nexport type MutationUpdateMemberOfTeamArgs = {\n  input: UpdateMemberOfTeamInput;\n};\n\n\nexport type MutationCreateProjectArgs = {\n  input: CreateProjectInput;\n};\n\n\nexport type MutationUpdateProjectArgs = {\n  input: UpdateProjectInput;\n};\n\n\nexport type MutationPublishProjectArgs = {\n  input: PublishProjectInput;\n};\n\n\nexport type MutationDeleteProjectArgs = {\n  input: DeleteProjectInput;\n};\n\n\nexport type MutationUploadPluginArgs = {\n  input: UploadPluginInput;\n};\n\n\nexport type MutationCreateSceneArgs = {\n  input: CreateSceneInput;\n};\n\n\nexport type MutationAddWidgetArgs = {\n  input: AddWidgetInput;\n};\n\n\nexport type MutationUpdateWidgetArgs = {\n  input: UpdateWidgetInput;\n};\n\n\nexport type MutationRemoveWidgetArgs = {\n  input: RemoveWidgetInput;\n};\n\n\nexport type MutationInstallPluginArgs = {\n  input: InstallPluginInput;\n};\n\n\nexport type MutationUninstallPluginArgs = {\n  input: UninstallPluginInput;\n};\n\n\nexport type MutationUpgradePluginArgs = {\n  input: UpgradePluginInput;\n};\n\n\nexport type MutationUpdateDatasetSchemaArgs = {\n  input: UpdateDatasetSchemaInput;\n};\n\n\nexport type MutationSyncDatasetArgs = {\n  input: SyncDatasetInput;\n};\n\n\nexport type MutationAddDynamicDatasetSchemaArgs = {\n  input: AddDynamicDatasetSchemaInput;\n};\n\n\nexport type MutationAddDynamicDatasetArgs = {\n  input: AddDynamicDatasetInput;\n};\n\n\nexport type MutationRemoveDatasetSchemaArgs = {\n  input: RemoveDatasetSchemaInput;\n};\n\n\nexport type MutationImportDatasetArgs = {\n  input: ImportDatasetInput;\n};\n\n\nexport type MutationImportDatasetFromGoogleSheetArgs = {\n  input: ImportDatasetFromGoogleSheetInput;\n};\n\n\nexport type MutationAddDatasetSchemaArgs = {\n  input: AddDatasetSchemaInput;\n};\n\n\nexport type MutationUpdatePropertyValueArgs = {\n  input: UpdatePropertyValueInput;\n};\n\n\nexport type MutationUpdatePropertyValueLatLngArgs = {\n  input: UpdatePropertyValueLatLngInput;\n};\n\n\nexport type MutationUpdatePropertyValueLatLngHeightArgs = {\n  input: UpdatePropertyValueLatLngHeightInput;\n};\n\n\nexport type MutationUpdatePropertyValueCameraArgs = {\n  input: UpdatePropertyValueCameraInput;\n};\n\n\nexport type MutationUpdatePropertyValueTypographyArgs = {\n  input: UpdatePropertyValueTypographyInput;\n};\n\n\nexport type MutationRemovePropertyFieldArgs = {\n  input: RemovePropertyFieldInput;\n};\n\n\nexport type MutationUploadFileToPropertyArgs = {\n  input: UploadFileToPropertyInput;\n};\n\n\nexport type MutationLinkDatasetToPropertyValueArgs = {\n  input: LinkDatasetToPropertyValueInput;\n};\n\n\nexport type MutationUnlinkPropertyValueArgs = {\n  input: UnlinkPropertyValueInput;\n};\n\n\nexport type MutationAddPropertyItemArgs = {\n  input: AddPropertyItemInput;\n};\n\n\nexport type MutationMovePropertyItemArgs = {\n  input: MovePropertyItemInput;\n};\n\n\nexport type MutationRemovePropertyItemArgs = {\n  input: RemovePropertyItemInput;\n};\n\n\nexport type MutationUpdatePropertyItemsArgs = {\n  input: UpdatePropertyItemInput;\n};\n\n\nexport type MutationAddLayerItemArgs = {\n  input: AddLayerItemInput;\n};\n\n\nexport type MutationAddLayerGroupArgs = {\n  input: AddLayerGroupInput;\n};\n\n\nexport type MutationRemoveLayerArgs = {\n  input: RemoveLayerInput;\n};\n\n\nexport type MutationUpdateLayerArgs = {\n  input: UpdateLayerInput;\n};\n\n\nexport type MutationMoveLayerArgs = {\n  input: MoveLayerInput;\n};\n\n\nexport type MutationCreateInfoboxArgs = {\n  input: CreateInfoboxInput;\n};\n\n\nexport type MutationRemoveInfoboxArgs = {\n  input: RemoveInfoboxInput;\n};\n\n\nexport type MutationAddInfoboxFieldArgs = {\n  input: AddInfoboxFieldInput;\n};\n\n\nexport type MutationMoveInfoboxFieldArgs = {\n  input: MoveInfoboxFieldInput;\n};\n\n\nexport type MutationRemoveInfoboxFieldArgs = {\n  input: RemoveInfoboxFieldInput;\n};\n\n\nexport type MutationImportLayerArgs = {\n  input: ImportLayerInput;\n};\n\nexport type Node = {\n  id: Scalars['ID'];\n};\n\nexport enum NodeType {\n  User = 'USER',\n  Team = 'TEAM',\n  Project = 'PROJECT',\n  Plugin = 'PLUGIN',\n  Scene = 'SCENE',\n  PropertySchema = 'PROPERTY_SCHEMA',\n  Property = 'PROPERTY',\n  DatasetSchema = 'DATASET_SCHEMA',\n  Dataset = 'DATASET',\n  LayerGroup = 'LAYER_GROUP',\n  LayerItem = 'LAYER_ITEM'\n}\n\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  startCursor?: Maybe<Scalars['Cursor']>;\n  endCursor?: Maybe<Scalars['Cursor']>;\n  hasNextPage: Scalars['Boolean'];\n  hasPreviousPage: Scalars['Boolean'];\n};\n\nexport type Plugin = {\n  __typename?: 'Plugin';\n  id: Scalars['PluginID'];\n  sceneId?: Maybe<Scalars['ID']>;\n  name: Scalars['String'];\n  version: Scalars['String'];\n  description: Scalars['String'];\n  author: Scalars['String'];\n  repositoryUrl: Scalars['String'];\n  propertySchemaId?: Maybe<Scalars['PropertySchemaID']>;\n  extensions: Array<PluginExtension>;\n  scene?: Maybe<Scene>;\n  scenePlugin?: Maybe<ScenePlugin>;\n  allTranslatedDescription?: Maybe<Scalars['TranslatedString']>;\n  allTranslatedName?: Maybe<Scalars['TranslatedString']>;\n  translatedName: Scalars['String'];\n  translatedDescription: Scalars['String'];\n  propertySchema?: Maybe<PropertySchema>;\n};\n\n\nexport type PluginScenePluginArgs = {\n  sceneId?: Maybe<Scalars['ID']>;\n};\n\n\nexport type PluginTranslatedNameArgs = {\n  lang?: Maybe<Scalars['String']>;\n};\n\n\nexport type PluginTranslatedDescriptionArgs = {\n  lang?: Maybe<Scalars['String']>;\n};\n\nexport type PluginExtension = {\n  __typename?: 'PluginExtension';\n  extensionId: Scalars['PluginExtensionID'];\n  pluginId: Scalars['PluginID'];\n  type: PluginExtensionType;\n  name: Scalars['String'];\n  description: Scalars['String'];\n  icon: Scalars['String'];\n  visualizer: Visualizer;\n  propertySchemaId: Scalars['PropertySchemaID'];\n  allTranslatedName?: Maybe<Scalars['TranslatedString']>;\n  allTranslatedDescription?: Maybe<Scalars['TranslatedString']>;\n  plugin?: Maybe<Plugin>;\n  sceneWidget?: Maybe<SceneWidget>;\n  propertySchema?: Maybe<PropertySchema>;\n  translatedName: Scalars['String'];\n  translatedDescription: Scalars['String'];\n};\n\n\nexport type PluginExtensionSceneWidgetArgs = {\n  sceneId: Scalars['ID'];\n};\n\n\nexport type PluginExtensionTranslatedNameArgs = {\n  lang?: Maybe<Scalars['String']>;\n};\n\n\nexport type PluginExtensionTranslatedDescriptionArgs = {\n  lang?: Maybe<Scalars['String']>;\n};\n\n\nexport enum PluginExtensionType {\n  Primitive = 'PRIMITIVE',\n  Widget = 'WIDGET',\n  Block = 'BLOCK',\n  Visualizer = 'VISUALIZER',\n  Infobox = 'INFOBOX'\n}\n\n\nexport type PluginMetadata = {\n  __typename?: 'PluginMetadata';\n  name: Scalars['String'];\n  description: Scalars['String'];\n  author: Scalars['String'];\n  thumbnailUrl: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n};\n\nexport type Project = Node & {\n  __typename?: 'Project';\n  id: Scalars['ID'];\n  isArchived: Scalars['Boolean'];\n  isBasicAuthActive: Scalars['Boolean'];\n  basicAuthUsername: Scalars['String'];\n  basicAuthPassword: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  name: Scalars['String'];\n  description: Scalars['String'];\n  alias: Scalars['String'];\n  publicTitle: Scalars['String'];\n  publicDescription: Scalars['String'];\n  publicImage: Scalars['String'];\n  publicNoIndex: Scalars['Boolean'];\n  imageUrl?: Maybe<Scalars['URL']>;\n  teamId: Scalars['ID'];\n  visualizer: Visualizer;\n  publishmentStatus: PublishmentStatus;\n  team?: Maybe<Team>;\n  scene?: Maybe<Scene>;\n};\n\nexport type ProjectConnection = {\n  __typename?: 'ProjectConnection';\n  edges: Array<ProjectEdge>;\n  nodes: Array<Maybe<Project>>;\n  pageInfo: PageInfo;\n  totalCount: Scalars['Int'];\n};\n\nexport type ProjectEdge = {\n  __typename?: 'ProjectEdge';\n  cursor: Scalars['Cursor'];\n  node?: Maybe<Project>;\n};\n\nexport type ProjectPayload = {\n  __typename?: 'ProjectPayload';\n  project: Project;\n};\n\nexport type Property = Node & {\n  __typename?: 'Property';\n  id: Scalars['ID'];\n  schemaId: Scalars['PropertySchemaID'];\n  items: Array<PropertyItem>;\n  schema?: Maybe<PropertySchema>;\n  layer?: Maybe<Layer>;\n  merged?: Maybe<MergedProperty>;\n};\n\nexport type PropertyCondition = {\n  __typename?: 'PropertyCondition';\n  fieldId: Scalars['PropertySchemaFieldID'];\n  type: ValueType;\n  value?: Maybe<Scalars['Any']>;\n};\n\nexport type PropertyField = {\n  __typename?: 'PropertyField';\n  id: Scalars['PropertySchemaFieldID'];\n  parentId: Scalars['ID'];\n  schemaId: Scalars['PropertySchemaID'];\n  fieldId: Scalars['PropertySchemaFieldID'];\n  links?: Maybe<Array<PropertyFieldLink>>;\n  type: ValueType;\n  value?: Maybe<Scalars['Any']>;\n  parent?: Maybe<Property>;\n  schema?: Maybe<PropertySchema>;\n  field?: Maybe<PropertySchemaField>;\n  actualValue?: Maybe<Scalars['Any']>;\n};\n\nexport type PropertyFieldLink = {\n  __typename?: 'PropertyFieldLink';\n  datasetId?: Maybe<Scalars['ID']>;\n  datasetSchemaId: Scalars['ID'];\n  datasetSchemaFieldId: Scalars['ID'];\n  dataset?: Maybe<Dataset>;\n  datasetField?: Maybe<DatasetField>;\n  datasetSchema?: Maybe<DatasetSchema>;\n  datasetSchemaField?: Maybe<DatasetSchemaField>;\n};\n\nexport type PropertyFieldPayload = {\n  __typename?: 'PropertyFieldPayload';\n  property: Property;\n  propertyField?: Maybe<PropertyField>;\n};\n\nexport type PropertyGroup = {\n  __typename?: 'PropertyGroup';\n  id: Scalars['ID'];\n  schemaId: Scalars['PropertySchemaID'];\n  schemaGroupId: Scalars['PropertySchemaFieldID'];\n  fields: Array<PropertyField>;\n  schema?: Maybe<PropertySchema>;\n  schemaGroup?: Maybe<PropertySchemaGroup>;\n};\n\nexport type PropertyGroupList = {\n  __typename?: 'PropertyGroupList';\n  id: Scalars['ID'];\n  schemaId: Scalars['PropertySchemaID'];\n  schemaGroupId: Scalars['PropertySchemaFieldID'];\n  groups: Array<PropertyGroup>;\n  schema?: Maybe<PropertySchema>;\n  schemaGroup?: Maybe<PropertySchemaGroup>;\n};\n\nexport type PropertyItem = PropertyGroup | PropertyGroupList;\n\nexport type PropertyItemPayload = {\n  __typename?: 'PropertyItemPayload';\n  property: Property;\n  propertyItem?: Maybe<PropertyItem>;\n};\n\nexport type PropertyLinkableFields = {\n  __typename?: 'PropertyLinkableFields';\n  schemaId: Scalars['PropertySchemaID'];\n  latlng?: Maybe<Scalars['PropertySchemaFieldID']>;\n  url?: Maybe<Scalars['PropertySchemaFieldID']>;\n  latlngField?: Maybe<PropertySchemaField>;\n  urlField?: Maybe<PropertySchemaField>;\n  schema?: Maybe<PropertySchema>;\n};\n\nexport type PropertySchema = {\n  __typename?: 'PropertySchema';\n  id: Scalars['PropertySchemaID'];\n  groups: Array<PropertySchemaGroup>;\n  linkableFields: PropertyLinkableFields;\n};\n\nexport type PropertySchemaField = {\n  __typename?: 'PropertySchemaField';\n  fieldId: Scalars['PropertySchemaFieldID'];\n  type: ValueType;\n  title: Scalars['String'];\n  name: Scalars['String'];\n  description: Scalars['String'];\n  prefix?: Maybe<Scalars['String']>;\n  suffix?: Maybe<Scalars['String']>;\n  defaultValue?: Maybe<Scalars['Any']>;\n  ui?: Maybe<PropertySchemaFieldUi>;\n  min?: Maybe<Scalars['Float']>;\n  max?: Maybe<Scalars['Float']>;\n  choices?: Maybe<Array<PropertySchemaFieldChoice>>;\n  isAvailableIf?: Maybe<PropertyCondition>;\n  allTranslatedTitle?: Maybe<Scalars['TranslatedString']>;\n  allTranslatedName?: Maybe<Scalars['TranslatedString']>;\n  allTranslatedDescription?: Maybe<Scalars['TranslatedString']>;\n  translatedTitle: Scalars['String'];\n  translatedName: Scalars['String'];\n  translatedDescription: Scalars['String'];\n};\n\n\nexport type PropertySchemaFieldTranslatedTitleArgs = {\n  lang?: Maybe<Scalars['String']>;\n};\n\n\nexport type PropertySchemaFieldTranslatedNameArgs = {\n  lang?: Maybe<Scalars['String']>;\n};\n\n\nexport type PropertySchemaFieldTranslatedDescriptionArgs = {\n  lang?: Maybe<Scalars['String']>;\n};\n\nexport type PropertySchemaFieldChoice = {\n  __typename?: 'PropertySchemaFieldChoice';\n  key: Scalars['String'];\n  title: Scalars['String'];\n  label: Scalars['String'];\n  icon?: Maybe<Scalars['String']>;\n  allTranslatedTitle?: Maybe<Scalars['TranslatedString']>;\n  allTranslatedLabel?: Maybe<Scalars['TranslatedString']>;\n  translatedTitle: Scalars['String'];\n  translatedLabel: Scalars['String'];\n};\n\n\nexport type PropertySchemaFieldChoiceTranslatedTitleArgs = {\n  lang?: Maybe<Scalars['String']>;\n};\n\n\nexport type PropertySchemaFieldChoiceTranslatedLabelArgs = {\n  lang?: Maybe<Scalars['String']>;\n};\n\n\nexport enum PropertySchemaFieldUi {\n  Layer = 'LAYER',\n  Multiline = 'MULTILINE',\n  Selection = 'SELECTION',\n  Color = 'COLOR',\n  Range = 'RANGE',\n  Image = 'IMAGE',\n  Video = 'VIDEO',\n  File = 'FILE',\n  CameraPose = 'CAMERA_POSE'\n}\n\nexport type PropertySchemaGroup = {\n  __typename?: 'PropertySchemaGroup';\n  schemaGroupId: Scalars['PropertySchemaFieldID'];\n  schemaId: Scalars['PropertySchemaID'];\n  fields: Array<PropertySchemaField>;\n  isList: Scalars['Boolean'];\n  isAvailableIf?: Maybe<PropertyCondition>;\n  title?: Maybe<Scalars['String']>;\n  allTranslatedTitle?: Maybe<Scalars['TranslatedString']>;\n  name?: Maybe<Scalars['PropertySchemaFieldID']>;\n  representativeFieldId?: Maybe<Scalars['PropertySchemaFieldID']>;\n  representativeField?: Maybe<PropertySchemaField>;\n  schema?: Maybe<PropertySchema>;\n  translatedTitle: Scalars['String'];\n};\n\n\nexport type PropertySchemaGroupTranslatedTitleArgs = {\n  lang?: Maybe<Scalars['String']>;\n};\n\n\nexport type PublishProjectInput = {\n  projectId: Scalars['ID'];\n  alias?: Maybe<Scalars['String']>;\n  status: PublishmentStatus;\n};\n\nexport enum PublishmentStatus {\n  Public = 'PUBLIC',\n  Limited = 'LIMITED',\n  Private = 'PRIVATE'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  me?: Maybe<User>;\n  node?: Maybe<Node>;\n  nodes: Array<Maybe<Node>>;\n  propertySchema?: Maybe<PropertySchema>;\n  propertySchemas: Array<PropertySchema>;\n  plugin?: Maybe<Plugin>;\n  plugins: Array<Plugin>;\n  layer?: Maybe<Layer>;\n  scene?: Maybe<Scene>;\n  assets: AssetConnection;\n  projects: ProjectConnection;\n  datasetSchemas: DatasetSchemaConnection;\n  datasets: DatasetConnection;\n  sceneLock?: Maybe<SceneLockMode>;\n  dynamicDatasetSchemas: Array<DatasetSchema>;\n  searchUser?: Maybe<SearchedUser>;\n  checkProjectAlias: CheckProjectAliasPayload;\n  installablePlugins: Array<PluginMetadata>;\n};\n\n\nexport type QueryNodeArgs = {\n  id: Scalars['ID'];\n  type: NodeType;\n};\n\n\nexport type QueryNodesArgs = {\n  id: Array<Scalars['ID']>;\n  type: NodeType;\n};\n\n\nexport type QueryPropertySchemaArgs = {\n  id: Scalars['PropertySchemaID'];\n};\n\n\nexport type QueryPropertySchemasArgs = {\n  id: Array<Scalars['PropertySchemaID']>;\n};\n\n\nexport type QueryPluginArgs = {\n  id: Scalars['PluginID'];\n};\n\n\nexport type QueryPluginsArgs = {\n  id: Array<Scalars['PluginID']>;\n};\n\n\nexport type QueryLayerArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QuerySceneArgs = {\n  projectId: Scalars['ID'];\n};\n\n\nexport type QueryAssetsArgs = {\n  teamId: Scalars['ID'];\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['Cursor']>;\n  before?: Maybe<Scalars['Cursor']>;\n};\n\n\nexport type QueryProjectsArgs = {\n  teamId: Scalars['ID'];\n  includeArchived?: Maybe<Scalars['Boolean']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['Cursor']>;\n  before?: Maybe<Scalars['Cursor']>;\n};\n\n\nexport type QueryDatasetSchemasArgs = {\n  sceneId: Scalars['ID'];\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['Cursor']>;\n  before?: Maybe<Scalars['Cursor']>;\n};\n\n\nexport type QueryDatasetsArgs = {\n  datasetSchemaId: Scalars['ID'];\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['Cursor']>;\n  before?: Maybe<Scalars['Cursor']>;\n};\n\n\nexport type QuerySceneLockArgs = {\n  sceneId: Scalars['ID'];\n};\n\n\nexport type QueryDynamicDatasetSchemasArgs = {\n  sceneId: Scalars['ID'];\n};\n\n\nexport type QuerySearchUserArgs = {\n  nameOrEmail: Scalars['String'];\n};\n\n\nexport type QueryCheckProjectAliasArgs = {\n  alias: Scalars['String'];\n};\n\nexport type Rect = {\n  __typename?: 'Rect';\n  west: Scalars['Float'];\n  south: Scalars['Float'];\n  east: Scalars['Float'];\n  north: Scalars['Float'];\n};\n\nexport type RemoveAssetInput = {\n  assetId: Scalars['ID'];\n};\n\nexport type RemoveAssetPayload = {\n  __typename?: 'RemoveAssetPayload';\n  assetId: Scalars['ID'];\n};\n\nexport type RemoveDatasetSchemaInput = {\n  schemaId: Scalars['ID'];\n  force?: Maybe<Scalars['Boolean']>;\n};\n\nexport type RemoveDatasetSchemaPayload = {\n  __typename?: 'RemoveDatasetSchemaPayload';\n  schemaId: Scalars['ID'];\n};\n\nexport type RemoveInfoboxFieldInput = {\n  layerId: Scalars['ID'];\n  infoboxFieldId: Scalars['ID'];\n};\n\nexport type RemoveInfoboxFieldPayload = {\n  __typename?: 'RemoveInfoboxFieldPayload';\n  infoboxFieldId: Scalars['ID'];\n  layer: Layer;\n};\n\nexport type RemoveInfoboxInput = {\n  layerId: Scalars['ID'];\n};\n\nexport type RemoveInfoboxPayload = {\n  __typename?: 'RemoveInfoboxPayload';\n  layer: Layer;\n};\n\nexport type RemoveLayerInput = {\n  layerId: Scalars['ID'];\n};\n\nexport type RemoveLayerPayload = {\n  __typename?: 'RemoveLayerPayload';\n  layerId: Scalars['ID'];\n  parentLayer: LayerGroup;\n};\n\nexport type RemoveMemberFromTeamInput = {\n  teamId: Scalars['ID'];\n  userId: Scalars['ID'];\n};\n\nexport type RemoveMemberFromTeamPayload = {\n  __typename?: 'RemoveMemberFromTeamPayload';\n  team: Team;\n};\n\nexport type RemoveMyAuthInput = {\n  auth: Scalars['String'];\n};\n\nexport type RemovePropertyFieldInput = {\n  propertyId: Scalars['ID'];\n  schemaItemId?: Maybe<Scalars['PropertySchemaFieldID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  fieldId: Scalars['PropertySchemaFieldID'];\n};\n\nexport type RemovePropertyItemInput = {\n  propertyId: Scalars['ID'];\n  schemaItemId: Scalars['PropertySchemaFieldID'];\n  itemId: Scalars['ID'];\n};\n\nexport type RemoveWidgetInput = {\n  sceneId: Scalars['ID'];\n  pluginId: Scalars['PluginID'];\n  extensionId: Scalars['PluginExtensionID'];\n};\n\nexport type RemoveWidgetPayload = {\n  __typename?: 'RemoveWidgetPayload';\n  scene: Scene;\n  pluginId: Scalars['PluginID'];\n  extensionId: Scalars['PluginExtensionID'];\n};\n\nexport enum Role {\n  Reader = 'READER',\n  Writer = 'WRITER',\n  Owner = 'OWNER'\n}\n\nexport type Scene = Node & {\n  __typename?: 'Scene';\n  id: Scalars['ID'];\n  projectId: Scalars['ID'];\n  teamId: Scalars['ID'];\n  propertyId: Scalars['ID'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  rootLayerId: Scalars['ID'];\n  widgets: Array<SceneWidget>;\n  plugins: Array<ScenePlugin>;\n  dynamicDatasetSchemas: Array<DatasetSchema>;\n  project?: Maybe<Project>;\n  team?: Maybe<Team>;\n  property?: Maybe<Property>;\n  rootLayer?: Maybe<LayerGroup>;\n  lockMode: SceneLockMode;\n  datasetSchemas: DatasetSchemaConnection;\n};\n\n\nexport type SceneDatasetSchemasArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['Cursor']>;\n  before?: Maybe<Scalars['Cursor']>;\n};\n\nexport enum SceneLockMode {\n  Free = 'FREE',\n  Pending = 'PENDING',\n  DatasetSyncing = 'DATASET_SYNCING',\n  PluginUpgrading = 'PLUGIN_UPGRADING',\n  Publishing = 'PUBLISHING'\n}\n\nexport type ScenePlugin = {\n  __typename?: 'ScenePlugin';\n  pluginId: Scalars['PluginID'];\n  propertyId?: Maybe<Scalars['ID']>;\n  plugin?: Maybe<Plugin>;\n  property?: Maybe<Property>;\n};\n\nexport type SceneWidget = {\n  __typename?: 'SceneWidget';\n  id: Scalars['ID'];\n  pluginId: Scalars['PluginID'];\n  extensionId: Scalars['PluginExtensionID'];\n  propertyId: Scalars['ID'];\n  enabled: Scalars['Boolean'];\n  plugin?: Maybe<Plugin>;\n  extension?: Maybe<PluginExtension>;\n  property?: Maybe<Property>;\n};\n\nexport type SearchedUser = {\n  __typename?: 'SearchedUser';\n  userId: Scalars['ID'];\n  userName: Scalars['String'];\n  userEmail: Scalars['String'];\n};\n\nexport type SignupInput = {\n  lang?: Maybe<Scalars['Lang']>;\n  theme?: Maybe<Theme>;\n  userId?: Maybe<Scalars['ID']>;\n  teamId?: Maybe<Scalars['ID']>;\n  secret?: Maybe<Scalars['String']>;\n};\n\nexport type SignupPayload = {\n  __typename?: 'SignupPayload';\n  user: User;\n  team: Team;\n};\n\nexport type SyncDatasetInput = {\n  sceneId: Scalars['ID'];\n  url: Scalars['String'];\n};\n\nexport type SyncDatasetPayload = {\n  __typename?: 'SyncDatasetPayload';\n  sceneId: Scalars['ID'];\n  url: Scalars['String'];\n  datasetSchema: Array<DatasetSchema>;\n  dataset: Array<Dataset>;\n};\n\nexport type Team = Node & {\n  __typename?: 'Team';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  members: Array<TeamMember>;\n  personal: Scalars['Boolean'];\n  assets: AssetConnection;\n  projects: ProjectConnection;\n};\n\n\nexport type TeamAssetsArgs = {\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['Cursor']>;\n  before?: Maybe<Scalars['Cursor']>;\n};\n\n\nexport type TeamProjectsArgs = {\n  includeArchived?: Maybe<Scalars['Boolean']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['Cursor']>;\n  before?: Maybe<Scalars['Cursor']>;\n};\n\nexport type TeamMember = {\n  __typename?: 'TeamMember';\n  userId: Scalars['ID'];\n  role: Role;\n  user?: Maybe<User>;\n};\n\nexport enum TextAlign {\n  Left = 'LEFT',\n  Center = 'CENTER',\n  Right = 'RIGHT',\n  Justify = 'JUSTIFY',\n  JustifyAll = 'JUSTIFY_ALL'\n}\n\nexport enum Theme {\n  Default = 'DEFAULT',\n  Light = 'LIGHT',\n  Dark = 'DARK'\n}\n\n\nexport type Typography = {\n  __typename?: 'Typography';\n  fontFamily?: Maybe<Scalars['String']>;\n  fontWeight?: Maybe<Scalars['String']>;\n  fontSize?: Maybe<Scalars['Int']>;\n  color?: Maybe<Scalars['String']>;\n  textAlign?: Maybe<TextAlign>;\n  bold?: Maybe<Scalars['Boolean']>;\n  italic?: Maybe<Scalars['Boolean']>;\n  underline?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type UninstallPluginInput = {\n  sceneId: Scalars['ID'];\n  pluginId: Scalars['PluginID'];\n};\n\nexport type UninstallPluginPayload = {\n  __typename?: 'UninstallPluginPayload';\n  pluginId: Scalars['PluginID'];\n  scene: Scene;\n};\n\nexport type UnlinkPropertyValueInput = {\n  propertyId: Scalars['ID'];\n  schemaItemId?: Maybe<Scalars['PropertySchemaFieldID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  fieldId: Scalars['PropertySchemaFieldID'];\n};\n\nexport type UpdateDatasetSchemaInput = {\n  schemaId: Scalars['ID'];\n  name: Scalars['String'];\n};\n\nexport type UpdateDatasetSchemaPayload = {\n  __typename?: 'UpdateDatasetSchemaPayload';\n  datasetSchema?: Maybe<DatasetSchema>;\n};\n\nexport type UpdateLayerInput = {\n  layerId: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  visible?: Maybe<Scalars['Boolean']>;\n};\n\nexport type UpdateLayerPayload = {\n  __typename?: 'UpdateLayerPayload';\n  layer: Layer;\n};\n\nexport type UpdateMeInput = {\n  name?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  lang?: Maybe<Scalars['Lang']>;\n  theme?: Maybe<Theme>;\n  password?: Maybe<Scalars['String']>;\n  passwordConfirmation?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateMePayload = {\n  __typename?: 'UpdateMePayload';\n  user: User;\n};\n\nexport type UpdateMemberOfTeamInput = {\n  teamId: Scalars['ID'];\n  userId: Scalars['ID'];\n  role: Role;\n};\n\nexport type UpdateMemberOfTeamPayload = {\n  __typename?: 'UpdateMemberOfTeamPayload';\n  team: Team;\n};\n\nexport type UpdateProjectInput = {\n  projectId: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  archived?: Maybe<Scalars['Boolean']>;\n  isBasicAuthActive?: Maybe<Scalars['Boolean']>;\n  basicAuthUsername?: Maybe<Scalars['String']>;\n  basicAuthPassword?: Maybe<Scalars['String']>;\n  alias?: Maybe<Scalars['String']>;\n  imageUrl?: Maybe<Scalars['URL']>;\n  publicTitle?: Maybe<Scalars['String']>;\n  publicDescription?: Maybe<Scalars['String']>;\n  publicImage?: Maybe<Scalars['String']>;\n  publicNoIndex?: Maybe<Scalars['Boolean']>;\n  deleteImageUrl?: Maybe<Scalars['Boolean']>;\n  deletePublicImage?: Maybe<Scalars['Boolean']>;\n};\n\nexport type UpdatePropertyItemInput = {\n  propertyId: Scalars['ID'];\n  schemaItemId: Scalars['PropertySchemaFieldID'];\n  operations: Array<UpdatePropertyItemOperationInput>;\n};\n\nexport type UpdatePropertyItemOperationInput = {\n  operation: ListOperation;\n  itemId?: Maybe<Scalars['ID']>;\n  index?: Maybe<Scalars['Int']>;\n  nameFieldValue?: Maybe<Scalars['Any']>;\n  nameFieldType?: Maybe<ValueType>;\n};\n\nexport type UpdatePropertyValueCameraInput = {\n  propertyId: Scalars['ID'];\n  schemaItemId?: Maybe<Scalars['PropertySchemaFieldID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  fieldId: Scalars['PropertySchemaFieldID'];\n  lat: Scalars['Float'];\n  lng: Scalars['Float'];\n  altitude: Scalars['Float'];\n  heading: Scalars['Float'];\n  pitch: Scalars['Float'];\n  roll: Scalars['Float'];\n  fov: Scalars['Float'];\n};\n\nexport type UpdatePropertyValueInput = {\n  propertyId: Scalars['ID'];\n  schemaItemId?: Maybe<Scalars['PropertySchemaFieldID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  fieldId: Scalars['PropertySchemaFieldID'];\n  value?: Maybe<Scalars['Any']>;\n  type: ValueType;\n};\n\nexport type UpdatePropertyValueLatLngHeightInput = {\n  propertyId: Scalars['ID'];\n  schemaItemId?: Maybe<Scalars['PropertySchemaFieldID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  fieldId: Scalars['PropertySchemaFieldID'];\n  lat: Scalars['Float'];\n  lng: Scalars['Float'];\n  height: Scalars['Float'];\n};\n\nexport type UpdatePropertyValueLatLngInput = {\n  propertyId: Scalars['ID'];\n  schemaItemId?: Maybe<Scalars['PropertySchemaFieldID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  fieldId: Scalars['PropertySchemaFieldID'];\n  lat: Scalars['Float'];\n  lng: Scalars['Float'];\n};\n\nexport type UpdatePropertyValueTypographyInput = {\n  propertyId: Scalars['ID'];\n  schemaItemId?: Maybe<Scalars['PropertySchemaFieldID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  fieldId: Scalars['PropertySchemaFieldID'];\n  fontFamily?: Maybe<Scalars['String']>;\n  fontWeight?: Maybe<Scalars['String']>;\n  fontSize?: Maybe<Scalars['Int']>;\n  color?: Maybe<Scalars['String']>;\n  textAlign?: Maybe<TextAlign>;\n  bold?: Maybe<Scalars['Boolean']>;\n  italic?: Maybe<Scalars['Boolean']>;\n  underline?: Maybe<Scalars['Boolean']>;\n};\n\nexport type UpdateTeamInput = {\n  teamId: Scalars['ID'];\n  name: Scalars['String'];\n};\n\nexport type UpdateTeamPayload = {\n  __typename?: 'UpdateTeamPayload';\n  team: Team;\n};\n\nexport type UpdateWidgetInput = {\n  sceneId: Scalars['ID'];\n  pluginId: Scalars['PluginID'];\n  extensionId: Scalars['PluginExtensionID'];\n  enabled?: Maybe<Scalars['Boolean']>;\n};\n\nexport type UpdateWidgetPayload = {\n  __typename?: 'UpdateWidgetPayload';\n  scene: Scene;\n  sceneWidget: SceneWidget;\n};\n\nexport type UpgradePluginInput = {\n  sceneId: Scalars['ID'];\n  pluginId: Scalars['PluginID'];\n  toPluginId: Scalars['PluginID'];\n};\n\nexport type UpgradePluginPayload = {\n  __typename?: 'UpgradePluginPayload';\n  scene: Scene;\n  scenePlugin: ScenePlugin;\n};\n\n\nexport type UploadFileToPropertyInput = {\n  propertyId: Scalars['ID'];\n  schemaItemId?: Maybe<Scalars['PropertySchemaFieldID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  fieldId: Scalars['PropertySchemaFieldID'];\n  file: Scalars['Upload'];\n};\n\nexport type UploadPluginInput = {\n  sceneId: Scalars['ID'];\n  file?: Maybe<Scalars['Upload']>;\n  url?: Maybe<Scalars['URL']>;\n};\n\nexport type UploadPluginPayload = {\n  __typename?: 'UploadPluginPayload';\n  plugin: Plugin;\n  scene: Scene;\n  scenePlugin: ScenePlugin;\n};\n\nexport type User = Node & {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  email: Scalars['String'];\n  lang: Scalars['Lang'];\n  theme: Theme;\n  myTeamId: Scalars['ID'];\n  auths: Array<Scalars['String']>;\n  teams: Array<Team>;\n  myTeam: Team;\n};\n\nexport enum ValueType {\n  Bool = 'BOOL',\n  Number = 'NUMBER',\n  String = 'STRING',\n  Ref = 'REF',\n  Url = 'URL',\n  Latlng = 'LATLNG',\n  Latlngheight = 'LATLNGHEIGHT',\n  Camera = 'CAMERA',\n  Typography = 'TYPOGRAPHY',\n  Coordinates = 'COORDINATES',\n  Polygon = 'POLYGON',\n  Rect = 'RECT'\n}\n\nexport enum Visualizer {\n  Cesium = 'CESIUM'\n}\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name' | 'email' | 'auths'>\n    & { myTeam: (\n      { __typename?: 'Team' }\n      & Pick<Team, 'id' | 'name'>\n      & { projects: (\n        { __typename?: 'ProjectConnection' }\n        & { nodes: Array<Maybe<(\n          { __typename?: 'Project' }\n          & Pick<Project, 'id' | 'publishmentStatus' | 'isArchived' | 'name' | 'imageUrl' | 'description' | 'visualizer'>\n          & { scene?: Maybe<(\n            { __typename?: 'Scene' }\n            & Pick<Scene, 'id'>\n          )> }\n        )>> }\n      ) }\n    ), teams: Array<(\n      { __typename?: 'Team' }\n      & Pick<Team, 'id' | 'name'>\n      & { members: Array<(\n        { __typename?: 'TeamMember' }\n        & { user?: Maybe<(\n          { __typename?: 'User' }\n          & Pick<User, 'id' | 'name'>\n        )> }\n      )>, projects: (\n        { __typename?: 'ProjectConnection' }\n        & { nodes: Array<Maybe<(\n          { __typename?: 'Project' }\n          & Pick<Project, 'id' | 'publishmentStatus' | 'isArchived' | 'name' | 'imageUrl' | 'description' | 'visualizer'>\n          & { scene?: Maybe<(\n            { __typename?: 'Scene' }\n            & Pick<Scene, 'id'>\n          )> }\n        )>> }\n      ) }\n    )> }\n  )> }\n);\n\nexport type CreateProjectMutationVariables = Exact<{\n  teamId: Scalars['ID'];\n  visualizer: Visualizer;\n  name: Scalars['String'];\n  description: Scalars['String'];\n  imageUrl?: Maybe<Scalars['URL']>;\n}>;\n\n\nexport type CreateProjectMutation = (\n  { __typename?: 'Mutation' }\n  & { createProject?: Maybe<(\n    { __typename?: 'ProjectPayload' }\n    & { project: (\n      { __typename?: 'Project' }\n      & Pick<Project, 'id' | 'name' | 'description' | 'imageUrl'>\n    ) }\n  )> }\n);\n\nexport type CreateSceneMutationVariables = Exact<{\n  projectId: Scalars['ID'];\n}>;\n\n\nexport type CreateSceneMutation = (\n  { __typename?: 'Mutation' }\n  & { createScene?: Maybe<(\n    { __typename?: 'CreateScenePayload' }\n    & { scene: (\n      { __typename?: 'Scene' }\n      & Pick<Scene, 'id'>\n    ) }\n  )> }\n);\n\nexport type EarthLayerItemFragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'id' | 'linkedDatasetId'>\n  & { scenePlugin?: Maybe<(\n    { __typename?: 'ScenePlugin' }\n    & { property?: Maybe<(\n      { __typename?: 'Property' }\n      & Pick<Property, 'id'>\n      & PropertyFragmentFragment\n    )> }\n  )>, merged?: Maybe<(\n    { __typename?: 'MergedLayer' }\n    & Pick<MergedLayer, 'parentId'>\n    & { property?: Maybe<(\n      { __typename?: 'MergedProperty' }\n      & MergedPropertyFragmentWithoutSchemaFragment\n    )>, infobox?: Maybe<(\n      { __typename?: 'MergedInfobox' }\n      & { property?: Maybe<(\n        { __typename?: 'MergedProperty' }\n        & MergedPropertyFragmentWithoutSchemaFragment\n      )>, fields: Array<(\n        { __typename?: 'MergedInfoboxField' }\n        & Pick<MergedInfoboxField, 'originalId' | 'pluginId' | 'extensionId'>\n        & { property?: Maybe<(\n          { __typename?: 'MergedProperty' }\n          & MergedPropertyFragmentWithoutSchemaFragment\n        )>, scenePlugin?: Maybe<(\n          { __typename?: 'ScenePlugin' }\n          & { property?: Maybe<(\n            { __typename?: 'Property' }\n            & Pick<Property, 'id'>\n            & PropertyFragmentFragment\n          )> }\n        )> }\n      )> }\n    )> }\n  )> }\n);\n\ntype EarthLayer_LayerGroup_Fragment = (\n  { __typename?: 'LayerGroup' }\n  & Pick<LayerGroup, 'linkedDatasetSchemaId' | 'id' | 'name' | 'isVisible' | 'pluginId' | 'extensionId'>\n  & { layers: Array<Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n  )>>, scenePlugin?: Maybe<(\n    { __typename?: 'ScenePlugin' }\n    & { property?: Maybe<(\n      { __typename?: 'Property' }\n      & Pick<Property, 'id'>\n      & PropertyFragmentFragment\n    )> }\n  )>, property?: Maybe<(\n    { __typename?: 'Property' }\n    & Pick<Property, 'id'>\n    & PropertyFragmentWithoutSchemaFragment\n  )>, infobox?: Maybe<(\n    { __typename?: 'Infobox' }\n    & Pick<Infobox, 'propertyId'>\n    & { property?: Maybe<(\n      { __typename?: 'Property' }\n      & Pick<Property, 'id'>\n      & PropertyFragmentWithoutSchemaFragment\n    )>, fields: Array<(\n      { __typename?: 'InfoboxField' }\n      & Pick<InfoboxField, 'id' | 'pluginId' | 'extensionId' | 'propertyId'>\n      & { scenePlugin?: Maybe<(\n        { __typename?: 'ScenePlugin' }\n        & { property?: Maybe<(\n          { __typename?: 'Property' }\n          & Pick<Property, 'id'>\n          & PropertyFragmentFragment\n        )> }\n      )>, property?: Maybe<(\n        { __typename?: 'Property' }\n        & Pick<Property, 'id'>\n        & PropertyFragmentWithoutSchemaFragment\n      )> }\n    )> }\n  )> }\n);\n\ntype EarthLayer_LayerItem_Fragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'id' | 'name' | 'isVisible' | 'pluginId' | 'extensionId'>\n  & { scenePlugin?: Maybe<(\n    { __typename?: 'ScenePlugin' }\n    & { property?: Maybe<(\n      { __typename?: 'Property' }\n      & Pick<Property, 'id'>\n      & PropertyFragmentFragment\n    )> }\n  )>, property?: Maybe<(\n    { __typename?: 'Property' }\n    & Pick<Property, 'id'>\n    & PropertyFragmentWithoutSchemaFragment\n  )>, infobox?: Maybe<(\n    { __typename?: 'Infobox' }\n    & Pick<Infobox, 'propertyId'>\n    & { property?: Maybe<(\n      { __typename?: 'Property' }\n      & Pick<Property, 'id'>\n      & PropertyFragmentWithoutSchemaFragment\n    )>, fields: Array<(\n      { __typename?: 'InfoboxField' }\n      & Pick<InfoboxField, 'id' | 'pluginId' | 'extensionId' | 'propertyId'>\n      & { scenePlugin?: Maybe<(\n        { __typename?: 'ScenePlugin' }\n        & { property?: Maybe<(\n          { __typename?: 'Property' }\n          & Pick<Property, 'id'>\n          & PropertyFragmentFragment\n        )> }\n      )>, property?: Maybe<(\n        { __typename?: 'Property' }\n        & Pick<Property, 'id'>\n        & PropertyFragmentWithoutSchemaFragment\n      )> }\n    )> }\n  )> }\n  & EarthLayerItemFragment\n);\n\nexport type EarthLayerFragment = EarthLayer_LayerGroup_Fragment | EarthLayer_LayerItem_Fragment;\n\ntype EarthLayer1_LayerGroup_Fragment = (\n  { __typename?: 'LayerGroup' }\n  & Pick<LayerGroup, 'id'>\n  & { layers: Array<Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n    & EarthLayer_LayerGroup_Fragment\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n    & EarthLayer_LayerItem_Fragment\n  )>> }\n  & EarthLayer_LayerGroup_Fragment\n);\n\ntype EarthLayer1_LayerItem_Fragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'id'>\n  & EarthLayer_LayerItem_Fragment\n);\n\nexport type EarthLayer1Fragment = EarthLayer1_LayerGroup_Fragment | EarthLayer1_LayerItem_Fragment;\n\ntype EarthLayer2_LayerGroup_Fragment = (\n  { __typename?: 'LayerGroup' }\n  & Pick<LayerGroup, 'id'>\n  & { layers: Array<Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n    & EarthLayer1_LayerGroup_Fragment\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n    & EarthLayer1_LayerItem_Fragment\n  )>> }\n  & EarthLayer_LayerGroup_Fragment\n);\n\ntype EarthLayer2_LayerItem_Fragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'id'>\n  & EarthLayer_LayerItem_Fragment\n);\n\nexport type EarthLayer2Fragment = EarthLayer2_LayerGroup_Fragment | EarthLayer2_LayerItem_Fragment;\n\ntype EarthLayer3_LayerGroup_Fragment = (\n  { __typename?: 'LayerGroup' }\n  & Pick<LayerGroup, 'id'>\n  & { layers: Array<Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n    & EarthLayer2_LayerGroup_Fragment\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n    & EarthLayer2_LayerItem_Fragment\n  )>> }\n  & EarthLayer_LayerGroup_Fragment\n);\n\ntype EarthLayer3_LayerItem_Fragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'id'>\n  & EarthLayer_LayerItem_Fragment\n);\n\nexport type EarthLayer3Fragment = EarthLayer3_LayerGroup_Fragment | EarthLayer3_LayerItem_Fragment;\n\ntype EarthLayer4_LayerGroup_Fragment = (\n  { __typename?: 'LayerGroup' }\n  & Pick<LayerGroup, 'id'>\n  & { layers: Array<Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n    & EarthLayer3_LayerGroup_Fragment\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n    & EarthLayer3_LayerItem_Fragment\n  )>> }\n  & EarthLayer_LayerGroup_Fragment\n);\n\ntype EarthLayer4_LayerItem_Fragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'id'>\n  & EarthLayer_LayerItem_Fragment\n);\n\nexport type EarthLayer4Fragment = EarthLayer4_LayerGroup_Fragment | EarthLayer4_LayerItem_Fragment;\n\ntype EarthLayer5_LayerGroup_Fragment = (\n  { __typename?: 'LayerGroup' }\n  & Pick<LayerGroup, 'id'>\n  & { layers: Array<Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n    & EarthLayer4_LayerGroup_Fragment\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n    & EarthLayer4_LayerItem_Fragment\n  )>> }\n  & EarthLayer_LayerGroup_Fragment\n);\n\ntype EarthLayer5_LayerItem_Fragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'id'>\n  & EarthLayer_LayerItem_Fragment\n);\n\nexport type EarthLayer5Fragment = EarthLayer5_LayerGroup_Fragment | EarthLayer5_LayerItem_Fragment;\n\nexport type GetLayersQueryVariables = Exact<{\n  sceneId: Scalars['ID'];\n}>;\n\n\nexport type GetLayersQuery = (\n  { __typename?: 'Query' }\n  & { node?: Maybe<(\n    { __typename?: 'Asset' }\n    & Pick<Asset, 'id'>\n  ) | (\n    { __typename?: 'Dataset' }\n    & Pick<Dataset, 'id'>\n  ) | (\n    { __typename?: 'DatasetSchema' }\n    & Pick<DatasetSchema, 'id'>\n  ) | (\n    { __typename?: 'DatasetSchemaField' }\n    & Pick<DatasetSchemaField, 'id'>\n  ) | (\n    { __typename?: 'Project' }\n    & Pick<Project, 'id'>\n  ) | (\n    { __typename?: 'Property' }\n    & Pick<Property, 'id'>\n  ) | (\n    { __typename?: 'Scene' }\n    & Pick<Scene, 'id'>\n    & { rootLayer?: Maybe<(\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & EarthLayer5_LayerGroup_Fragment\n    )> }\n  ) | (\n    { __typename?: 'Team' }\n    & Pick<Team, 'id'>\n  ) | (\n    { __typename?: 'User' }\n    & Pick<User, 'id'>\n  )> }\n);\n\nexport type GetEarthWidgetsQueryVariables = Exact<{\n  sceneId: Scalars['ID'];\n}>;\n\n\nexport type GetEarthWidgetsQuery = (\n  { __typename?: 'Query' }\n  & { node?: Maybe<(\n    { __typename?: 'Asset' }\n    & Pick<Asset, 'id'>\n  ) | (\n    { __typename?: 'Dataset' }\n    & Pick<Dataset, 'id'>\n  ) | (\n    { __typename?: 'DatasetSchema' }\n    & Pick<DatasetSchema, 'id'>\n  ) | (\n    { __typename?: 'DatasetSchemaField' }\n    & Pick<DatasetSchemaField, 'id'>\n  ) | (\n    { __typename?: 'Project' }\n    & Pick<Project, 'id'>\n  ) | (\n    { __typename?: 'Property' }\n    & Pick<Property, 'id'>\n  ) | (\n    { __typename?: 'Scene' }\n    & Pick<Scene, 'id'>\n    & { project?: Maybe<(\n      { __typename?: 'Project' }\n      & Pick<Project, 'id' | 'publicTitle'>\n    )>, property?: Maybe<(\n      { __typename?: 'Property' }\n      & Pick<Property, 'id'>\n      & PropertyFragmentFragment\n    )>, widgets: Array<(\n      { __typename?: 'SceneWidget' }\n      & Pick<SceneWidget, 'id' | 'enabled' | 'pluginId' | 'extensionId'>\n      & { plugin?: Maybe<(\n        { __typename?: 'Plugin' }\n        & Pick<Plugin, 'id'>\n        & { scenePlugin?: Maybe<(\n          { __typename?: 'ScenePlugin' }\n          & { property?: Maybe<(\n            { __typename?: 'Property' }\n            & Pick<Property, 'id'>\n            & PropertyFragmentFragment\n          )> }\n        )> }\n      )>, property?: Maybe<(\n        { __typename?: 'Property' }\n        & Pick<Property, 'id'>\n        & PropertyFragmentFragment\n      )> }\n    )> }\n  ) | (\n    { __typename?: 'Team' }\n    & Pick<Team, 'id'>\n  ) | (\n    { __typename?: 'User' }\n    & Pick<User, 'id'>\n  )> }\n);\n\nexport type MoveInfoboxFieldMutationVariables = Exact<{\n  layerId: Scalars['ID'];\n  infoboxFieldId: Scalars['ID'];\n  index: Scalars['Int'];\n}>;\n\n\nexport type MoveInfoboxFieldMutation = (\n  { __typename?: 'Mutation' }\n  & { moveInfoboxField?: Maybe<(\n    { __typename?: 'MoveInfoboxFieldPayload' }\n    & { layer: (\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & EarthLayer_LayerGroup_Fragment\n    ) | (\n      { __typename?: 'LayerItem' }\n      & Pick<LayerItem, 'id'>\n      & EarthLayer_LayerItem_Fragment\n    ) }\n  )> }\n);\n\nexport type RemoveInfoboxFieldMutationVariables = Exact<{\n  layerId: Scalars['ID'];\n  infoboxFieldId: Scalars['ID'];\n}>;\n\n\nexport type RemoveInfoboxFieldMutation = (\n  { __typename?: 'Mutation' }\n  & { removeInfoboxField?: Maybe<(\n    { __typename?: 'RemoveInfoboxFieldPayload' }\n    & { layer: (\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & LayerFragment_LayerGroup_Fragment\n    ) | (\n      { __typename?: 'LayerItem' }\n      & Pick<LayerItem, 'id'>\n      & LayerFragment_LayerItem_Fragment\n    ) }\n  )> }\n);\n\nexport type GetBlocksQueryVariables = Exact<{\n  sceneId: Scalars['ID'];\n}>;\n\n\nexport type GetBlocksQuery = (\n  { __typename?: 'Query' }\n  & { node?: Maybe<(\n    { __typename?: 'Asset' }\n    & Pick<Asset, 'id'>\n  ) | (\n    { __typename?: 'Dataset' }\n    & Pick<Dataset, 'id'>\n  ) | (\n    { __typename?: 'DatasetSchema' }\n    & Pick<DatasetSchema, 'id'>\n  ) | (\n    { __typename?: 'DatasetSchemaField' }\n    & Pick<DatasetSchemaField, 'id'>\n  ) | (\n    { __typename?: 'Project' }\n    & Pick<Project, 'id'>\n  ) | (\n    { __typename?: 'Property' }\n    & Pick<Property, 'id'>\n  ) | (\n    { __typename?: 'Scene' }\n    & Pick<Scene, 'id'>\n    & { plugins: Array<(\n      { __typename?: 'ScenePlugin' }\n      & { plugin?: Maybe<(\n        { __typename?: 'Plugin' }\n        & Pick<Plugin, 'id'>\n        & { extensions: Array<(\n          { __typename?: 'PluginExtension' }\n          & Pick<PluginExtension, 'extensionId' | 'type' | 'name' | 'description' | 'icon'>\n        )> }\n      )> }\n    )> }\n  ) | (\n    { __typename?: 'Team' }\n    & Pick<Team, 'id'>\n  ) | (\n    { __typename?: 'User' }\n    & Pick<User, 'id'>\n  )> }\n);\n\nexport type AddInfoboxFieldMutationVariables = Exact<{\n  layerId: Scalars['ID'];\n  pluginId: Scalars['PluginID'];\n  extensionId: Scalars['PluginExtensionID'];\n  index?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type AddInfoboxFieldMutation = (\n  { __typename?: 'Mutation' }\n  & { addInfoboxField?: Maybe<(\n    { __typename?: 'AddInfoboxFieldPayload' }\n    & { layer: (\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & LayerFragment_LayerGroup_Fragment\n    ) | (\n      { __typename?: 'LayerItem' }\n      & Pick<LayerItem, 'id'>\n      & LayerFragment_LayerItem_Fragment\n    ) }\n  )> }\n);\n\nexport type GetAllDataSetsQueryVariables = Exact<{\n  sceneId: Scalars['ID'];\n}>;\n\n\nexport type GetAllDataSetsQuery = (\n  { __typename?: 'Query' }\n  & { datasetSchemas: (\n    { __typename?: 'DatasetSchemaConnection' }\n    & { nodes: Array<Maybe<(\n      { __typename?: 'DatasetSchema' }\n      & Pick<DatasetSchema, 'id' | 'source' | 'name' | 'sceneId'>\n      & { fields: Array<(\n        { __typename?: 'DatasetSchemaField' }\n        & Pick<DatasetSchemaField, 'id' | 'name' | 'type'>\n      )>, datasets: (\n        { __typename?: 'DatasetConnection' }\n        & Pick<DatasetConnection, 'totalCount'>\n      ) }\n    )>> }\n  ) }\n);\n\nexport type SyncDatasetMutationVariables = Exact<{\n  sceneId: Scalars['ID'];\n  url: Scalars['String'];\n}>;\n\n\nexport type SyncDatasetMutation = (\n  { __typename?: 'Mutation' }\n  & { syncDataset?: Maybe<(\n    { __typename?: 'SyncDatasetPayload' }\n    & Pick<SyncDatasetPayload, 'sceneId' | 'url'>\n    & { datasetSchema: Array<(\n      { __typename?: 'DatasetSchema' }\n      & Pick<DatasetSchema, 'id' | 'name'>\n    )> }\n  )> }\n);\n\nexport type ImportGoogleSheetDatasetMutationVariables = Exact<{\n  accessToken: Scalars['String'];\n  fileId: Scalars['String'];\n  sheetName: Scalars['String'];\n  sceneId: Scalars['ID'];\n  datasetSchemaId?: Maybe<Scalars['ID']>;\n}>;\n\n\nexport type ImportGoogleSheetDatasetMutation = (\n  { __typename?: 'Mutation' }\n  & { importDatasetFromGoogleSheet?: Maybe<(\n    { __typename?: 'ImportDatasetPayload' }\n    & { datasetSchema: (\n      { __typename?: 'DatasetSchema' }\n      & Pick<DatasetSchema, 'id' | 'name'>\n    ) }\n  )> }\n);\n\nexport type ImportDatasetMutationVariables = Exact<{\n  file: Scalars['Upload'];\n  sceneId: Scalars['ID'];\n  datasetSchemaId?: Maybe<Scalars['ID']>;\n}>;\n\n\nexport type ImportDatasetMutation = (\n  { __typename?: 'Mutation' }\n  & { importDataset?: Maybe<(\n    { __typename?: 'ImportDatasetPayload' }\n    & { datasetSchema: (\n      { __typename?: 'DatasetSchema' }\n      & Pick<DatasetSchema, 'id' | 'name'>\n    ) }\n  )> }\n);\n\nexport type RemoveDatasetMutationVariables = Exact<{\n  schemaId: Scalars['ID'];\n  force?: Maybe<Scalars['Boolean']>;\n}>;\n\n\nexport type RemoveDatasetMutation = (\n  { __typename?: 'Mutation' }\n  & { removeDatasetSchema?: Maybe<(\n    { __typename?: 'RemoveDatasetSchemaPayload' }\n    & Pick<RemoveDatasetSchemaPayload, 'schemaId'>\n  )> }\n);\n\nexport type AddLayerGroupFromDatasetSchemaMutationVariables = Exact<{\n  parentLayerId: Scalars['ID'];\n  pluginId?: Maybe<Scalars['PluginID']>;\n  extensionId?: Maybe<Scalars['PluginExtensionID']>;\n  datasetSchemaId?: Maybe<Scalars['ID']>;\n  index?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type AddLayerGroupFromDatasetSchemaMutation = (\n  { __typename?: 'Mutation' }\n  & { addLayerGroup?: Maybe<(\n    { __typename?: 'AddLayerGroupPayload' }\n    & { layer: (\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & Layer1Fragment_LayerGroup_Fragment\n    ), parentLayer: (\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & Layer0Fragment_LayerGroup_Fragment\n    ) }\n  )> }\n);\n\nexport type GetProjectQueryVariables = Exact<{\n  sceneId: Scalars['ID'];\n}>;\n\n\nexport type GetProjectQuery = (\n  { __typename?: 'Query' }\n  & { node?: Maybe<(\n    { __typename?: 'Asset' }\n    & Pick<Asset, 'id'>\n  ) | (\n    { __typename?: 'Dataset' }\n    & Pick<Dataset, 'id'>\n  ) | (\n    { __typename?: 'DatasetSchema' }\n    & Pick<DatasetSchema, 'id'>\n  ) | (\n    { __typename?: 'DatasetSchemaField' }\n    & Pick<DatasetSchemaField, 'id'>\n  ) | (\n    { __typename?: 'Project' }\n    & Pick<Project, 'id'>\n  ) | (\n    { __typename?: 'Property' }\n    & Pick<Property, 'id'>\n  ) | (\n    { __typename?: 'Scene' }\n    & Pick<Scene, 'teamId' | 'projectId' | 'id'>\n    & { project?: Maybe<(\n      { __typename?: 'Project' }\n      & Pick<Project, 'id' | 'alias' | 'publishmentStatus' | 'name'>\n    )> }\n  ) | (\n    { __typename?: 'Team' }\n    & Pick<Team, 'id'>\n  ) | (\n    { __typename?: 'User' }\n    & Pick<User, 'id'>\n  )> }\n);\n\nexport type GetTeamProjectsQueryVariables = Exact<{\n  teamId: Scalars['ID'];\n  includeArchived?: Maybe<Scalars['Boolean']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetTeamProjectsQuery = (\n  { __typename?: 'Query' }\n  & { projects: (\n    { __typename?: 'ProjectConnection' }\n    & { nodes: Array<Maybe<(\n      { __typename?: 'Project' }\n      & Pick<Project, 'id' | 'name'>\n    )>> }\n  ) }\n);\n\nexport type CheckProjectAliasQueryVariables = Exact<{\n  alias: Scalars['String'];\n}>;\n\n\nexport type CheckProjectAliasQuery = (\n  { __typename?: 'Query' }\n  & { checkProjectAlias: (\n    { __typename?: 'CheckProjectAliasPayload' }\n    & Pick<CheckProjectAliasPayload, 'alias' | 'available'>\n  ) }\n);\n\nexport type PublishProjectMutationVariables = Exact<{\n  projectId: Scalars['ID'];\n  alias?: Maybe<Scalars['String']>;\n  status: PublishmentStatus;\n}>;\n\n\nexport type PublishProjectMutation = (\n  { __typename?: 'Mutation' }\n  & { publishProject?: Maybe<(\n    { __typename?: 'ProjectPayload' }\n    & { project: (\n      { __typename?: 'Project' }\n      & Pick<Project, 'id' | 'alias' | 'publishmentStatus'>\n    ) }\n  )> }\n);\n\ntype LayerSystemLayer_LayerGroup_Fragment = (\n  { __typename?: 'LayerGroup' }\n  & Pick<LayerGroup, 'linkedDatasetSchemaId' | 'id' | 'name' | 'isVisible' | 'pluginId' | 'extensionId'>\n  & { layers: Array<Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n  )>> }\n);\n\ntype LayerSystemLayer_LayerItem_Fragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'linkedDatasetId' | 'id' | 'name' | 'isVisible' | 'pluginId' | 'extensionId'>\n);\n\nexport type LayerSystemLayerFragment = LayerSystemLayer_LayerGroup_Fragment | LayerSystemLayer_LayerItem_Fragment;\n\ntype LayerSystemLayer1_LayerGroup_Fragment = (\n  { __typename?: 'LayerGroup' }\n  & Pick<LayerGroup, 'id'>\n  & { layers: Array<Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n    & LayerSystemLayer_LayerGroup_Fragment\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n    & LayerSystemLayer_LayerItem_Fragment\n  )>> }\n  & LayerSystemLayer_LayerGroup_Fragment\n);\n\ntype LayerSystemLayer1_LayerItem_Fragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'id'>\n  & LayerSystemLayer_LayerItem_Fragment\n);\n\nexport type LayerSystemLayer1Fragment = LayerSystemLayer1_LayerGroup_Fragment | LayerSystemLayer1_LayerItem_Fragment;\n\ntype LayerSystemLayer2_LayerGroup_Fragment = (\n  { __typename?: 'LayerGroup' }\n  & Pick<LayerGroup, 'id'>\n  & { layers: Array<Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n    & LayerSystemLayer1_LayerGroup_Fragment\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n    & LayerSystemLayer1_LayerItem_Fragment\n  )>> }\n  & LayerSystemLayer_LayerGroup_Fragment\n);\n\ntype LayerSystemLayer2_LayerItem_Fragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'id'>\n  & LayerSystemLayer_LayerItem_Fragment\n);\n\nexport type LayerSystemLayer2Fragment = LayerSystemLayer2_LayerGroup_Fragment | LayerSystemLayer2_LayerItem_Fragment;\n\ntype LayerSystemLayer3_LayerGroup_Fragment = (\n  { __typename?: 'LayerGroup' }\n  & Pick<LayerGroup, 'id'>\n  & { layers: Array<Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n    & LayerSystemLayer2_LayerGroup_Fragment\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n    & LayerSystemLayer2_LayerItem_Fragment\n  )>> }\n  & LayerSystemLayer_LayerGroup_Fragment\n);\n\ntype LayerSystemLayer3_LayerItem_Fragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'id'>\n  & LayerSystemLayer_LayerItem_Fragment\n);\n\nexport type LayerSystemLayer3Fragment = LayerSystemLayer3_LayerGroup_Fragment | LayerSystemLayer3_LayerItem_Fragment;\n\ntype LayerSystemLayer4_LayerGroup_Fragment = (\n  { __typename?: 'LayerGroup' }\n  & Pick<LayerGroup, 'id'>\n  & { layers: Array<Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n    & LayerSystemLayer3_LayerGroup_Fragment\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n    & LayerSystemLayer3_LayerItem_Fragment\n  )>> }\n  & LayerSystemLayer_LayerGroup_Fragment\n);\n\ntype LayerSystemLayer4_LayerItem_Fragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'id'>\n  & LayerSystemLayer_LayerItem_Fragment\n);\n\nexport type LayerSystemLayer4Fragment = LayerSystemLayer4_LayerGroup_Fragment | LayerSystemLayer4_LayerItem_Fragment;\n\ntype LayerSystemLayer5_LayerGroup_Fragment = (\n  { __typename?: 'LayerGroup' }\n  & Pick<LayerGroup, 'id'>\n  & { layers: Array<Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n    & LayerSystemLayer4_LayerGroup_Fragment\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n    & LayerSystemLayer4_LayerItem_Fragment\n  )>> }\n  & LayerSystemLayer_LayerGroup_Fragment\n);\n\ntype LayerSystemLayer5_LayerItem_Fragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'id'>\n  & LayerSystemLayer_LayerItem_Fragment\n);\n\nexport type LayerSystemLayer5Fragment = LayerSystemLayer5_LayerGroup_Fragment | LayerSystemLayer5_LayerItem_Fragment;\n\nexport type GetLayersFromLayerIdQueryVariables = Exact<{\n  layerId: Scalars['ID'];\n}>;\n\n\nexport type GetLayersFromLayerIdQuery = (\n  { __typename?: 'Query' }\n  & { layer?: Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n    & LayerSystemLayer5_LayerGroup_Fragment\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n    & LayerSystemLayer5_LayerItem_Fragment\n  )> }\n);\n\nexport type MoveLayerMutationVariables = Exact<{\n  layerId: Scalars['ID'];\n  destLayerId?: Maybe<Scalars['ID']>;\n  index?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type MoveLayerMutation = (\n  { __typename?: 'Mutation' }\n  & { moveLayer?: Maybe<(\n    { __typename?: 'MoveLayerPayload' }\n    & { fromParentLayer: (\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & LayerSystemLayer_LayerGroup_Fragment\n    ), toParentLayer: (\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & LayerSystemLayer_LayerGroup_Fragment\n    ) }\n  )> }\n);\n\nexport type UpdateLayerMutationVariables = Exact<{\n  layerId: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  visible?: Maybe<Scalars['Boolean']>;\n}>;\n\n\nexport type UpdateLayerMutation = (\n  { __typename?: 'Mutation' }\n  & { updateLayer?: Maybe<(\n    { __typename?: 'UpdateLayerPayload' }\n    & { layer: (\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & LayerSystemLayer_LayerGroup_Fragment\n    ) | (\n      { __typename?: 'LayerItem' }\n      & Pick<LayerItem, 'id'>\n      & LayerSystemLayer_LayerItem_Fragment\n    ) }\n  )> }\n);\n\nexport type RemoveLayerMutationVariables = Exact<{\n  layerId: Scalars['ID'];\n}>;\n\n\nexport type RemoveLayerMutation = (\n  { __typename?: 'Mutation' }\n  & { removeLayer?: Maybe<(\n    { __typename?: 'RemoveLayerPayload' }\n    & Pick<RemoveLayerPayload, 'layerId'>\n    & { parentLayer: (\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & LayerSystemLayer_LayerGroup_Fragment\n    ) }\n  )> }\n);\n\nexport type ImportLayerMutationVariables = Exact<{\n  layerId: Scalars['ID'];\n  file: Scalars['Upload'];\n  format: LayerEncodingFormat;\n}>;\n\n\nexport type ImportLayerMutation = (\n  { __typename?: 'Mutation' }\n  & { importLayer?: Maybe<(\n    { __typename?: 'ImportLayerPayload' }\n    & { layers: Array<(\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & LayerSystemLayer5_LayerGroup_Fragment\n    ) | (\n      { __typename?: 'LayerItem' }\n      & Pick<LayerItem, 'id'>\n      & LayerSystemLayer5_LayerItem_Fragment\n    )>, parentLayer: (\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & LayerSystemLayer_LayerGroup_Fragment\n    ) }\n  )> }\n);\n\nexport type AddLayerGroupMutationVariables = Exact<{\n  parentLayerId: Scalars['ID'];\n  index?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type AddLayerGroupMutation = (\n  { __typename?: 'Mutation' }\n  & { addLayerGroup?: Maybe<(\n    { __typename?: 'AddLayerGroupPayload' }\n    & { layer: (\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & LayerSystemLayer5_LayerGroup_Fragment\n    ), parentLayer: (\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & LayerSystemLayer_LayerGroup_Fragment\n    ) }\n  )> }\n);\n\nexport type GetWidgetsQueryVariables = Exact<{\n  sceneId: Scalars['ID'];\n}>;\n\n\nexport type GetWidgetsQuery = (\n  { __typename?: 'Query' }\n  & { node?: Maybe<(\n    { __typename?: 'Asset' }\n    & Pick<Asset, 'id'>\n  ) | (\n    { __typename?: 'Dataset' }\n    & Pick<Dataset, 'id'>\n  ) | (\n    { __typename?: 'DatasetSchema' }\n    & Pick<DatasetSchema, 'id'>\n  ) | (\n    { __typename?: 'DatasetSchemaField' }\n    & Pick<DatasetSchemaField, 'id'>\n  ) | (\n    { __typename?: 'Project' }\n    & Pick<Project, 'id'>\n  ) | (\n    { __typename?: 'Property' }\n    & Pick<Property, 'id'>\n  ) | (\n    { __typename?: 'Scene' }\n    & Pick<Scene, 'id'>\n    & { plugins: Array<(\n      { __typename?: 'ScenePlugin' }\n      & { plugin?: Maybe<(\n        { __typename?: 'Plugin' }\n        & Pick<Plugin, 'id'>\n        & { extensions: Array<(\n          { __typename?: 'PluginExtension' }\n          & Pick<PluginExtension, 'extensionId' | 'description' | 'name' | 'translatedDescription' | 'translatedName' | 'icon' | 'type'>\n        )> }\n      )> }\n    )>, widgets: Array<(\n      { __typename?: 'SceneWidget' }\n      & Pick<SceneWidget, 'id' | 'enabled' | 'pluginId' | 'extensionId' | 'propertyId'>\n    )> }\n  ) | (\n    { __typename?: 'Team' }\n    & Pick<Team, 'id'>\n  ) | (\n    { __typename?: 'User' }\n    & Pick<User, 'id'>\n  )> }\n);\n\nexport type GetPrimitivesQueryVariables = Exact<{\n  sceneId: Scalars['ID'];\n}>;\n\n\nexport type GetPrimitivesQuery = (\n  { __typename?: 'Query' }\n  & { node?: Maybe<(\n    { __typename?: 'Asset' }\n    & Pick<Asset, 'id'>\n  ) | (\n    { __typename?: 'Dataset' }\n    & Pick<Dataset, 'id'>\n  ) | (\n    { __typename?: 'DatasetSchema' }\n    & Pick<DatasetSchema, 'id'>\n  ) | (\n    { __typename?: 'DatasetSchemaField' }\n    & Pick<DatasetSchemaField, 'id'>\n  ) | (\n    { __typename?: 'Project' }\n    & Pick<Project, 'id'>\n  ) | (\n    { __typename?: 'Property' }\n    & Pick<Property, 'id'>\n  ) | (\n    { __typename?: 'Scene' }\n    & Pick<Scene, 'id'>\n    & { plugins: Array<(\n      { __typename?: 'ScenePlugin' }\n      & { plugin?: Maybe<(\n        { __typename?: 'Plugin' }\n        & Pick<Plugin, 'id'>\n        & { extensions: Array<(\n          { __typename?: 'PluginExtension' }\n          & Pick<PluginExtension, 'extensionId' | 'translatedDescription' | 'translatedName' | 'icon' | 'type'>\n        )> }\n      )> }\n    )> }\n  ) | (\n    { __typename?: 'Team' }\n    & Pick<Team, 'id'>\n  ) | (\n    { __typename?: 'User' }\n    & Pick<User, 'id'>\n  )> }\n);\n\nexport type AddLayerItemFromPrimitiveMutationVariables = Exact<{\n  parentLayerId: Scalars['ID'];\n  pluginId: Scalars['PluginID'];\n  extensionId: Scalars['PluginExtensionID'];\n  name?: Maybe<Scalars['String']>;\n  lat?: Maybe<Scalars['Float']>;\n  lng?: Maybe<Scalars['Float']>;\n  index?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type AddLayerItemFromPrimitiveMutation = (\n  { __typename?: 'Mutation' }\n  & { addLayerItem?: Maybe<(\n    { __typename?: 'AddLayerItemPayload' }\n    & { parentLayer: (\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & Layer3Fragment_LayerGroup_Fragment\n    ), layer: (\n      { __typename?: 'LayerItem' }\n      & Pick<LayerItem, 'id'>\n      & LayerFragment_LayerItem_Fragment\n    ) }\n  )> }\n);\n\nexport type ChangePropertyValueMutationVariables = Exact<{\n  value?: Maybe<Scalars['Any']>;\n  propertyId: Scalars['ID'];\n  schemaItemId?: Maybe<Scalars['PropertySchemaFieldID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  fieldId: Scalars['PropertySchemaFieldID'];\n  type: ValueType;\n}>;\n\n\nexport type ChangePropertyValueMutation = (\n  { __typename?: 'Mutation' }\n  & { updatePropertyValue?: Maybe<(\n    { __typename?: 'PropertyFieldPayload' }\n    & { property: (\n      { __typename?: 'Property' }\n      & Pick<Property, 'id'>\n      & { layer?: Maybe<(\n        { __typename?: 'LayerGroup' }\n        & Pick<LayerGroup, 'id'>\n        & Layer1Fragment_LayerGroup_Fragment\n      ) | (\n        { __typename?: 'LayerItem' }\n        & Pick<LayerItem, 'id'>\n        & Layer1Fragment_LayerItem_Fragment\n      )> }\n      & PropertyFragmentFragment\n    ) }\n  )> }\n);\n\nexport type LinkDatasetMutationVariables = Exact<{\n  propertyId: Scalars['ID'];\n  itemId?: Maybe<Scalars['ID']>;\n  schemaItemId?: Maybe<Scalars['PropertySchemaFieldID']>;\n  fieldId: Scalars['PropertySchemaFieldID'];\n  datasetSchemaIds: Array<Scalars['ID']> | Scalars['ID'];\n  datasetIds?: Maybe<Array<Scalars['ID']> | Scalars['ID']>;\n  datasetFieldIds: Array<Scalars['ID']> | Scalars['ID'];\n}>;\n\n\nexport type LinkDatasetMutation = (\n  { __typename?: 'Mutation' }\n  & { linkDatasetToPropertyValue?: Maybe<(\n    { __typename?: 'PropertyFieldPayload' }\n    & { property: (\n      { __typename?: 'Property' }\n      & Pick<Property, 'id'>\n      & PropertyFragmentFragment\n    ) }\n  )> }\n);\n\nexport type UnlinkDatasetMutationVariables = Exact<{\n  propertyId: Scalars['ID'];\n  schemaItemId?: Maybe<Scalars['PropertySchemaFieldID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  fieldId: Scalars['PropertySchemaFieldID'];\n}>;\n\n\nexport type UnlinkDatasetMutation = (\n  { __typename?: 'Mutation' }\n  & { unlinkPropertyValue?: Maybe<(\n    { __typename?: 'PropertyFieldPayload' }\n    & { property: (\n      { __typename?: 'Property' }\n      & Pick<Property, 'id'>\n      & { layer?: Maybe<(\n        { __typename?: 'LayerGroup' }\n        & Pick<LayerGroup, 'id'>\n        & Layer1Fragment_LayerGroup_Fragment\n      ) | (\n        { __typename?: 'LayerItem' }\n        & Pick<LayerItem, 'id'>\n        & Layer1Fragment_LayerItem_Fragment\n      )> }\n      & PropertyFragmentFragment\n    ) }\n  )> }\n);\n\nexport type CreateInfoboxMutationVariables = Exact<{\n  layerId: Scalars['ID'];\n}>;\n\n\nexport type CreateInfoboxMutation = (\n  { __typename?: 'Mutation' }\n  & { createInfobox?: Maybe<(\n    { __typename?: 'CreateInfoboxPayload' }\n    & { layer: (\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & { infobox?: Maybe<(\n        { __typename?: 'Infobox' }\n        & InfoboxFragmentFragment\n      )> }\n    ) | (\n      { __typename?: 'LayerItem' }\n      & Pick<LayerItem, 'id'>\n      & { merged?: Maybe<(\n        { __typename?: 'MergedLayer' }\n        & { infobox?: Maybe<(\n          { __typename?: 'MergedInfobox' }\n          & MergedInfoboxFragmentFragment\n        )> }\n      )>, infobox?: Maybe<(\n        { __typename?: 'Infobox' }\n        & InfoboxFragmentFragment\n      )> }\n    ) }\n  )> }\n);\n\nexport type RemoveInfoboxMutationVariables = Exact<{\n  layerId: Scalars['ID'];\n}>;\n\n\nexport type RemoveInfoboxMutation = (\n  { __typename?: 'Mutation' }\n  & { removeInfobox?: Maybe<(\n    { __typename?: 'RemoveInfoboxPayload' }\n    & { layer: (\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & { infobox?: Maybe<(\n        { __typename?: 'Infobox' }\n        & InfoboxFragmentFragment\n      )> }\n    ) | (\n      { __typename?: 'LayerItem' }\n      & Pick<LayerItem, 'id'>\n      & { merged?: Maybe<(\n        { __typename?: 'MergedLayer' }\n        & { infobox?: Maybe<(\n          { __typename?: 'MergedInfobox' }\n          & MergedInfoboxFragmentFragment\n        )> }\n      )>, infobox?: Maybe<(\n        { __typename?: 'Infobox' }\n        & InfoboxFragmentFragment\n      )> }\n    ) }\n  )> }\n);\n\nexport type UploadFileToPropertyMutationVariables = Exact<{\n  propertyId: Scalars['ID'];\n  schemaItemId?: Maybe<Scalars['PropertySchemaFieldID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  fieldId: Scalars['PropertySchemaFieldID'];\n  file: Scalars['Upload'];\n}>;\n\n\nexport type UploadFileToPropertyMutation = (\n  { __typename?: 'Mutation' }\n  & { uploadFileToProperty?: Maybe<(\n    { __typename?: 'PropertyFieldPayload' }\n    & { property: (\n      { __typename?: 'Property' }\n      & Pick<Property, 'id'>\n      & { layer?: Maybe<(\n        { __typename?: 'LayerGroup' }\n        & Pick<LayerGroup, 'id'>\n        & Layer1Fragment_LayerGroup_Fragment\n      ) | (\n        { __typename?: 'LayerItem' }\n        & Pick<LayerItem, 'id'>\n        & Layer1Fragment_LayerItem_Fragment\n      )> }\n      & PropertyFragmentFragment\n    ) }\n  )> }\n);\n\nexport type RemovePropertyFieldMutationVariables = Exact<{\n  propertyId: Scalars['ID'];\n  schemaItemId?: Maybe<Scalars['PropertySchemaFieldID']>;\n  itemId?: Maybe<Scalars['ID']>;\n  fieldId: Scalars['PropertySchemaFieldID'];\n}>;\n\n\nexport type RemovePropertyFieldMutation = (\n  { __typename?: 'Mutation' }\n  & { removePropertyField?: Maybe<(\n    { __typename?: 'PropertyFieldPayload' }\n    & { property: (\n      { __typename?: 'Property' }\n      & Pick<Property, 'id'>\n      & { layer?: Maybe<(\n        { __typename?: 'LayerGroup' }\n        & Pick<LayerGroup, 'id'>\n        & Layer1Fragment_LayerGroup_Fragment\n      ) | (\n        { __typename?: 'LayerItem' }\n        & Pick<LayerItem, 'id'>\n        & Layer1Fragment_LayerItem_Fragment\n      )> }\n      & PropertyFragmentFragment\n    ) }\n  )> }\n);\n\nexport type AddPropertyItemMutationVariables = Exact<{\n  propertyId: Scalars['ID'];\n  schemaItemId: Scalars['PropertySchemaFieldID'];\n  index?: Maybe<Scalars['Int']>;\n  nameFieldValue?: Maybe<Scalars['Any']>;\n  nameFieldType?: Maybe<ValueType>;\n}>;\n\n\nexport type AddPropertyItemMutation = (\n  { __typename?: 'Mutation' }\n  & { addPropertyItem?: Maybe<(\n    { __typename?: 'PropertyItemPayload' }\n    & { property: (\n      { __typename?: 'Property' }\n      & Pick<Property, 'id'>\n      & { layer?: Maybe<(\n        { __typename?: 'LayerGroup' }\n        & Pick<LayerGroup, 'id'>\n        & Layer1Fragment_LayerGroup_Fragment\n      ) | (\n        { __typename?: 'LayerItem' }\n        & Pick<LayerItem, 'id'>\n        & Layer1Fragment_LayerItem_Fragment\n      )> }\n      & PropertyFragmentFragment\n    ) }\n  )> }\n);\n\nexport type MovePropertyItemMutationVariables = Exact<{\n  propertyId: Scalars['ID'];\n  schemaItemId: Scalars['PropertySchemaFieldID'];\n  itemId: Scalars['ID'];\n  index: Scalars['Int'];\n}>;\n\n\nexport type MovePropertyItemMutation = (\n  { __typename?: 'Mutation' }\n  & { movePropertyItem?: Maybe<(\n    { __typename?: 'PropertyItemPayload' }\n    & { property: (\n      { __typename?: 'Property' }\n      & Pick<Property, 'id'>\n      & { layer?: Maybe<(\n        { __typename?: 'LayerGroup' }\n        & Pick<LayerGroup, 'id'>\n        & Layer1Fragment_LayerGroup_Fragment\n      ) | (\n        { __typename?: 'LayerItem' }\n        & Pick<LayerItem, 'id'>\n        & Layer1Fragment_LayerItem_Fragment\n      )> }\n      & PropertyFragmentFragment\n    ) }\n  )> }\n);\n\nexport type RemovePropertyItemMutationVariables = Exact<{\n  propertyId: Scalars['ID'];\n  schemaItemId: Scalars['PropertySchemaFieldID'];\n  itemId: Scalars['ID'];\n}>;\n\n\nexport type RemovePropertyItemMutation = (\n  { __typename?: 'Mutation' }\n  & { removePropertyItem?: Maybe<(\n    { __typename?: 'PropertyItemPayload' }\n    & { property: (\n      { __typename?: 'Property' }\n      & Pick<Property, 'id'>\n      & { layer?: Maybe<(\n        { __typename?: 'LayerGroup' }\n        & Pick<LayerGroup, 'id'>\n        & Layer1Fragment_LayerGroup_Fragment\n      ) | (\n        { __typename?: 'LayerItem' }\n        & Pick<LayerItem, 'id'>\n        & Layer1Fragment_LayerItem_Fragment\n      )> }\n      & PropertyFragmentFragment\n    ) }\n  )> }\n);\n\nexport type UpdatePropertyItemsMutationVariables = Exact<{\n  propertyId: Scalars['ID'];\n  schemaItemId: Scalars['PropertySchemaFieldID'];\n  operations: Array<UpdatePropertyItemOperationInput> | UpdatePropertyItemOperationInput;\n}>;\n\n\nexport type UpdatePropertyItemsMutation = (\n  { __typename?: 'Mutation' }\n  & { updatePropertyItems?: Maybe<(\n    { __typename?: 'PropertyItemPayload' }\n    & { property: (\n      { __typename?: 'Property' }\n      & Pick<Property, 'id'>\n      & { layer?: Maybe<(\n        { __typename?: 'LayerGroup' }\n        & Pick<LayerGroup, 'id'>\n        & Layer1Fragment_LayerGroup_Fragment\n      ) | (\n        { __typename?: 'LayerItem' }\n        & Pick<LayerItem, 'id'>\n        & Layer1Fragment_LayerItem_Fragment\n      )> }\n      & PropertyFragmentFragment\n    ) }\n  )> }\n);\n\nexport type GetLayerPropertyQueryVariables = Exact<{\n  layerId: Scalars['ID'];\n}>;\n\n\nexport type GetLayerPropertyQuery = (\n  { __typename?: 'Query' }\n  & { layer?: Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n    & Layer1Fragment_LayerGroup_Fragment\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n    & Layer1Fragment_LayerItem_Fragment\n  )> }\n);\n\nexport type GetScenePropertyQueryVariables = Exact<{\n  sceneId: Scalars['ID'];\n}>;\n\n\nexport type GetScenePropertyQuery = (\n  { __typename?: 'Query' }\n  & { node?: Maybe<(\n    { __typename?: 'Asset' }\n    & Pick<Asset, 'id'>\n  ) | (\n    { __typename?: 'Dataset' }\n    & Pick<Dataset, 'id'>\n  ) | (\n    { __typename?: 'DatasetSchema' }\n    & Pick<DatasetSchema, 'id'>\n  ) | (\n    { __typename?: 'DatasetSchemaField' }\n    & Pick<DatasetSchemaField, 'id'>\n  ) | (\n    { __typename?: 'Project' }\n    & Pick<Project, 'id'>\n  ) | (\n    { __typename?: 'Property' }\n    & Pick<Property, 'id'>\n  ) | (\n    { __typename?: 'Scene' }\n    & Pick<Scene, 'id'>\n    & { property?: Maybe<(\n      { __typename?: 'Property' }\n      & Pick<Property, 'id'>\n      & PropertyFragmentFragment\n    )>, widgets: Array<(\n      { __typename?: 'SceneWidget' }\n      & Pick<SceneWidget, 'id' | 'pluginId' | 'extensionId' | 'enabled' | 'propertyId'>\n      & { property?: Maybe<(\n        { __typename?: 'Property' }\n        & Pick<Property, 'id'>\n        & PropertyFragmentFragment\n      )> }\n    )> }\n  ) | (\n    { __typename?: 'Team' }\n    & Pick<Team, 'id'>\n  ) | (\n    { __typename?: 'User' }\n    & Pick<User, 'id'>\n  )> }\n);\n\nexport type GetLinkableDatasetsQueryVariables = Exact<{\n  sceneId: Scalars['ID'];\n}>;\n\n\nexport type GetLinkableDatasetsQuery = (\n  { __typename?: 'Query' }\n  & { datasetSchemas: (\n    { __typename?: 'DatasetSchemaConnection' }\n    & { nodes: Array<Maybe<(\n      { __typename?: 'DatasetSchema' }\n      & Pick<DatasetSchema, 'id' | 'source' | 'name'>\n      & { fields: Array<(\n        { __typename?: 'DatasetSchemaField' }\n        & Pick<DatasetSchemaField, 'id' | 'name' | 'type'>\n      )>, datasets: (\n        { __typename?: 'DatasetConnection' }\n        & Pick<DatasetConnection, 'totalCount'>\n        & { nodes: Array<Maybe<(\n          { __typename?: 'Dataset' }\n          & Pick<Dataset, 'id' | 'name'>\n          & { fields: Array<(\n            { __typename?: 'DatasetField' }\n            & Pick<DatasetField, 'fieldId' | 'type'>\n          )> }\n        )>> }\n      ) }\n    )>> }\n  ) }\n);\n\nexport type AddWidgetMutationVariables = Exact<{\n  sceneId: Scalars['ID'];\n  pluginId: Scalars['PluginID'];\n  extensionId: Scalars['PluginExtensionID'];\n}>;\n\n\nexport type AddWidgetMutation = (\n  { __typename?: 'Mutation' }\n  & { addWidget?: Maybe<(\n    { __typename?: 'AddWidgetPayload' }\n    & { scene: (\n      { __typename?: 'Scene' }\n      & Pick<Scene, 'id'>\n      & { widgets: Array<(\n        { __typename?: 'SceneWidget' }\n        & Pick<SceneWidget, 'id' | 'enabled' | 'pluginId' | 'extensionId' | 'propertyId'>\n        & { property?: Maybe<(\n          { __typename?: 'Property' }\n          & Pick<Property, 'id'>\n          & PropertyFragmentFragment\n        )> }\n      )> }\n    ) }\n  )> }\n);\n\nexport type RemoveWidgetMutationVariables = Exact<{\n  sceneId: Scalars['ID'];\n  pluginId: Scalars['PluginID'];\n  extensionId: Scalars['PluginExtensionID'];\n}>;\n\n\nexport type RemoveWidgetMutation = (\n  { __typename?: 'Mutation' }\n  & { removeWidget?: Maybe<(\n    { __typename?: 'RemoveWidgetPayload' }\n    & { scene: (\n      { __typename?: 'Scene' }\n      & Pick<Scene, 'id'>\n      & { widgets: Array<(\n        { __typename?: 'SceneWidget' }\n        & Pick<SceneWidget, 'id' | 'enabled' | 'pluginId' | 'extensionId' | 'propertyId'>\n      )> }\n    ) }\n  )> }\n);\n\nexport type UpdateWidgetMutationVariables = Exact<{\n  sceneId: Scalars['ID'];\n  pluginId: Scalars['PluginID'];\n  extensionId: Scalars['PluginExtensionID'];\n  enabled?: Maybe<Scalars['Boolean']>;\n}>;\n\n\nexport type UpdateWidgetMutation = (\n  { __typename?: 'Mutation' }\n  & { updateWidget?: Maybe<(\n    { __typename?: 'UpdateWidgetPayload' }\n    & { scene: (\n      { __typename?: 'Scene' }\n      & Pick<Scene, 'id'>\n      & { widgets: Array<(\n        { __typename?: 'SceneWidget' }\n        & Pick<SceneWidget, 'id' | 'enabled' | 'pluginId' | 'extensionId' | 'propertyId'>\n      )> }\n    ) }\n  )> }\n);\n\nexport type UpdateMeMutationVariables = Exact<{\n  name?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  lang?: Maybe<Scalars['Lang']>;\n  theme?: Maybe<Theme>;\n  password?: Maybe<Scalars['String']>;\n  passwordConfirmation?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type UpdateMeMutation = (\n  { __typename?: 'Mutation' }\n  & { updateMe?: Maybe<(\n    { __typename?: 'UpdateMePayload' }\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'name' | 'email' | 'lang' | 'theme'>\n      & { myTeam: (\n        { __typename?: 'Team' }\n        & Pick<Team, 'id' | 'name'>\n      ) }\n    ) }\n  )> }\n);\n\nexport type ProfileQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ProfileQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name' | 'email' | 'lang' | 'theme' | 'auths'>\n    & { myTeam: (\n      { __typename?: 'Team' }\n      & Pick<Team, 'id' | 'name'>\n    ) }\n  )> }\n);\n\nexport type DatasetSchemasQueryVariables = Exact<{\n  projectId: Scalars['ID'];\n}>;\n\n\nexport type DatasetSchemasQuery = (\n  { __typename?: 'Query' }\n  & { scene?: Maybe<(\n    { __typename?: 'Scene' }\n    & Pick<Scene, 'id'>\n    & { datasetSchemas: (\n      { __typename?: 'DatasetSchemaConnection' }\n      & Pick<DatasetSchemaConnection, 'totalCount'>\n      & { nodes: Array<Maybe<(\n        { __typename?: 'DatasetSchema' }\n        & Pick<DatasetSchema, 'id' | 'source' | 'name'>\n      )>>, pageInfo: (\n        { __typename?: 'PageInfo' }\n        & Pick<PageInfo, 'endCursor' | 'hasNextPage' | 'hasPreviousPage' | 'startCursor'>\n      ) }\n    ) }\n  )> }\n);\n\nexport type SyncDatasetTestMutationVariables = Exact<{\n  sceneId: Scalars['ID'];\n  url: Scalars['String'];\n}>;\n\n\nexport type SyncDatasetTestMutation = (\n  { __typename?: 'Mutation' }\n  & { syncDataset?: Maybe<(\n    { __typename?: 'SyncDatasetPayload' }\n    & Pick<SyncDatasetPayload, 'sceneId' | 'url'>\n    & { datasetSchema: Array<(\n      { __typename?: 'DatasetSchema' }\n      & Pick<DatasetSchema, 'id' | 'source' | 'name'>\n    )>, dataset: Array<(\n      { __typename?: 'Dataset' }\n      & Pick<Dataset, 'id' | 'source' | 'schemaId' | 'name'>\n    )> }\n  )> }\n);\n\nexport type RemoveDatasetSchemaMutationVariables = Exact<{\n  schemaId: Scalars['ID'];\n}>;\n\n\nexport type RemoveDatasetSchemaMutation = (\n  { __typename?: 'Mutation' }\n  & { removeDatasetSchema?: Maybe<(\n    { __typename?: 'RemoveDatasetSchemaPayload' }\n    & Pick<RemoveDatasetSchemaPayload, 'schemaId'>\n  )> }\n);\n\nexport type InstallablePluginsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type InstallablePluginsQuery = (\n  { __typename?: 'Query' }\n  & { installablePlugins: Array<(\n    { __typename?: 'PluginMetadata' }\n    & Pick<PluginMetadata, 'name' | 'description' | 'thumbnailUrl' | 'author' | 'createdAt'>\n  )> }\n);\n\nexport type InstalledPluginsQueryVariables = Exact<{\n  projectId: Scalars['ID'];\n}>;\n\n\nexport type InstalledPluginsQuery = (\n  { __typename?: 'Query' }\n  & { scene?: Maybe<(\n    { __typename?: 'Scene' }\n    & Pick<Scene, 'id'>\n    & { plugins: Array<(\n      { __typename?: 'ScenePlugin' }\n      & { plugin?: Maybe<(\n        { __typename?: 'Plugin' }\n        & Pick<Plugin, 'id' | 'name' | 'version' | 'description' | 'author' | 'repositoryUrl'>\n      )> }\n    )> }\n  )> }\n);\n\nexport type UploadPluginMutationVariables = Exact<{\n  sceneId: Scalars['ID'];\n  file?: Maybe<Scalars['Upload']>;\n  url?: Maybe<Scalars['URL']>;\n}>;\n\n\nexport type UploadPluginMutation = (\n  { __typename?: 'Mutation' }\n  & { uploadPlugin?: Maybe<(\n    { __typename?: 'UploadPluginPayload' }\n    & { plugin: (\n      { __typename?: 'Plugin' }\n      & Pick<Plugin, 'id' | 'name' | 'version' | 'description' | 'author'>\n    ), scenePlugin: (\n      { __typename?: 'ScenePlugin' }\n      & Pick<ScenePlugin, 'pluginId' | 'propertyId'>\n    ) }\n  )> }\n);\n\nexport type UninstallPluginMutationVariables = Exact<{\n  sceneId: Scalars['ID'];\n  pluginId: Scalars['PluginID'];\n}>;\n\n\nexport type UninstallPluginMutation = (\n  { __typename?: 'Mutation' }\n  & { uninstallPlugin?: Maybe<(\n    { __typename?: 'UninstallPluginPayload' }\n    & Pick<UninstallPluginPayload, 'pluginId'>\n  )> }\n);\n\nexport type ProjectQueryVariables = Exact<{\n  teamId: Scalars['ID'];\n}>;\n\n\nexport type ProjectQuery = (\n  { __typename?: 'Query' }\n  & { projects: (\n    { __typename?: 'ProjectConnection' }\n    & { nodes: Array<Maybe<(\n      { __typename?: 'Project' }\n      & Pick<Project, 'id' | 'name' | 'description' | 'imageUrl' | 'isArchived' | 'isBasicAuthActive' | 'basicAuthUsername' | 'basicAuthPassword' | 'publicTitle' | 'publicDescription' | 'publicImage' | 'alias' | 'publishmentStatus'>\n    )>> }\n  ) }\n);\n\nexport type UpdateProjectBasicAuthMutationVariables = Exact<{\n  projectId: Scalars['ID'];\n  isBasicAuthActive?: Maybe<Scalars['Boolean']>;\n  basicAuthUsername?: Maybe<Scalars['String']>;\n  basicAuthPassword?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type UpdateProjectBasicAuthMutation = (\n  { __typename?: 'Mutation' }\n  & { updateProject?: Maybe<(\n    { __typename?: 'ProjectPayload' }\n    & { project: (\n      { __typename?: 'Project' }\n      & Pick<Project, 'id' | 'name' | 'isBasicAuthActive' | 'basicAuthUsername' | 'basicAuthPassword'>\n    ) }\n  )> }\n);\n\nexport type UpdateProjectMutationVariables = Exact<{\n  projectId: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  imageUrl?: Maybe<Scalars['URL']>;\n  publicTitle?: Maybe<Scalars['String']>;\n  publicDescription?: Maybe<Scalars['String']>;\n  publicImage?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type UpdateProjectMutation = (\n  { __typename?: 'Mutation' }\n  & { updateProject?: Maybe<(\n    { __typename?: 'ProjectPayload' }\n    & { project: (\n      { __typename?: 'Project' }\n      & Pick<Project, 'id' | 'name' | 'description' | 'imageUrl' | 'isArchived' | 'isBasicAuthActive' | 'basicAuthUsername' | 'basicAuthPassword' | 'publicTitle' | 'publicDescription' | 'publicImage' | 'alias' | 'publishmentStatus'>\n    ) }\n  )> }\n);\n\nexport type ArchiveProjectMutationVariables = Exact<{\n  projectId: Scalars['ID'];\n  archived: Scalars['Boolean'];\n}>;\n\n\nexport type ArchiveProjectMutation = (\n  { __typename?: 'Mutation' }\n  & { updateProject?: Maybe<(\n    { __typename?: 'ProjectPayload' }\n    & { project: (\n      { __typename?: 'Project' }\n      & Pick<Project, 'id' | 'name' | 'description' | 'imageUrl' | 'isArchived' | 'isBasicAuthActive' | 'basicAuthUsername' | 'basicAuthPassword' | 'publicTitle' | 'publicDescription' | 'publicImage' | 'alias' | 'publishmentStatus'>\n    ) }\n  )> }\n);\n\nexport type DeleteProjectMutationVariables = Exact<{\n  projectId: Scalars['ID'];\n}>;\n\n\nexport type DeleteProjectMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteProject?: Maybe<(\n    { __typename?: 'DeleteProjectPayload' }\n    & Pick<DeleteProjectPayload, 'projectId'>\n  )> }\n);\n\nexport type UpdateProjectAliasMutationVariables = Exact<{\n  projectId: Scalars['ID'];\n  alias: Scalars['String'];\n}>;\n\n\nexport type UpdateProjectAliasMutation = (\n  { __typename?: 'Mutation' }\n  & { updateProject?: Maybe<(\n    { __typename?: 'ProjectPayload' }\n    & { project: (\n      { __typename?: 'Project' }\n      & Pick<Project, 'id' | 'name' | 'alias'>\n    ) }\n  )> }\n);\n\nexport type SceneQueryVariables = Exact<{\n  projectId: Scalars['ID'];\n}>;\n\n\nexport type SceneQuery = (\n  { __typename?: 'Query' }\n  & { scene?: Maybe<(\n    { __typename?: 'Scene' }\n    & Pick<Scene, 'id' | 'projectId' | 'teamId'>\n  )> }\n);\n\nexport type AssetsQueryVariables = Exact<{\n  teamId: Scalars['ID'];\n}>;\n\n\nexport type AssetsQuery = (\n  { __typename?: 'Query' }\n  & { assets: (\n    { __typename?: 'AssetConnection' }\n    & Pick<AssetConnection, 'totalCount'>\n    & { edges: Array<(\n      { __typename?: 'AssetEdge' }\n      & Pick<AssetEdge, 'cursor'>\n      & { node?: Maybe<(\n        { __typename?: 'Asset' }\n        & Pick<Asset, 'id' | 'teamId' | 'name' | 'size' | 'url' | 'contentType'>\n      )> }\n    )>, nodes: Array<Maybe<(\n      { __typename?: 'Asset' }\n      & Pick<Asset, 'id' | 'teamId' | 'name' | 'size' | 'url' | 'contentType'>\n    )>>, pageInfo: (\n      { __typename?: 'PageInfo' }\n      & Pick<PageInfo, 'endCursor' | 'hasNextPage' | 'hasPreviousPage' | 'startCursor'>\n    ) }\n  ) }\n);\n\nexport type CreateAssetMutationVariables = Exact<{\n  teamId: Scalars['ID'];\n  file: Scalars['Upload'];\n}>;\n\n\nexport type CreateAssetMutation = (\n  { __typename?: 'Mutation' }\n  & { createAsset?: Maybe<(\n    { __typename?: 'CreateAssetPayload' }\n    & { asset: (\n      { __typename?: 'Asset' }\n      & Pick<Asset, 'id' | 'teamId' | 'name' | 'size' | 'url' | 'contentType'>\n    ) }\n  )> }\n);\n\nexport type RemoveAssetMutationVariables = Exact<{\n  assetId: Scalars['ID'];\n}>;\n\n\nexport type RemoveAssetMutation = (\n  { __typename?: 'Mutation' }\n  & { removeAsset?: Maybe<(\n    { __typename?: 'RemoveAssetPayload' }\n    & Pick<RemoveAssetPayload, 'assetId'>\n  )> }\n);\n\nexport type UpdateTeamMutationVariables = Exact<{\n  teamId: Scalars['ID'];\n  name: Scalars['String'];\n}>;\n\n\nexport type UpdateTeamMutation = (\n  { __typename?: 'Mutation' }\n  & { updateTeam?: Maybe<(\n    { __typename?: 'UpdateTeamPayload' }\n    & { team: (\n      { __typename?: 'Team' }\n      & Pick<Team, 'id' | 'name' | 'personal'>\n      & { members: Array<(\n        { __typename?: 'TeamMember' }\n        & Pick<TeamMember, 'userId' | 'role'>\n        & { user?: Maybe<(\n          { __typename?: 'User' }\n          & Pick<User, 'id' | 'name' | 'email'>\n        )> }\n      )> }\n    ) }\n  )> }\n);\n\nexport type DeleteTeamMutationVariables = Exact<{\n  teamId: Scalars['ID'];\n}>;\n\n\nexport type DeleteTeamMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteTeam?: Maybe<(\n    { __typename?: 'DeleteTeamPayload' }\n    & Pick<DeleteTeamPayload, 'teamId'>\n  )> }\n);\n\nexport type SearchUserQueryVariables = Exact<{\n  nameOrEmail: Scalars['String'];\n}>;\n\n\nexport type SearchUserQuery = (\n  { __typename?: 'Query' }\n  & { searchUser?: Maybe<(\n    { __typename?: 'SearchedUser' }\n    & Pick<SearchedUser, 'userId' | 'userName' | 'userEmail'>\n  )> }\n);\n\nexport type AddMemberToTeamMutationVariables = Exact<{\n  teamId: Scalars['ID'];\n  userId: Scalars['ID'];\n  role: Role;\n}>;\n\n\nexport type AddMemberToTeamMutation = (\n  { __typename?: 'Mutation' }\n  & { addMemberToTeam?: Maybe<(\n    { __typename?: 'AddMemberToTeamPayload' }\n    & { team: (\n      { __typename?: 'Team' }\n      & Pick<Team, 'id' | 'name' | 'personal'>\n      & { members: Array<(\n        { __typename?: 'TeamMember' }\n        & Pick<TeamMember, 'userId' | 'role'>\n        & { user?: Maybe<(\n          { __typename?: 'User' }\n          & Pick<User, 'id' | 'name' | 'email'>\n        )> }\n      )> }\n    ) }\n  )> }\n);\n\nexport type UpdateMemberOfTeamMutationVariables = Exact<{\n  teamId: Scalars['ID'];\n  userId: Scalars['ID'];\n  role: Role;\n}>;\n\n\nexport type UpdateMemberOfTeamMutation = (\n  { __typename?: 'Mutation' }\n  & { updateMemberOfTeam?: Maybe<(\n    { __typename?: 'UpdateMemberOfTeamPayload' }\n    & { team: (\n      { __typename?: 'Team' }\n      & Pick<Team, 'id' | 'name' | 'personal'>\n      & { members: Array<(\n        { __typename?: 'TeamMember' }\n        & Pick<TeamMember, 'userId' | 'role'>\n        & { user?: Maybe<(\n          { __typename?: 'User' }\n          & Pick<User, 'id' | 'name' | 'email'>\n        )> }\n      )> }\n    ) }\n  )> }\n);\n\nexport type RemoveMemberFromTeamMutationVariables = Exact<{\n  teamId: Scalars['ID'];\n  userId: Scalars['ID'];\n}>;\n\n\nexport type RemoveMemberFromTeamMutation = (\n  { __typename?: 'Mutation' }\n  & { removeMemberFromTeam?: Maybe<(\n    { __typename?: 'RemoveMemberFromTeamPayload' }\n    & { team: (\n      { __typename?: 'Team' }\n      & Pick<Team, 'id' | 'name' | 'personal'>\n      & { members: Array<(\n        { __typename?: 'TeamMember' }\n        & Pick<TeamMember, 'userId' | 'role'>\n        & { user?: Maybe<(\n          { __typename?: 'User' }\n          & Pick<User, 'id' | 'name' | 'email'>\n        )> }\n      )> }\n    ) }\n  )> }\n);\n\nexport type GetSceneQueryVariables = Exact<{\n  sceneId: Scalars['ID'];\n}>;\n\n\nexport type GetSceneQuery = (\n  { __typename?: 'Query' }\n  & { node?: Maybe<(\n    { __typename?: 'Asset' }\n    & Pick<Asset, 'id'>\n  ) | (\n    { __typename?: 'Dataset' }\n    & Pick<Dataset, 'id'>\n  ) | (\n    { __typename?: 'DatasetSchema' }\n    & Pick<DatasetSchema, 'id'>\n  ) | (\n    { __typename?: 'DatasetSchemaField' }\n    & Pick<DatasetSchemaField, 'id'>\n  ) | (\n    { __typename?: 'Project' }\n    & Pick<Project, 'id'>\n  ) | (\n    { __typename?: 'Property' }\n    & Pick<Property, 'id'>\n  ) | (\n    { __typename?: 'Scene' }\n    & Pick<Scene, 'rootLayerId' | 'id'>\n  ) | (\n    { __typename?: 'Team' }\n    & Pick<Team, 'id'>\n  ) | (\n    { __typename?: 'User' }\n    & Pick<User, 'id'>\n  )> }\n);\n\nexport type InfoboxFragmentFragment = (\n  { __typename?: 'Infobox' }\n  & Pick<Infobox, 'propertyId'>\n  & { property?: Maybe<(\n    { __typename?: 'Property' }\n    & Pick<Property, 'id'>\n    & PropertyFragmentFragment\n  )>, fields: Array<(\n    { __typename?: 'InfoboxField' }\n    & Pick<InfoboxField, 'id' | 'pluginId' | 'extensionId' | 'propertyId'>\n    & { property?: Maybe<(\n      { __typename?: 'Property' }\n      & Pick<Property, 'id'>\n      & PropertyFragmentFragment\n    )> }\n  )> }\n);\n\nexport type MergedInfoboxFragmentFragment = (\n  { __typename?: 'MergedInfobox' }\n  & { property?: Maybe<(\n    { __typename?: 'MergedProperty' }\n    & MergedPropertyFragmentFragment\n  )>, fields: Array<(\n    { __typename?: 'MergedInfoboxField' }\n    & Pick<MergedInfoboxField, 'originalId' | 'pluginId' | 'extensionId'>\n    & { property?: Maybe<(\n      { __typename?: 'MergedProperty' }\n      & MergedPropertyFragmentFragment\n    )> }\n  )> }\n);\n\ntype LayerFragment_LayerGroup_Fragment = (\n  { __typename?: 'LayerGroup' }\n  & Pick<LayerGroup, 'linkedDatasetSchemaId' | 'id' | 'name' | 'isVisible' | 'pluginId' | 'extensionId'>\n  & { property?: Maybe<(\n    { __typename?: 'Property' }\n    & Pick<Property, 'id'>\n    & PropertyFragmentFragment\n  )>, infobox?: Maybe<(\n    { __typename?: 'Infobox' }\n    & InfoboxFragmentFragment\n  )> }\n);\n\ntype LayerFragment_LayerItem_Fragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'linkedDatasetId' | 'id' | 'name' | 'isVisible' | 'pluginId' | 'extensionId'>\n  & { merged?: Maybe<(\n    { __typename?: 'MergedLayer' }\n    & Pick<MergedLayer, 'parentId'>\n    & { property?: Maybe<(\n      { __typename?: 'MergedProperty' }\n      & MergedPropertyFragmentFragment\n    )>, infobox?: Maybe<(\n      { __typename?: 'MergedInfobox' }\n      & MergedInfoboxFragmentFragment\n    )> }\n  )>, property?: Maybe<(\n    { __typename?: 'Property' }\n    & Pick<Property, 'id'>\n    & PropertyFragmentFragment\n  )>, infobox?: Maybe<(\n    { __typename?: 'Infobox' }\n    & InfoboxFragmentFragment\n  )> }\n);\n\nexport type LayerFragmentFragment = LayerFragment_LayerGroup_Fragment | LayerFragment_LayerItem_Fragment;\n\ntype Layer0Fragment_LayerGroup_Fragment = (\n  { __typename?: 'LayerGroup' }\n  & Pick<LayerGroup, 'id'>\n  & { layers: Array<Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n  )>> }\n  & LayerFragment_LayerGroup_Fragment\n);\n\ntype Layer0Fragment_LayerItem_Fragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'id'>\n  & LayerFragment_LayerItem_Fragment\n);\n\nexport type Layer0FragmentFragment = Layer0Fragment_LayerGroup_Fragment | Layer0Fragment_LayerItem_Fragment;\n\ntype Layer1Fragment_LayerGroup_Fragment = (\n  { __typename?: 'LayerGroup' }\n  & Pick<LayerGroup, 'id'>\n  & { layers: Array<Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n    & LayerFragment_LayerGroup_Fragment\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n    & LayerFragment_LayerItem_Fragment\n  )>> }\n  & LayerFragment_LayerGroup_Fragment\n);\n\ntype Layer1Fragment_LayerItem_Fragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'id'>\n  & LayerFragment_LayerItem_Fragment\n);\n\nexport type Layer1FragmentFragment = Layer1Fragment_LayerGroup_Fragment | Layer1Fragment_LayerItem_Fragment;\n\ntype Layer2Fragment_LayerGroup_Fragment = (\n  { __typename?: 'LayerGroup' }\n  & Pick<LayerGroup, 'id'>\n  & { layers: Array<Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n    & { layers: Array<Maybe<(\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & LayerFragment_LayerGroup_Fragment\n    ) | (\n      { __typename?: 'LayerItem' }\n      & Pick<LayerItem, 'id'>\n      & LayerFragment_LayerItem_Fragment\n    )>> }\n    & LayerFragment_LayerGroup_Fragment\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n    & LayerFragment_LayerItem_Fragment\n  )>> }\n  & LayerFragment_LayerGroup_Fragment\n);\n\ntype Layer2Fragment_LayerItem_Fragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'id'>\n  & LayerFragment_LayerItem_Fragment\n);\n\nexport type Layer2FragmentFragment = Layer2Fragment_LayerGroup_Fragment | Layer2Fragment_LayerItem_Fragment;\n\ntype Layer3Fragment_LayerGroup_Fragment = (\n  { __typename?: 'LayerGroup' }\n  & Pick<LayerGroup, 'id'>\n  & { layers: Array<Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n    & { layers: Array<Maybe<(\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & { layers: Array<Maybe<(\n        { __typename?: 'LayerGroup' }\n        & Pick<LayerGroup, 'id'>\n        & LayerFragment_LayerGroup_Fragment\n      ) | (\n        { __typename?: 'LayerItem' }\n        & Pick<LayerItem, 'id'>\n        & LayerFragment_LayerItem_Fragment\n      )>> }\n      & LayerFragment_LayerGroup_Fragment\n    ) | (\n      { __typename?: 'LayerItem' }\n      & Pick<LayerItem, 'id'>\n      & LayerFragment_LayerItem_Fragment\n    )>> }\n    & LayerFragment_LayerGroup_Fragment\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n    & LayerFragment_LayerItem_Fragment\n  )>> }\n  & LayerFragment_LayerGroup_Fragment\n);\n\ntype Layer3Fragment_LayerItem_Fragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'id'>\n  & LayerFragment_LayerItem_Fragment\n);\n\nexport type Layer3FragmentFragment = Layer3Fragment_LayerGroup_Fragment | Layer3Fragment_LayerItem_Fragment;\n\ntype Layer4Fragment_LayerGroup_Fragment = (\n  { __typename?: 'LayerGroup' }\n  & Pick<LayerGroup, 'id'>\n  & { layers: Array<Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n    & { layers: Array<Maybe<(\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & { layers: Array<Maybe<(\n        { __typename?: 'LayerGroup' }\n        & Pick<LayerGroup, 'id'>\n        & { layers: Array<Maybe<(\n          { __typename?: 'LayerGroup' }\n          & Pick<LayerGroup, 'id'>\n          & LayerFragment_LayerGroup_Fragment\n        ) | (\n          { __typename?: 'LayerItem' }\n          & Pick<LayerItem, 'id'>\n          & LayerFragment_LayerItem_Fragment\n        )>> }\n        & LayerFragment_LayerGroup_Fragment\n      ) | (\n        { __typename?: 'LayerItem' }\n        & Pick<LayerItem, 'id'>\n        & LayerFragment_LayerItem_Fragment\n      )>> }\n      & LayerFragment_LayerGroup_Fragment\n    ) | (\n      { __typename?: 'LayerItem' }\n      & Pick<LayerItem, 'id'>\n      & LayerFragment_LayerItem_Fragment\n    )>> }\n    & LayerFragment_LayerGroup_Fragment\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n    & LayerFragment_LayerItem_Fragment\n  )>> }\n  & LayerFragment_LayerGroup_Fragment\n);\n\ntype Layer4Fragment_LayerItem_Fragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'id'>\n  & LayerFragment_LayerItem_Fragment\n);\n\nexport type Layer4FragmentFragment = Layer4Fragment_LayerGroup_Fragment | Layer4Fragment_LayerItem_Fragment;\n\ntype Layer5Fragment_LayerGroup_Fragment = (\n  { __typename?: 'LayerGroup' }\n  & Pick<LayerGroup, 'id'>\n  & { layers: Array<Maybe<(\n    { __typename?: 'LayerGroup' }\n    & Pick<LayerGroup, 'id'>\n    & { layers: Array<Maybe<(\n      { __typename?: 'LayerGroup' }\n      & Pick<LayerGroup, 'id'>\n      & { layers: Array<Maybe<(\n        { __typename?: 'LayerGroup' }\n        & Pick<LayerGroup, 'id'>\n        & { layers: Array<Maybe<(\n          { __typename?: 'LayerGroup' }\n          & Pick<LayerGroup, 'id'>\n          & { layers: Array<Maybe<(\n            { __typename?: 'LayerGroup' }\n            & Pick<LayerGroup, 'id'>\n            & LayerFragment_LayerGroup_Fragment\n          ) | (\n            { __typename?: 'LayerItem' }\n            & Pick<LayerItem, 'id'>\n            & LayerFragment_LayerItem_Fragment\n          )>> }\n          & LayerFragment_LayerGroup_Fragment\n        ) | (\n          { __typename?: 'LayerItem' }\n          & Pick<LayerItem, 'id'>\n          & LayerFragment_LayerItem_Fragment\n        )>> }\n        & LayerFragment_LayerGroup_Fragment\n      ) | (\n        { __typename?: 'LayerItem' }\n        & Pick<LayerItem, 'id'>\n        & LayerFragment_LayerItem_Fragment\n      )>> }\n      & LayerFragment_LayerGroup_Fragment\n    ) | (\n      { __typename?: 'LayerItem' }\n      & Pick<LayerItem, 'id'>\n      & LayerFragment_LayerItem_Fragment\n    )>> }\n    & LayerFragment_LayerGroup_Fragment\n  ) | (\n    { __typename?: 'LayerItem' }\n    & Pick<LayerItem, 'id'>\n    & LayerFragment_LayerItem_Fragment\n  )>> }\n  & LayerFragment_LayerGroup_Fragment\n);\n\ntype Layer5Fragment_LayerItem_Fragment = (\n  { __typename?: 'LayerItem' }\n  & Pick<LayerItem, 'id'>\n  & LayerFragment_LayerItem_Fragment\n);\n\nexport type Layer5FragmentFragment = Layer5Fragment_LayerGroup_Fragment | Layer5Fragment_LayerItem_Fragment;\n\nexport type PropertySchemaItemFragmentFragment = (\n  { __typename?: 'PropertySchemaGroup' }\n  & Pick<PropertySchemaGroup, 'schemaGroupId' | 'title' | 'translatedTitle' | 'isList' | 'name'>\n  & { isAvailableIf?: Maybe<(\n    { __typename?: 'PropertyCondition' }\n    & Pick<PropertyCondition, 'fieldId' | 'type' | 'value'>\n  )>, fields: Array<(\n    { __typename?: 'PropertySchemaField' }\n    & Pick<PropertySchemaField, 'fieldId' | 'name' | 'description' | 'translatedName' | 'translatedDescription' | 'prefix' | 'suffix' | 'type' | 'defaultValue' | 'ui' | 'min' | 'max'>\n    & { choices?: Maybe<Array<(\n      { __typename?: 'PropertySchemaFieldChoice' }\n      & Pick<PropertySchemaFieldChoice, 'key' | 'label' | 'translatedLabel'>\n    )>>, isAvailableIf?: Maybe<(\n      { __typename?: 'PropertyCondition' }\n      & Pick<PropertyCondition, 'fieldId' | 'type' | 'value'>\n    )> }\n  )> }\n);\n\ntype PropertyItemFragment_PropertyGroup_Fragment = (\n  { __typename?: 'PropertyGroup' }\n  & Pick<PropertyGroup, 'id' | 'schemaGroupId'>\n  & { fields: Array<(\n    { __typename?: 'PropertyField' }\n    & Pick<PropertyField, 'id' | 'fieldId' | 'type' | 'value'>\n    & { links?: Maybe<Array<(\n      { __typename?: 'PropertyFieldLink' }\n      & PropertyFieldLinkFragment\n    )>> }\n  )> }\n);\n\ntype PropertyItemFragment_PropertyGroupList_Fragment = (\n  { __typename?: 'PropertyGroupList' }\n  & Pick<PropertyGroupList, 'id' | 'schemaGroupId'>\n  & { groups: Array<(\n    { __typename?: 'PropertyGroup' }\n    & Pick<PropertyGroup, 'id' | 'schemaGroupId'>\n    & { fields: Array<(\n      { __typename?: 'PropertyField' }\n      & Pick<PropertyField, 'id' | 'fieldId' | 'type' | 'value'>\n      & { links?: Maybe<Array<(\n        { __typename?: 'PropertyFieldLink' }\n        & PropertyFieldLinkFragment\n      )>> }\n    )> }\n  )> }\n);\n\nexport type PropertyItemFragmentFragment = PropertyItemFragment_PropertyGroup_Fragment | PropertyItemFragment_PropertyGroupList_Fragment;\n\nexport type PropertyFragmentWithoutSchemaFragment = (\n  { __typename?: 'Property' }\n  & Pick<Property, 'id'>\n  & { items: Array<(\n    { __typename?: 'PropertyGroup' }\n    & PropertyItemFragment_PropertyGroup_Fragment\n  ) | (\n    { __typename?: 'PropertyGroupList' }\n    & PropertyItemFragment_PropertyGroupList_Fragment\n  )> }\n);\n\nexport type PropertyFragmentFragment = (\n  { __typename?: 'Property' }\n  & Pick<Property, 'id'>\n  & { schema?: Maybe<(\n    { __typename?: 'PropertySchema' }\n    & Pick<PropertySchema, 'id'>\n    & { groups: Array<(\n      { __typename?: 'PropertySchemaGroup' }\n      & PropertySchemaItemFragmentFragment\n    )> }\n  )> }\n  & PropertyFragmentWithoutSchemaFragment\n);\n\nexport type MergedPropertyGroupCommonFragmentFragment = (\n  { __typename?: 'MergedPropertyGroup' }\n  & Pick<MergedPropertyGroup, 'schemaGroupId'>\n  & { fields: Array<(\n    { __typename?: 'MergedPropertyField' }\n    & Pick<MergedPropertyField, 'fieldId' | 'type' | 'actualValue' | 'overridden'>\n    & { links?: Maybe<Array<(\n      { __typename?: 'PropertyFieldLink' }\n      & PropertyFieldLinkFragment\n    )>> }\n  )> }\n);\n\nexport type MergedPropertyGroupFragmentFragment = (\n  { __typename?: 'MergedPropertyGroup' }\n  & { groups: Array<(\n    { __typename?: 'MergedPropertyGroup' }\n    & MergedPropertyGroupCommonFragmentFragment\n  )> }\n  & MergedPropertyGroupCommonFragmentFragment\n);\n\nexport type MergedPropertyFragmentWithoutSchemaFragment = (\n  { __typename?: 'MergedProperty' }\n  & Pick<MergedProperty, 'originalId' | 'parentId' | 'linkedDatasetId'>\n  & { groups: Array<(\n    { __typename?: 'MergedPropertyGroup' }\n    & MergedPropertyGroupFragmentFragment\n  )> }\n);\n\nexport type MergedPropertyFragmentFragment = (\n  { __typename?: 'MergedProperty' }\n  & { schema?: Maybe<(\n    { __typename?: 'PropertySchema' }\n    & Pick<PropertySchema, 'id'>\n  )> }\n  & MergedPropertyFragmentWithoutSchemaFragment\n);\n\nexport type PropertyFieldLinkFragment = (\n  { __typename?: 'PropertyFieldLink' }\n  & Pick<PropertyFieldLink, 'datasetId' | 'datasetSchemaId' | 'datasetSchemaFieldId'>\n  & { datasetSchema?: Maybe<(\n    { __typename?: 'DatasetSchema' }\n    & Pick<DatasetSchema, 'id' | 'name'>\n  )>, dataset?: Maybe<(\n    { __typename?: 'Dataset' }\n    & Pick<Dataset, 'id' | 'name'>\n  )>, datasetSchemaField?: Maybe<(\n    { __typename?: 'DatasetSchemaField' }\n    & Pick<DatasetSchemaField, 'id' | 'name'>\n  )> }\n);\n\nexport type DeleteMeMutationVariables = Exact<{\n  userId: Scalars['ID'];\n}>;\n\n\nexport type DeleteMeMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteMe?: Maybe<(\n    { __typename?: 'DeleteMePayload' }\n    & Pick<DeleteMePayload, 'userId'>\n  )> }\n);\n\nexport type CreateTeamMutationVariables = Exact<{\n  name: Scalars['String'];\n}>;\n\n\nexport type CreateTeamMutation = (\n  { __typename?: 'Mutation' }\n  & { createTeam?: Maybe<(\n    { __typename?: 'CreateTeamPayload' }\n    & { team: (\n      { __typename?: 'Team' }\n      & Pick<Team, 'id' | 'name'>\n    ) }\n  )> }\n);\n\nexport type TeamFragment = (\n  { __typename?: 'Team' }\n  & Pick<Team, 'id' | 'name' | 'personal'>\n  & { members: Array<(\n    { __typename?: 'TeamMember' }\n    & Pick<TeamMember, 'userId' | 'role'>\n    & { user?: Maybe<(\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'name' | 'email'>\n    )> }\n  )> }\n);\n\nexport type TeamsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type TeamsQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name'>\n    & { myTeam: (\n      { __typename?: 'Team' }\n      & Pick<Team, 'id'>\n      & TeamFragment\n    ), teams: Array<(\n      { __typename?: 'Team' }\n      & Pick<Team, 'id'>\n      & TeamFragment\n    )> }\n  )> }\n);\n\nexport type LanguageQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LanguageQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'lang'>\n  )> }\n);\n\nexport type ThemeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ThemeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'theme'>\n  )> }\n);\n\nexport const PropertyFieldLinkFragmentDoc = gql`\n    fragment PropertyFieldLink on PropertyFieldLink {\n  datasetId\n  datasetSchemaId\n  datasetSchemaFieldId\n  datasetSchema {\n    id\n    name\n  }\n  dataset {\n    id\n    name\n  }\n  datasetSchemaField {\n    id\n    name\n  }\n}\n    `;\nexport const PropertyItemFragmentFragmentDoc = gql`\n    fragment PropertyItemFragment on PropertyItem {\n  ... on PropertyGroupList {\n    id\n    schemaGroupId\n    groups {\n      id\n      schemaGroupId\n      fields {\n        id\n        fieldId\n        type\n        value\n        links {\n          ...PropertyFieldLink\n        }\n      }\n    }\n  }\n  ... on PropertyGroup {\n    id\n    schemaGroupId\n    fields {\n      id\n      fieldId\n      type\n      value\n      links {\n        ...PropertyFieldLink\n      }\n    }\n  }\n}\n    ${PropertyFieldLinkFragmentDoc}`;\nexport const PropertyFragmentWithoutSchemaFragmentDoc = gql`\n    fragment PropertyFragmentWithoutSchema on Property {\n  id\n  items {\n    ...PropertyItemFragment\n  }\n}\n    ${PropertyItemFragmentFragmentDoc}`;\nexport const PropertySchemaItemFragmentFragmentDoc = gql`\n    fragment PropertySchemaItemFragment on PropertySchemaGroup {\n  schemaGroupId\n  title\n  translatedTitle\n  isList\n  name\n  isAvailableIf {\n    fieldId\n    type\n    value\n  }\n  fields {\n    fieldId\n    name\n    description\n    translatedName\n    translatedDescription\n    prefix\n    suffix\n    type\n    defaultValue\n    ui\n    min\n    max\n    choices {\n      key\n      label\n      translatedLabel\n    }\n    isAvailableIf {\n      fieldId\n      type\n      value\n    }\n  }\n}\n    `;\nexport const PropertyFragmentFragmentDoc = gql`\n    fragment PropertyFragment on Property {\n  id\n  ...PropertyFragmentWithoutSchema\n  schema {\n    id\n    groups {\n      ...PropertySchemaItemFragment\n    }\n  }\n}\n    ${PropertyFragmentWithoutSchemaFragmentDoc}\n${PropertySchemaItemFragmentFragmentDoc}`;\nexport const MergedPropertyGroupCommonFragmentFragmentDoc = gql`\n    fragment MergedPropertyGroupCommonFragment on MergedPropertyGroup {\n  schemaGroupId\n  fields {\n    fieldId\n    type\n    actualValue\n    overridden\n    links {\n      ...PropertyFieldLink\n    }\n  }\n}\n    ${PropertyFieldLinkFragmentDoc}`;\nexport const MergedPropertyGroupFragmentFragmentDoc = gql`\n    fragment MergedPropertyGroupFragment on MergedPropertyGroup {\n  ...MergedPropertyGroupCommonFragment\n  groups {\n    ...MergedPropertyGroupCommonFragment\n  }\n}\n    ${MergedPropertyGroupCommonFragmentFragmentDoc}`;\nexport const MergedPropertyFragmentWithoutSchemaFragmentDoc = gql`\n    fragment MergedPropertyFragmentWithoutSchema on MergedProperty {\n  originalId\n  parentId\n  linkedDatasetId\n  groups {\n    ...MergedPropertyGroupFragment\n  }\n}\n    ${MergedPropertyGroupFragmentFragmentDoc}`;\nexport const EarthLayerItemFragmentDoc = gql`\n    fragment EarthLayerItem on LayerItem {\n  id\n  linkedDatasetId\n  scenePlugin {\n    property {\n      id\n      ...PropertyFragment\n    }\n  }\n  merged {\n    parentId\n    property {\n      ...MergedPropertyFragmentWithoutSchema\n    }\n    infobox {\n      property {\n        ...MergedPropertyFragmentWithoutSchema\n      }\n      fields {\n        originalId\n        pluginId\n        extensionId\n        property {\n          ...MergedPropertyFragmentWithoutSchema\n        }\n        scenePlugin {\n          property {\n            id\n            ...PropertyFragment\n          }\n        }\n      }\n    }\n  }\n}\n    ${PropertyFragmentFragmentDoc}\n${MergedPropertyFragmentWithoutSchemaFragmentDoc}`;\nexport const EarthLayerFragmentDoc = gql`\n    fragment EarthLayer on Layer {\n  id\n  name\n  isVisible\n  pluginId\n  extensionId\n  scenePlugin {\n    property {\n      id\n      ...PropertyFragment\n    }\n  }\n  property {\n    id\n    ...PropertyFragmentWithoutSchema\n  }\n  infobox {\n    propertyId\n    property {\n      id\n      ...PropertyFragmentWithoutSchema\n    }\n    fields {\n      id\n      pluginId\n      extensionId\n      propertyId\n      scenePlugin {\n        property {\n          id\n          ...PropertyFragment\n        }\n      }\n      property {\n        id\n        ...PropertyFragmentWithoutSchema\n      }\n    }\n  }\n  ... on LayerGroup {\n    linkedDatasetSchemaId\n    layers {\n      id\n    }\n  }\n  ...EarthLayerItem\n}\n    ${PropertyFragmentFragmentDoc}\n${PropertyFragmentWithoutSchemaFragmentDoc}\n${EarthLayerItemFragmentDoc}`;\nexport const EarthLayer1FragmentDoc = gql`\n    fragment EarthLayer1 on Layer {\n  id\n  ...EarthLayer\n  ... on LayerGroup {\n    layers {\n      id\n      ...EarthLayer\n    }\n  }\n}\n    ${EarthLayerFragmentDoc}`;\nexport const EarthLayer2FragmentDoc = gql`\n    fragment EarthLayer2 on Layer {\n  id\n  ...EarthLayer\n  ... on LayerGroup {\n    layers {\n      id\n      ...EarthLayer1\n    }\n  }\n}\n    ${EarthLayerFragmentDoc}\n${EarthLayer1FragmentDoc}`;\nexport const EarthLayer3FragmentDoc = gql`\n    fragment EarthLayer3 on Layer {\n  id\n  ...EarthLayer\n  ... on LayerGroup {\n    layers {\n      id\n      ...EarthLayer2\n    }\n  }\n}\n    ${EarthLayerFragmentDoc}\n${EarthLayer2FragmentDoc}`;\nexport const EarthLayer4FragmentDoc = gql`\n    fragment EarthLayer4 on Layer {\n  id\n  ...EarthLayer\n  ... on LayerGroup {\n    layers {\n      id\n      ...EarthLayer3\n    }\n  }\n}\n    ${EarthLayerFragmentDoc}\n${EarthLayer3FragmentDoc}`;\nexport const EarthLayer5FragmentDoc = gql`\n    fragment EarthLayer5 on Layer {\n  id\n  ...EarthLayer\n  ... on LayerGroup {\n    layers {\n      id\n      ...EarthLayer4\n    }\n  }\n}\n    ${EarthLayerFragmentDoc}\n${EarthLayer4FragmentDoc}`;\nexport const LayerSystemLayerFragmentDoc = gql`\n    fragment LayerSystemLayer on Layer {\n  id\n  name\n  isVisible\n  pluginId\n  extensionId\n  ... on LayerGroup {\n    linkedDatasetSchemaId\n    layers {\n      id\n    }\n  }\n  ... on LayerItem {\n    linkedDatasetId\n  }\n}\n    `;\nexport const LayerSystemLayer1FragmentDoc = gql`\n    fragment LayerSystemLayer1 on Layer {\n  id\n  ...LayerSystemLayer\n  ... on LayerGroup {\n    layers {\n      id\n      ...LayerSystemLayer\n    }\n  }\n}\n    ${LayerSystemLayerFragmentDoc}`;\nexport const LayerSystemLayer2FragmentDoc = gql`\n    fragment LayerSystemLayer2 on Layer {\n  id\n  ...LayerSystemLayer\n  ... on LayerGroup {\n    layers {\n      id\n      ...LayerSystemLayer1\n    }\n  }\n}\n    ${LayerSystemLayerFragmentDoc}\n${LayerSystemLayer1FragmentDoc}`;\nexport const LayerSystemLayer3FragmentDoc = gql`\n    fragment LayerSystemLayer3 on Layer {\n  id\n  ...LayerSystemLayer\n  ... on LayerGroup {\n    layers {\n      id\n      ...LayerSystemLayer2\n    }\n  }\n}\n    ${LayerSystemLayerFragmentDoc}\n${LayerSystemLayer2FragmentDoc}`;\nexport const LayerSystemLayer4FragmentDoc = gql`\n    fragment LayerSystemLayer4 on Layer {\n  id\n  ...LayerSystemLayer\n  ... on LayerGroup {\n    layers {\n      id\n      ...LayerSystemLayer3\n    }\n  }\n}\n    ${LayerSystemLayerFragmentDoc}\n${LayerSystemLayer3FragmentDoc}`;\nexport const LayerSystemLayer5FragmentDoc = gql`\n    fragment LayerSystemLayer5 on Layer {\n  id\n  ...LayerSystemLayer\n  ... on LayerGroup {\n    layers {\n      id\n      ...LayerSystemLayer4\n    }\n  }\n}\n    ${LayerSystemLayerFragmentDoc}\n${LayerSystemLayer4FragmentDoc}`;\nexport const InfoboxFragmentFragmentDoc = gql`\n    fragment InfoboxFragment on Infobox {\n  propertyId\n  property {\n    id\n    ...PropertyFragment\n  }\n  fields {\n    id\n    pluginId\n    extensionId\n    propertyId\n    property {\n      id\n      ...PropertyFragment\n    }\n  }\n}\n    ${PropertyFragmentFragmentDoc}`;\nexport const MergedPropertyFragmentFragmentDoc = gql`\n    fragment MergedPropertyFragment on MergedProperty {\n  ...MergedPropertyFragmentWithoutSchema\n  schema {\n    id\n  }\n}\n    ${MergedPropertyFragmentWithoutSchemaFragmentDoc}`;\nexport const MergedInfoboxFragmentFragmentDoc = gql`\n    fragment MergedInfoboxFragment on MergedInfobox {\n  property {\n    ...MergedPropertyFragment\n  }\n  fields {\n    originalId\n    pluginId\n    extensionId\n    property {\n      ...MergedPropertyFragment\n    }\n  }\n}\n    ${MergedPropertyFragmentFragmentDoc}`;\nexport const LayerFragmentFragmentDoc = gql`\n    fragment LayerFragment on Layer {\n  id\n  name\n  isVisible\n  pluginId\n  extensionId\n  property {\n    id\n    ...PropertyFragment\n  }\n  infobox {\n    ...InfoboxFragment\n  }\n  ... on LayerGroup {\n    linkedDatasetSchemaId\n  }\n  ... on LayerItem {\n    linkedDatasetId\n    merged {\n      parentId\n      property {\n        ...MergedPropertyFragment\n      }\n      infobox {\n        ...MergedInfoboxFragment\n      }\n    }\n  }\n}\n    ${PropertyFragmentFragmentDoc}\n${InfoboxFragmentFragmentDoc}\n${MergedPropertyFragmentFragmentDoc}\n${MergedInfoboxFragmentFragmentDoc}`;\nexport const Layer0FragmentFragmentDoc = gql`\n    fragment Layer0Fragment on Layer {\n  id\n  ...LayerFragment\n  ... on LayerGroup {\n    layers {\n      id\n    }\n  }\n}\n    ${LayerFragmentFragmentDoc}`;\nexport const Layer1FragmentFragmentDoc = gql`\n    fragment Layer1Fragment on Layer {\n  id\n  ...LayerFragment\n  ... on LayerGroup {\n    layers {\n      id\n      ...LayerFragment\n    }\n  }\n}\n    ${LayerFragmentFragmentDoc}`;\nexport const Layer2FragmentFragmentDoc = gql`\n    fragment Layer2Fragment on Layer {\n  id\n  ...LayerFragment\n  ... on LayerGroup {\n    layers {\n      id\n      ...LayerFragment\n      ... on LayerGroup {\n        layers {\n          id\n          ...LayerFragment\n        }\n      }\n    }\n  }\n}\n    ${LayerFragmentFragmentDoc}`;\nexport const Layer3FragmentFragmentDoc = gql`\n    fragment Layer3Fragment on Layer {\n  id\n  ...LayerFragment\n  ... on LayerGroup {\n    layers {\n      id\n      ...LayerFragment\n      ... on LayerGroup {\n        layers {\n          id\n          ...LayerFragment\n          ... on LayerGroup {\n            layers {\n              id\n              ...LayerFragment\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    ${LayerFragmentFragmentDoc}`;\nexport const Layer4FragmentFragmentDoc = gql`\n    fragment Layer4Fragment on Layer {\n  id\n  ...LayerFragment\n  ... on LayerGroup {\n    layers {\n      id\n      ...LayerFragment\n      ... on LayerGroup {\n        layers {\n          id\n          ...LayerFragment\n          ... on LayerGroup {\n            layers {\n              id\n              ...LayerFragment\n              ... on LayerGroup {\n                layers {\n                  id\n                  ...LayerFragment\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    ${LayerFragmentFragmentDoc}`;\nexport const Layer5FragmentFragmentDoc = gql`\n    fragment Layer5Fragment on Layer {\n  id\n  ...LayerFragment\n  ... on LayerGroup {\n    layers {\n      id\n      ...LayerFragment\n      ... on LayerGroup {\n        layers {\n          id\n          ...LayerFragment\n          ... on LayerGroup {\n            layers {\n              id\n              ...LayerFragment\n              ... on LayerGroup {\n                layers {\n                  id\n                  ...LayerFragment\n                  ... on LayerGroup {\n                    layers {\n                      id\n                      ...LayerFragment\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    ${LayerFragmentFragmentDoc}`;\nexport const TeamFragmentDoc = gql`\n    fragment Team on Team {\n  id\n  name\n  members {\n    user {\n      id\n      name\n      email\n    }\n    userId\n    role\n  }\n  personal\n}\n    `;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    name\n    email\n    myTeam {\n      id\n      name\n      projects(first: 100) {\n        nodes {\n          id\n          publishmentStatus\n          isArchived\n          name\n          imageUrl\n          description\n          visualizer\n          scene {\n            id\n          }\n        }\n      }\n    }\n    teams {\n      id\n      name\n      members {\n        user {\n          id\n          name\n        }\n      }\n      projects(first: 100) {\n        nodes {\n          id\n          publishmentStatus\n          isArchived\n          name\n          imageUrl\n          description\n          visualizer\n          scene {\n            id\n          }\n        }\n      }\n    }\n    auths\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const CreateProjectDocument = gql`\n    mutation CreateProject($teamId: ID!, $visualizer: Visualizer!, $name: String!, $description: String!, $imageUrl: URL) {\n  createProject(\n    input: {teamId: $teamId, visualizer: $visualizer, name: $name, description: $description, imageUrl: $imageUrl}\n  ) {\n    project {\n      id\n      name\n      description\n      imageUrl\n    }\n  }\n}\n    `;\nexport type CreateProjectMutationFn = Apollo.MutationFunction<CreateProjectMutation, CreateProjectMutationVariables>;\n\n/**\n * __useCreateProjectMutation__\n *\n * To run a mutation, you first call `useCreateProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createProjectMutation, { data, loading, error }] = useCreateProjectMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      visualizer: // value for 'visualizer'\n *      name: // value for 'name'\n *      description: // value for 'description'\n *      imageUrl: // value for 'imageUrl'\n *   },\n * });\n */\nexport function useCreateProjectMutation(baseOptions?: Apollo.MutationHookOptions<CreateProjectMutation, CreateProjectMutationVariables>) {\n        return Apollo.useMutation<CreateProjectMutation, CreateProjectMutationVariables>(CreateProjectDocument, baseOptions);\n      }\nexport type CreateProjectMutationHookResult = ReturnType<typeof useCreateProjectMutation>;\nexport type CreateProjectMutationResult = Apollo.MutationResult<CreateProjectMutation>;\nexport type CreateProjectMutationOptions = Apollo.BaseMutationOptions<CreateProjectMutation, CreateProjectMutationVariables>;\nexport const CreateSceneDocument = gql`\n    mutation CreateScene($projectId: ID!) {\n  createScene(input: {projectId: $projectId}) {\n    scene {\n      id\n    }\n  }\n}\n    `;\nexport type CreateSceneMutationFn = Apollo.MutationFunction<CreateSceneMutation, CreateSceneMutationVariables>;\n\n/**\n * __useCreateSceneMutation__\n *\n * To run a mutation, you first call `useCreateSceneMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateSceneMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createSceneMutation, { data, loading, error }] = useCreateSceneMutation({\n *   variables: {\n *      projectId: // value for 'projectId'\n *   },\n * });\n */\nexport function useCreateSceneMutation(baseOptions?: Apollo.MutationHookOptions<CreateSceneMutation, CreateSceneMutationVariables>) {\n        return Apollo.useMutation<CreateSceneMutation, CreateSceneMutationVariables>(CreateSceneDocument, baseOptions);\n      }\nexport type CreateSceneMutationHookResult = ReturnType<typeof useCreateSceneMutation>;\nexport type CreateSceneMutationResult = Apollo.MutationResult<CreateSceneMutation>;\nexport type CreateSceneMutationOptions = Apollo.BaseMutationOptions<CreateSceneMutation, CreateSceneMutationVariables>;\nexport const GetLayersDocument = gql`\n    query GetLayers($sceneId: ID!) {\n  node(id: $sceneId, type: SCENE) {\n    id\n    ... on Scene {\n      rootLayer {\n        id\n        ...EarthLayer5\n      }\n    }\n  }\n}\n    ${EarthLayer5FragmentDoc}`;\n\n/**\n * __useGetLayersQuery__\n *\n * To run a query within a React component, call `useGetLayersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetLayersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetLayersQuery({\n *   variables: {\n *      sceneId: // value for 'sceneId'\n *   },\n * });\n */\nexport function useGetLayersQuery(baseOptions: Apollo.QueryHookOptions<GetLayersQuery, GetLayersQueryVariables>) {\n        return Apollo.useQuery<GetLayersQuery, GetLayersQueryVariables>(GetLayersDocument, baseOptions);\n      }\nexport function useGetLayersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetLayersQuery, GetLayersQueryVariables>) {\n          return Apollo.useLazyQuery<GetLayersQuery, GetLayersQueryVariables>(GetLayersDocument, baseOptions);\n        }\nexport type GetLayersQueryHookResult = ReturnType<typeof useGetLayersQuery>;\nexport type GetLayersLazyQueryHookResult = ReturnType<typeof useGetLayersLazyQuery>;\nexport type GetLayersQueryResult = Apollo.QueryResult<GetLayersQuery, GetLayersQueryVariables>;\nexport const GetEarthWidgetsDocument = gql`\n    query GetEarthWidgets($sceneId: ID!) {\n  node(id: $sceneId, type: SCENE) {\n    id\n    ... on Scene {\n      project {\n        id\n        publicTitle\n      }\n      property {\n        id\n        ...PropertyFragment\n      }\n      widgets {\n        id\n        enabled\n        pluginId\n        extensionId\n        plugin {\n          id\n          scenePlugin(sceneId: $sceneId) {\n            property {\n              id\n              ...PropertyFragment\n            }\n          }\n        }\n        property {\n          id\n          ...PropertyFragment\n        }\n      }\n    }\n  }\n}\n    ${PropertyFragmentFragmentDoc}`;\n\n/**\n * __useGetEarthWidgetsQuery__\n *\n * To run a query within a React component, call `useGetEarthWidgetsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetEarthWidgetsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetEarthWidgetsQuery({\n *   variables: {\n *      sceneId: // value for 'sceneId'\n *   },\n * });\n */\nexport function useGetEarthWidgetsQuery(baseOptions: Apollo.QueryHookOptions<GetEarthWidgetsQuery, GetEarthWidgetsQueryVariables>) {\n        return Apollo.useQuery<GetEarthWidgetsQuery, GetEarthWidgetsQueryVariables>(GetEarthWidgetsDocument, baseOptions);\n      }\nexport function useGetEarthWidgetsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetEarthWidgetsQuery, GetEarthWidgetsQueryVariables>) {\n          return Apollo.useLazyQuery<GetEarthWidgetsQuery, GetEarthWidgetsQueryVariables>(GetEarthWidgetsDocument, baseOptions);\n        }\nexport type GetEarthWidgetsQueryHookResult = ReturnType<typeof useGetEarthWidgetsQuery>;\nexport type GetEarthWidgetsLazyQueryHookResult = ReturnType<typeof useGetEarthWidgetsLazyQuery>;\nexport type GetEarthWidgetsQueryResult = Apollo.QueryResult<GetEarthWidgetsQuery, GetEarthWidgetsQueryVariables>;\nexport const MoveInfoboxFieldDocument = gql`\n    mutation moveInfoboxField($layerId: ID!, $infoboxFieldId: ID!, $index: Int!) {\n  moveInfoboxField(\n    input: {layerId: $layerId, infoboxFieldId: $infoboxFieldId, index: $index}\n  ) {\n    layer {\n      id\n      ...EarthLayer\n    }\n  }\n}\n    ${EarthLayerFragmentDoc}`;\nexport type MoveInfoboxFieldMutationFn = Apollo.MutationFunction<MoveInfoboxFieldMutation, MoveInfoboxFieldMutationVariables>;\n\n/**\n * __useMoveInfoboxFieldMutation__\n *\n * To run a mutation, you first call `useMoveInfoboxFieldMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useMoveInfoboxFieldMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [moveInfoboxFieldMutation, { data, loading, error }] = useMoveInfoboxFieldMutation({\n *   variables: {\n *      layerId: // value for 'layerId'\n *      infoboxFieldId: // value for 'infoboxFieldId'\n *      index: // value for 'index'\n *   },\n * });\n */\nexport function useMoveInfoboxFieldMutation(baseOptions?: Apollo.MutationHookOptions<MoveInfoboxFieldMutation, MoveInfoboxFieldMutationVariables>) {\n        return Apollo.useMutation<MoveInfoboxFieldMutation, MoveInfoboxFieldMutationVariables>(MoveInfoboxFieldDocument, baseOptions);\n      }\nexport type MoveInfoboxFieldMutationHookResult = ReturnType<typeof useMoveInfoboxFieldMutation>;\nexport type MoveInfoboxFieldMutationResult = Apollo.MutationResult<MoveInfoboxFieldMutation>;\nexport type MoveInfoboxFieldMutationOptions = Apollo.BaseMutationOptions<MoveInfoboxFieldMutation, MoveInfoboxFieldMutationVariables>;\nexport const RemoveInfoboxFieldDocument = gql`\n    mutation removeInfoboxField($layerId: ID!, $infoboxFieldId: ID!) {\n  removeInfoboxField(input: {layerId: $layerId, infoboxFieldId: $infoboxFieldId}) {\n    layer {\n      id\n      ...LayerFragment\n    }\n  }\n}\n    ${LayerFragmentFragmentDoc}`;\nexport type RemoveInfoboxFieldMutationFn = Apollo.MutationFunction<RemoveInfoboxFieldMutation, RemoveInfoboxFieldMutationVariables>;\n\n/**\n * __useRemoveInfoboxFieldMutation__\n *\n * To run a mutation, you first call `useRemoveInfoboxFieldMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveInfoboxFieldMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeInfoboxFieldMutation, { data, loading, error }] = useRemoveInfoboxFieldMutation({\n *   variables: {\n *      layerId: // value for 'layerId'\n *      infoboxFieldId: // value for 'infoboxFieldId'\n *   },\n * });\n */\nexport function useRemoveInfoboxFieldMutation(baseOptions?: Apollo.MutationHookOptions<RemoveInfoboxFieldMutation, RemoveInfoboxFieldMutationVariables>) {\n        return Apollo.useMutation<RemoveInfoboxFieldMutation, RemoveInfoboxFieldMutationVariables>(RemoveInfoboxFieldDocument, baseOptions);\n      }\nexport type RemoveInfoboxFieldMutationHookResult = ReturnType<typeof useRemoveInfoboxFieldMutation>;\nexport type RemoveInfoboxFieldMutationResult = Apollo.MutationResult<RemoveInfoboxFieldMutation>;\nexport type RemoveInfoboxFieldMutationOptions = Apollo.BaseMutationOptions<RemoveInfoboxFieldMutation, RemoveInfoboxFieldMutationVariables>;\nexport const GetBlocksDocument = gql`\n    query getBlocks($sceneId: ID!) {\n  node(id: $sceneId, type: SCENE) {\n    id\n    ... on Scene {\n      plugins {\n        plugin {\n          id\n          extensions {\n            extensionId\n            type\n            name\n            description\n            icon\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetBlocksQuery__\n *\n * To run a query within a React component, call `useGetBlocksQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetBlocksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetBlocksQuery({\n *   variables: {\n *      sceneId: // value for 'sceneId'\n *   },\n * });\n */\nexport function useGetBlocksQuery(baseOptions: Apollo.QueryHookOptions<GetBlocksQuery, GetBlocksQueryVariables>) {\n        return Apollo.useQuery<GetBlocksQuery, GetBlocksQueryVariables>(GetBlocksDocument, baseOptions);\n      }\nexport function useGetBlocksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetBlocksQuery, GetBlocksQueryVariables>) {\n          return Apollo.useLazyQuery<GetBlocksQuery, GetBlocksQueryVariables>(GetBlocksDocument, baseOptions);\n        }\nexport type GetBlocksQueryHookResult = ReturnType<typeof useGetBlocksQuery>;\nexport type GetBlocksLazyQueryHookResult = ReturnType<typeof useGetBlocksLazyQuery>;\nexport type GetBlocksQueryResult = Apollo.QueryResult<GetBlocksQuery, GetBlocksQueryVariables>;\nexport const AddInfoboxFieldDocument = gql`\n    mutation addInfoboxField($layerId: ID!, $pluginId: PluginID!, $extensionId: PluginExtensionID!, $index: Int) {\n  addInfoboxField(\n    input: {layerId: $layerId, pluginId: $pluginId, extensionId: $extensionId, index: $index}\n  ) {\n    layer {\n      id\n      ...LayerFragment\n    }\n  }\n}\n    ${LayerFragmentFragmentDoc}`;\nexport type AddInfoboxFieldMutationFn = Apollo.MutationFunction<AddInfoboxFieldMutation, AddInfoboxFieldMutationVariables>;\n\n/**\n * __useAddInfoboxFieldMutation__\n *\n * To run a mutation, you first call `useAddInfoboxFieldMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddInfoboxFieldMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addInfoboxFieldMutation, { data, loading, error }] = useAddInfoboxFieldMutation({\n *   variables: {\n *      layerId: // value for 'layerId'\n *      pluginId: // value for 'pluginId'\n *      extensionId: // value for 'extensionId'\n *      index: // value for 'index'\n *   },\n * });\n */\nexport function useAddInfoboxFieldMutation(baseOptions?: Apollo.MutationHookOptions<AddInfoboxFieldMutation, AddInfoboxFieldMutationVariables>) {\n        return Apollo.useMutation<AddInfoboxFieldMutation, AddInfoboxFieldMutationVariables>(AddInfoboxFieldDocument, baseOptions);\n      }\nexport type AddInfoboxFieldMutationHookResult = ReturnType<typeof useAddInfoboxFieldMutation>;\nexport type AddInfoboxFieldMutationResult = Apollo.MutationResult<AddInfoboxFieldMutation>;\nexport type AddInfoboxFieldMutationOptions = Apollo.BaseMutationOptions<AddInfoboxFieldMutation, AddInfoboxFieldMutationVariables>;\nexport const GetAllDataSetsDocument = gql`\n    query GetAllDataSets($sceneId: ID!) {\n  datasetSchemas(sceneId: $sceneId, first: 100) {\n    nodes {\n      id\n      source\n      name\n      sceneId\n      fields {\n        id\n        name\n        type\n      }\n      datasets {\n        totalCount\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetAllDataSetsQuery__\n *\n * To run a query within a React component, call `useGetAllDataSetsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAllDataSetsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAllDataSetsQuery({\n *   variables: {\n *      sceneId: // value for 'sceneId'\n *   },\n * });\n */\nexport function useGetAllDataSetsQuery(baseOptions: Apollo.QueryHookOptions<GetAllDataSetsQuery, GetAllDataSetsQueryVariables>) {\n        return Apollo.useQuery<GetAllDataSetsQuery, GetAllDataSetsQueryVariables>(GetAllDataSetsDocument, baseOptions);\n      }\nexport function useGetAllDataSetsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAllDataSetsQuery, GetAllDataSetsQueryVariables>) {\n          return Apollo.useLazyQuery<GetAllDataSetsQuery, GetAllDataSetsQueryVariables>(GetAllDataSetsDocument, baseOptions);\n        }\nexport type GetAllDataSetsQueryHookResult = ReturnType<typeof useGetAllDataSetsQuery>;\nexport type GetAllDataSetsLazyQueryHookResult = ReturnType<typeof useGetAllDataSetsLazyQuery>;\nexport type GetAllDataSetsQueryResult = Apollo.QueryResult<GetAllDataSetsQuery, GetAllDataSetsQueryVariables>;\nexport const SyncDatasetDocument = gql`\n    mutation SyncDataset($sceneId: ID!, $url: String!) {\n  syncDataset(input: {sceneId: $sceneId, url: $url}) {\n    sceneId\n    url\n    datasetSchema {\n      id\n      name\n    }\n  }\n}\n    `;\nexport type SyncDatasetMutationFn = Apollo.MutationFunction<SyncDatasetMutation, SyncDatasetMutationVariables>;\n\n/**\n * __useSyncDatasetMutation__\n *\n * To run a mutation, you first call `useSyncDatasetMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSyncDatasetMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [syncDatasetMutation, { data, loading, error }] = useSyncDatasetMutation({\n *   variables: {\n *      sceneId: // value for 'sceneId'\n *      url: // value for 'url'\n *   },\n * });\n */\nexport function useSyncDatasetMutation(baseOptions?: Apollo.MutationHookOptions<SyncDatasetMutation, SyncDatasetMutationVariables>) {\n        return Apollo.useMutation<SyncDatasetMutation, SyncDatasetMutationVariables>(SyncDatasetDocument, baseOptions);\n      }\nexport type SyncDatasetMutationHookResult = ReturnType<typeof useSyncDatasetMutation>;\nexport type SyncDatasetMutationResult = Apollo.MutationResult<SyncDatasetMutation>;\nexport type SyncDatasetMutationOptions = Apollo.BaseMutationOptions<SyncDatasetMutation, SyncDatasetMutationVariables>;\nexport const ImportGoogleSheetDatasetDocument = gql`\n    mutation importGoogleSheetDataset($accessToken: String!, $fileId: String!, $sheetName: String!, $sceneId: ID!, $datasetSchemaId: ID) {\n  importDatasetFromGoogleSheet(\n    input: {accessToken: $accessToken, fileId: $fileId, sheetName: $sheetName, sceneId: $sceneId, datasetSchemaId: $datasetSchemaId}\n  ) {\n    datasetSchema {\n      id\n      name\n    }\n  }\n}\n    `;\nexport type ImportGoogleSheetDatasetMutationFn = Apollo.MutationFunction<ImportGoogleSheetDatasetMutation, ImportGoogleSheetDatasetMutationVariables>;\n\n/**\n * __useImportGoogleSheetDatasetMutation__\n *\n * To run a mutation, you first call `useImportGoogleSheetDatasetMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useImportGoogleSheetDatasetMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [importGoogleSheetDatasetMutation, { data, loading, error }] = useImportGoogleSheetDatasetMutation({\n *   variables: {\n *      accessToken: // value for 'accessToken'\n *      fileId: // value for 'fileId'\n *      sheetName: // value for 'sheetName'\n *      sceneId: // value for 'sceneId'\n *      datasetSchemaId: // value for 'datasetSchemaId'\n *   },\n * });\n */\nexport function useImportGoogleSheetDatasetMutation(baseOptions?: Apollo.MutationHookOptions<ImportGoogleSheetDatasetMutation, ImportGoogleSheetDatasetMutationVariables>) {\n        return Apollo.useMutation<ImportGoogleSheetDatasetMutation, ImportGoogleSheetDatasetMutationVariables>(ImportGoogleSheetDatasetDocument, baseOptions);\n      }\nexport type ImportGoogleSheetDatasetMutationHookResult = ReturnType<typeof useImportGoogleSheetDatasetMutation>;\nexport type ImportGoogleSheetDatasetMutationResult = Apollo.MutationResult<ImportGoogleSheetDatasetMutation>;\nexport type ImportGoogleSheetDatasetMutationOptions = Apollo.BaseMutationOptions<ImportGoogleSheetDatasetMutation, ImportGoogleSheetDatasetMutationVariables>;\nexport const ImportDatasetDocument = gql`\n    mutation importDataset($file: Upload!, $sceneId: ID!, $datasetSchemaId: ID) {\n  importDataset(\n    input: {file: $file, sceneId: $sceneId, datasetSchemaId: $datasetSchemaId}\n  ) {\n    datasetSchema {\n      id\n      name\n    }\n  }\n}\n    `;\nexport type ImportDatasetMutationFn = Apollo.MutationFunction<ImportDatasetMutation, ImportDatasetMutationVariables>;\n\n/**\n * __useImportDatasetMutation__\n *\n * To run a mutation, you first call `useImportDatasetMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useImportDatasetMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [importDatasetMutation, { data, loading, error }] = useImportDatasetMutation({\n *   variables: {\n *      file: // value for 'file'\n *      sceneId: // value for 'sceneId'\n *      datasetSchemaId: // value for 'datasetSchemaId'\n *   },\n * });\n */\nexport function useImportDatasetMutation(baseOptions?: Apollo.MutationHookOptions<ImportDatasetMutation, ImportDatasetMutationVariables>) {\n        return Apollo.useMutation<ImportDatasetMutation, ImportDatasetMutationVariables>(ImportDatasetDocument, baseOptions);\n      }\nexport type ImportDatasetMutationHookResult = ReturnType<typeof useImportDatasetMutation>;\nexport type ImportDatasetMutationResult = Apollo.MutationResult<ImportDatasetMutation>;\nexport type ImportDatasetMutationOptions = Apollo.BaseMutationOptions<ImportDatasetMutation, ImportDatasetMutationVariables>;\nexport const RemoveDatasetDocument = gql`\n    mutation RemoveDataset($schemaId: ID!, $force: Boolean) {\n  removeDatasetSchema(input: {schemaId: $schemaId, force: $force}) {\n    schemaId\n  }\n}\n    `;\nexport type RemoveDatasetMutationFn = Apollo.MutationFunction<RemoveDatasetMutation, RemoveDatasetMutationVariables>;\n\n/**\n * __useRemoveDatasetMutation__\n *\n * To run a mutation, you first call `useRemoveDatasetMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveDatasetMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeDatasetMutation, { data, loading, error }] = useRemoveDatasetMutation({\n *   variables: {\n *      schemaId: // value for 'schemaId'\n *      force: // value for 'force'\n *   },\n * });\n */\nexport function useRemoveDatasetMutation(baseOptions?: Apollo.MutationHookOptions<RemoveDatasetMutation, RemoveDatasetMutationVariables>) {\n        return Apollo.useMutation<RemoveDatasetMutation, RemoveDatasetMutationVariables>(RemoveDatasetDocument, baseOptions);\n      }\nexport type RemoveDatasetMutationHookResult = ReturnType<typeof useRemoveDatasetMutation>;\nexport type RemoveDatasetMutationResult = Apollo.MutationResult<RemoveDatasetMutation>;\nexport type RemoveDatasetMutationOptions = Apollo.BaseMutationOptions<RemoveDatasetMutation, RemoveDatasetMutationVariables>;\nexport const AddLayerGroupFromDatasetSchemaDocument = gql`\n    mutation addLayerGroupFromDatasetSchema($parentLayerId: ID!, $pluginId: PluginID, $extensionId: PluginExtensionID, $datasetSchemaId: ID, $index: Int) {\n  addLayerGroup(\n    input: {parentLayerId: $parentLayerId, pluginId: $pluginId, extensionId: $extensionId, linkedDatasetSchemaID: $datasetSchemaId, index: $index}\n  ) {\n    layer {\n      id\n      ...Layer1Fragment\n    }\n    parentLayer {\n      id\n      ...Layer0Fragment\n    }\n  }\n}\n    ${Layer1FragmentFragmentDoc}\n${Layer0FragmentFragmentDoc}`;\nexport type AddLayerGroupFromDatasetSchemaMutationFn = Apollo.MutationFunction<AddLayerGroupFromDatasetSchemaMutation, AddLayerGroupFromDatasetSchemaMutationVariables>;\n\n/**\n * __useAddLayerGroupFromDatasetSchemaMutation__\n *\n * To run a mutation, you first call `useAddLayerGroupFromDatasetSchemaMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddLayerGroupFromDatasetSchemaMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addLayerGroupFromDatasetSchemaMutation, { data, loading, error }] = useAddLayerGroupFromDatasetSchemaMutation({\n *   variables: {\n *      parentLayerId: // value for 'parentLayerId'\n *      pluginId: // value for 'pluginId'\n *      extensionId: // value for 'extensionId'\n *      datasetSchemaId: // value for 'datasetSchemaId'\n *      index: // value for 'index'\n *   },\n * });\n */\nexport function useAddLayerGroupFromDatasetSchemaMutation(baseOptions?: Apollo.MutationHookOptions<AddLayerGroupFromDatasetSchemaMutation, AddLayerGroupFromDatasetSchemaMutationVariables>) {\n        return Apollo.useMutation<AddLayerGroupFromDatasetSchemaMutation, AddLayerGroupFromDatasetSchemaMutationVariables>(AddLayerGroupFromDatasetSchemaDocument, baseOptions);\n      }\nexport type AddLayerGroupFromDatasetSchemaMutationHookResult = ReturnType<typeof useAddLayerGroupFromDatasetSchemaMutation>;\nexport type AddLayerGroupFromDatasetSchemaMutationResult = Apollo.MutationResult<AddLayerGroupFromDatasetSchemaMutation>;\nexport type AddLayerGroupFromDatasetSchemaMutationOptions = Apollo.BaseMutationOptions<AddLayerGroupFromDatasetSchemaMutation, AddLayerGroupFromDatasetSchemaMutationVariables>;\nexport const GetProjectDocument = gql`\n    query GetProject($sceneId: ID!) {\n  node(id: $sceneId, type: SCENE) {\n    id\n    ... on Scene {\n      teamId\n      projectId\n      project {\n        id\n        alias\n        publishmentStatus\n        name\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProjectQuery__\n *\n * To run a query within a React component, call `useGetProjectQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProjectQuery({\n *   variables: {\n *      sceneId: // value for 'sceneId'\n *   },\n * });\n */\nexport function useGetProjectQuery(baseOptions: Apollo.QueryHookOptions<GetProjectQuery, GetProjectQueryVariables>) {\n        return Apollo.useQuery<GetProjectQuery, GetProjectQueryVariables>(GetProjectDocument, baseOptions);\n      }\nexport function useGetProjectLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProjectQuery, GetProjectQueryVariables>) {\n          return Apollo.useLazyQuery<GetProjectQuery, GetProjectQueryVariables>(GetProjectDocument, baseOptions);\n        }\nexport type GetProjectQueryHookResult = ReturnType<typeof useGetProjectQuery>;\nexport type GetProjectLazyQueryHookResult = ReturnType<typeof useGetProjectLazyQuery>;\nexport type GetProjectQueryResult = Apollo.QueryResult<GetProjectQuery, GetProjectQueryVariables>;\nexport const GetTeamProjectsDocument = gql`\n    query GetTeamProjects($teamId: ID!, $includeArchived: Boolean, $first: Int, $last: Int) {\n  projects(\n    teamId: $teamId\n    includeArchived: $includeArchived\n    first: $first\n    last: $last\n  ) {\n    nodes {\n      id\n      name\n    }\n  }\n}\n    `;\n\n/**\n * __useGetTeamProjectsQuery__\n *\n * To run a query within a React component, call `useGetTeamProjectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTeamProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTeamProjectsQuery({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      includeArchived: // value for 'includeArchived'\n *      first: // value for 'first'\n *      last: // value for 'last'\n *   },\n * });\n */\nexport function useGetTeamProjectsQuery(baseOptions: Apollo.QueryHookOptions<GetTeamProjectsQuery, GetTeamProjectsQueryVariables>) {\n        return Apollo.useQuery<GetTeamProjectsQuery, GetTeamProjectsQueryVariables>(GetTeamProjectsDocument, baseOptions);\n      }\nexport function useGetTeamProjectsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetTeamProjectsQuery, GetTeamProjectsQueryVariables>) {\n          return Apollo.useLazyQuery<GetTeamProjectsQuery, GetTeamProjectsQueryVariables>(GetTeamProjectsDocument, baseOptions);\n        }\nexport type GetTeamProjectsQueryHookResult = ReturnType<typeof useGetTeamProjectsQuery>;\nexport type GetTeamProjectsLazyQueryHookResult = ReturnType<typeof useGetTeamProjectsLazyQuery>;\nexport type GetTeamProjectsQueryResult = Apollo.QueryResult<GetTeamProjectsQuery, GetTeamProjectsQueryVariables>;\nexport const CheckProjectAliasDocument = gql`\n    query CheckProjectAlias($alias: String!) {\n  checkProjectAlias(alias: $alias) {\n    alias\n    available\n  }\n}\n    `;\n\n/**\n * __useCheckProjectAliasQuery__\n *\n * To run a query within a React component, call `useCheckProjectAliasQuery` and pass it any options that fit your needs.\n * When your component renders, `useCheckProjectAliasQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCheckProjectAliasQuery({\n *   variables: {\n *      alias: // value for 'alias'\n *   },\n * });\n */\nexport function useCheckProjectAliasQuery(baseOptions: Apollo.QueryHookOptions<CheckProjectAliasQuery, CheckProjectAliasQueryVariables>) {\n        return Apollo.useQuery<CheckProjectAliasQuery, CheckProjectAliasQueryVariables>(CheckProjectAliasDocument, baseOptions);\n      }\nexport function useCheckProjectAliasLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CheckProjectAliasQuery, CheckProjectAliasQueryVariables>) {\n          return Apollo.useLazyQuery<CheckProjectAliasQuery, CheckProjectAliasQueryVariables>(CheckProjectAliasDocument, baseOptions);\n        }\nexport type CheckProjectAliasQueryHookResult = ReturnType<typeof useCheckProjectAliasQuery>;\nexport type CheckProjectAliasLazyQueryHookResult = ReturnType<typeof useCheckProjectAliasLazyQuery>;\nexport type CheckProjectAliasQueryResult = Apollo.QueryResult<CheckProjectAliasQuery, CheckProjectAliasQueryVariables>;\nexport const PublishProjectDocument = gql`\n    mutation PublishProject($projectId: ID!, $alias: String, $status: PublishmentStatus!) {\n  publishProject(input: {projectId: $projectId, alias: $alias, status: $status}) {\n    project {\n      id\n      alias\n      publishmentStatus\n    }\n  }\n}\n    `;\nexport type PublishProjectMutationFn = Apollo.MutationFunction<PublishProjectMutation, PublishProjectMutationVariables>;\n\n/**\n * __usePublishProjectMutation__\n *\n * To run a mutation, you first call `usePublishProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `usePublishProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [publishProjectMutation, { data, loading, error }] = usePublishProjectMutation({\n *   variables: {\n *      projectId: // value for 'projectId'\n *      alias: // value for 'alias'\n *      status: // value for 'status'\n *   },\n * });\n */\nexport function usePublishProjectMutation(baseOptions?: Apollo.MutationHookOptions<PublishProjectMutation, PublishProjectMutationVariables>) {\n        return Apollo.useMutation<PublishProjectMutation, PublishProjectMutationVariables>(PublishProjectDocument, baseOptions);\n      }\nexport type PublishProjectMutationHookResult = ReturnType<typeof usePublishProjectMutation>;\nexport type PublishProjectMutationResult = Apollo.MutationResult<PublishProjectMutation>;\nexport type PublishProjectMutationOptions = Apollo.BaseMutationOptions<PublishProjectMutation, PublishProjectMutationVariables>;\nexport const GetLayersFromLayerIdDocument = gql`\n    query GetLayersFromLayerId($layerId: ID!) {\n  layer(id: $layerId) {\n    id\n    ...LayerSystemLayer5\n  }\n}\n    ${LayerSystemLayer5FragmentDoc}`;\n\n/**\n * __useGetLayersFromLayerIdQuery__\n *\n * To run a query within a React component, call `useGetLayersFromLayerIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetLayersFromLayerIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetLayersFromLayerIdQuery({\n *   variables: {\n *      layerId: // value for 'layerId'\n *   },\n * });\n */\nexport function useGetLayersFromLayerIdQuery(baseOptions: Apollo.QueryHookOptions<GetLayersFromLayerIdQuery, GetLayersFromLayerIdQueryVariables>) {\n        return Apollo.useQuery<GetLayersFromLayerIdQuery, GetLayersFromLayerIdQueryVariables>(GetLayersFromLayerIdDocument, baseOptions);\n      }\nexport function useGetLayersFromLayerIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetLayersFromLayerIdQuery, GetLayersFromLayerIdQueryVariables>) {\n          return Apollo.useLazyQuery<GetLayersFromLayerIdQuery, GetLayersFromLayerIdQueryVariables>(GetLayersFromLayerIdDocument, baseOptions);\n        }\nexport type GetLayersFromLayerIdQueryHookResult = ReturnType<typeof useGetLayersFromLayerIdQuery>;\nexport type GetLayersFromLayerIdLazyQueryHookResult = ReturnType<typeof useGetLayersFromLayerIdLazyQuery>;\nexport type GetLayersFromLayerIdQueryResult = Apollo.QueryResult<GetLayersFromLayerIdQuery, GetLayersFromLayerIdQueryVariables>;\nexport const MoveLayerDocument = gql`\n    mutation moveLayer($layerId: ID!, $destLayerId: ID, $index: Int) {\n  moveLayer(input: {layerId: $layerId, destLayerId: $destLayerId, index: $index}) {\n    fromParentLayer {\n      id\n      ...LayerSystemLayer\n    }\n    toParentLayer {\n      id\n      ...LayerSystemLayer\n    }\n  }\n}\n    ${LayerSystemLayerFragmentDoc}`;\nexport type MoveLayerMutationFn = Apollo.MutationFunction<MoveLayerMutation, MoveLayerMutationVariables>;\n\n/**\n * __useMoveLayerMutation__\n *\n * To run a mutation, you first call `useMoveLayerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useMoveLayerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [moveLayerMutation, { data, loading, error }] = useMoveLayerMutation({\n *   variables: {\n *      layerId: // value for 'layerId'\n *      destLayerId: // value for 'destLayerId'\n *      index: // value for 'index'\n *   },\n * });\n */\nexport function useMoveLayerMutation(baseOptions?: Apollo.MutationHookOptions<MoveLayerMutation, MoveLayerMutationVariables>) {\n        return Apollo.useMutation<MoveLayerMutation, MoveLayerMutationVariables>(MoveLayerDocument, baseOptions);\n      }\nexport type MoveLayerMutationHookResult = ReturnType<typeof useMoveLayerMutation>;\nexport type MoveLayerMutationResult = Apollo.MutationResult<MoveLayerMutation>;\nexport type MoveLayerMutationOptions = Apollo.BaseMutationOptions<MoveLayerMutation, MoveLayerMutationVariables>;\nexport const UpdateLayerDocument = gql`\n    mutation UpdateLayer($layerId: ID!, $name: String, $visible: Boolean) {\n  updateLayer(input: {layerId: $layerId, name: $name, visible: $visible}) {\n    layer {\n      id\n      ...LayerSystemLayer\n    }\n  }\n}\n    ${LayerSystemLayerFragmentDoc}`;\nexport type UpdateLayerMutationFn = Apollo.MutationFunction<UpdateLayerMutation, UpdateLayerMutationVariables>;\n\n/**\n * __useUpdateLayerMutation__\n *\n * To run a mutation, you first call `useUpdateLayerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateLayerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateLayerMutation, { data, loading, error }] = useUpdateLayerMutation({\n *   variables: {\n *      layerId: // value for 'layerId'\n *      name: // value for 'name'\n *      visible: // value for 'visible'\n *   },\n * });\n */\nexport function useUpdateLayerMutation(baseOptions?: Apollo.MutationHookOptions<UpdateLayerMutation, UpdateLayerMutationVariables>) {\n        return Apollo.useMutation<UpdateLayerMutation, UpdateLayerMutationVariables>(UpdateLayerDocument, baseOptions);\n      }\nexport type UpdateLayerMutationHookResult = ReturnType<typeof useUpdateLayerMutation>;\nexport type UpdateLayerMutationResult = Apollo.MutationResult<UpdateLayerMutation>;\nexport type UpdateLayerMutationOptions = Apollo.BaseMutationOptions<UpdateLayerMutation, UpdateLayerMutationVariables>;\nexport const RemoveLayerDocument = gql`\n    mutation RemoveLayer($layerId: ID!) {\n  removeLayer(input: {layerId: $layerId}) {\n    layerId\n    parentLayer {\n      id\n      ...LayerSystemLayer\n    }\n  }\n}\n    ${LayerSystemLayerFragmentDoc}`;\nexport type RemoveLayerMutationFn = Apollo.MutationFunction<RemoveLayerMutation, RemoveLayerMutationVariables>;\n\n/**\n * __useRemoveLayerMutation__\n *\n * To run a mutation, you first call `useRemoveLayerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveLayerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeLayerMutation, { data, loading, error }] = useRemoveLayerMutation({\n *   variables: {\n *      layerId: // value for 'layerId'\n *   },\n * });\n */\nexport function useRemoveLayerMutation(baseOptions?: Apollo.MutationHookOptions<RemoveLayerMutation, RemoveLayerMutationVariables>) {\n        return Apollo.useMutation<RemoveLayerMutation, RemoveLayerMutationVariables>(RemoveLayerDocument, baseOptions);\n      }\nexport type RemoveLayerMutationHookResult = ReturnType<typeof useRemoveLayerMutation>;\nexport type RemoveLayerMutationResult = Apollo.MutationResult<RemoveLayerMutation>;\nexport type RemoveLayerMutationOptions = Apollo.BaseMutationOptions<RemoveLayerMutation, RemoveLayerMutationVariables>;\nexport const ImportLayerDocument = gql`\n    mutation ImportLayer($layerId: ID!, $file: Upload!, $format: LayerEncodingFormat!) {\n  importLayer(input: {layerId: $layerId, file: $file, format: $format}) {\n    layers {\n      id\n      ...LayerSystemLayer5\n    }\n    parentLayer {\n      id\n      ...LayerSystemLayer\n    }\n  }\n}\n    ${LayerSystemLayer5FragmentDoc}\n${LayerSystemLayerFragmentDoc}`;\nexport type ImportLayerMutationFn = Apollo.MutationFunction<ImportLayerMutation, ImportLayerMutationVariables>;\n\n/**\n * __useImportLayerMutation__\n *\n * To run a mutation, you first call `useImportLayerMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useImportLayerMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [importLayerMutation, { data, loading, error }] = useImportLayerMutation({\n *   variables: {\n *      layerId: // value for 'layerId'\n *      file: // value for 'file'\n *      format: // value for 'format'\n *   },\n * });\n */\nexport function useImportLayerMutation(baseOptions?: Apollo.MutationHookOptions<ImportLayerMutation, ImportLayerMutationVariables>) {\n        return Apollo.useMutation<ImportLayerMutation, ImportLayerMutationVariables>(ImportLayerDocument, baseOptions);\n      }\nexport type ImportLayerMutationHookResult = ReturnType<typeof useImportLayerMutation>;\nexport type ImportLayerMutationResult = Apollo.MutationResult<ImportLayerMutation>;\nexport type ImportLayerMutationOptions = Apollo.BaseMutationOptions<ImportLayerMutation, ImportLayerMutationVariables>;\nexport const AddLayerGroupDocument = gql`\n    mutation AddLayerGroup($parentLayerId: ID!, $index: Int, $name: String) {\n  addLayerGroup(\n    input: {parentLayerId: $parentLayerId, index: $index, name: $name}\n  ) {\n    layer {\n      id\n      ...LayerSystemLayer5\n    }\n    parentLayer {\n      id\n      ...LayerSystemLayer\n    }\n  }\n}\n    ${LayerSystemLayer5FragmentDoc}\n${LayerSystemLayerFragmentDoc}`;\nexport type AddLayerGroupMutationFn = Apollo.MutationFunction<AddLayerGroupMutation, AddLayerGroupMutationVariables>;\n\n/**\n * __useAddLayerGroupMutation__\n *\n * To run a mutation, you first call `useAddLayerGroupMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddLayerGroupMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addLayerGroupMutation, { data, loading, error }] = useAddLayerGroupMutation({\n *   variables: {\n *      parentLayerId: // value for 'parentLayerId'\n *      index: // value for 'index'\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useAddLayerGroupMutation(baseOptions?: Apollo.MutationHookOptions<AddLayerGroupMutation, AddLayerGroupMutationVariables>) {\n        return Apollo.useMutation<AddLayerGroupMutation, AddLayerGroupMutationVariables>(AddLayerGroupDocument, baseOptions);\n      }\nexport type AddLayerGroupMutationHookResult = ReturnType<typeof useAddLayerGroupMutation>;\nexport type AddLayerGroupMutationResult = Apollo.MutationResult<AddLayerGroupMutation>;\nexport type AddLayerGroupMutationOptions = Apollo.BaseMutationOptions<AddLayerGroupMutation, AddLayerGroupMutationVariables>;\nexport const GetWidgetsDocument = gql`\n    query GetWidgets($sceneId: ID!) {\n  node(id: $sceneId, type: SCENE) {\n    id\n    ... on Scene {\n      plugins {\n        plugin {\n          id\n          extensions {\n            extensionId\n            description\n            name\n            translatedDescription\n            translatedName\n            icon\n            type\n          }\n        }\n      }\n      widgets {\n        id\n        enabled\n        pluginId\n        extensionId\n        propertyId\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetWidgetsQuery__\n *\n * To run a query within a React component, call `useGetWidgetsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetWidgetsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetWidgetsQuery({\n *   variables: {\n *      sceneId: // value for 'sceneId'\n *   },\n * });\n */\nexport function useGetWidgetsQuery(baseOptions: Apollo.QueryHookOptions<GetWidgetsQuery, GetWidgetsQueryVariables>) {\n        return Apollo.useQuery<GetWidgetsQuery, GetWidgetsQueryVariables>(GetWidgetsDocument, baseOptions);\n      }\nexport function useGetWidgetsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetWidgetsQuery, GetWidgetsQueryVariables>) {\n          return Apollo.useLazyQuery<GetWidgetsQuery, GetWidgetsQueryVariables>(GetWidgetsDocument, baseOptions);\n        }\nexport type GetWidgetsQueryHookResult = ReturnType<typeof useGetWidgetsQuery>;\nexport type GetWidgetsLazyQueryHookResult = ReturnType<typeof useGetWidgetsLazyQuery>;\nexport type GetWidgetsQueryResult = Apollo.QueryResult<GetWidgetsQuery, GetWidgetsQueryVariables>;\nexport const GetPrimitivesDocument = gql`\n    query GetPrimitives($sceneId: ID!) {\n  node(id: $sceneId, type: SCENE) {\n    id\n    ... on Scene {\n      plugins {\n        plugin {\n          id\n          extensions {\n            extensionId\n            translatedDescription\n            translatedName\n            icon\n            type\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetPrimitivesQuery__\n *\n * To run a query within a React component, call `useGetPrimitivesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPrimitivesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPrimitivesQuery({\n *   variables: {\n *      sceneId: // value for 'sceneId'\n *   },\n * });\n */\nexport function useGetPrimitivesQuery(baseOptions: Apollo.QueryHookOptions<GetPrimitivesQuery, GetPrimitivesQueryVariables>) {\n        return Apollo.useQuery<GetPrimitivesQuery, GetPrimitivesQueryVariables>(GetPrimitivesDocument, baseOptions);\n      }\nexport function useGetPrimitivesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPrimitivesQuery, GetPrimitivesQueryVariables>) {\n          return Apollo.useLazyQuery<GetPrimitivesQuery, GetPrimitivesQueryVariables>(GetPrimitivesDocument, baseOptions);\n        }\nexport type GetPrimitivesQueryHookResult = ReturnType<typeof useGetPrimitivesQuery>;\nexport type GetPrimitivesLazyQueryHookResult = ReturnType<typeof useGetPrimitivesLazyQuery>;\nexport type GetPrimitivesQueryResult = Apollo.QueryResult<GetPrimitivesQuery, GetPrimitivesQueryVariables>;\nexport const AddLayerItemFromPrimitiveDocument = gql`\n    mutation addLayerItemFromPrimitive($parentLayerId: ID!, $pluginId: PluginID!, $extensionId: PluginExtensionID!, $name: String, $lat: Float, $lng: Float, $index: Int) {\n  addLayerItem(\n    input: {parentLayerId: $parentLayerId, pluginId: $pluginId, extensionId: $extensionId, name: $name, lat: $lat, lng: $lng, index: $index}\n  ) {\n    parentLayer {\n      id\n      ...Layer3Fragment\n    }\n    layer {\n      id\n      ...LayerFragment\n    }\n  }\n}\n    ${Layer3FragmentFragmentDoc}\n${LayerFragmentFragmentDoc}`;\nexport type AddLayerItemFromPrimitiveMutationFn = Apollo.MutationFunction<AddLayerItemFromPrimitiveMutation, AddLayerItemFromPrimitiveMutationVariables>;\n\n/**\n * __useAddLayerItemFromPrimitiveMutation__\n *\n * To run a mutation, you first call `useAddLayerItemFromPrimitiveMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddLayerItemFromPrimitiveMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addLayerItemFromPrimitiveMutation, { data, loading, error }] = useAddLayerItemFromPrimitiveMutation({\n *   variables: {\n *      parentLayerId: // value for 'parentLayerId'\n *      pluginId: // value for 'pluginId'\n *      extensionId: // value for 'extensionId'\n *      name: // value for 'name'\n *      lat: // value for 'lat'\n *      lng: // value for 'lng'\n *      index: // value for 'index'\n *   },\n * });\n */\nexport function useAddLayerItemFromPrimitiveMutation(baseOptions?: Apollo.MutationHookOptions<AddLayerItemFromPrimitiveMutation, AddLayerItemFromPrimitiveMutationVariables>) {\n        return Apollo.useMutation<AddLayerItemFromPrimitiveMutation, AddLayerItemFromPrimitiveMutationVariables>(AddLayerItemFromPrimitiveDocument, baseOptions);\n      }\nexport type AddLayerItemFromPrimitiveMutationHookResult = ReturnType<typeof useAddLayerItemFromPrimitiveMutation>;\nexport type AddLayerItemFromPrimitiveMutationResult = Apollo.MutationResult<AddLayerItemFromPrimitiveMutation>;\nexport type AddLayerItemFromPrimitiveMutationOptions = Apollo.BaseMutationOptions<AddLayerItemFromPrimitiveMutation, AddLayerItemFromPrimitiveMutationVariables>;\nexport const ChangePropertyValueDocument = gql`\n    mutation ChangePropertyValue($value: Any, $propertyId: ID!, $schemaItemId: PropertySchemaFieldID, $itemId: ID, $fieldId: PropertySchemaFieldID!, $type: ValueType!) {\n  updatePropertyValue(\n    input: {propertyId: $propertyId, schemaItemId: $schemaItemId, itemId: $itemId, fieldId: $fieldId, value: $value, type: $type}\n  ) {\n    property {\n      id\n      ...PropertyFragment\n      layer {\n        id\n        ...Layer1Fragment\n      }\n    }\n  }\n}\n    ${PropertyFragmentFragmentDoc}\n${Layer1FragmentFragmentDoc}`;\nexport type ChangePropertyValueMutationFn = Apollo.MutationFunction<ChangePropertyValueMutation, ChangePropertyValueMutationVariables>;\n\n/**\n * __useChangePropertyValueMutation__\n *\n * To run a mutation, you first call `useChangePropertyValueMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useChangePropertyValueMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [changePropertyValueMutation, { data, loading, error }] = useChangePropertyValueMutation({\n *   variables: {\n *      value: // value for 'value'\n *      propertyId: // value for 'propertyId'\n *      schemaItemId: // value for 'schemaItemId'\n *      itemId: // value for 'itemId'\n *      fieldId: // value for 'fieldId'\n *      type: // value for 'type'\n *   },\n * });\n */\nexport function useChangePropertyValueMutation(baseOptions?: Apollo.MutationHookOptions<ChangePropertyValueMutation, ChangePropertyValueMutationVariables>) {\n        return Apollo.useMutation<ChangePropertyValueMutation, ChangePropertyValueMutationVariables>(ChangePropertyValueDocument, baseOptions);\n      }\nexport type ChangePropertyValueMutationHookResult = ReturnType<typeof useChangePropertyValueMutation>;\nexport type ChangePropertyValueMutationResult = Apollo.MutationResult<ChangePropertyValueMutation>;\nexport type ChangePropertyValueMutationOptions = Apollo.BaseMutationOptions<ChangePropertyValueMutation, ChangePropertyValueMutationVariables>;\nexport const LinkDatasetDocument = gql`\n    mutation LinkDataset($propertyId: ID!, $itemId: ID, $schemaItemId: PropertySchemaFieldID, $fieldId: PropertySchemaFieldID!, $datasetSchemaIds: [ID!]!, $datasetIds: [ID!], $datasetFieldIds: [ID!]!) {\n  linkDatasetToPropertyValue(\n    input: {propertyId: $propertyId, itemId: $itemId, schemaItemId: $schemaItemId, fieldId: $fieldId, datasetSchemaIds: $datasetSchemaIds, datasetIds: $datasetIds, datasetSchemaFieldIds: $datasetFieldIds}\n  ) {\n    property {\n      id\n      ...PropertyFragment\n    }\n  }\n}\n    ${PropertyFragmentFragmentDoc}`;\nexport type LinkDatasetMutationFn = Apollo.MutationFunction<LinkDatasetMutation, LinkDatasetMutationVariables>;\n\n/**\n * __useLinkDatasetMutation__\n *\n * To run a mutation, you first call `useLinkDatasetMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLinkDatasetMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [linkDatasetMutation, { data, loading, error }] = useLinkDatasetMutation({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *      itemId: // value for 'itemId'\n *      schemaItemId: // value for 'schemaItemId'\n *      fieldId: // value for 'fieldId'\n *      datasetSchemaIds: // value for 'datasetSchemaIds'\n *      datasetIds: // value for 'datasetIds'\n *      datasetFieldIds: // value for 'datasetFieldIds'\n *   },\n * });\n */\nexport function useLinkDatasetMutation(baseOptions?: Apollo.MutationHookOptions<LinkDatasetMutation, LinkDatasetMutationVariables>) {\n        return Apollo.useMutation<LinkDatasetMutation, LinkDatasetMutationVariables>(LinkDatasetDocument, baseOptions);\n      }\nexport type LinkDatasetMutationHookResult = ReturnType<typeof useLinkDatasetMutation>;\nexport type LinkDatasetMutationResult = Apollo.MutationResult<LinkDatasetMutation>;\nexport type LinkDatasetMutationOptions = Apollo.BaseMutationOptions<LinkDatasetMutation, LinkDatasetMutationVariables>;\nexport const UnlinkDatasetDocument = gql`\n    mutation UnlinkDataset($propertyId: ID!, $schemaItemId: PropertySchemaFieldID, $itemId: ID, $fieldId: PropertySchemaFieldID!) {\n  unlinkPropertyValue(\n    input: {propertyId: $propertyId, schemaItemId: $schemaItemId, itemId: $itemId, fieldId: $fieldId}\n  ) {\n    property {\n      id\n      ...PropertyFragment\n      layer {\n        id\n        ...Layer1Fragment\n      }\n    }\n  }\n}\n    ${PropertyFragmentFragmentDoc}\n${Layer1FragmentFragmentDoc}`;\nexport type UnlinkDatasetMutationFn = Apollo.MutationFunction<UnlinkDatasetMutation, UnlinkDatasetMutationVariables>;\n\n/**\n * __useUnlinkDatasetMutation__\n *\n * To run a mutation, you first call `useUnlinkDatasetMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUnlinkDatasetMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [unlinkDatasetMutation, { data, loading, error }] = useUnlinkDatasetMutation({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *      schemaItemId: // value for 'schemaItemId'\n *      itemId: // value for 'itemId'\n *      fieldId: // value for 'fieldId'\n *   },\n * });\n */\nexport function useUnlinkDatasetMutation(baseOptions?: Apollo.MutationHookOptions<UnlinkDatasetMutation, UnlinkDatasetMutationVariables>) {\n        return Apollo.useMutation<UnlinkDatasetMutation, UnlinkDatasetMutationVariables>(UnlinkDatasetDocument, baseOptions);\n      }\nexport type UnlinkDatasetMutationHookResult = ReturnType<typeof useUnlinkDatasetMutation>;\nexport type UnlinkDatasetMutationResult = Apollo.MutationResult<UnlinkDatasetMutation>;\nexport type UnlinkDatasetMutationOptions = Apollo.BaseMutationOptions<UnlinkDatasetMutation, UnlinkDatasetMutationVariables>;\nexport const CreateInfoboxDocument = gql`\n    mutation createInfobox($layerId: ID!) {\n  createInfobox(input: {layerId: $layerId}) {\n    layer {\n      id\n      infobox {\n        ...InfoboxFragment\n      }\n      ... on LayerItem {\n        merged {\n          infobox {\n            ...MergedInfoboxFragment\n          }\n        }\n      }\n    }\n  }\n}\n    ${InfoboxFragmentFragmentDoc}\n${MergedInfoboxFragmentFragmentDoc}`;\nexport type CreateInfoboxMutationFn = Apollo.MutationFunction<CreateInfoboxMutation, CreateInfoboxMutationVariables>;\n\n/**\n * __useCreateInfoboxMutation__\n *\n * To run a mutation, you first call `useCreateInfoboxMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateInfoboxMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createInfoboxMutation, { data, loading, error }] = useCreateInfoboxMutation({\n *   variables: {\n *      layerId: // value for 'layerId'\n *   },\n * });\n */\nexport function useCreateInfoboxMutation(baseOptions?: Apollo.MutationHookOptions<CreateInfoboxMutation, CreateInfoboxMutationVariables>) {\n        return Apollo.useMutation<CreateInfoboxMutation, CreateInfoboxMutationVariables>(CreateInfoboxDocument, baseOptions);\n      }\nexport type CreateInfoboxMutationHookResult = ReturnType<typeof useCreateInfoboxMutation>;\nexport type CreateInfoboxMutationResult = Apollo.MutationResult<CreateInfoboxMutation>;\nexport type CreateInfoboxMutationOptions = Apollo.BaseMutationOptions<CreateInfoboxMutation, CreateInfoboxMutationVariables>;\nexport const RemoveInfoboxDocument = gql`\n    mutation removeInfobox($layerId: ID!) {\n  removeInfobox(input: {layerId: $layerId}) {\n    layer {\n      id\n      infobox {\n        ...InfoboxFragment\n      }\n      ... on LayerItem {\n        merged {\n          infobox {\n            ...MergedInfoboxFragment\n          }\n        }\n      }\n    }\n  }\n}\n    ${InfoboxFragmentFragmentDoc}\n${MergedInfoboxFragmentFragmentDoc}`;\nexport type RemoveInfoboxMutationFn = Apollo.MutationFunction<RemoveInfoboxMutation, RemoveInfoboxMutationVariables>;\n\n/**\n * __useRemoveInfoboxMutation__\n *\n * To run a mutation, you first call `useRemoveInfoboxMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveInfoboxMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeInfoboxMutation, { data, loading, error }] = useRemoveInfoboxMutation({\n *   variables: {\n *      layerId: // value for 'layerId'\n *   },\n * });\n */\nexport function useRemoveInfoboxMutation(baseOptions?: Apollo.MutationHookOptions<RemoveInfoboxMutation, RemoveInfoboxMutationVariables>) {\n        return Apollo.useMutation<RemoveInfoboxMutation, RemoveInfoboxMutationVariables>(RemoveInfoboxDocument, baseOptions);\n      }\nexport type RemoveInfoboxMutationHookResult = ReturnType<typeof useRemoveInfoboxMutation>;\nexport type RemoveInfoboxMutationResult = Apollo.MutationResult<RemoveInfoboxMutation>;\nexport type RemoveInfoboxMutationOptions = Apollo.BaseMutationOptions<RemoveInfoboxMutation, RemoveInfoboxMutationVariables>;\nexport const UploadFileToPropertyDocument = gql`\n    mutation UploadFileToProperty($propertyId: ID!, $schemaItemId: PropertySchemaFieldID, $itemId: ID, $fieldId: PropertySchemaFieldID!, $file: Upload!) {\n  uploadFileToProperty(\n    input: {propertyId: $propertyId, schemaItemId: $schemaItemId, itemId: $itemId, fieldId: $fieldId, file: $file}\n  ) {\n    property {\n      id\n      ...PropertyFragment\n      layer {\n        id\n        ...Layer1Fragment\n      }\n    }\n  }\n}\n    ${PropertyFragmentFragmentDoc}\n${Layer1FragmentFragmentDoc}`;\nexport type UploadFileToPropertyMutationFn = Apollo.MutationFunction<UploadFileToPropertyMutation, UploadFileToPropertyMutationVariables>;\n\n/**\n * __useUploadFileToPropertyMutation__\n *\n * To run a mutation, you first call `useUploadFileToPropertyMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUploadFileToPropertyMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [uploadFileToPropertyMutation, { data, loading, error }] = useUploadFileToPropertyMutation({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *      schemaItemId: // value for 'schemaItemId'\n *      itemId: // value for 'itemId'\n *      fieldId: // value for 'fieldId'\n *      file: // value for 'file'\n *   },\n * });\n */\nexport function useUploadFileToPropertyMutation(baseOptions?: Apollo.MutationHookOptions<UploadFileToPropertyMutation, UploadFileToPropertyMutationVariables>) {\n        return Apollo.useMutation<UploadFileToPropertyMutation, UploadFileToPropertyMutationVariables>(UploadFileToPropertyDocument, baseOptions);\n      }\nexport type UploadFileToPropertyMutationHookResult = ReturnType<typeof useUploadFileToPropertyMutation>;\nexport type UploadFileToPropertyMutationResult = Apollo.MutationResult<UploadFileToPropertyMutation>;\nexport type UploadFileToPropertyMutationOptions = Apollo.BaseMutationOptions<UploadFileToPropertyMutation, UploadFileToPropertyMutationVariables>;\nexport const RemovePropertyFieldDocument = gql`\n    mutation RemovePropertyField($propertyId: ID!, $schemaItemId: PropertySchemaFieldID, $itemId: ID, $fieldId: PropertySchemaFieldID!) {\n  removePropertyField(\n    input: {propertyId: $propertyId, schemaItemId: $schemaItemId, itemId: $itemId, fieldId: $fieldId}\n  ) {\n    property {\n      id\n      ...PropertyFragment\n      layer {\n        id\n        ...Layer1Fragment\n      }\n    }\n  }\n}\n    ${PropertyFragmentFragmentDoc}\n${Layer1FragmentFragmentDoc}`;\nexport type RemovePropertyFieldMutationFn = Apollo.MutationFunction<RemovePropertyFieldMutation, RemovePropertyFieldMutationVariables>;\n\n/**\n * __useRemovePropertyFieldMutation__\n *\n * To run a mutation, you first call `useRemovePropertyFieldMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemovePropertyFieldMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removePropertyFieldMutation, { data, loading, error }] = useRemovePropertyFieldMutation({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *      schemaItemId: // value for 'schemaItemId'\n *      itemId: // value for 'itemId'\n *      fieldId: // value for 'fieldId'\n *   },\n * });\n */\nexport function useRemovePropertyFieldMutation(baseOptions?: Apollo.MutationHookOptions<RemovePropertyFieldMutation, RemovePropertyFieldMutationVariables>) {\n        return Apollo.useMutation<RemovePropertyFieldMutation, RemovePropertyFieldMutationVariables>(RemovePropertyFieldDocument, baseOptions);\n      }\nexport type RemovePropertyFieldMutationHookResult = ReturnType<typeof useRemovePropertyFieldMutation>;\nexport type RemovePropertyFieldMutationResult = Apollo.MutationResult<RemovePropertyFieldMutation>;\nexport type RemovePropertyFieldMutationOptions = Apollo.BaseMutationOptions<RemovePropertyFieldMutation, RemovePropertyFieldMutationVariables>;\nexport const AddPropertyItemDocument = gql`\n    mutation addPropertyItem($propertyId: ID!, $schemaItemId: PropertySchemaFieldID!, $index: Int, $nameFieldValue: Any, $nameFieldType: ValueType) {\n  addPropertyItem(\n    input: {propertyId: $propertyId, schemaItemId: $schemaItemId, index: $index, nameFieldValue: $nameFieldValue, nameFieldType: $nameFieldType}\n  ) {\n    property {\n      id\n      ...PropertyFragment\n      layer {\n        id\n        ...Layer1Fragment\n      }\n    }\n  }\n}\n    ${PropertyFragmentFragmentDoc}\n${Layer1FragmentFragmentDoc}`;\nexport type AddPropertyItemMutationFn = Apollo.MutationFunction<AddPropertyItemMutation, AddPropertyItemMutationVariables>;\n\n/**\n * __useAddPropertyItemMutation__\n *\n * To run a mutation, you first call `useAddPropertyItemMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddPropertyItemMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addPropertyItemMutation, { data, loading, error }] = useAddPropertyItemMutation({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *      schemaItemId: // value for 'schemaItemId'\n *      index: // value for 'index'\n *      nameFieldValue: // value for 'nameFieldValue'\n *      nameFieldType: // value for 'nameFieldType'\n *   },\n * });\n */\nexport function useAddPropertyItemMutation(baseOptions?: Apollo.MutationHookOptions<AddPropertyItemMutation, AddPropertyItemMutationVariables>) {\n        return Apollo.useMutation<AddPropertyItemMutation, AddPropertyItemMutationVariables>(AddPropertyItemDocument, baseOptions);\n      }\nexport type AddPropertyItemMutationHookResult = ReturnType<typeof useAddPropertyItemMutation>;\nexport type AddPropertyItemMutationResult = Apollo.MutationResult<AddPropertyItemMutation>;\nexport type AddPropertyItemMutationOptions = Apollo.BaseMutationOptions<AddPropertyItemMutation, AddPropertyItemMutationVariables>;\nexport const MovePropertyItemDocument = gql`\n    mutation movePropertyItem($propertyId: ID!, $schemaItemId: PropertySchemaFieldID!, $itemId: ID!, $index: Int!) {\n  movePropertyItem(\n    input: {propertyId: $propertyId, schemaItemId: $schemaItemId, itemId: $itemId, index: $index}\n  ) {\n    property {\n      id\n      ...PropertyFragment\n      layer {\n        id\n        ...Layer1Fragment\n      }\n    }\n  }\n}\n    ${PropertyFragmentFragmentDoc}\n${Layer1FragmentFragmentDoc}`;\nexport type MovePropertyItemMutationFn = Apollo.MutationFunction<MovePropertyItemMutation, MovePropertyItemMutationVariables>;\n\n/**\n * __useMovePropertyItemMutation__\n *\n * To run a mutation, you first call `useMovePropertyItemMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useMovePropertyItemMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [movePropertyItemMutation, { data, loading, error }] = useMovePropertyItemMutation({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *      schemaItemId: // value for 'schemaItemId'\n *      itemId: // value for 'itemId'\n *      index: // value for 'index'\n *   },\n * });\n */\nexport function useMovePropertyItemMutation(baseOptions?: Apollo.MutationHookOptions<MovePropertyItemMutation, MovePropertyItemMutationVariables>) {\n        return Apollo.useMutation<MovePropertyItemMutation, MovePropertyItemMutationVariables>(MovePropertyItemDocument, baseOptions);\n      }\nexport type MovePropertyItemMutationHookResult = ReturnType<typeof useMovePropertyItemMutation>;\nexport type MovePropertyItemMutationResult = Apollo.MutationResult<MovePropertyItemMutation>;\nexport type MovePropertyItemMutationOptions = Apollo.BaseMutationOptions<MovePropertyItemMutation, MovePropertyItemMutationVariables>;\nexport const RemovePropertyItemDocument = gql`\n    mutation removePropertyItem($propertyId: ID!, $schemaItemId: PropertySchemaFieldID!, $itemId: ID!) {\n  removePropertyItem(\n    input: {propertyId: $propertyId, schemaItemId: $schemaItemId, itemId: $itemId}\n  ) {\n    property {\n      id\n      ...PropertyFragment\n      layer {\n        id\n        ...Layer1Fragment\n      }\n    }\n  }\n}\n    ${PropertyFragmentFragmentDoc}\n${Layer1FragmentFragmentDoc}`;\nexport type RemovePropertyItemMutationFn = Apollo.MutationFunction<RemovePropertyItemMutation, RemovePropertyItemMutationVariables>;\n\n/**\n * __useRemovePropertyItemMutation__\n *\n * To run a mutation, you first call `useRemovePropertyItemMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemovePropertyItemMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removePropertyItemMutation, { data, loading, error }] = useRemovePropertyItemMutation({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *      schemaItemId: // value for 'schemaItemId'\n *      itemId: // value for 'itemId'\n *   },\n * });\n */\nexport function useRemovePropertyItemMutation(baseOptions?: Apollo.MutationHookOptions<RemovePropertyItemMutation, RemovePropertyItemMutationVariables>) {\n        return Apollo.useMutation<RemovePropertyItemMutation, RemovePropertyItemMutationVariables>(RemovePropertyItemDocument, baseOptions);\n      }\nexport type RemovePropertyItemMutationHookResult = ReturnType<typeof useRemovePropertyItemMutation>;\nexport type RemovePropertyItemMutationResult = Apollo.MutationResult<RemovePropertyItemMutation>;\nexport type RemovePropertyItemMutationOptions = Apollo.BaseMutationOptions<RemovePropertyItemMutation, RemovePropertyItemMutationVariables>;\nexport const UpdatePropertyItemsDocument = gql`\n    mutation updatePropertyItems($propertyId: ID!, $schemaItemId: PropertySchemaFieldID!, $operations: [UpdatePropertyItemOperationInput!]!) {\n  updatePropertyItems(\n    input: {propertyId: $propertyId, schemaItemId: $schemaItemId, operations: $operations}\n  ) {\n    property {\n      id\n      ...PropertyFragment\n      layer {\n        id\n        ...Layer1Fragment\n      }\n    }\n  }\n}\n    ${PropertyFragmentFragmentDoc}\n${Layer1FragmentFragmentDoc}`;\nexport type UpdatePropertyItemsMutationFn = Apollo.MutationFunction<UpdatePropertyItemsMutation, UpdatePropertyItemsMutationVariables>;\n\n/**\n * __useUpdatePropertyItemsMutation__\n *\n * To run a mutation, you first call `useUpdatePropertyItemsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePropertyItemsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePropertyItemsMutation, { data, loading, error }] = useUpdatePropertyItemsMutation({\n *   variables: {\n *      propertyId: // value for 'propertyId'\n *      schemaItemId: // value for 'schemaItemId'\n *      operations: // value for 'operations'\n *   },\n * });\n */\nexport function useUpdatePropertyItemsMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePropertyItemsMutation, UpdatePropertyItemsMutationVariables>) {\n        return Apollo.useMutation<UpdatePropertyItemsMutation, UpdatePropertyItemsMutationVariables>(UpdatePropertyItemsDocument, baseOptions);\n      }\nexport type UpdatePropertyItemsMutationHookResult = ReturnType<typeof useUpdatePropertyItemsMutation>;\nexport type UpdatePropertyItemsMutationResult = Apollo.MutationResult<UpdatePropertyItemsMutation>;\nexport type UpdatePropertyItemsMutationOptions = Apollo.BaseMutationOptions<UpdatePropertyItemsMutation, UpdatePropertyItemsMutationVariables>;\nexport const GetLayerPropertyDocument = gql`\n    query GetLayerProperty($layerId: ID!) {\n  layer(id: $layerId) {\n    id\n    ...Layer1Fragment\n  }\n}\n    ${Layer1FragmentFragmentDoc}`;\n\n/**\n * __useGetLayerPropertyQuery__\n *\n * To run a query within a React component, call `useGetLayerPropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetLayerPropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetLayerPropertyQuery({\n *   variables: {\n *      layerId: // value for 'layerId'\n *   },\n * });\n */\nexport function useGetLayerPropertyQuery(baseOptions: Apollo.QueryHookOptions<GetLayerPropertyQuery, GetLayerPropertyQueryVariables>) {\n        return Apollo.useQuery<GetLayerPropertyQuery, GetLayerPropertyQueryVariables>(GetLayerPropertyDocument, baseOptions);\n      }\nexport function useGetLayerPropertyLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetLayerPropertyQuery, GetLayerPropertyQueryVariables>) {\n          return Apollo.useLazyQuery<GetLayerPropertyQuery, GetLayerPropertyQueryVariables>(GetLayerPropertyDocument, baseOptions);\n        }\nexport type GetLayerPropertyQueryHookResult = ReturnType<typeof useGetLayerPropertyQuery>;\nexport type GetLayerPropertyLazyQueryHookResult = ReturnType<typeof useGetLayerPropertyLazyQuery>;\nexport type GetLayerPropertyQueryResult = Apollo.QueryResult<GetLayerPropertyQuery, GetLayerPropertyQueryVariables>;\nexport const GetScenePropertyDocument = gql`\n    query GetSceneProperty($sceneId: ID!) {\n  node(id: $sceneId, type: SCENE) {\n    id\n    ... on Scene {\n      property {\n        id\n        ...PropertyFragment\n      }\n      widgets {\n        id\n        pluginId\n        extensionId\n        enabled\n        propertyId\n        property {\n          id\n          ...PropertyFragment\n        }\n      }\n    }\n  }\n}\n    ${PropertyFragmentFragmentDoc}`;\n\n/**\n * __useGetScenePropertyQuery__\n *\n * To run a query within a React component, call `useGetScenePropertyQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetScenePropertyQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetScenePropertyQuery({\n *   variables: {\n *      sceneId: // value for 'sceneId'\n *   },\n * });\n */\nexport function useGetScenePropertyQuery(baseOptions: Apollo.QueryHookOptions<GetScenePropertyQuery, GetScenePropertyQueryVariables>) {\n        return Apollo.useQuery<GetScenePropertyQuery, GetScenePropertyQueryVariables>(GetScenePropertyDocument, baseOptions);\n      }\nexport function useGetScenePropertyLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetScenePropertyQuery, GetScenePropertyQueryVariables>) {\n          return Apollo.useLazyQuery<GetScenePropertyQuery, GetScenePropertyQueryVariables>(GetScenePropertyDocument, baseOptions);\n        }\nexport type GetScenePropertyQueryHookResult = ReturnType<typeof useGetScenePropertyQuery>;\nexport type GetScenePropertyLazyQueryHookResult = ReturnType<typeof useGetScenePropertyLazyQuery>;\nexport type GetScenePropertyQueryResult = Apollo.QueryResult<GetScenePropertyQuery, GetScenePropertyQueryVariables>;\nexport const GetLinkableDatasetsDocument = gql`\n    query GetLinkableDatasets($sceneId: ID!) {\n  datasetSchemas(sceneId: $sceneId, first: 100) {\n    nodes {\n      id\n      source\n      name\n      fields {\n        id\n        name\n        type\n      }\n      datasets(first: 100) {\n        totalCount\n        nodes {\n          id\n          name\n          fields {\n            fieldId\n            type\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetLinkableDatasetsQuery__\n *\n * To run a query within a React component, call `useGetLinkableDatasetsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetLinkableDatasetsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetLinkableDatasetsQuery({\n *   variables: {\n *      sceneId: // value for 'sceneId'\n *   },\n * });\n */\nexport function useGetLinkableDatasetsQuery(baseOptions: Apollo.QueryHookOptions<GetLinkableDatasetsQuery, GetLinkableDatasetsQueryVariables>) {\n        return Apollo.useQuery<GetLinkableDatasetsQuery, GetLinkableDatasetsQueryVariables>(GetLinkableDatasetsDocument, baseOptions);\n      }\nexport function useGetLinkableDatasetsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetLinkableDatasetsQuery, GetLinkableDatasetsQueryVariables>) {\n          return Apollo.useLazyQuery<GetLinkableDatasetsQuery, GetLinkableDatasetsQueryVariables>(GetLinkableDatasetsDocument, baseOptions);\n        }\nexport type GetLinkableDatasetsQueryHookResult = ReturnType<typeof useGetLinkableDatasetsQuery>;\nexport type GetLinkableDatasetsLazyQueryHookResult = ReturnType<typeof useGetLinkableDatasetsLazyQuery>;\nexport type GetLinkableDatasetsQueryResult = Apollo.QueryResult<GetLinkableDatasetsQuery, GetLinkableDatasetsQueryVariables>;\nexport const AddWidgetDocument = gql`\n    mutation addWidget($sceneId: ID!, $pluginId: PluginID!, $extensionId: PluginExtensionID!) {\n  addWidget(\n    input: {sceneId: $sceneId, pluginId: $pluginId, extensionId: $extensionId}\n  ) {\n    scene {\n      id\n      widgets {\n        id\n        enabled\n        pluginId\n        extensionId\n        propertyId\n        property {\n          id\n          ...PropertyFragment\n        }\n      }\n    }\n  }\n}\n    ${PropertyFragmentFragmentDoc}`;\nexport type AddWidgetMutationFn = Apollo.MutationFunction<AddWidgetMutation, AddWidgetMutationVariables>;\n\n/**\n * __useAddWidgetMutation__\n *\n * To run a mutation, you first call `useAddWidgetMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddWidgetMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addWidgetMutation, { data, loading, error }] = useAddWidgetMutation({\n *   variables: {\n *      sceneId: // value for 'sceneId'\n *      pluginId: // value for 'pluginId'\n *      extensionId: // value for 'extensionId'\n *   },\n * });\n */\nexport function useAddWidgetMutation(baseOptions?: Apollo.MutationHookOptions<AddWidgetMutation, AddWidgetMutationVariables>) {\n        return Apollo.useMutation<AddWidgetMutation, AddWidgetMutationVariables>(AddWidgetDocument, baseOptions);\n      }\nexport type AddWidgetMutationHookResult = ReturnType<typeof useAddWidgetMutation>;\nexport type AddWidgetMutationResult = Apollo.MutationResult<AddWidgetMutation>;\nexport type AddWidgetMutationOptions = Apollo.BaseMutationOptions<AddWidgetMutation, AddWidgetMutationVariables>;\nexport const RemoveWidgetDocument = gql`\n    mutation removeWidget($sceneId: ID!, $pluginId: PluginID!, $extensionId: PluginExtensionID!) {\n  removeWidget(\n    input: {sceneId: $sceneId, pluginId: $pluginId, extensionId: $extensionId}\n  ) {\n    scene {\n      id\n      widgets {\n        id\n        enabled\n        pluginId\n        extensionId\n        propertyId\n      }\n    }\n  }\n}\n    `;\nexport type RemoveWidgetMutationFn = Apollo.MutationFunction<RemoveWidgetMutation, RemoveWidgetMutationVariables>;\n\n/**\n * __useRemoveWidgetMutation__\n *\n * To run a mutation, you first call `useRemoveWidgetMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveWidgetMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeWidgetMutation, { data, loading, error }] = useRemoveWidgetMutation({\n *   variables: {\n *      sceneId: // value for 'sceneId'\n *      pluginId: // value for 'pluginId'\n *      extensionId: // value for 'extensionId'\n *   },\n * });\n */\nexport function useRemoveWidgetMutation(baseOptions?: Apollo.MutationHookOptions<RemoveWidgetMutation, RemoveWidgetMutationVariables>) {\n        return Apollo.useMutation<RemoveWidgetMutation, RemoveWidgetMutationVariables>(RemoveWidgetDocument, baseOptions);\n      }\nexport type RemoveWidgetMutationHookResult = ReturnType<typeof useRemoveWidgetMutation>;\nexport type RemoveWidgetMutationResult = Apollo.MutationResult<RemoveWidgetMutation>;\nexport type RemoveWidgetMutationOptions = Apollo.BaseMutationOptions<RemoveWidgetMutation, RemoveWidgetMutationVariables>;\nexport const UpdateWidgetDocument = gql`\n    mutation updateWidget($sceneId: ID!, $pluginId: PluginID!, $extensionId: PluginExtensionID!, $enabled: Boolean) {\n  updateWidget(\n    input: {sceneId: $sceneId, pluginId: $pluginId, extensionId: $extensionId, enabled: $enabled}\n  ) {\n    scene {\n      id\n      widgets {\n        id\n        enabled\n        pluginId\n        extensionId\n        propertyId\n      }\n    }\n  }\n}\n    `;\nexport type UpdateWidgetMutationFn = Apollo.MutationFunction<UpdateWidgetMutation, UpdateWidgetMutationVariables>;\n\n/**\n * __useUpdateWidgetMutation__\n *\n * To run a mutation, you first call `useUpdateWidgetMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateWidgetMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateWidgetMutation, { data, loading, error }] = useUpdateWidgetMutation({\n *   variables: {\n *      sceneId: // value for 'sceneId'\n *      pluginId: // value for 'pluginId'\n *      extensionId: // value for 'extensionId'\n *      enabled: // value for 'enabled'\n *   },\n * });\n */\nexport function useUpdateWidgetMutation(baseOptions?: Apollo.MutationHookOptions<UpdateWidgetMutation, UpdateWidgetMutationVariables>) {\n        return Apollo.useMutation<UpdateWidgetMutation, UpdateWidgetMutationVariables>(UpdateWidgetDocument, baseOptions);\n      }\nexport type UpdateWidgetMutationHookResult = ReturnType<typeof useUpdateWidgetMutation>;\nexport type UpdateWidgetMutationResult = Apollo.MutationResult<UpdateWidgetMutation>;\nexport type UpdateWidgetMutationOptions = Apollo.BaseMutationOptions<UpdateWidgetMutation, UpdateWidgetMutationVariables>;\nexport const UpdateMeDocument = gql`\n    mutation updateMe($name: String, $email: String, $lang: Lang, $theme: Theme, $password: String, $passwordConfirmation: String) {\n  updateMe(\n    input: {name: $name, email: $email, lang: $lang, theme: $theme, password: $password, passwordConfirmation: $passwordConfirmation}\n  ) {\n    user {\n      id\n      name\n      email\n      lang\n      theme\n      myTeam {\n        id\n        name\n      }\n    }\n  }\n}\n    `;\nexport type UpdateMeMutationFn = Apollo.MutationFunction<UpdateMeMutation, UpdateMeMutationVariables>;\n\n/**\n * __useUpdateMeMutation__\n *\n * To run a mutation, you first call `useUpdateMeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateMeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateMeMutation, { data, loading, error }] = useUpdateMeMutation({\n *   variables: {\n *      name: // value for 'name'\n *      email: // value for 'email'\n *      lang: // value for 'lang'\n *      theme: // value for 'theme'\n *      password: // value for 'password'\n *      passwordConfirmation: // value for 'passwordConfirmation'\n *   },\n * });\n */\nexport function useUpdateMeMutation(baseOptions?: Apollo.MutationHookOptions<UpdateMeMutation, UpdateMeMutationVariables>) {\n        return Apollo.useMutation<UpdateMeMutation, UpdateMeMutationVariables>(UpdateMeDocument, baseOptions);\n      }\nexport type UpdateMeMutationHookResult = ReturnType<typeof useUpdateMeMutation>;\nexport type UpdateMeMutationResult = Apollo.MutationResult<UpdateMeMutation>;\nexport type UpdateMeMutationOptions = Apollo.BaseMutationOptions<UpdateMeMutation, UpdateMeMutationVariables>;\nexport const ProfileDocument = gql`\n    query Profile {\n  me {\n    id\n    name\n    email\n    lang\n    theme\n    myTeam {\n      id\n      name\n    }\n    auths\n  }\n}\n    `;\n\n/**\n * __useProfileQuery__\n *\n * To run a query within a React component, call `useProfileQuery` and pass it any options that fit your needs.\n * When your component renders, `useProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProfileQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useProfileQuery(baseOptions?: Apollo.QueryHookOptions<ProfileQuery, ProfileQueryVariables>) {\n        return Apollo.useQuery<ProfileQuery, ProfileQueryVariables>(ProfileDocument, baseOptions);\n      }\nexport function useProfileLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProfileQuery, ProfileQueryVariables>) {\n          return Apollo.useLazyQuery<ProfileQuery, ProfileQueryVariables>(ProfileDocument, baseOptions);\n        }\nexport type ProfileQueryHookResult = ReturnType<typeof useProfileQuery>;\nexport type ProfileLazyQueryHookResult = ReturnType<typeof useProfileLazyQuery>;\nexport type ProfileQueryResult = Apollo.QueryResult<ProfileQuery, ProfileQueryVariables>;\nexport const DatasetSchemasDocument = gql`\n    query datasetSchemas($projectId: ID!) {\n  scene(projectId: $projectId) {\n    id\n    datasetSchemas(first: 100) {\n      nodes {\n        id\n        source\n        name\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      totalCount\n    }\n  }\n}\n    `;\n\n/**\n * __useDatasetSchemasQuery__\n *\n * To run a query within a React component, call `useDatasetSchemasQuery` and pass it any options that fit your needs.\n * When your component renders, `useDatasetSchemasQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDatasetSchemasQuery({\n *   variables: {\n *      projectId: // value for 'projectId'\n *   },\n * });\n */\nexport function useDatasetSchemasQuery(baseOptions: Apollo.QueryHookOptions<DatasetSchemasQuery, DatasetSchemasQueryVariables>) {\n        return Apollo.useQuery<DatasetSchemasQuery, DatasetSchemasQueryVariables>(DatasetSchemasDocument, baseOptions);\n      }\nexport function useDatasetSchemasLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DatasetSchemasQuery, DatasetSchemasQueryVariables>) {\n          return Apollo.useLazyQuery<DatasetSchemasQuery, DatasetSchemasQueryVariables>(DatasetSchemasDocument, baseOptions);\n        }\nexport type DatasetSchemasQueryHookResult = ReturnType<typeof useDatasetSchemasQuery>;\nexport type DatasetSchemasLazyQueryHookResult = ReturnType<typeof useDatasetSchemasLazyQuery>;\nexport type DatasetSchemasQueryResult = Apollo.QueryResult<DatasetSchemasQuery, DatasetSchemasQueryVariables>;\nexport const SyncDatasetTestDocument = gql`\n    mutation syncDatasetTest($sceneId: ID!, $url: String!) {\n  syncDataset(input: {sceneId: $sceneId, url: $url}) {\n    sceneId\n    url\n    datasetSchema {\n      id\n      source\n      name\n    }\n    dataset {\n      id\n      source\n      schemaId\n      name\n    }\n  }\n}\n    `;\nexport type SyncDatasetTestMutationFn = Apollo.MutationFunction<SyncDatasetTestMutation, SyncDatasetTestMutationVariables>;\n\n/**\n * __useSyncDatasetTestMutation__\n *\n * To run a mutation, you first call `useSyncDatasetTestMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSyncDatasetTestMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [syncDatasetTestMutation, { data, loading, error }] = useSyncDatasetTestMutation({\n *   variables: {\n *      sceneId: // value for 'sceneId'\n *      url: // value for 'url'\n *   },\n * });\n */\nexport function useSyncDatasetTestMutation(baseOptions?: Apollo.MutationHookOptions<SyncDatasetTestMutation, SyncDatasetTestMutationVariables>) {\n        return Apollo.useMutation<SyncDatasetTestMutation, SyncDatasetTestMutationVariables>(SyncDatasetTestDocument, baseOptions);\n      }\nexport type SyncDatasetTestMutationHookResult = ReturnType<typeof useSyncDatasetTestMutation>;\nexport type SyncDatasetTestMutationResult = Apollo.MutationResult<SyncDatasetTestMutation>;\nexport type SyncDatasetTestMutationOptions = Apollo.BaseMutationOptions<SyncDatasetTestMutation, SyncDatasetTestMutationVariables>;\nexport const RemoveDatasetSchemaDocument = gql`\n    mutation removeDatasetSchema($schemaId: ID!) {\n  removeDatasetSchema(input: {schemaId: $schemaId}) {\n    schemaId\n  }\n}\n    `;\nexport type RemoveDatasetSchemaMutationFn = Apollo.MutationFunction<RemoveDatasetSchemaMutation, RemoveDatasetSchemaMutationVariables>;\n\n/**\n * __useRemoveDatasetSchemaMutation__\n *\n * To run a mutation, you first call `useRemoveDatasetSchemaMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveDatasetSchemaMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeDatasetSchemaMutation, { data, loading, error }] = useRemoveDatasetSchemaMutation({\n *   variables: {\n *      schemaId: // value for 'schemaId'\n *   },\n * });\n */\nexport function useRemoveDatasetSchemaMutation(baseOptions?: Apollo.MutationHookOptions<RemoveDatasetSchemaMutation, RemoveDatasetSchemaMutationVariables>) {\n        return Apollo.useMutation<RemoveDatasetSchemaMutation, RemoveDatasetSchemaMutationVariables>(RemoveDatasetSchemaDocument, baseOptions);\n      }\nexport type RemoveDatasetSchemaMutationHookResult = ReturnType<typeof useRemoveDatasetSchemaMutation>;\nexport type RemoveDatasetSchemaMutationResult = Apollo.MutationResult<RemoveDatasetSchemaMutation>;\nexport type RemoveDatasetSchemaMutationOptions = Apollo.BaseMutationOptions<RemoveDatasetSchemaMutation, RemoveDatasetSchemaMutationVariables>;\nexport const InstallablePluginsDocument = gql`\n    query InstallablePlugins {\n  installablePlugins {\n    name\n    description\n    thumbnailUrl\n    author\n    createdAt\n  }\n}\n    `;\n\n/**\n * __useInstallablePluginsQuery__\n *\n * To run a query within a React component, call `useInstallablePluginsQuery` and pass it any options that fit your needs.\n * When your component renders, `useInstallablePluginsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useInstallablePluginsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useInstallablePluginsQuery(baseOptions?: Apollo.QueryHookOptions<InstallablePluginsQuery, InstallablePluginsQueryVariables>) {\n        return Apollo.useQuery<InstallablePluginsQuery, InstallablePluginsQueryVariables>(InstallablePluginsDocument, baseOptions);\n      }\nexport function useInstallablePluginsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<InstallablePluginsQuery, InstallablePluginsQueryVariables>) {\n          return Apollo.useLazyQuery<InstallablePluginsQuery, InstallablePluginsQueryVariables>(InstallablePluginsDocument, baseOptions);\n        }\nexport type InstallablePluginsQueryHookResult = ReturnType<typeof useInstallablePluginsQuery>;\nexport type InstallablePluginsLazyQueryHookResult = ReturnType<typeof useInstallablePluginsLazyQuery>;\nexport type InstallablePluginsQueryResult = Apollo.QueryResult<InstallablePluginsQuery, InstallablePluginsQueryVariables>;\nexport const InstalledPluginsDocument = gql`\n    query InstalledPlugins($projectId: ID!) {\n  scene(projectId: $projectId) {\n    id\n    plugins {\n      plugin {\n        id\n        name\n        version\n        description\n        author\n        repositoryUrl\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useInstalledPluginsQuery__\n *\n * To run a query within a React component, call `useInstalledPluginsQuery` and pass it any options that fit your needs.\n * When your component renders, `useInstalledPluginsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useInstalledPluginsQuery({\n *   variables: {\n *      projectId: // value for 'projectId'\n *   },\n * });\n */\nexport function useInstalledPluginsQuery(baseOptions: Apollo.QueryHookOptions<InstalledPluginsQuery, InstalledPluginsQueryVariables>) {\n        return Apollo.useQuery<InstalledPluginsQuery, InstalledPluginsQueryVariables>(InstalledPluginsDocument, baseOptions);\n      }\nexport function useInstalledPluginsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<InstalledPluginsQuery, InstalledPluginsQueryVariables>) {\n          return Apollo.useLazyQuery<InstalledPluginsQuery, InstalledPluginsQueryVariables>(InstalledPluginsDocument, baseOptions);\n        }\nexport type InstalledPluginsQueryHookResult = ReturnType<typeof useInstalledPluginsQuery>;\nexport type InstalledPluginsLazyQueryHookResult = ReturnType<typeof useInstalledPluginsLazyQuery>;\nexport type InstalledPluginsQueryResult = Apollo.QueryResult<InstalledPluginsQuery, InstalledPluginsQueryVariables>;\nexport const UploadPluginDocument = gql`\n    mutation UploadPlugin($sceneId: ID!, $file: Upload, $url: URL) {\n  uploadPlugin(input: {sceneId: $sceneId, file: $file, url: $url}) {\n    plugin {\n      id\n      name\n      version\n      description\n      author\n    }\n    scenePlugin {\n      pluginId\n      propertyId\n    }\n  }\n}\n    `;\nexport type UploadPluginMutationFn = Apollo.MutationFunction<UploadPluginMutation, UploadPluginMutationVariables>;\n\n/**\n * __useUploadPluginMutation__\n *\n * To run a mutation, you first call `useUploadPluginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUploadPluginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [uploadPluginMutation, { data, loading, error }] = useUploadPluginMutation({\n *   variables: {\n *      sceneId: // value for 'sceneId'\n *      file: // value for 'file'\n *      url: // value for 'url'\n *   },\n * });\n */\nexport function useUploadPluginMutation(baseOptions?: Apollo.MutationHookOptions<UploadPluginMutation, UploadPluginMutationVariables>) {\n        return Apollo.useMutation<UploadPluginMutation, UploadPluginMutationVariables>(UploadPluginDocument, baseOptions);\n      }\nexport type UploadPluginMutationHookResult = ReturnType<typeof useUploadPluginMutation>;\nexport type UploadPluginMutationResult = Apollo.MutationResult<UploadPluginMutation>;\nexport type UploadPluginMutationOptions = Apollo.BaseMutationOptions<UploadPluginMutation, UploadPluginMutationVariables>;\nexport const UninstallPluginDocument = gql`\n    mutation uninstallPlugin($sceneId: ID!, $pluginId: PluginID!) {\n  uninstallPlugin(input: {sceneId: $sceneId, pluginId: $pluginId}) {\n    pluginId\n  }\n}\n    `;\nexport type UninstallPluginMutationFn = Apollo.MutationFunction<UninstallPluginMutation, UninstallPluginMutationVariables>;\n\n/**\n * __useUninstallPluginMutation__\n *\n * To run a mutation, you first call `useUninstallPluginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUninstallPluginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [uninstallPluginMutation, { data, loading, error }] = useUninstallPluginMutation({\n *   variables: {\n *      sceneId: // value for 'sceneId'\n *      pluginId: // value for 'pluginId'\n *   },\n * });\n */\nexport function useUninstallPluginMutation(baseOptions?: Apollo.MutationHookOptions<UninstallPluginMutation, UninstallPluginMutationVariables>) {\n        return Apollo.useMutation<UninstallPluginMutation, UninstallPluginMutationVariables>(UninstallPluginDocument, baseOptions);\n      }\nexport type UninstallPluginMutationHookResult = ReturnType<typeof useUninstallPluginMutation>;\nexport type UninstallPluginMutationResult = Apollo.MutationResult<UninstallPluginMutation>;\nexport type UninstallPluginMutationOptions = Apollo.BaseMutationOptions<UninstallPluginMutation, UninstallPluginMutationVariables>;\nexport const ProjectDocument = gql`\n    query Project($teamId: ID!) {\n  projects(teamId: $teamId, first: 0, last: 100) {\n    nodes {\n      id\n      name\n      description\n      imageUrl\n      isArchived\n      isBasicAuthActive\n      basicAuthUsername\n      basicAuthPassword\n      publicTitle\n      publicDescription\n      publicImage\n      alias\n      publishmentStatus\n    }\n  }\n}\n    `;\n\n/**\n * __useProjectQuery__\n *\n * To run a query within a React component, call `useProjectQuery` and pass it any options that fit your needs.\n * When your component renders, `useProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProjectQuery({\n *   variables: {\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\nexport function useProjectQuery(baseOptions: Apollo.QueryHookOptions<ProjectQuery, ProjectQueryVariables>) {\n        return Apollo.useQuery<ProjectQuery, ProjectQueryVariables>(ProjectDocument, baseOptions);\n      }\nexport function useProjectLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProjectQuery, ProjectQueryVariables>) {\n          return Apollo.useLazyQuery<ProjectQuery, ProjectQueryVariables>(ProjectDocument, baseOptions);\n        }\nexport type ProjectQueryHookResult = ReturnType<typeof useProjectQuery>;\nexport type ProjectLazyQueryHookResult = ReturnType<typeof useProjectLazyQuery>;\nexport type ProjectQueryResult = Apollo.QueryResult<ProjectQuery, ProjectQueryVariables>;\nexport const UpdateProjectBasicAuthDocument = gql`\n    mutation updateProjectBasicAuth($projectId: ID!, $isBasicAuthActive: Boolean, $basicAuthUsername: String, $basicAuthPassword: String) {\n  updateProject(\n    input: {projectId: $projectId, isBasicAuthActive: $isBasicAuthActive, basicAuthUsername: $basicAuthUsername, basicAuthPassword: $basicAuthPassword}\n  ) {\n    project {\n      id\n      name\n      isBasicAuthActive\n      basicAuthUsername\n      basicAuthPassword\n    }\n  }\n}\n    `;\nexport type UpdateProjectBasicAuthMutationFn = Apollo.MutationFunction<UpdateProjectBasicAuthMutation, UpdateProjectBasicAuthMutationVariables>;\n\n/**\n * __useUpdateProjectBasicAuthMutation__\n *\n * To run a mutation, you first call `useUpdateProjectBasicAuthMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProjectBasicAuthMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProjectBasicAuthMutation, { data, loading, error }] = useUpdateProjectBasicAuthMutation({\n *   variables: {\n *      projectId: // value for 'projectId'\n *      isBasicAuthActive: // value for 'isBasicAuthActive'\n *      basicAuthUsername: // value for 'basicAuthUsername'\n *      basicAuthPassword: // value for 'basicAuthPassword'\n *   },\n * });\n */\nexport function useUpdateProjectBasicAuthMutation(baseOptions?: Apollo.MutationHookOptions<UpdateProjectBasicAuthMutation, UpdateProjectBasicAuthMutationVariables>) {\n        return Apollo.useMutation<UpdateProjectBasicAuthMutation, UpdateProjectBasicAuthMutationVariables>(UpdateProjectBasicAuthDocument, baseOptions);\n      }\nexport type UpdateProjectBasicAuthMutationHookResult = ReturnType<typeof useUpdateProjectBasicAuthMutation>;\nexport type UpdateProjectBasicAuthMutationResult = Apollo.MutationResult<UpdateProjectBasicAuthMutation>;\nexport type UpdateProjectBasicAuthMutationOptions = Apollo.BaseMutationOptions<UpdateProjectBasicAuthMutation, UpdateProjectBasicAuthMutationVariables>;\nexport const UpdateProjectDocument = gql`\n    mutation updateProject($projectId: ID!, $name: String, $description: String, $imageUrl: URL, $publicTitle: String, $publicDescription: String, $publicImage: String) {\n  updateProject(\n    input: {projectId: $projectId, name: $name, description: $description, imageUrl: $imageUrl, publicTitle: $publicTitle, publicDescription: $publicDescription, publicImage: $publicImage}\n  ) {\n    project {\n      id\n      name\n      description\n      imageUrl\n      isArchived\n      isBasicAuthActive\n      basicAuthUsername\n      basicAuthPassword\n      publicTitle\n      publicDescription\n      publicImage\n      alias\n      publishmentStatus\n    }\n  }\n}\n    `;\nexport type UpdateProjectMutationFn = Apollo.MutationFunction<UpdateProjectMutation, UpdateProjectMutationVariables>;\n\n/**\n * __useUpdateProjectMutation__\n *\n * To run a mutation, you first call `useUpdateProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProjectMutation, { data, loading, error }] = useUpdateProjectMutation({\n *   variables: {\n *      projectId: // value for 'projectId'\n *      name: // value for 'name'\n *      description: // value for 'description'\n *      imageUrl: // value for 'imageUrl'\n *      publicTitle: // value for 'publicTitle'\n *      publicDescription: // value for 'publicDescription'\n *      publicImage: // value for 'publicImage'\n *   },\n * });\n */\nexport function useUpdateProjectMutation(baseOptions?: Apollo.MutationHookOptions<UpdateProjectMutation, UpdateProjectMutationVariables>) {\n        return Apollo.useMutation<UpdateProjectMutation, UpdateProjectMutationVariables>(UpdateProjectDocument, baseOptions);\n      }\nexport type UpdateProjectMutationHookResult = ReturnType<typeof useUpdateProjectMutation>;\nexport type UpdateProjectMutationResult = Apollo.MutationResult<UpdateProjectMutation>;\nexport type UpdateProjectMutationOptions = Apollo.BaseMutationOptions<UpdateProjectMutation, UpdateProjectMutationVariables>;\nexport const ArchiveProjectDocument = gql`\n    mutation archiveProject($projectId: ID!, $archived: Boolean!) {\n  updateProject(input: {projectId: $projectId, archived: $archived}) {\n    project {\n      id\n      name\n      description\n      imageUrl\n      isArchived\n      isBasicAuthActive\n      basicAuthUsername\n      basicAuthPassword\n      publicTitle\n      publicDescription\n      publicImage\n      alias\n      publishmentStatus\n    }\n  }\n}\n    `;\nexport type ArchiveProjectMutationFn = Apollo.MutationFunction<ArchiveProjectMutation, ArchiveProjectMutationVariables>;\n\n/**\n * __useArchiveProjectMutation__\n *\n * To run a mutation, you first call `useArchiveProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useArchiveProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [archiveProjectMutation, { data, loading, error }] = useArchiveProjectMutation({\n *   variables: {\n *      projectId: // value for 'projectId'\n *      archived: // value for 'archived'\n *   },\n * });\n */\nexport function useArchiveProjectMutation(baseOptions?: Apollo.MutationHookOptions<ArchiveProjectMutation, ArchiveProjectMutationVariables>) {\n        return Apollo.useMutation<ArchiveProjectMutation, ArchiveProjectMutationVariables>(ArchiveProjectDocument, baseOptions);\n      }\nexport type ArchiveProjectMutationHookResult = ReturnType<typeof useArchiveProjectMutation>;\nexport type ArchiveProjectMutationResult = Apollo.MutationResult<ArchiveProjectMutation>;\nexport type ArchiveProjectMutationOptions = Apollo.BaseMutationOptions<ArchiveProjectMutation, ArchiveProjectMutationVariables>;\nexport const DeleteProjectDocument = gql`\n    mutation deleteProject($projectId: ID!) {\n  deleteProject(input: {projectId: $projectId}) {\n    projectId\n  }\n}\n    `;\nexport type DeleteProjectMutationFn = Apollo.MutationFunction<DeleteProjectMutation, DeleteProjectMutationVariables>;\n\n/**\n * __useDeleteProjectMutation__\n *\n * To run a mutation, you first call `useDeleteProjectMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteProjectMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteProjectMutation, { data, loading, error }] = useDeleteProjectMutation({\n *   variables: {\n *      projectId: // value for 'projectId'\n *   },\n * });\n */\nexport function useDeleteProjectMutation(baseOptions?: Apollo.MutationHookOptions<DeleteProjectMutation, DeleteProjectMutationVariables>) {\n        return Apollo.useMutation<DeleteProjectMutation, DeleteProjectMutationVariables>(DeleteProjectDocument, baseOptions);\n      }\nexport type DeleteProjectMutationHookResult = ReturnType<typeof useDeleteProjectMutation>;\nexport type DeleteProjectMutationResult = Apollo.MutationResult<DeleteProjectMutation>;\nexport type DeleteProjectMutationOptions = Apollo.BaseMutationOptions<DeleteProjectMutation, DeleteProjectMutationVariables>;\nexport const UpdateProjectAliasDocument = gql`\n    mutation updateProjectAlias($projectId: ID!, $alias: String!) {\n  updateProject(input: {projectId: $projectId, alias: $alias}) {\n    project {\n      id\n      name\n      alias\n    }\n  }\n}\n    `;\nexport type UpdateProjectAliasMutationFn = Apollo.MutationFunction<UpdateProjectAliasMutation, UpdateProjectAliasMutationVariables>;\n\n/**\n * __useUpdateProjectAliasMutation__\n *\n * To run a mutation, you first call `useUpdateProjectAliasMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateProjectAliasMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateProjectAliasMutation, { data, loading, error }] = useUpdateProjectAliasMutation({\n *   variables: {\n *      projectId: // value for 'projectId'\n *      alias: // value for 'alias'\n *   },\n * });\n */\nexport function useUpdateProjectAliasMutation(baseOptions?: Apollo.MutationHookOptions<UpdateProjectAliasMutation, UpdateProjectAliasMutationVariables>) {\n        return Apollo.useMutation<UpdateProjectAliasMutation, UpdateProjectAliasMutationVariables>(UpdateProjectAliasDocument, baseOptions);\n      }\nexport type UpdateProjectAliasMutationHookResult = ReturnType<typeof useUpdateProjectAliasMutation>;\nexport type UpdateProjectAliasMutationResult = Apollo.MutationResult<UpdateProjectAliasMutation>;\nexport type UpdateProjectAliasMutationOptions = Apollo.BaseMutationOptions<UpdateProjectAliasMutation, UpdateProjectAliasMutationVariables>;\nexport const SceneDocument = gql`\n    query Scene($projectId: ID!) {\n  scene(projectId: $projectId) {\n    id\n    projectId\n    teamId\n  }\n}\n    `;\n\n/**\n * __useSceneQuery__\n *\n * To run a query within a React component, call `useSceneQuery` and pass it any options that fit your needs.\n * When your component renders, `useSceneQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSceneQuery({\n *   variables: {\n *      projectId: // value for 'projectId'\n *   },\n * });\n */\nexport function useSceneQuery(baseOptions: Apollo.QueryHookOptions<SceneQuery, SceneQueryVariables>) {\n        return Apollo.useQuery<SceneQuery, SceneQueryVariables>(SceneDocument, baseOptions);\n      }\nexport function useSceneLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SceneQuery, SceneQueryVariables>) {\n          return Apollo.useLazyQuery<SceneQuery, SceneQueryVariables>(SceneDocument, baseOptions);\n        }\nexport type SceneQueryHookResult = ReturnType<typeof useSceneQuery>;\nexport type SceneLazyQueryHookResult = ReturnType<typeof useSceneLazyQuery>;\nexport type SceneQueryResult = Apollo.QueryResult<SceneQuery, SceneQueryVariables>;\nexport const AssetsDocument = gql`\n    query Assets($teamId: ID!) {\n  assets(teamId: $teamId, first: 0, last: 300) {\n    edges {\n      cursor\n      node {\n        id\n        teamId\n        name\n        size\n        url\n        contentType\n      }\n    }\n    nodes {\n      id\n      teamId\n      name\n      size\n      url\n      contentType\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n    totalCount\n  }\n}\n    `;\n\n/**\n * __useAssetsQuery__\n *\n * To run a query within a React component, call `useAssetsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAssetsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAssetsQuery({\n *   variables: {\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\nexport function useAssetsQuery(baseOptions: Apollo.QueryHookOptions<AssetsQuery, AssetsQueryVariables>) {\n        return Apollo.useQuery<AssetsQuery, AssetsQueryVariables>(AssetsDocument, baseOptions);\n      }\nexport function useAssetsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AssetsQuery, AssetsQueryVariables>) {\n          return Apollo.useLazyQuery<AssetsQuery, AssetsQueryVariables>(AssetsDocument, baseOptions);\n        }\nexport type AssetsQueryHookResult = ReturnType<typeof useAssetsQuery>;\nexport type AssetsLazyQueryHookResult = ReturnType<typeof useAssetsLazyQuery>;\nexport type AssetsQueryResult = Apollo.QueryResult<AssetsQuery, AssetsQueryVariables>;\nexport const CreateAssetDocument = gql`\n    mutation CreateAsset($teamId: ID!, $file: Upload!) {\n  createAsset(input: {teamId: $teamId, file: $file}) {\n    asset {\n      id\n      teamId\n      name\n      size\n      url\n      contentType\n    }\n  }\n}\n    `;\nexport type CreateAssetMutationFn = Apollo.MutationFunction<CreateAssetMutation, CreateAssetMutationVariables>;\n\n/**\n * __useCreateAssetMutation__\n *\n * To run a mutation, you first call `useCreateAssetMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateAssetMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createAssetMutation, { data, loading, error }] = useCreateAssetMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      file: // value for 'file'\n *   },\n * });\n */\nexport function useCreateAssetMutation(baseOptions?: Apollo.MutationHookOptions<CreateAssetMutation, CreateAssetMutationVariables>) {\n        return Apollo.useMutation<CreateAssetMutation, CreateAssetMutationVariables>(CreateAssetDocument, baseOptions);\n      }\nexport type CreateAssetMutationHookResult = ReturnType<typeof useCreateAssetMutation>;\nexport type CreateAssetMutationResult = Apollo.MutationResult<CreateAssetMutation>;\nexport type CreateAssetMutationOptions = Apollo.BaseMutationOptions<CreateAssetMutation, CreateAssetMutationVariables>;\nexport const RemoveAssetDocument = gql`\n    mutation RemoveAsset($assetId: ID!) {\n  removeAsset(input: {assetId: $assetId}) {\n    assetId\n  }\n}\n    `;\nexport type RemoveAssetMutationFn = Apollo.MutationFunction<RemoveAssetMutation, RemoveAssetMutationVariables>;\n\n/**\n * __useRemoveAssetMutation__\n *\n * To run a mutation, you first call `useRemoveAssetMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveAssetMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeAssetMutation, { data, loading, error }] = useRemoveAssetMutation({\n *   variables: {\n *      assetId: // value for 'assetId'\n *   },\n * });\n */\nexport function useRemoveAssetMutation(baseOptions?: Apollo.MutationHookOptions<RemoveAssetMutation, RemoveAssetMutationVariables>) {\n        return Apollo.useMutation<RemoveAssetMutation, RemoveAssetMutationVariables>(RemoveAssetDocument, baseOptions);\n      }\nexport type RemoveAssetMutationHookResult = ReturnType<typeof useRemoveAssetMutation>;\nexport type RemoveAssetMutationResult = Apollo.MutationResult<RemoveAssetMutation>;\nexport type RemoveAssetMutationOptions = Apollo.BaseMutationOptions<RemoveAssetMutation, RemoveAssetMutationVariables>;\nexport const UpdateTeamDocument = gql`\n    mutation updateTeam($teamId: ID!, $name: String!) {\n  updateTeam(input: {teamId: $teamId, name: $name}) {\n    team {\n      id\n      name\n      members {\n        user {\n          id\n          name\n          email\n        }\n        userId\n        role\n      }\n      personal\n    }\n  }\n}\n    `;\nexport type UpdateTeamMutationFn = Apollo.MutationFunction<UpdateTeamMutation, UpdateTeamMutationVariables>;\n\n/**\n * __useUpdateTeamMutation__\n *\n * To run a mutation, you first call `useUpdateTeamMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTeamMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTeamMutation, { data, loading, error }] = useUpdateTeamMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useUpdateTeamMutation(baseOptions?: Apollo.MutationHookOptions<UpdateTeamMutation, UpdateTeamMutationVariables>) {\n        return Apollo.useMutation<UpdateTeamMutation, UpdateTeamMutationVariables>(UpdateTeamDocument, baseOptions);\n      }\nexport type UpdateTeamMutationHookResult = ReturnType<typeof useUpdateTeamMutation>;\nexport type UpdateTeamMutationResult = Apollo.MutationResult<UpdateTeamMutation>;\nexport type UpdateTeamMutationOptions = Apollo.BaseMutationOptions<UpdateTeamMutation, UpdateTeamMutationVariables>;\nexport const DeleteTeamDocument = gql`\n    mutation deleteTeam($teamId: ID!) {\n  deleteTeam(input: {teamId: $teamId}) {\n    teamId\n  }\n}\n    `;\nexport type DeleteTeamMutationFn = Apollo.MutationFunction<DeleteTeamMutation, DeleteTeamMutationVariables>;\n\n/**\n * __useDeleteTeamMutation__\n *\n * To run a mutation, you first call `useDeleteTeamMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTeamMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTeamMutation, { data, loading, error }] = useDeleteTeamMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *   },\n * });\n */\nexport function useDeleteTeamMutation(baseOptions?: Apollo.MutationHookOptions<DeleteTeamMutation, DeleteTeamMutationVariables>) {\n        return Apollo.useMutation<DeleteTeamMutation, DeleteTeamMutationVariables>(DeleteTeamDocument, baseOptions);\n      }\nexport type DeleteTeamMutationHookResult = ReturnType<typeof useDeleteTeamMutation>;\nexport type DeleteTeamMutationResult = Apollo.MutationResult<DeleteTeamMutation>;\nexport type DeleteTeamMutationOptions = Apollo.BaseMutationOptions<DeleteTeamMutation, DeleteTeamMutationVariables>;\nexport const SearchUserDocument = gql`\n    query searchUser($nameOrEmail: String!) {\n  searchUser(nameOrEmail: $nameOrEmail) {\n    userId\n    userName\n    userEmail\n  }\n}\n    `;\n\n/**\n * __useSearchUserQuery__\n *\n * To run a query within a React component, call `useSearchUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useSearchUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSearchUserQuery({\n *   variables: {\n *      nameOrEmail: // value for 'nameOrEmail'\n *   },\n * });\n */\nexport function useSearchUserQuery(baseOptions: Apollo.QueryHookOptions<SearchUserQuery, SearchUserQueryVariables>) {\n        return Apollo.useQuery<SearchUserQuery, SearchUserQueryVariables>(SearchUserDocument, baseOptions);\n      }\nexport function useSearchUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SearchUserQuery, SearchUserQueryVariables>) {\n          return Apollo.useLazyQuery<SearchUserQuery, SearchUserQueryVariables>(SearchUserDocument, baseOptions);\n        }\nexport type SearchUserQueryHookResult = ReturnType<typeof useSearchUserQuery>;\nexport type SearchUserLazyQueryHookResult = ReturnType<typeof useSearchUserLazyQuery>;\nexport type SearchUserQueryResult = Apollo.QueryResult<SearchUserQuery, SearchUserQueryVariables>;\nexport const AddMemberToTeamDocument = gql`\n    mutation addMemberToTeam($teamId: ID!, $userId: ID!, $role: Role!) {\n  addMemberToTeam(input: {teamId: $teamId, userId: $userId, role: $role}) {\n    team {\n      id\n      name\n      members {\n        user {\n          id\n          name\n          email\n        }\n        userId\n        role\n      }\n      personal\n    }\n  }\n}\n    `;\nexport type AddMemberToTeamMutationFn = Apollo.MutationFunction<AddMemberToTeamMutation, AddMemberToTeamMutationVariables>;\n\n/**\n * __useAddMemberToTeamMutation__\n *\n * To run a mutation, you first call `useAddMemberToTeamMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddMemberToTeamMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addMemberToTeamMutation, { data, loading, error }] = useAddMemberToTeamMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      userId: // value for 'userId'\n *      role: // value for 'role'\n *   },\n * });\n */\nexport function useAddMemberToTeamMutation(baseOptions?: Apollo.MutationHookOptions<AddMemberToTeamMutation, AddMemberToTeamMutationVariables>) {\n        return Apollo.useMutation<AddMemberToTeamMutation, AddMemberToTeamMutationVariables>(AddMemberToTeamDocument, baseOptions);\n      }\nexport type AddMemberToTeamMutationHookResult = ReturnType<typeof useAddMemberToTeamMutation>;\nexport type AddMemberToTeamMutationResult = Apollo.MutationResult<AddMemberToTeamMutation>;\nexport type AddMemberToTeamMutationOptions = Apollo.BaseMutationOptions<AddMemberToTeamMutation, AddMemberToTeamMutationVariables>;\nexport const UpdateMemberOfTeamDocument = gql`\n    mutation updateMemberOfTeam($teamId: ID!, $userId: ID!, $role: Role!) {\n  updateMemberOfTeam(input: {teamId: $teamId, userId: $userId, role: $role}) {\n    team {\n      id\n      name\n      members {\n        user {\n          id\n          name\n          email\n        }\n        userId\n        role\n      }\n      personal\n    }\n  }\n}\n    `;\nexport type UpdateMemberOfTeamMutationFn = Apollo.MutationFunction<UpdateMemberOfTeamMutation, UpdateMemberOfTeamMutationVariables>;\n\n/**\n * __useUpdateMemberOfTeamMutation__\n *\n * To run a mutation, you first call `useUpdateMemberOfTeamMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateMemberOfTeamMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateMemberOfTeamMutation, { data, loading, error }] = useUpdateMemberOfTeamMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      userId: // value for 'userId'\n *      role: // value for 'role'\n *   },\n * });\n */\nexport function useUpdateMemberOfTeamMutation(baseOptions?: Apollo.MutationHookOptions<UpdateMemberOfTeamMutation, UpdateMemberOfTeamMutationVariables>) {\n        return Apollo.useMutation<UpdateMemberOfTeamMutation, UpdateMemberOfTeamMutationVariables>(UpdateMemberOfTeamDocument, baseOptions);\n      }\nexport type UpdateMemberOfTeamMutationHookResult = ReturnType<typeof useUpdateMemberOfTeamMutation>;\nexport type UpdateMemberOfTeamMutationResult = Apollo.MutationResult<UpdateMemberOfTeamMutation>;\nexport type UpdateMemberOfTeamMutationOptions = Apollo.BaseMutationOptions<UpdateMemberOfTeamMutation, UpdateMemberOfTeamMutationVariables>;\nexport const RemoveMemberFromTeamDocument = gql`\n    mutation removeMemberFromTeam($teamId: ID!, $userId: ID!) {\n  removeMemberFromTeam(input: {teamId: $teamId, userId: $userId}) {\n    team {\n      id\n      name\n      members {\n        user {\n          id\n          name\n          email\n        }\n        userId\n        role\n      }\n      personal\n    }\n  }\n}\n    `;\nexport type RemoveMemberFromTeamMutationFn = Apollo.MutationFunction<RemoveMemberFromTeamMutation, RemoveMemberFromTeamMutationVariables>;\n\n/**\n * __useRemoveMemberFromTeamMutation__\n *\n * To run a mutation, you first call `useRemoveMemberFromTeamMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveMemberFromTeamMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeMemberFromTeamMutation, { data, loading, error }] = useRemoveMemberFromTeamMutation({\n *   variables: {\n *      teamId: // value for 'teamId'\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useRemoveMemberFromTeamMutation(baseOptions?: Apollo.MutationHookOptions<RemoveMemberFromTeamMutation, RemoveMemberFromTeamMutationVariables>) {\n        return Apollo.useMutation<RemoveMemberFromTeamMutation, RemoveMemberFromTeamMutationVariables>(RemoveMemberFromTeamDocument, baseOptions);\n      }\nexport type RemoveMemberFromTeamMutationHookResult = ReturnType<typeof useRemoveMemberFromTeamMutation>;\nexport type RemoveMemberFromTeamMutationResult = Apollo.MutationResult<RemoveMemberFromTeamMutation>;\nexport type RemoveMemberFromTeamMutationOptions = Apollo.BaseMutationOptions<RemoveMemberFromTeamMutation, RemoveMemberFromTeamMutationVariables>;\nexport const GetSceneDocument = gql`\n    query getScene($sceneId: ID!) {\n  node(id: $sceneId, type: SCENE) {\n    id\n    ... on Scene {\n      rootLayerId\n    }\n  }\n}\n    `;\n\n/**\n * __useGetSceneQuery__\n *\n * To run a query within a React component, call `useGetSceneQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSceneQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSceneQuery({\n *   variables: {\n *      sceneId: // value for 'sceneId'\n *   },\n * });\n */\nexport function useGetSceneQuery(baseOptions: Apollo.QueryHookOptions<GetSceneQuery, GetSceneQueryVariables>) {\n        return Apollo.useQuery<GetSceneQuery, GetSceneQueryVariables>(GetSceneDocument, baseOptions);\n      }\nexport function useGetSceneLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSceneQuery, GetSceneQueryVariables>) {\n          return Apollo.useLazyQuery<GetSceneQuery, GetSceneQueryVariables>(GetSceneDocument, baseOptions);\n        }\nexport type GetSceneQueryHookResult = ReturnType<typeof useGetSceneQuery>;\nexport type GetSceneLazyQueryHookResult = ReturnType<typeof useGetSceneLazyQuery>;\nexport type GetSceneQueryResult = Apollo.QueryResult<GetSceneQuery, GetSceneQueryVariables>;\nexport const DeleteMeDocument = gql`\n    mutation deleteMe($userId: ID!) {\n  deleteMe(input: {userId: $userId}) {\n    userId\n  }\n}\n    `;\nexport type DeleteMeMutationFn = Apollo.MutationFunction<DeleteMeMutation, DeleteMeMutationVariables>;\n\n/**\n * __useDeleteMeMutation__\n *\n * To run a mutation, you first call `useDeleteMeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteMeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteMeMutation, { data, loading, error }] = useDeleteMeMutation({\n *   variables: {\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useDeleteMeMutation(baseOptions?: Apollo.MutationHookOptions<DeleteMeMutation, DeleteMeMutationVariables>) {\n        return Apollo.useMutation<DeleteMeMutation, DeleteMeMutationVariables>(DeleteMeDocument, baseOptions);\n      }\nexport type DeleteMeMutationHookResult = ReturnType<typeof useDeleteMeMutation>;\nexport type DeleteMeMutationResult = Apollo.MutationResult<DeleteMeMutation>;\nexport type DeleteMeMutationOptions = Apollo.BaseMutationOptions<DeleteMeMutation, DeleteMeMutationVariables>;\nexport const CreateTeamDocument = gql`\n    mutation createTeam($name: String!) {\n  createTeam(input: {name: $name}) {\n    team {\n      id\n      name\n    }\n  }\n}\n    `;\nexport type CreateTeamMutationFn = Apollo.MutationFunction<CreateTeamMutation, CreateTeamMutationVariables>;\n\n/**\n * __useCreateTeamMutation__\n *\n * To run a mutation, you first call `useCreateTeamMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTeamMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTeamMutation, { data, loading, error }] = useCreateTeamMutation({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useCreateTeamMutation(baseOptions?: Apollo.MutationHookOptions<CreateTeamMutation, CreateTeamMutationVariables>) {\n        return Apollo.useMutation<CreateTeamMutation, CreateTeamMutationVariables>(CreateTeamDocument, baseOptions);\n      }\nexport type CreateTeamMutationHookResult = ReturnType<typeof useCreateTeamMutation>;\nexport type CreateTeamMutationResult = Apollo.MutationResult<CreateTeamMutation>;\nexport type CreateTeamMutationOptions = Apollo.BaseMutationOptions<CreateTeamMutation, CreateTeamMutationVariables>;\nexport const TeamsDocument = gql`\n    query teams {\n  me {\n    id\n    name\n    myTeam {\n      id\n      ...Team\n    }\n    teams {\n      id\n      ...Team\n    }\n  }\n}\n    ${TeamFragmentDoc}`;\n\n/**\n * __useTeamsQuery__\n *\n * To run a query within a React component, call `useTeamsQuery` and pass it any options that fit your needs.\n * When your component renders, `useTeamsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTeamsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useTeamsQuery(baseOptions?: Apollo.QueryHookOptions<TeamsQuery, TeamsQueryVariables>) {\n        return Apollo.useQuery<TeamsQuery, TeamsQueryVariables>(TeamsDocument, baseOptions);\n      }\nexport function useTeamsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TeamsQuery, TeamsQueryVariables>) {\n          return Apollo.useLazyQuery<TeamsQuery, TeamsQueryVariables>(TeamsDocument, baseOptions);\n        }\nexport type TeamsQueryHookResult = ReturnType<typeof useTeamsQuery>;\nexport type TeamsLazyQueryHookResult = ReturnType<typeof useTeamsLazyQuery>;\nexport type TeamsQueryResult = Apollo.QueryResult<TeamsQuery, TeamsQueryVariables>;\nexport const LanguageDocument = gql`\n    query Language {\n  me {\n    id\n    lang\n  }\n}\n    `;\n\n/**\n * __useLanguageQuery__\n *\n * To run a query within a React component, call `useLanguageQuery` and pass it any options that fit your needs.\n * When your component renders, `useLanguageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLanguageQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useLanguageQuery(baseOptions?: Apollo.QueryHookOptions<LanguageQuery, LanguageQueryVariables>) {\n        return Apollo.useQuery<LanguageQuery, LanguageQueryVariables>(LanguageDocument, baseOptions);\n      }\nexport function useLanguageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LanguageQuery, LanguageQueryVariables>) {\n          return Apollo.useLazyQuery<LanguageQuery, LanguageQueryVariables>(LanguageDocument, baseOptions);\n        }\nexport type LanguageQueryHookResult = ReturnType<typeof useLanguageQuery>;\nexport type LanguageLazyQueryHookResult = ReturnType<typeof useLanguageLazyQuery>;\nexport type LanguageQueryResult = Apollo.QueryResult<LanguageQuery, LanguageQueryVariables>;\nexport const ThemeDocument = gql`\n    query Theme {\n  me {\n    id\n    theme\n  }\n}\n    `;\n\n/**\n * __useThemeQuery__\n *\n * To run a query within a React component, call `useThemeQuery` and pass it any options that fit your needs.\n * When your component renders, `useThemeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useThemeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useThemeQuery(baseOptions?: Apollo.QueryHookOptions<ThemeQuery, ThemeQueryVariables>) {\n        return Apollo.useQuery<ThemeQuery, ThemeQueryVariables>(ThemeDocument, baseOptions);\n      }\nexport function useThemeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ThemeQuery, ThemeQueryVariables>) {\n          return Apollo.useLazyQuery<ThemeQuery, ThemeQueryVariables>(ThemeDocument, baseOptions);\n        }\nexport type ThemeQueryHookResult = ReturnType<typeof useThemeQuery>;\nexport type ThemeLazyQueryHookResult = ReturnType<typeof useThemeLazyQuery>;\nexport type ThemeQueryResult = Apollo.QueryResult<ThemeQuery, ThemeQueryVariables>;","import React from \"react\";\nimport { ApolloProvider, ApolloClient, ApolloLink, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { SentryLink } from \"apollo-link-sentry\";\n\nimport { store, localSlice } from \"@reearth/state\";\nimport { reportError } from \"@reearth/sentry\";\nimport fragmentMatcher from \"./fragmentMatcher.json\";\n\nconst Provider: React.FC = ({ children }) => {\n  const endpoint = window.REEARTH_CONFIG?.api\n    ? `${window.REEARTH_CONFIG.api}/graphql`\n    : \"/api/graphql\";\n  const { getAccessTokenSilently } = useAuth0();\n\n  const authLink = setContext(async (_, { headers }) => {\n    // get the authentication token from local storage if it exists\n    const accessToken = window.REEARTH_E2E_ACCESS_TOKEN || (await getAccessTokenSilently());\n    // return the headers to the context so httpLink can read them\n    return {\n      headers: {\n        ...headers,\n        ...(accessToken ? { Authorization: `Bearer ${accessToken}` } : {}),\n      },\n    };\n  });\n\n  const uploadLink = createUploadLink({\n    uri: endpoint,\n  });\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    if (!networkError && !graphQLErrors) return;\n    const error = networkError?.message ?? graphQLErrors?.map(e => e.message).join(\", \");\n    store.dispatch(localSlice.actions.set({ error }));\n    if (error) reportError(error);\n  });\n\n  const sentryLink = new SentryLink({ uri: endpoint });\n\n  const cache = new InMemoryCache({\n    possibleTypes: fragmentMatcher.possibleTypes,\n    typePolicies: {\n      LayerGroup: {\n        fields: {\n          layers: {\n            merge: false,\n          },\n        },\n      },\n    },\n  });\n\n  const client = new ApolloClient({\n    uri: endpoint,\n    link: ApolloLink.from([errorLink, sentryLink, authLink, uploadLink]),\n    cache,\n    connectToDevTools: process.env.NODE_ENV === \"development\",\n  });\n\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n};\n\nexport default Provider;\n","import * as Sentry from \"@sentry/browser\";\n\nexport const initialize = () => {\n  const { sentryDsn, sentryEnv } = window.REEARTH_CONFIG ?? {};\n  if (sentryDsn) {\n    Sentry.init({\n      dsn: sentryDsn,\n      environment: sentryEnv,\n    });\n  }\n};\n\nexport const reportError = (error: any) => {\n  Sentry.captureException(error);\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { Camera } from \"@reearth/util/value\";\n\nexport type LocalState = {\n  error?: string;\n  sceneId?: string;\n  rootLayerId?: string;\n  selectedLayer?: string;\n  selectedWidget?: { pluginId: string; extensionId: string };\n  selectedType?: \"scene\" | \"layer\" | \"widget\";\n  selectedBlock?: string;\n  isCapturing: boolean;\n  camera?: Camera;\n  currentTeam?: {\n    id: string;\n    name: string;\n    members?: Array<any>;\n    assets?: any;\n    projects?: any;\n    personal?: boolean;\n  };\n  currentProject?: { id: string; name: string; sceneId?: string; isArchived?: boolean };\n  notification?: { type: \"error\" | \"warning\" | \"info\" | \"success\"; text: string };\n};\n\nconst localInitialState: LocalState = {\n  isCapturing: false,\n};\n\nexport const localSlice = createSlice({\n  name: \"local\",\n  initialState: localInitialState,\n  reducers: {\n    set: (state, action: PayloadAction<Partial<LocalState>>) => ({\n      ...state,\n      ...action.payload,\n    }),\n  },\n});\n\nexport const reducer = localSlice.reducer;\n\nexport type Store = ReturnType<typeof reducer>;\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport { reducer } from \"./reducer\";\n\nexport const store = configureStore({\n  reducer,\n});\n\nif (module.hot) {\n  module.hot.accept(\"./reducer\", () => {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const nextReducer = require(\"./reducer\").reducer;\n    store.replaceReducer(nextReducer);\n  });\n}\n","import React from \"react\";\nimport { Provider as ReduxProvider } from \"react-redux\";\n\nimport { store } from \"./store\";\n\nconst Provider: React.FC = ({ children }) => {\n  return <ReduxProvider store={store}>{children}</ReduxProvider>;\n};\n\nexport default Provider;\n","import { styled } from \"./styled\";\n\nconst type = {\n  base: '\"Noto Sans\", \"hiragino sans\", \"hiragino kaku gothic proN\", -apple-system, BlinkMacSystem, sans-serif',\n};\n\nconst fontSizes = {\n  xl: 28,\n  l: 20,\n  m: 16,\n  s: 14,\n  xs: 12,\n  \"2xs\": 10,\n};\n\nconst weight = {\n  normal: \"normal\",\n  bold: \"bold\",\n};\n\nexport const XLBold = styled.p`\n  font-family: ${type.base};\n  font-size: ${fontSizes.xl}px;\n  font-weight: ${weight.bold};\n`;\n\nexport const XLRegular = styled.p`\n  font-family: ${type.base};\n  font-size: ${fontSizes.xl}px;\n  font-weight: ${weight.normal};\n`;\n\nexport const LBold = styled.p`\n  font-family: ${type.base};\n  font-size: ${fontSizes.l}px;\n  font-weight: ${weight.bold};\n`;\n\nexport const LRegular = styled.p`\n  font-family: ${type.base};\n  font-size: ${fontSizes.l}px;\n  font-weight: ${weight.normal};\n`;\n\nexport const MBold = styled.p`\n  font-family: ${type.base};\n  font-size: ${fontSizes.m}px;\n  font-weight: ${weight.bold};\n`;\n\nexport const MRegular = styled.p`\n  font-family: ${type.base};\n  font-size: ${fontSizes.m}px;\n  font-weight: ${weight.normal};\n`;\n\nexport const MParagraph = styled(MRegular)`\n  line-height: 1.5;\n`;\n\nexport const SBold = styled.p`\n  font-family: ${type.base};\n  font-size: ${fontSizes.s}px;\n  font-weight: ${weight.bold};\n`;\n\nexport const SRegular = styled.p`\n  font-family: ${type.base};\n  font-size: ${fontSizes.s}px;\n  font-weight: ${weight.normal};\n`;\n\nexport const SParagraph = styled(SRegular)`\n  line-height: 1.5;\n`;\n\nexport const XSBold = styled.p`\n  font-family: ${type.base};\n  font-size: ${fontSizes.xs}px;\n  font-weight: ${weight.bold};\n`;\n\nexport const XSRegular = styled.p`\n  font-family: ${type.base};\n  font-size: ${fontSizes.xs}px;\n  font-weight: ${weight.normal};\n`;\n\nexport const XXSRegular = styled.p`\n  font-family: ${type.base};\n  font-size: ${fontSizes[\"2xs\"]}px;\n  font-weight: ${weight.normal};\n`;\n\nexport const typography = {\n  xl: {\n    bold: XLBold,\n    regular: XLRegular,\n  },\n  l: {\n    bold: LBold,\n    regular: LRegular,\n  },\n  m: {\n    bold: MBold,\n    regular: MRegular,\n    paragraph: MParagraph,\n  },\n  s: {\n    bold: SBold,\n    regular: SRegular,\n    paragraph: SParagraph,\n  },\n  xs: {\n    bold: XSBold,\n    regular: XSRegular,\n  },\n  \"2xs\": {\n    regular: XXSRegular,\n  },\n};\n\nexport type TypographySize = keyof typeof typography;\n\nexport type FontWeight = keyof typeof weight;\n\nconst fonts = {\n  typography: typography,\n  weight: weight,\n  sizes: fontSizes,\n};\n\nexport default fonts;\n","const colors = {\n  dark: {\n    bg: {\n      1: \"#070707\",\n      2: \"#171618\",\n      3: \"#232226\",\n      4: \"#2B2A2F\",\n      5: \"#3F3D45\",\n    },\n    text: {\n      strong: \"#F2F2F2\",\n      main: \"#B4B4B4\",\n      weak: \"#4A4A4A\",\n    },\n    outline: {\n      strong: \"#D7D7D7\",\n      main: \"#A0A0A0\",\n      weak: \"#4A4A4A\",\n      weakest: \"#383838\",\n    },\n    primary: {\n      strong: \"#2AADE9\",\n      main: \"#00A0E8\",\n      weak: \"#008AC8\",\n      weakest: \"#004260\",\n    },\n    secondary: {\n      main: \"#888686\",\n      weak: \"#4C4C4C\",\n      weakest: \"#3B383F\",\n    },\n    danger: {\n      main: \"#FF3C53\",\n      weak: \"#B02838\",\n      weakest: \"#841C28\",\n    },\n    functional: {\n      link: \"#3592FF\",\n      success: \"#00D1A2\",\n      attention: \"#D6C71C\",\n      error: \"#FF3C53\",\n      select: \"#3B3CD0\",\n      notice: \"#6E9CD2\",\n    },\n    other: {\n      black: \"#000000\",\n      white: \"#FFFFFF\",\n    },\n  },\n  light: {\n    bg: {\n      1: \"#8C8A8A\",\n      2: \"#B6B6B6\",\n      3: \"#D0D0D0\",\n      4: \"#E0E0E0\",\n      5: \"#FFFCFC\",\n    },\n    text: {\n      strong: \"#272727\",\n      main: \"#434343\",\n      weak: \"#727070\",\n    },\n    outline: {\n      strong: \"#0D0D0D\",\n      main: \"#727272\",\n      weak: \"#8B8B8B\",\n      weakest: \"#AAAAAA\",\n    },\n    primary: {\n      strong: \"#005F94\",\n      main: \"#007CC1\",\n      weak: \"#008AC8\",\n      weakest: \"#74A8BE\",\n    },\n    secondary: {\n      main: \"#4D4D4D\",\n      weak: \"#8E8E8E\",\n      weakest: \"#A3A3A3\",\n    },\n    danger: {\n      main: \"#FF3C53\",\n      weak: \"#B02838\",\n      weakest: \"#E0A0A7\",\n    },\n    functional: {\n      link: \"#0063D8\",\n      success: \"#00D1A2\",\n      attention: \"#E17A00\",\n      error: \"#FF3C53\",\n      select: \"#F57C4B\",\n      notice: \"#6E9CD2\",\n    },\n    other: {\n      black: \"#000000\",\n      white: \"#FFFFFF\",\n    },\n  },\n\n  general: {\n    transparent: \"transparent\",\n    transparentLight: \"rgba(0,0,0,0.4)\",\n    transparentBlack: \"rgba(0,0,0,0.7)\",\n  },\n  brand: {\n    ReearthBlue: \"#1e2086\",\n    ReearthRed: \"#df3013\",\n  },\n};\n\nexport default colors;\n","import colors from \"./colors\";\nimport { metricsSizes } from \"./metrics\";\nimport zIndexes from \"./z-index\";\n\nexport const commonTheme = {\n  zIndexes,\n  colors,\n  metrics: metricsSizes,\n  publishStatus: {\n    published: colors.dark.primary.main,\n    building: colors.dark.outline.main,\n    unpublished: colors.dark.secondary.weakest,\n  },\n};\n\nexport type Theme = {\n  colors: typeof colors;\n  metrics: typeof metricsSizes;\n  main: {\n    accent: string;\n    alert: string;\n    bg: string;\n    lighterBg: string;\n    paleBg: string;\n    deepBg: string;\n    deepestBg: string;\n    border: string;\n    highlighted: string;\n    transparentBg: string;\n    lightTransparentBg: string;\n    text: string;\n    strongText: string;\n    warning: string;\n    danger: string;\n    weak: string;\n    select: string;\n    link: string;\n    brandBlue: string;\n    brandRed: string;\n  };\n  dashboard: {\n    bg: string;\n    itemBg: string;\n    projectName: string;\n    projectDescription: string;\n    publicationStatus: string;\n    heroButtonText: string;\n    heroButtonTextHover: string;\n  };\n  buttonPrimary: {\n    bgHover: string;\n    color: string;\n    colorHover: string;\n    disabled: string;\n  };\n  buttonSecondary: {\n    bgHover: string;\n    color: string;\n    colorHover: string;\n    disabled: string;\n  };\n  buttonDanger: {\n    bgHover: string;\n    color: string;\n    colorHover: string;\n    disabled: string;\n  };\n  publishStatus: {\n    building: string;\n    published: string;\n    unpublished: string;\n  };\n  leftMenu: {\n    bg: string;\n    highlighted: string;\n    hoverBg: string;\n    icon: string;\n    text: string;\n    enabledBg: string;\n    disabledBg: string;\n  };\n  header: {\n    bg: string;\n    text: string;\n  };\n  primitiveHeader: {\n    bg: string;\n  };\n  infoBox: {\n    accent: string;\n    accent2: string;\n    alert: string;\n    bg: string;\n    deepBg: string;\n    headerBg: string;\n    mainText: string;\n    weakText: string;\n    border: string;\n  };\n  statusText: {\n    color: string;\n  };\n  text: {\n    default: string;\n    pale: string;\n  };\n  selectList: {\n    border: string;\n    bg: string;\n    container: {\n      bg: string;\n    };\n    control: {\n      bg: string;\n    };\n    input: {\n      color: string;\n    };\n    menu: {\n      bg: string;\n    };\n    option: {\n      bottomBorder: string;\n      bg: string;\n      color: string;\n      hoverBg: string;\n    };\n  };\n  projectCell: {\n    bg: string;\n    border: string;\n    shadow: string;\n    text: string;\n    divider: string;\n    title: string;\n    description: string;\n  };\n  assetCard: {\n    bg: string;\n    bgHover: string;\n    highlight: string;\n    text: string;\n    textHover: string;\n    shadow: string;\n  };\n  assetsContainer: {\n    bg: string;\n  };\n  modal: {\n    overlayBg: string;\n    bodyBg: string;\n    innerBg: string;\n  };\n  tabArea: {\n    bg: string;\n    selectedBg: string;\n    text: string;\n  };\n  slider: {\n    background: string;\n    border: string;\n    handle: string;\n    track: string;\n  };\n  properties: {\n    accent: string;\n    bg: string;\n    border: string;\n    focusBorder: string;\n    contentsText: string;\n    contentsFloatText: string;\n    deepBg: string;\n    titleText: string;\n    text: string;\n  };\n  layers: {\n    bg: string;\n    deepBg: string;\n    paleBg: string;\n    hoverBg: string;\n    smallText: string;\n    selectedLayer: string;\n    textColor: string;\n    selectedTextColor: string;\n    disableTextColor: string;\n    bottomBorder: string;\n  };\n  toggleButton: {\n    bg: string;\n    bgBorder: string;\n    toggle: string;\n    activeBg: string;\n    activeBgBorder: string;\n    activeToggle: string;\n  };\n  zIndexes: {\n    base: number;\n    form: number;\n    infoBox: number;\n    propertyFieldPopup: number;\n    descriptionBalloon: number;\n    dropDown: number;\n    fullScreenModal: number;\n    loading: number;\n    notificationBar: number;\n    splashScreen: number;\n    settingHeader: number;\n    menuForDevice: number;\n  };\n  descriptionBalloon: {\n    bg: string;\n    textColor: string;\n    shadowColor: string;\n  };\n  other: {\n    black: string;\n  };\n  pluginList: {\n    bg: string;\n  };\n  notification: {\n    errorBg: string;\n    warningBg: string;\n    infoBg: string;\n    successBg: string;\n    text: string;\n  };\n};\n","const zIndexes = {\n  base: 1,\n  form: 100,\n  infoBox: 300,\n  propertyFieldPopup: 500,\n  descriptionBalloon: 550,\n  dropDown: 600,\n  fullScreenModal: 700,\n  loading: 800,\n  notificationBar: 1000,\n  splashScreen: 700,\n  settingHeader: 300,\n  menuForDevice: 200,\n};\n\nexport default zIndexes;\n","import colors from \"./colors\";\nimport { Theme, commonTheme } from \"./theme\";\n\nconst darkTheme: Theme = {\n  ...commonTheme,\n  main: {\n    accent: colors.dark.primary.main,\n    alert: colors.dark.functional.error,\n    bg: colors.dark.bg[5],\n    lighterBg: colors.dark.bg[3],\n    paleBg: colors.dark.bg[4],\n    deepBg: colors.dark.bg[2],\n    deepestBg: colors.dark.bg[1],\n    transparentBg: colors.general.transparentBlack,\n    lightTransparentBg: colors.general.transparentLight,\n    border: colors.dark.outline.weak,\n    highlighted: colors.dark.functional.select,\n    text: colors.dark.text.main,\n    strongText: colors.dark.text.strong,\n    warning: colors.dark.functional.attention,\n    danger: colors.dark.danger.main,\n    weak: colors.dark.text.weak,\n    select: colors.dark.functional.select,\n    link: colors.dark.functional.link,\n    brandBlue: colors.brand.ReearthBlue,\n    brandRed: colors.brand.ReearthRed,\n  },\n  dashboard: {\n    bg: colors.dark.bg[2],\n    itemBg: colors.dark.bg[3],\n    projectName: colors.dark.text.strong,\n    projectDescription: colors.dark.text.strong,\n    publicationStatus: colors.dark.text.main,\n    heroButtonText: colors.dark.text.main,\n    heroButtonTextHover: colors.dark.text.strong,\n  },\n  buttonPrimary: {\n    bgHover: colors.dark.primary.main,\n    color: colors.dark.primary.main,\n    colorHover: colors.dark.text.strong,\n    disabled: colors.dark.primary.weakest,\n  },\n  buttonSecondary: {\n    bgHover: colors.dark.secondary.main,\n    color: colors.dark.secondary.main,\n    colorHover: colors.dark.other.white,\n    disabled: colors.dark.secondary.weakest,\n  },\n  buttonDanger: {\n    bgHover: colors.dark.danger.main,\n    color: colors.dark.danger.main,\n    colorHover: colors.dark.other.white,\n    disabled: colors.dark.danger.weakest,\n  },\n  infoBox: {\n    accent: colors.dark.primary.main,\n    accent2: colors.dark.functional.select,\n    alert: colors.dark.functional.error,\n    bg: colors.dark.bg[3],\n    deepBg: colors.dark.bg[2],\n    headerBg: colors.dark.bg[5],\n    mainText: colors.dark.text.main,\n    weakText: colors.dark.text.weak,\n    border: colors.dark.outline.main,\n  },\n  publishStatus: {\n    building: colors.dark.functional.error,\n    published: colors.dark.functional.success,\n    unpublished: colors.dark.outline.main,\n  },\n  leftMenu: {\n    bg: colors.dark.bg[2],\n    hoverBg: colors.dark.bg[1],\n    highlighted: colors.dark.functional.select,\n    icon: colors.dark.functional.select,\n    text: colors.dark.text.main,\n    enabledBg: colors.dark.text.main,\n    disabledBg: colors.dark.bg[5],\n  },\n  projectCell: {\n    border: colors.dark.functional.select,\n    bg: colors.dark.bg[2],\n    shadow: colors.dark.bg[1],\n    text: colors.dark.text.strong,\n    divider: colors.dark.outline.weakest,\n    title: colors.dark.text.strong,\n    description: colors.dark.text.main,\n  },\n  assetCard: {\n    bg: colors.dark.bg[4],\n    bgHover: colors.dark.bg[5],\n    highlight: colors.dark.functional.select,\n    text: colors.dark.text.main,\n    textHover: colors.dark.text.strong,\n    shadow: colors.dark.bg[1],\n  },\n  assetsContainer: {\n    bg: colors.dark.bg[4],\n  },\n  modal: {\n    overlayBg: colors.dark.bg[1],\n    bodyBg: colors.dark.bg[2],\n    innerBg: colors.dark.bg[3],\n  },\n  tabArea: {\n    bg: colors.dark.bg[1],\n    selectedBg: colors.dark.bg[2],\n    text: colors.dark.text.strong,\n  },\n  header: {\n    bg: colors.dark.bg[4],\n    text: colors.dark.text.main,\n  },\n  primitiveHeader: {\n    bg: colors.dark.bg[1],\n  },\n  statusText: {\n    color: colors.dark.text.strong,\n  },\n  text: {\n    default: colors.dark.text.main,\n    pale: colors.dark.outline.main,\n  },\n  selectList: {\n    border: colors.dark.outline.main,\n    bg: colors.dark.bg[5],\n    container: {\n      bg: colors.dark.bg[5],\n    },\n    control: {\n      bg: colors.dark.bg[5],\n    },\n    input: {\n      color: colors.dark.text.main,\n    },\n    menu: {\n      bg: colors.dark.bg[5],\n    },\n    option: {\n      bottomBorder: colors.dark.text.main,\n      hoverBg: colors.dark.bg[5],\n      bg: colors.dark.bg[4],\n      color: colors.dark.text.main,\n    },\n  },\n  slider: {\n    background: colors.dark.bg[2],\n    border: colors.dark.primary.main,\n    handle: colors.dark.primary.main,\n    track: colors.dark.primary.main,\n  },\n  properties: {\n    accent: colors.dark.primary.main,\n    bg: colors.dark.bg[3],\n    deepBg: colors.dark.bg[2],\n    border: colors.dark.outline.weak,\n    focusBorder: colors.dark.outline.main,\n    contentsFloatText: colors.dark.text.main,\n    contentsText: colors.dark.text.main,\n    titleText: colors.dark.text.strong,\n    text: colors.dark.text.weak,\n  },\n  layers: {\n    bg: colors.dark.bg[4],\n    paleBg: colors.dark.bg[5],\n    deepBg: colors.dark.bg[2],\n    hoverBg: colors.dark.bg[4],\n    smallText: colors.dark.text.main,\n    selectedLayer: colors.dark.functional.select,\n    textColor: colors.dark.text.main,\n    selectedTextColor: colors.dark.text.strong,\n    disableTextColor: colors.dark.text.weak,\n    bottomBorder: colors.dark.outline.weakest,\n  },\n  toggleButton: {\n    bg: colors.dark.bg[4],\n    bgBorder: colors.dark.outline.main,\n    toggle: colors.dark.outline.main,\n    activeBg: colors.dark.bg[4],\n    activeBgBorder: colors.dark.outline.main,\n    activeToggle: colors.dark.outline.main,\n  },\n  descriptionBalloon: {\n    bg: colors.dark.bg[5],\n    textColor: colors.dark.text.main,\n    shadowColor: colors.dark.bg[1],\n  },\n  other: {\n    black: colors.dark.other.black,\n  },\n  pluginList: {\n    bg: colors.dark.bg[3],\n  },\n  notification: {\n    errorBg: colors.dark.functional.error,\n    warningBg: colors.dark.functional.attention,\n    infoBg: colors.dark.functional.notice,\n    successBg: colors.dark.functional.success,\n    text: colors.dark.text.strong,\n  },\n};\n\nexport default darkTheme;\n","import colors from \"./colors\";\nimport { Theme, commonTheme } from \"./theme\";\n\nconst lightheme: Theme = {\n  ...commonTheme,\n  main: {\n    accent: colors.light.primary.main,\n    alert: colors.light.functional.error,\n    bg: colors.light.bg[5],\n    lighterBg: colors.light.bg[3],\n    paleBg: colors.light.bg[4],\n    deepBg: colors.light.bg[2],\n    deepestBg: colors.light.bg[1],\n    transparentBg: colors.general.transparentBlack,\n    lightTransparentBg: colors.general.transparentLight,\n    border: colors.light.outline.weak,\n    highlighted: colors.light.functional.select,\n    text: colors.light.text.main,\n    strongText: colors.light.text.strong,\n    warning: colors.light.functional.attention,\n    danger: colors.light.danger.main,\n    weak: colors.light.text.weak,\n    select: colors.light.functional.select,\n    link: colors.light.functional.link,\n    brandBlue: colors.brand.ReearthBlue,\n    brandRed: colors.brand.ReearthRed,\n  },\n  dashboard: {\n    bg: colors.light.bg[2],\n    itemBg: colors.light.bg[3],\n    projectName: colors.dark.text.strong,\n    projectDescription: colors.dark.text.strong,\n    publicationStatus: colors.dark.text.main,\n    heroButtonText: colors.dark.text.main,\n    heroButtonTextHover: colors.dark.text.strong,\n  },\n  buttonPrimary: {\n    bgHover: colors.light.primary.main,\n    color: colors.light.primary.main,\n    colorHover: colors.light.other.white,\n    disabled: colors.light.primary.weakest,\n  },\n  buttonSecondary: {\n    bgHover: colors.light.secondary.main,\n    color: colors.light.secondary.main,\n    colorHover: colors.light.other.white,\n    disabled: colors.light.secondary.weakest,\n  },\n  buttonDanger: {\n    bgHover: colors.light.danger.main,\n    color: colors.light.danger.main,\n    colorHover: colors.light.other.white,\n    disabled: colors.light.danger.weakest,\n  },\n  infoBox: {\n    accent: colors.light.primary.main,\n    accent2: colors.light.functional.select,\n    alert: colors.light.functional.error,\n    bg: colors.light.bg[3],\n    deepBg: colors.light.bg[2],\n    headerBg: colors.light.bg[5],\n    mainText: colors.light.text.main,\n    weakText: colors.light.text.weak,\n    border: colors.light.outline.strong,\n  },\n  publishStatus: {\n    building: colors.light.functional.error,\n    published: colors.light.functional.success,\n    unpublished: colors.light.outline.main,\n  },\n  leftMenu: {\n    bg: colors.light.bg[2],\n    hoverBg: colors.light.bg[1],\n    highlighted: colors.light.functional.select,\n    icon: colors.light.functional.select,\n    text: colors.light.text.main,\n    enabledBg: colors.light.text.main,\n    disabledBg: colors.light.bg[5],\n  },\n  projectCell: {\n    border: colors.dark.functional.select,\n    bg: colors.dark.bg[2],\n    shadow: colors.dark.bg[1],\n    text: colors.dark.text.strong,\n    divider: colors.light.outline.weakest,\n    title: colors.dark.text.strong,\n    description: colors.dark.text.strong,\n  },\n  assetCard: {\n    bg: colors.light.bg[4],\n    bgHover: colors.light.bg[5],\n    highlight: colors.light.functional.select,\n    text: colors.light.text.main,\n    textHover: colors.light.text.strong,\n    shadow: colors.light.bg[1],\n  },\n  assetsContainer: {\n    bg: colors.light.bg[4],\n  },\n  modal: {\n    overlayBg: colors.light.bg[1],\n    bodyBg: colors.light.bg[2],\n    innerBg: colors.light.bg[3],\n  },\n  tabArea: {\n    bg: colors.light.bg[1],\n    selectedBg: colors.light.bg[2],\n    text: colors.light.text.strong,\n  },\n  header: {\n    bg: colors.light.bg[4],\n    text: colors.light.text.main,\n  },\n  primitiveHeader: {\n    bg: colors.light.bg[1],\n  },\n  statusText: {\n    color: colors.light.text.strong,\n  },\n  text: {\n    default: colors.light.text.main,\n    pale: colors.light.outline.main,\n  },\n  selectList: {\n    border: colors.light.outline.main,\n    bg: colors.light.bg[5],\n    container: {\n      bg: colors.light.bg[5],\n    },\n    control: {\n      bg: colors.light.bg[5],\n    },\n    input: {\n      color: colors.light.text.main,\n    },\n    menu: {\n      bg: colors.light.bg[5],\n    },\n    option: {\n      bottomBorder: colors.light.text.main,\n      hoverBg: colors.light.bg[5],\n      bg: colors.light.bg[4],\n      color: colors.light.text.main,\n    },\n  },\n  slider: {\n    background: colors.light.bg[2],\n    border: colors.light.primary.main,\n    handle: colors.light.primary.main,\n    track: colors.light.primary.main,\n  },\n  properties: {\n    accent: colors.light.primary.main,\n    bg: colors.light.bg[3],\n    deepBg: colors.light.bg[2],\n    border: colors.light.outline.weak,\n    focusBorder: colors.light.outline.main,\n    contentsFloatText: colors.light.text.main,\n    contentsText: colors.light.text.main,\n    titleText: colors.light.text.strong,\n    text: colors.light.text.weak,\n  },\n  layers: {\n    bg: colors.light.bg[4],\n    paleBg: colors.light.bg[5],\n    deepBg: colors.light.bg[2],\n    hoverBg: colors.light.bg[4],\n    smallText: colors.light.text.main,\n    selectedLayer: colors.light.functional.select,\n    textColor: colors.light.text.main,\n    selectedTextColor: colors.light.text.strong,\n    disableTextColor: colors.light.text.weak,\n    bottomBorder: colors.light.outline.weakest,\n  },\n  toggleButton: {\n    bg: colors.light.bg[4],\n    bgBorder: colors.light.outline.main,\n    toggle: colors.light.outline.main,\n    activeBg: colors.light.bg[4],\n    activeBgBorder: colors.light.outline.main,\n    activeToggle: colors.light.outline.main,\n  },\n  descriptionBalloon: {\n    bg: colors.light.bg[5],\n    textColor: colors.light.text.main,\n    shadowColor: colors.light.bg[1],\n  },\n  other: {\n    black: colors.light.other.black,\n  },\n  pluginList: {\n    bg: colors.light.bg[3],\n  },\n  notification: {\n    errorBg: colors.light.functional.error,\n    warningBg: colors.light.functional.attention,\n    infoBg: colors.light.functional.notice,\n    successBg: colors.light.functional.success,\n    text: colors.dark.text.strong,\n  },\n};\n\nexport default lightheme;\n","import React from \"react\";\nimport { Global } from \"@emotion/react\";\nimport \"github-markdown-css/github-markdown.css\";\n\nimport { css } from \"@reearth/theme\";\n\nexport const styles = css`\n  html,\n  body,\n  #root {\n    overflow: hidden;\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    font-family: Noto Sans, hiragino sans, hiragino kaku gothic proN, -apple-system, BlinkMacSystem,\n      sans-serif;\n    background-color: #000;\n    color: #fff;\n  }\n\n  h1,\n  p,\n  input {\n    margin: 0;\n    padding: 0;\n    font-family: Noto Sans, hiragino sans, hiragino kaku gothic proN, -apple-system, BlinkMacSystem,\n      sans-serif;\n  }\n\n  button {\n    margin: 0;\n    padding: 0;\n    background: transparent;\n    outline: none;\n    border: none;\n    cursor: pointer;\n  }\n\n  textarea {\n    font-family: Noto Sans, hiragino sans, hiragino kaku gothic proN, -apple-system, BlinkMacSystem,\n      sans-serif;\n  }\n\n  /* Split Pane Styles */\n  .Resizer {\n    background: #000;\n    opacity: 0.2;\n    z-index: 1;\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    -moz-background-clip: padding;\n    -webkit-background-clip: padding;\n    background-clip: padding-box;\n  }\n\n  .Resizer:hover {\n    -webkit-transition: all 2s ease;\n    transition: all 2s ease;\n  }\n\n  .Resizer.horizontal {\n    height: 11px;\n    margin: -5px 0;\n    border-top: 5px solid rgba(255, 255, 255, 0);\n    border-bottom: 5px solid rgba(255, 255, 255, 0);\n    cursor: row-resize;\n    width: 100%;\n  }\n\n  .Resizer.horizontal:hover {\n    border-top: 5px solid rgba(0, 0, 0, 0.5);\n    border-bottom: 5px solid rgba(0, 0, 0, 0.5);\n  }\n\n  .Resizer.vertical {\n    width: 11px;\n    margin: 0 -5px;\n    border-left: 5px solid rgba(255, 255, 255, 0);\n    border-right: 5px solid rgba(255, 255, 255, 0);\n    cursor: col-resize;\n  }\n\n  .Resizer.vertical:hover {\n    border-left: 5px solid rgba(0, 0, 0, 0.5);\n    border-right: 5px solid rgba(0, 0, 0, 0.5);\n  }\n\n  .Resizer.disabled {\n    cursor: not-allowed;\n  }\n\n  .Resizer.disabled:hover {\n    border-color: transparent;\n  }\n`;\n\nconst GlobalStyle: React.FC = () => <Global styles={styles} />;\nexport default GlobalStyle;\n","import React from \"react\";\nimport { ThemeProvider } from \"@emotion/react\";\n\nimport darkTheme from \"./darkTheme\";\nimport lightTheme from \"./lightheme\";\nimport GlobalStyle from \"./globalstyle\";\nimport { Theme, useThemeQuery } from \"@reearth/gql\";\nimport { useAuth } from \"@reearth/auth\";\n\nconst Provider: React.FC = ({ children }) => {\n  const { isAuthenticated } = useAuth();\n  const { data } = useThemeQuery({ skip: !isAuthenticated });\n\n  const theme = data?.me?.theme === (\"light\" as Theme) ? lightTheme : darkTheme;\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      {children}\n    </ThemeProvider>\n  );\n};\n\nexport default Provider;\n","import React from \"react\";\nimport { ThemeProvider } from \"@emotion/react\";\n\nimport theme from \"./darkTheme\";\nimport GlobalStyle from \"./globalstyle\";\n\nconst Provider: React.FC = ({ children }) => {\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      {children}\n    </ThemeProvider>\n  );\n};\n\nexport default Provider;\n","const metrics = {\n  headerHeight: 49,\n  primitiveHeaderHeight: 44,\n  MenuIconBarWidth: 40,\n  layerIconAndArrowWidth: 46,\n  layerSidePadding: 10,\n  propertyMenuMinWidth: 264,\n  propertyMenuMaxWidth: 346,\n  propertyTextInputHeight: 30,\n  propertyTextareaHeight: 190,\n  dashboardWorkspaceMinWidth: 364,\n  dashboardQuickMinWidth: 270,\n  dashboardContentHeight: 250,\n  dashboardContentSmallHeight: 156,\n  //   marginHorizontal: 10,\n  //   marginVertical: 10,\n  //   section: 25,\n  //   baseMargin: 10,\n  //   doubleBaseMargin: 20,\n  //   smallMargin: 5,\n  //   doubleSection: 50,\n  //   horizontalLineHeight: 1,\n  //   buttonRadius: 4,\n  //   icons: {\n  //     tiny: 15,\n  //     small: 20,\n  //     medium: 30,\n  //     large: 45,\n  //     xl: 50,\n  //   },\n  //   images: {\n  //     small: 20,\n  //     medium: 40,\n  //     large: 60,\n  //     logo: 200,\n  //   },\n};\n\nexport const metricsSizes = {\n  \"2xs\": 2,\n  xs: 4,\n  s: 8,\n  m: 12,\n  l: 16,\n  xl: 20,\n  \"2xl\": 24,\n  \"3xl\": 28,\n  \"4xl\": 32,\n} as const;\n\nexport type MetricsSizes = keyof typeof metricsSizes;\n\nexport default metrics;\n","import { useContext } from \"react\";\nimport { ThemeContext } from \"@emotion/react\";\nimport rawStyled from \"@emotion/styled\";\nexport { css, keyframes } from \"@emotion/react\";\n\nimport { Theme } from \"./theme\";\n\nexport const styled = rawStyled;\nexport const useTheme = () => useContext(ThemeContext) as Theme;\n","export default function deepFind<T>(\n  array: T[] | undefined,\n  cb: (value: T, index: number, array: T[]) => boolean,\n  children?: (value: T, index: number, array: T[]) => T[] | undefined,\n): [T | undefined, number[]] {\n  if (!array?.length) return [undefined, []];\n\n  const find = (a: T[]): [T | undefined, number[]] => {\n    const i = a.findIndex(cb);\n    if (i >= 0) return [a[i], [i]];\n    if (!children) return [undefined, []];\n\n    for (let i = 0; i < a.length; i++) {\n      const c = children(a[i], i, a);\n      if (!c?.length) continue;\n\n      const res = find(c);\n      if (typeof res[0] !== \"undefined\") {\n        return [res[0], [i, ...res[1]]];\n      }\n    }\n\n    return [undefined, []];\n  };\n\n  return find(array);\n}\n","import { OmitFunc, OmitFunc2, OmitFunc3 } from \"@reearth/types\";\nimport { mapValues } from \"lodash-es\";\nimport { useMemo } from \"react\";\nimport { isPresent } from \"./util\";\n\nexport const useBind = <P extends { [key in string]?: (a: A, ...args: any) => any }, A>(\n  p: P,\n  a?: A,\n): { [K in keyof P]?: OmitFunc<NonNullable<P[K]>> } => {\n  return mapValues(p, f => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks, react-hooks/exhaustive-deps\n    return useMemo(() => (f && isPresent(a) ? (...args) => f(a, ...args) : undefined), [f, a]);\n  });\n};\n\nexport const useBind2 = <P extends { [key in string]?: (a: A, b: B, ...args: any) => any }, A, B>(\n  p: P,\n  a?: A,\n  b?: B,\n): { [K in keyof P]?: OmitFunc2<NonNullable<P[K]>> } => {\n  return mapValues(p, f => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useMemo(\n      () => (f && isPresent(a) && isPresent(b) ? (...args) => f(a, b, ...args) : undefined),\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [f, a, b],\n    );\n  });\n};\n\nexport const useBind3 = <\n  P extends { [key in string]?: (a: A, b: B, ...args: any) => any },\n  A,\n  B,\n  C\n>(\n  p: P,\n  a?: A,\n  b?: B,\n  c?: C,\n): { [K in keyof P]?: OmitFunc3<NonNullable<P[K]>> } => {\n  return mapValues(p, f => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useMemo(\n      () =>\n        f && isPresent(a) && isPresent(b) && isPresent(c)\n          ? (...args) => f(a, b, c, ...args)\n          : undefined,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [f, a, b, c],\n    );\n  });\n};\n","import { useMemo } from \"react\";\nimport { useDrag as useDndDrag, DragSourceHookSpec } from \"react-dnd\";\nimport { Item, ItemType, Dropper } from \"./types\";\n\nexport const useDrag = <T extends ItemType = ItemType>(\n  item: Item<T> | undefined,\n  disabled?: boolean,\n  end?: (item: Item<T>, dropper?: Dropper) => void,\n) => {\n  const options = useMemo<\n    DragSourceHookSpec<\n      Item<T> | Item<\"null\">,\n      unknown,\n      {\n        isDragging: boolean;\n      }\n    >\n  >(\n    () => ({\n      item: item ?? { type: \"null\" },\n      canDrag: !!item && !disabled,\n      end: (item, monitor) => end?.(item as Item<T>, monitor.getDropResult()),\n      collect: monitor => ({\n        isDragging: monitor.isDragging(),\n      }),\n    }),\n    [disabled, end, item],\n  );\n\n  const [{ isDragging }, ref, previewRef] = useDndDrag(options);\n  return { ref, isDragging, previewRef };\n};\n","import { useMemo, useCallback } from \"react\";\nimport { useDrop as useDndDrop, DropTargetHookSpec, DropTargetMonitor } from \"react-dnd\";\nimport { Item, ItemType, Dropper } from \"./types\";\n\nexport interface Context {\n  position?: { x: number; y: number; w: number; h: number };\n  canDrop: boolean;\n}\n\nexport interface DropOptions<T extends ItemType = ItemType, E extends HTMLElement = HTMLElement> {\n  accept: T | T[];\n  canDrop?: (item: Item<T>) => boolean;\n  hover?: (item: Item<T>, context: Context) => void;\n  drop?: (item: Item<T>, context: Context) => Dropper | undefined;\n  shallow?: boolean;\n  disabled?: boolean;\n  wrapperRef?: React.RefObject<E>;\n}\n\nexport const useDrop = <T extends ItemType = ItemType, E extends HTMLElement = HTMLElement>({\n  accept,\n  hover,\n  canDrop,\n  drop,\n  shallow,\n  disabled,\n  wrapperRef,\n}: DropOptions<T, E>) => {\n  const calcContext = useCallback(\n    (monitor: DropTargetMonitor) => {\n      const offset = wrapperRef?.current ? monitor.getClientOffset() : undefined;\n      const wrapperOffset = wrapperRef?.current\n        ? wrapperRef.current.getBoundingClientRect()\n        : undefined;\n      const position =\n        offset && wrapperOffset\n          ? {\n              x: offset.x - wrapperOffset.left,\n              y: offset.y - wrapperOffset.top,\n              w: wrapperOffset.width,\n              h: wrapperOffset.height,\n            }\n          : undefined;\n      return {\n        canDrop: monitor.canDrop(),\n        position,\n      };\n    },\n    [wrapperRef],\n  );\n\n  const options = useMemo<\n    DropTargetHookSpec<\n      Item<T>,\n      Dropper,\n      {\n        isOver: boolean;\n        canDrop: boolean;\n        isDroppable: boolean;\n        isNotDroppable: boolean;\n      }\n    >\n  >(\n    () => ({\n      accept,\n      hover: hover\n        ? (item: Item<T>, monitor) => {\n            hover(item, calcContext(monitor));\n          }\n        : undefined,\n      canDrop: (item: Item<T>, monitor) =>\n        !disabled && (!shallow || monitor.isOver({ shallow: true })) && (!canDrop || canDrop(item)),\n      drop: drop ? (item: Item<T>, monitor) => drop(item, calcContext(monitor)) : undefined,\n      collect(monitor) {\n        const isOver = monitor.isOver({ shallow });\n        const canDrop = monitor.canDrop();\n        return {\n          isOver,\n          canDrop,\n          isDroppable: isOver && canDrop,\n          isNotDroppable: isOver && !canDrop,\n        };\n      },\n    }),\n    [accept, calcContext, canDrop, disabled, drop, hover, shallow],\n  );\n\n  const [{ isOver, canDrop: canDrop2, isDroppable, isNotDroppable }, ref] = useDndDrop(options);\n  return { ref, isOver, canDrop: canDrop2, isDroppable, isNotDroppable };\n};\n","import React from \"react\";\nimport { DndProvider, useDragLayer } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\n\nimport { ItemType } from \"./types\";\n\nexport * from \"./types\";\nexport * from \"./drag\";\nexport * from \"./drop\";\n\nexport const Provider: React.FC = ({ children }) => (\n  <DndProvider backend={HTML5Backend}>{children}</DndProvider>\n);\n\nexport const useDraggingItemType = () =>\n  useDragLayer(monitor => (monitor.isDragging() ? (monitor.getItemType() as ItemType) : null));\n","import { Args, Args3, Args2 } from \"@reearth/types\";\n\nexport const isPresent = <V>(v: V | undefined): v is V => typeof v !== \"undefined\";\n\nexport const partitionObject = <T, K extends keyof T>(\n  obj: T,\n  keys: K[],\n): [Pick<T, K>, Omit<T, K>] => {\n  const a: any = {};\n  const b: any = {};\n  for (const k of Object.keys(obj)) {\n    if (keys.includes(k as K)) {\n      a[k] = obj[k as K];\n    } else {\n      b[k] = obj[k as K];\n    }\n  }\n  return [a, b];\n};\n\nexport const bindFunc = <F extends (a: A, ...args: any[]) => any, A>(f?: F, a?: A) =>\n  isPresent(f) && isPresent(a) ? (...args: Args<F>) => f(a, ...args) : undefined;\n\nexport const bindFunc2 = <F extends (a: A, b: B, ...args: any[]) => any, A, B>(\n  f?: F,\n  a?: A,\n  b?: B,\n) =>\n  isPresent(f) && isPresent(a) && isPresent(b)\n    ? (...args: Args2<F>) => f(a, b, ...args)\n    : undefined;\n\nexport const bindFunc3 = <F extends (a: A, b: B, c: C, ...args: any[]) => any, A, B, C>(\n  f?: F,\n  a?: A,\n  b?: B,\n  c?: C,\n) =>\n  isPresent(f) && isPresent(a) && isPresent(b) && isPresent(c)\n    ? (...args: Args3<F>) => f(a, b, c, ...args)\n    : undefined;\n","import { Color } from \"cesium\";\nimport { ValueType as GQLValueType } from \"@reearth/gql\";\nimport { css } from \"@reearth/theme\";\n\nexport type LatLng = {\n  lat: number;\n  lng: number;\n};\n\nexport type LatLngHeight = {\n  lat: number;\n  lng: number;\n  height: number;\n};\n\nexport type Camera = {\n  lat: number;\n  lng: number;\n  height: number;\n  heading: number;\n  pitch: number;\n  roll: number;\n  fov: number;\n};\n\nexport type Typography = {\n  fontFamily?: string;\n  fontSize?: number;\n  fontWeight?: number;\n  color?: string;\n  textAlign?: \"left\" | \"center\" | \"right\" | \"justify\" | \"justify_all\";\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n};\n\nexport type Coordinates = LatLngHeight[];\n\nexport type Polygon = LatLngHeight[][];\n\nexport type Rect = {\n  west: number;\n  south: number;\n  east: number;\n  north: number;\n};\n\n// Don't forget adding a new field to valueTypeMapper also!\nexport type ValueTypes = {\n  string: string;\n  number: number;\n  bool: boolean;\n  latlng: LatLng;\n  latlngheight: LatLngHeight;\n  url: string;\n  camera: Camera;\n  typography: Typography;\n  coordinates: Coordinates;\n  polygon: Polygon;\n  rect: Rect;\n  ref: string;\n  tiletype: string;\n};\n\nconst valueTypeMapper: Partial<Record<GQLValueType, ValueType>> = {\n  [GQLValueType.Bool]: \"bool\",\n  [GQLValueType.Number]: \"number\",\n  [GQLValueType.String]: \"string\",\n  [GQLValueType.Url]: \"url\",\n  [GQLValueType.Latlng]: \"latlng\",\n  [GQLValueType.Latlngheight]: \"latlngheight\",\n  [GQLValueType.Camera]: \"camera\",\n  [GQLValueType.Typography]: \"typography\",\n  [GQLValueType.Coordinates]: \"coordinates\",\n  [GQLValueType.Polygon]: \"polygon\",\n  [GQLValueType.Rect]: \"rect\",\n  [GQLValueType.Ref]: \"ref\",\n};\n\nexport type ValueType = keyof ValueTypes;\n\nexport const valueFromGQL = (val: any, type: GQLValueType) => {\n  const t = valueTypeFromGQL(type);\n  if (typeof val === \"undefined\" || val === null || !t) {\n    return undefined;\n  }\n  const ok = typeof val !== \"undefined\" && val !== null;\n  let newVal = val;\n  if (t === \"camera\" && val && typeof val === \"object\" && \"altitude\" in val) {\n    newVal = {\n      ...val,\n      height: val.altitude,\n    };\n  }\n  if (\n    t === \"typography\" &&\n    val &&\n    typeof val === \"object\" &&\n    \"textAlign\" in val &&\n    typeof val.textAlign === \"string\"\n  ) {\n    newVal = {\n      ...val,\n      textAlign: val.textAlign.toLowerCase(),\n    };\n  }\n  return { type: t, value: newVal, ok };\n};\n\nexport function valueToGQL<T extends ValueType>(val: ValueTypes[T] | null, type: T): any {\n  if (type === \"camera\" && val && typeof val === \"object\" && \"height\" in val) {\n    return {\n      ...(val as any),\n      altitude: (val as any).height,\n    };\n  }\n  return val;\n}\n\nexport const valueTypeFromGQL = (t: GQLValueType): ValueType | undefined => {\n  return valueTypeMapper[t];\n};\n\nexport const valueTypeToGQL = (t: ValueType): GQLValueType | undefined => {\n  return (Object.keys(valueTypeMapper) as GQLValueType[]).find(k => valueTypeMapper[k] === t);\n};\n\nexport const toGQLSimpleValue = (v: unknown): string | number | boolean | undefined => {\n  return typeof v === \"string\" || typeof v === \"number\" || typeof v === \"boolean\" ? v : undefined;\n};\n\nexport const getCSSFontFamily = (f?: string) => {\n  return !f\n    ? undefined\n    : f === \"YuGothic\"\n    ? `\"游ゴシック体\", YuGothic, \"游ゴシック Medium\", \"Yu Gothic Medium\", \"游ゴシック\", \"Yu Gothic\"`\n    : f;\n};\n\nexport const toCSSFont = (t?: Typography, d?: Typography) => {\n  const ff = getCSSFontFamily(t?.fontFamily ?? d?.fontFamily)\n    ?.replace(\"'\", '\"')\n    .trim();\n  return `${t?.italic ?? d?.italic ? \"italic \" : \"\"}${\n    t?.bold ?? d?.bold ? \"bold \" : (t?.fontWeight ?? d?.fontWeight ?? \"\") + \" \" ?? \"\"\n  }${t?.fontSize ?? d?.fontSize ?? 16}px ${\n    ff ? (ff.includes(`\"`) ? ff : `\"${ff}\"`) : \"sans-serif\"\n  }`;\n};\n\nexport const toTextDecoration = (t?: Typography) => (t?.underline ? \"underline\" : \"none\");\n\nexport const toColor = (c?: string) => {\n  if (!c || typeof c !== \"string\") return undefined;\n\n  // support alpha\n  const m = c.match(/^#([A-Fa-f0-9]{6})([A-Fa-f0-9]{2})$|^#([A-Fa-f0-9]{3})([A-Fa-f0-9])$/);\n  if (!m) return Color.fromCssColorString(c);\n\n  const alpha = parseInt(m[4] ? m[4].repeat(2) : m[2], 16) / 255;\n  return Color.fromCssColorString(`#${m[1] ?? m[3]}`).withAlpha(alpha);\n};\n\nexport const typographyStyles = (t?: Typography) => {\n  if (!t) return null;\n  return css`\n    font: ${toCSSFont(t)};\n    text-decoration: ${toTextDecoration(t)};\n    color: ${t.color ?? null};\n    text-align: ${t.textAlign ?? null};\n  `;\n};\n\nexport const zeroValues: { [key in ValueType]?: ValueTypes[ValueType] } = {\n  bool: false,\n  string: \"\",\n};\n","module.exports = {\"src.components.atoms.ConfirmationModal.3528672691\":\"Cancel\",\"src.components.atoms.ConfirmationModal.3645414921\":\"Delete\",\"src.components.atoms.DropHolder.2563828564\":\"Drop here\",\"src.components.atoms.NotFound.4184561493\":\"Notfound\",\"src.components.atoms.PublicationStatus.739063002\":\"Unpublished\",\"src.components.atoms.PublicationStatus.3640454975\":\"Published\",\"src.components.atoms.Select.395965578\":\"not set\",\"src.components.molecules.Common.AssetModal.164261147\":\"Select Image\",\"src.components.molecules.Common.AssetModal.388451950\":\"Select Resource\",\"src.components.molecules.Common.AssetModal.854575786\":\"Assets Library\",\"src.components.molecules.Common.AssetModal.1115770113\":\"Save\",\"src.components.molecules.Common.AssetModal.2229699602\":\"Resource URL\",\"src.components.molecules.Common.AssetModal.2599388697\":\"Use URL\",\"src.components.molecules.Common.AssetModal.3304605076\":\"Add video URL\",\"src.components.molecules.Common.AssetModal.3528672691\":\"Cancel\",\"src.components.molecules.Common.AssetModal.4035057905\":\"Image URL\",\"src.components.molecules.Common.AssetModal.4070151372\":\"Select\",\"src.components.molecules.Common.AssetModal.AssetContainer.1982191895\":\"File size\",\"src.components.molecules.Common.AssetModal.AssetContainer.2409515782\":\"You haven't uploaded any file assets yet. Click the upload button above and select a compatible file from your computer.\",\"src.components.molecules.Common.AssetModal.AssetContainer.2854191800\":\"Time\",\"src.components.molecules.Common.AssetModal.AssetContainer.2906553848\":\"Alphabetical\",\"src.components.molecules.Common.AssetModal.AssetContainer.3057159632\":\"Upload image\",\"src.components.molecules.Common.AssetModal.AssetContainer.3645414921\":\"Delete\",\"src.components.molecules.Common.AssetModal.AssetContainer.3715622784\":\"You haven't uploaded any image assets yet. Click the upload button above and select an image from your computer.\",\"src.components.molecules.Common.AssetModal.AssetContainer.3863945965\":\"Upload file\",\"src.components.molecules.Common.AssetModal.AssetDeleteModal.2868137144\":\"Please make sure no selected assets are in use. This cannot be undone.\",\"src.components.molecules.Common.AssetModal.AssetDeleteModal.3528672691\":\"Cancel\",\"src.components.molecules.Common.AssetModal.AssetDeleteModal.3645414921\":\"Delete\",\"src.components.molecules.Common.AssetModal.AssetDeleteModal.3911655130\":\"You are about to delete one or more assets from the current workspace.\",\"src.components.molecules.Common.Header.248888005\":\"Account Settings\",\"src.components.molecules.Common.Header.2355459246\":\"Logout\",\"src.components.molecules.Common.ProjectCreationModal.1215917108\":\"Project Name\",\"src.components.molecules.Common.ProjectCreationModal.2202304674\":\"Select thumbnail image\",\"src.components.molecules.Common.ProjectCreationModal.2794683164\":\"Create New Project\",\"src.components.molecules.Common.ProjectCreationModal.3374163063\":\"Description\",\"src.components.molecules.Common.ProjectCreationModal.3528672691\":\"Cancel\",\"src.components.molecules.Common.ProjectCreationModal.4120989039\":\"Create\",\"src.components.molecules.Common.ProjectMenu.1936593459\":\"Top page\",\"src.components.molecules.Common.ProjectMenu.2222696742\":\"Help\",\"src.components.molecules.Common.ProjectMenu.2661706411\":\"Datasets\",\"src.components.molecules.Common.ProjectMenu.3029638665\":\"Project settings\",\"src.components.molecules.Common.ProjectMenu.3873048483\":\"Manage projects\",\"src.components.molecules.Common.TeamMenu.763237856\":\"Switch Workspace\",\"src.components.molecules.Common.TeamMenu.3828443189\":\"New Workspace\",\"src.components.molecules.Common.TeamMenu.4157106658\":\"Manage Workspaces\",\"src.components.molecules.Common.WorkspaceCreationModal.840520006\":\"Create New Workspace\",\"src.components.molecules.Common.WorkspaceCreationModal.2523193532\":\"Workspace Name\",\"src.components.molecules.Common.WorkspaceCreationModal.3528672691\":\"Cancel\",\"src.components.molecules.Common.WorkspaceCreationModal.4120989039\":\"Create\",\"src.components.molecules.Common.plugin.builtin.blocks.463005216\":\"Double click here to write.\",\"src.components.molecules.Dashboard.499824730\":\"You have no projects in your workspace. Click the button above in the Quick Start to create a project now!\",\"src.components.molecules.Dashboard.1068381306\":\"User guide\",\"src.components.molecules.Dashboard.2148917173\":\"'s workspace\",\"src.components.molecules.Dashboard.3428478975\":\"New workspace\",\"src.components.molecules.Dashboard.3662865152\":\"New project\",\"src.components.molecules.Dashboard.4173541988\":\"Quick Start\",\"src.components.molecules.EarthEditor.DatasetPane.293739158\":\"Add Dataset\",\"src.components.molecules.EarthEditor.DatasetPane.2446409280\":\"No Dataset is here\",\"src.components.molecules.EarthEditor.DatasetPane.3786358103\":\"Other Source\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.142299937\":\"Google Drive\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.293739158\":\"Add Dataset\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.489401013\":\"sending...\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.2280307158\":\"Sorry, that service is unavailable at this time.\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.2842500457\":\"Add dataset\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.3162171995\":\"Upload from your device\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.3528672691\":\"Cancel\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.3980428931\":\"Upload CSV file\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.4064435443\":\"Supports CSV, JSON, GIS files\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.Gdrive.734499794\":\"Connect with Google Drive\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.Gdrive.1359825936\":\"Re:Earth supports uploading Google Sheets and CSV files.\",\"src.components.molecules.EarthEditor.Earth.FovSlider.3017293479\":\"Narrow\",\"src.components.molecules.EarthEditor.Earth.FovSlider.3291465140\":\"Angle\",\"src.components.molecules.EarthEditor.Earth.FovSlider.3723856417\":\"Wide\",\"src.components.molecules.EarthEditor.ExportPane.3590336714\":\"Export\",\"src.components.molecules.EarthEditor.ExportPane.3977973714\":\"Export type\",\"src.components.molecules.EarthEditor.Header.1458938618\":\"Update\",\"src.components.molecules.EarthEditor.Header.1547167026\":\"Publish\",\"src.components.molecules.EarthEditor.Header.2237014112\":\"Unpublish\",\"src.components.molecules.EarthEditor.Header.3637715635\":\"Preview\",\"src.components.molecules.EarthEditor.InfoBox.InfoBox.3037025019\":\"Move mouse here and click \\\"+\\\" to add content\",\"src.components.molecules.EarthEditor.LayerMultipleSelectionModal.1115770113\":\"Save\",\"src.components.molecules.EarthEditor.LayerMultipleSelectionModal.2221959784\":\"Selectable Layers\",\"src.components.molecules.EarthEditor.LayerMultipleSelectionModal.2703758654\":\"Remove\",\"src.components.molecules.EarthEditor.LayerMultipleSelectionModal.3096288057\":\"Stories\",\"src.components.molecules.EarthEditor.LayerMultipleSelectionModal.3099331554\":\"Add\",\"src.components.molecules.EarthEditor.LayerMultipleSelectionModal.3528672691\":\"Cancel\",\"src.components.molecules.EarthEditor.LayerMultipleSelectionModal.4258523167\":\"Layer selection\",\"src.components.molecules.EarthEditor.LayerSelectionModal.1115770113\":\"Save\",\"src.components.molecules.EarthEditor.LayerSelectionModal.3528672691\":\"Cancel\",\"src.components.molecules.EarthEditor.LayerSelectionModal.4258523167\":\"Layer selection\",\"src.components.molecules.EarthEditor.LayerTreeViewItem.LayerActions.219790765\":\"Create new folder.\",\"src.components.molecules.EarthEditor.LayerTreeViewItem.LayerActions.649072858\":\"Delete selected layer.\",\"src.components.molecules.EarthEditor.LayerTreeViewItem.LayerActions.3062135486\":\"Add Layer.\",\"src.components.molecules.EarthEditor.OutlinePane.1538011248\":\"Scene\",\"src.components.molecules.EarthEditor.OutlinePane.1835798571\":\"Layers\",\"src.components.molecules.EarthEditor.OutlinePane.2793623359\":\"Widgets\",\"src.components.molecules.EarthEditor.PropertyPane.3453457092\":\"Create Infobox\",\"src.components.molecules.EarthEditor.PropertyPane.3833270271\":\"Dataset\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.129313613\":\"Position Set\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.323753263\":\"Pose Set\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.1096873652\":\"Not Set\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.1843776221\":\"Roll\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.1956102114\":\"Edit Position\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.2095247710\":\"Longtitude\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.2222144661\":\"Latitude\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.2299790601\":\"Pitch\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.2468683988\":\"Heading\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.2671930823\":\"Check Pose\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.3067266584\":\"Altitude\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.3528672691\":\"Cancel\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.3553425520\":\"Jump\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.3821373974\":\"Edit Pose\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.4211710217\":\"Capture\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.ColorField.1115770113\":\"Save\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.ColorField.1533357798\":\"Not set\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.ColorField.3528672691\":\"Cancel\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.LocationField.2222144661\":\"Latitude\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.LocationField.3067266584\":\"Altitude\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.LocationField.4252415638\":\"Longitude\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.NonEditableField.1777212703\":\"This field is linked to {datasetField}.\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.NonEditableField.3724530840\":\"This field is not editable currently.\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.PropertyTitle.PropertyLinkPanel.70866805\":\"Link to dataset\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.PropertyTitle.PropertyLinkPanel.579507252\":\"Parent.\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.PropertyTitle.PropertyLinkPanel.773082751\":\"Clear this field\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.PropertyTitle.PropertyLinkPanel.910188724\":\"No selectable items\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.PropertyTitle.PropertyLinkPanel.1518809512\":\"From\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.PropertyTitle.PropertyLinkPanel.1592005573\":\"Overridden\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.PropertyTitle.PropertyLinkPanel.3068746276\":\"Reset this field\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.PropertyTitle.PropertyLinkPanel.3457675054\":\"No linked data\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.PropertyTitle.PropertyLinkPanel.3889579101\":\"Linkable data\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.TypographyField.FontFamilyField.3834040466\":\"Font family\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.TypographyField.FontSizeField.3704724012\":\"Font size\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.URLField.1533357798\":\"Not set\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyItem.367293545\":\"You are deleting the infobox and all its contents. Are you sure you want to do that?\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyItem.660592555\":\"OK\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyItem.2719744159\":\"template\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyItem.3528672691\":\"Cancel\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyItem.3645414921\":\"Delete\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyItem.3682158234\":\"Basic\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyItem.3908299371\":\"Template\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyList.179601186\":\"List\",\"src.components.molecules.EarthEditor.PropertyPane.WidgetToggleSwitch.2224658704\":\"Enable\",\"src.components.molecules.EarthEditor.PublicationModal.383867403\":\"Copy\",\"src.components.molecules.EarthEditor.PublicationModal.562103780\":\"**Warning**: This includes websites where this project is embedded.\",\"src.components.molecules.EarthEditor.PublicationModal.660270439\":\"Your project has been published!\",\"src.components.molecules.EarthEditor.PublicationModal.951834708\":\"Your published project will be updated. This means all current changes will overwrite the current published project.\",\"src.components.molecules.EarthEditor.PublicationModal.1267684353\":\"Publish your project\",\"src.components.molecules.EarthEditor.PublicationModal.1458938618\":\"Update\",\"src.components.molecules.EarthEditor.PublicationModal.1545651299\":\"Your project will be unpublished.\",\"src.components.molecules.EarthEditor.PublicationModal.1547167026\":\"Publish\",\"src.components.molecules.EarthEditor.PublicationModal.1848511752\":\"Public URL\",\"src.components.molecules.EarthEditor.PublicationModal.2051262815\":\"Search engine indexing\",\"src.components.molecules.EarthEditor.PublicationModal.2324218928\":\"Close\",\"src.components.molecules.EarthEditor.PublicationModal.2837536782\":\"* Please use this code if you want to embed your project into a webpage\",\"src.components.molecules.EarthEditor.PublicationModal.3017637822\":\"* Anyone can see your project with this URL\",\"src.components.molecules.EarthEditor.PublicationModal.3185451863\":\"Congratulations!\",\"src.components.molecules.EarthEditor.PublicationModal.3528672691\":\"Cancel\",\"src.components.molecules.EarthEditor.PublicationModal.3575955052\":\"Your project will be published. This means anybody with the below URL will be able to view this project.\",\"src.components.molecules.EarthEditor.PublicationModal.3577703060\":\"Ok\",\"src.components.molecules.EarthEditor.PublicationModal.3640052215\":\"Continue\",\"src.components.molecules.EarthEditor.PublicationModal.3701940701\":\"more options\",\"src.components.molecules.EarthEditor.PublicationModal.3733220817\":\"This means that anybody with the URL will become unable to view this project.\",\"src.components.molecules.EarthEditor.PublicationModal.3869801582\":\"Embed Code\",\"src.components.molecules.EarthEditor.PublicationModal.4062044511\":\"Update your project\",\"src.components.molecules.Settings.Account.AccountSection.819371392\":\"Light theme\",\"src.components.molecules.Settings.Account.AccountSection.1049124733\":\"Service language\",\"src.components.molecules.Settings.Account.AccountSection.1658146436\":\"Color theme\",\"src.components.molecules.Settings.Account.AccountSection.1766832403\":\"Email address\",\"src.components.molecules.Settings.Account.AccountSection.1840107345\":\"Dark theme\",\"src.components.molecules.Settings.Account.AccountSection.2237029987\":\"Password\",\"src.components.molecules.Settings.Account.AccountSection.3198092477\":\"Account\",\"src.components.molecules.Settings.Account.AccountSection.3923994153\":\"Light theme is still in beta. Some UI may still not be supported (ie. public projects will not use light theme).\",\"src.components.molecules.Settings.Account.PasswordModal.539787951\":\"Set your password now\",\"src.components.molecules.Settings.Account.PasswordModal.740918511\":\"New password (for confirmation)\",\"src.components.molecules.Settings.Account.PasswordModal.1000887516\":\"In order to protect your account, make sure your password:\",\"src.components.molecules.Settings.Account.PasswordModal.1068339636\":\"Change your password now\",\"src.components.molecules.Settings.Account.PasswordModal.1515529938\":\"Is Longer than 8 characters\",\"src.components.molecules.Settings.Account.PasswordModal.2039038750\":\"New password\",\"src.components.molecules.Settings.Account.PasswordModal.2521568990\":\"Change Password\",\"src.components.molecules.Settings.Account.PasswordModal.3546326308\":\"Use lowercase and uppercase letters\",\"src.components.molecules.Settings.Account.PasswordModal.3850603475\":\"Old password\",\"src.components.molecules.Settings.Account.PasswordModal.4270021428\":\"At least 2 different numbers\",\"src.components.molecules.Settings.Account.ProfileSection.636461959\":\"Name\",\"src.components.molecules.Settings.Account.ProfileSection.1534468327\":\"Profile\",\"src.components.molecules.Settings.Account.ProfileSection.2131015997\":\"Profile picture\",\"src.components.molecules.Settings.Navigation.165162143\":\"Assets\",\"src.components.molecules.Settings.Navigation.541301752\":\"Workspace List\",\"src.components.molecules.Settings.Navigation.2057458630\":\"Plugins\",\"src.components.molecules.Settings.Navigation.3135366329\":\"Public\",\"src.components.molecules.Settings.Navigation.3198092477\":\"Account\",\"src.components.molecules.Settings.Navigation.3336263640\":\"Project List\",\"src.components.molecules.Settings.Navigation.3833270271\":\"Dataset\",\"src.components.molecules.Settings.Project.ArchivedMessage.1250737101\":\"Most project settings are hidden when the project is archived. Please unarchive the project to view and edit these settings.\",\"src.components.molecules.Settings.Project.ArchivedMessage.1354606874\":\"Notice\",\"src.components.molecules.Settings.Project.BasicAuthSection.256145410\":\"Enable basic authorization\",\"src.components.molecules.Settings.Project.BasicAuthSection.2237029987\":\"Password\",\"src.components.molecules.Settings.Project.BasicAuthSection.2663586870\":\"Username\",\"src.components.molecules.Settings.Project.BasicAuthSection.3076470241\":\"Basic Authorization\",\"src.components.molecules.Settings.Project.ChangeSiteNameModal.551846905\":\"You are about to change the site name for your project. Only alphanumeric characters and hyphens are allows.\",\"src.components.molecules.Settings.Project.ChangeSiteNameModal.1115770113\":\"Save\",\"src.components.molecules.Settings.Project.ChangeSiteNameModal.2397004844\":\"Change site name\",\"src.components.molecules.Settings.Project.ChangeSiteNameModal.3528672691\":\"Cancel\",\"src.components.molecules.Settings.Project.DangerSection.16496977\":\"Archiving your project will put it into a state where you cannot edit it or it's settings.\",\"src.components.molecules.Settings.Project.DangerSection.181468144\":\"This action cannot be undone.\",\"src.components.molecules.Settings.Project.DangerSection.325391901\":\"Please type your project name to continue.\",\"src.components.molecules.Settings.Project.DangerSection.636677879\":\"Danger Zone\",\"src.components.molecules.Settings.Project.DangerSection.703292905\":\"Archive this project\",\"src.components.molecules.Settings.Project.DangerSection.1432074936\":\"I am sure I want to unarchive this project.\",\"src.components.molecules.Settings.Project.DangerSection.1692420285\":\"This will permanently delete the project. If the project was published, this also means websites and domains referencing the project will not be able to access it anymore.\",\"src.components.molecules.Settings.Project.DangerSection.2368081840\":\"Unarchive this project\",\"src.components.molecules.Settings.Project.DangerSection.2747023189\":\"This will bring this repository back to a state it can be editted and worked on by you and your team.\",\"src.components.molecules.Settings.Project.DangerSection.2901501812\":\"Unarchive project\",\"src.components.molecules.Settings.Project.DangerSection.3084110538\":\"I am sure I want to delete this project.\",\"src.components.molecules.Settings.Project.DangerSection.3221869035\":\"I am sure I want to archive this project.\",\"src.components.molecules.Settings.Project.DangerSection.3314090612\":\"Archive project\",\"src.components.molecules.Settings.Project.DangerSection.3536297264\":\"Once you delete a project, there is no going back. Please be sure.\",\"src.components.molecules.Settings.Project.DangerSection.3557712431\":\"Delete project\",\"src.components.molecules.Settings.Project.DangerSection.3912825707\":\"Once archived, you can unarchive the repository at any time.\",\"src.components.molecules.Settings.Project.DangerSection.4078297214\":\"Mark this project as archived and read-only\",\"src.components.molecules.Settings.Project.DangerSection.4235968010\":\"Unarchive this project to become editable again.\",\"src.components.molecules.Settings.Project.DangerSection.4258544441\":\"Delete this project\",\"src.components.molecules.Settings.Project.Dataset.DatasetItem.2065124393\":\"Delete this dataset\",\"src.components.molecules.Settings.Project.Dataset.DatasetItem.3112669357\":\"Are you sure you want to delete it?\",\"src.components.molecules.Settings.Project.Dataset.DatasetItem.3528672691\":\"Cancel\",\"src.components.molecules.Settings.Project.Dataset.DatasetItem.3645414921\":\"Delete\",\"src.components.molecules.Settings.Project.Dataset.DatasetSection.293739158\":\"Add Dataset\",\"src.components.molecules.Settings.Project.Dataset.DatasetSection.3833270271\":\"Dataset\",\"src.components.molecules.Settings.Project.Plugin.PluginAccordion.PluginAccordionItem.31593394\":\"Uninstall\",\"src.components.molecules.Settings.Project.Plugin.PluginAccordion.PluginAccordionItem.730907263\":\"Installed\",\"src.components.molecules.Settings.Project.Plugin.PluginAccordion.PluginAccordionItem.2073226243\":\"please check it before uninstalling.\",\"src.components.molecules.Settings.Project.Plugin.PluginAccordion.PluginAccordionItem.2892316131\":\"You are uninstalling selected plugin. The datas which are used by this plugin may also be deleted .\",\"src.components.molecules.Settings.Project.Plugin.PluginAccordion.PluginAccordionItem.3480550112\":\"Install\",\"src.components.molecules.Settings.Project.Plugin.PluginSection.PluginInstall.1113831405\":\"Installed plugins\",\"src.components.molecules.Settings.Project.Plugin.PluginSection.PluginInstall.1361263844\":\"Public GitHub repository\",\"src.components.molecules.Settings.Project.Plugin.PluginSection.PluginInstall.3129492077\":\"Zip file from PC\",\"src.components.molecules.Settings.Project.Plugin.PluginSection.PluginInstall.PublicRepo.470394436\":\"Import GitHub repository\",\"src.components.molecules.Settings.Project.Plugin.PluginSection.PluginInstall.PublicRepo.3528672691\":\"Cancel\",\"src.components.molecules.Settings.Project.Plugin.PluginSection.PluginInstall.PublicRepo.3640052215\":\"Continue\",\"src.components.molecules.Settings.Project.Plugin.PluginSection.PluginInstall.PublicRepo.4215513768\":\"Repository url:\",\"src.components.molecules.Settings.Project.Plugin.PluginSection.PluginList.1933254449\":\"Advanced options\",\"src.components.molecules.Settings.Project.ProfileSection.636461959\":\"Name\",\"src.components.molecules.Settings.Project.ProfileSection.1513791786\":\"Project Info\",\"src.components.molecules.Settings.Project.ProfileSection.2015762758\":\"Thumbnail\",\"src.components.molecules.Settings.Project.ProfileSection.3374163063\":\"Description\",\"src.components.molecules.Settings.Project.PublicSection.1124600214\":\"Title\",\"src.components.molecules.Settings.Project.PublicSection.2015762758\":\"Thumbnail\",\"src.components.molecules.Settings.Project.PublicSection.2966836163\":\"(These fields will be used for OGP as well as metadata for the public project)\",\"src.components.molecules.Settings.Project.PublicSection.3374163063\":\"Description\",\"src.components.molecules.Settings.Project.PublicSection.3825437586\":\"Public Info\",\"src.components.molecules.Settings.Project.PublishSection.653686109\":\"Once your project is published from the editor page the URL details will be shown here.\",\"src.components.molecules.Settings.Project.PublishSection.784802132\":\"Site settings\",\"src.components.molecules.Settings.Project.PublishSection.3352828776\":\"Access your project, copy or edit the URL below.\",\"src.components.molecules.Settings.Project.PublishSection.3572249962\":\"Site name\",\"src.components.molecules.Settings.Project.StatusSection.2025719264\":\"This project is published with search engine indexing disabled.\",\"src.components.molecules.Settings.Project.StatusSection.3306960224\":\"This project is not published.\",\"src.components.molecules.Settings.Project.StatusSection.4019421471\":\"This project is published with search engine indexing enabled.\",\"src.components.molecules.Settings.ProjectList.ProjectCell.3038786653\":\"No Title Project\",\"src.components.molecules.Settings.ProjectList.ProjectCell.4204406466\":\"No Description...\",\"src.components.molecules.Settings.ProjectList.ProjectList.899189507\":\"Current Projects\",\"src.components.molecules.Settings.ProjectList.ProjectList.1355637676\":\"Archived Projects\",\"src.components.molecules.Settings.ProjectList.ProjectList.4146466746\":\"New Project\",\"src.components.molecules.Settings.SettingsHeader.893550186\":\"(Your personal workspace)\",\"src.components.molecules.Settings.Workspace.AddMemberModal.2509478264\":\"Add a team member\",\"src.components.molecules.Settings.Workspace.AddMemberModal.2914740708\":\"Input an email address or a user name\",\"src.components.molecules.Settings.Workspace.AddMemberModal.3099331554\":\"Add\",\"src.components.molecules.Settings.Workspace.AddMemberModal.3528672691\":\"Cancel\",\"src.components.molecules.Settings.Workspace.DangerSection.181468144\":\"This action cannot be undone.\",\"src.components.molecules.Settings.Workspace.DangerSection.636677879\":\"Danger Zone\",\"src.components.molecules.Settings.Workspace.DangerSection.904076184\":\"Once you delete a workspace, there is no going back. Please be certain.\",\"src.components.molecules.Settings.Workspace.DangerSection.2478692658\":\"Delete this workspace\",\"src.components.molecules.Settings.Workspace.DangerSection.3240562240\":\"Delete workspace\",\"src.components.molecules.Settings.Workspace.DangerSection.3321682164\":\"This will permanently delete the workspace and all related projects, assets and datasets for all team members.\",\"src.components.molecules.Settings.Workspace.DangerSection.3399326760\":\"I am sure I want to delete this workspace.\",\"src.components.molecules.Settings.Workspace.DangerSection.4086722238\":\"Please type your workspace name to continue.\",\"src.components.molecules.Settings.Workspace.MemberListItem.1068157859\":\"Writer\",\"src.components.molecules.Settings.Workspace.MemberListItem.1954432048\":\"Reader\",\"src.components.molecules.Settings.Workspace.MemberListItem.3470351671\":\"Owner\",\"src.components.molecules.Settings.Workspace.MembersSection.721495104\":\"New member\",\"src.components.molecules.Settings.Workspace.MembersSection.2734377620\":\"Members\",\"src.components.molecules.Settings.Workspace.ProfileSection.2999985900\":\"Workspace name\",\"src.components.molecules.Settings.WorkspaceList.WorkspaceCell.808766300\":\"No Title Workspace\",\"src.components.molecules.Settings.WorkspaceList.WorkspaceCell.974692228\":\"This is your personal workspace, your projects and resource will be managed in this workspace.\",\"src.components.molecules.Settings.WorkspaceList.WorkspaceCell.3230245813\":\"Members:\",\"src.components.molecules.Settings.WorkspaceList.WorkspaceList.3435539653\":\"All workspaces\",\"src.components.molecules.Settings.WorkspaceList.WorkspaceList.3828443189\":\"New Workspace\",\"src.components.molecules.TopPage.1405865627\":\"Sign in\",\"src.components.organisms.EarthEditor.LeftMenu.3127270027\":\"Outline\",\"src.components.organisms.EarthEditor.LeftMenu.3833270271\":\"Dataset\",\"src.components.organisms.EarthEditor.OutlinePane.24000205\":\"Folder\",\"src.components.organisms.EarthEditor.RightMenu.422058490\":\"Layer\",\"src.components.organisms.EarthEditor.RightMenu.1538011248\":\"Scene\",\"src.components.organisms.EarthEditor.RightMenu.1676374721\":\"Widget\",\"src.components.organisms.EarthEditor.RightMenu.1884622259\":\"Infobox\",\"src.components.organisms.EarthEditor.RightMenu.3590336714\":\"Export\",\"src.components.organisms.Settings.Account.3198092477\":\"Account\",\"src.components.organisms.Settings.Project.Dataset.3833270271\":\"Dataset\",\"src.components.organisms.Settings.Project.Plugin.2057458630\":\"Plugins\",\"src.components.organisms.Settings.Project.Public.3135366329\":\"Public\",\"src.components.organisms.Settings.ProjectList.3336263640\":\"Project List\",\"src.components.organisms.Settings.Workspace.Asset.165162143\":\"Assets\",\"src.components.organisms.Settings.WorkspaceList.541301752\":\"Workspace List\",\"src.components.pages.TopPage.802859307\":\"Sign in error\"}","module.exports = {\"src.components.atoms.ConfirmationModal.3528672691\":\"キャンセル\",\"src.components.atoms.ConfirmationModal.3645414921\":\"削除\",\"src.components.atoms.DropHolder.2563828564\":\"ここにドロップ\",\"src.components.atoms.NotFound.4184561493\":\"ページが見つかりません\",\"src.components.atoms.PublicationStatus.739063002\":\"非公開\",\"src.components.atoms.PublicationStatus.3640454975\":\"一般公開\",\"src.components.atoms.Select.395965578\":\"未設定\",\"src.components.molecules.Common.AssetModal.164261147\":\"画像を選択\",\"src.components.molecules.Common.AssetModal.388451950\":\"リソースを選択\",\"src.components.molecules.Common.AssetModal.854575786\":\"アセット\",\"src.components.molecules.Common.AssetModal.1115770113\":\"保存\",\"src.components.molecules.Common.AssetModal.2229699602\":\"リソースURL\",\"src.components.molecules.Common.AssetModal.2599388697\":\"URL\",\"src.components.molecules.Common.AssetModal.3304605076\":\"映像URLを追加\",\"src.components.molecules.Common.AssetModal.3528672691\":\"キャンセル\",\"src.components.molecules.Common.AssetModal.4035057905\":\"画像URL\",\"src.components.molecules.Common.AssetModal.4070151372\":\"選択\",\"src.components.molecules.Common.AssetModal.AssetContainer.1982191895\":\"サイズ順\",\"src.components.molecules.Common.AssetModal.AssetContainer.2409515782\":\"まだアセットがアップロードされていません。アップロードボタンをクリックしてファイルをアップロードしてください。\",\"src.components.molecules.Common.AssetModal.AssetContainer.2854191800\":\"作成日時順\",\"src.components.molecules.Common.AssetModal.AssetContainer.2906553848\":\"名前順\",\"src.components.molecules.Common.AssetModal.AssetContainer.3057159632\":\"画像アップロード\",\"src.components.molecules.Common.AssetModal.AssetContainer.3645414921\":\"削除\",\"src.components.molecules.Common.AssetModal.AssetContainer.3715622784\":\"まだ画像がアップロードされていません。アップロードボタンをクリックして画像をアップロードしてください。\",\"src.components.molecules.Common.AssetModal.AssetContainer.3863945965\":\"ファイルアップロード\",\"src.components.molecules.Common.AssetModal.AssetDeleteModal.2868137144\":\"選択されたアセットが使用されていないことを確認してください。この操作は取り消せません。\",\"src.components.molecules.Common.AssetModal.AssetDeleteModal.3528672691\":\"キャンセル\",\"src.components.molecules.Common.AssetModal.AssetDeleteModal.3645414921\":\"削除\",\"src.components.molecules.Common.AssetModal.AssetDeleteModal.3911655130\":\"1つまたは複数のアセットを削除しようとしています。\",\"src.components.molecules.Common.Header.248888005\":\"アカウント設定\",\"src.components.molecules.Common.Header.2355459246\":\"ログアウト\",\"src.components.molecules.Common.ProjectCreationModal.1215917108\":\"プロジェクト名\",\"src.components.molecules.Common.ProjectCreationModal.2202304674\":\"サムネイル画像を選択\",\"src.components.molecules.Common.ProjectCreationModal.2794683164\":\"新規プロジェクト作成\",\"src.components.molecules.Common.ProjectCreationModal.3374163063\":\"プロジェクト概要\",\"src.components.molecules.Common.ProjectCreationModal.3528672691\":\"キャンセル\",\"src.components.molecules.Common.ProjectCreationModal.4120989039\":\"作成\",\"src.components.molecules.Common.ProjectMenu.1936593459\":\"トップ\",\"src.components.molecules.Common.ProjectMenu.2222696742\":\"ヘルプ\",\"src.components.molecules.Common.ProjectMenu.2661706411\":\"データセット\",\"src.components.molecules.Common.ProjectMenu.3029638665\":\"プロジェクト設定\",\"src.components.molecules.Common.ProjectMenu.3873048483\":\"プロジェクト管理\",\"src.components.molecules.Common.TeamMenu.763237856\":\"ワークスペース切り替え\",\"src.components.molecules.Common.TeamMenu.3828443189\":\"新規ワークスペース\",\"src.components.molecules.Common.TeamMenu.4157106658\":\"ワークスペースを管理\",\"src.components.molecules.Common.WorkspaceCreationModal.840520006\":\"新規ワークスペース作成\",\"src.components.molecules.Common.WorkspaceCreationModal.2523193532\":\"ワークスペース名\",\"src.components.molecules.Common.WorkspaceCreationModal.3528672691\":\"キャンセル\",\"src.components.molecules.Common.WorkspaceCreationModal.4120989039\":\"作成\",\"src.components.molecules.Common.plugin.builtin.blocks.463005216\":\"ダブルクリックして入力\",\"src.components.molecules.Dashboard.499824730\":\"ワークスペースにプロジェクトがありません。クイックスタート内の「新規プロジェクト作成」ボタンをクリックして、プロジェクトを作成してください。\",\"src.components.molecules.Dashboard.1068381306\":\"ユーザーガイド\",\"src.components.molecules.Dashboard.2148917173\":\"のワークスペース\",\"src.components.molecules.Dashboard.3428478975\":\"新規ワークスペース作成\",\"src.components.molecules.Dashboard.3662865152\":\"新規プロジェクト作成\",\"src.components.molecules.Dashboard.4173541988\":\"クイックスタート\",\"src.components.molecules.EarthEditor.DatasetPane.293739158\":\"データセットを追加\",\"src.components.molecules.EarthEditor.DatasetPane.2446409280\":\"データセットは存在しません\",\"src.components.molecules.EarthEditor.DatasetPane.3786358103\":\"その他\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.142299937\":\"グーグルドライブ\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.293739158\":\"データセットを追加\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.489401013\":\"送信\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.2280307158\":\"そのサービスはまだ利用できません。\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.2842500457\":\"データセットを追加\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.3162171995\":\"アップロード\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.3528672691\":\"キャンセル\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.3980428931\":\"CSVファイルをアップロード\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.4064435443\":\"CSV, JSON, GISのファイルに対応\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.Gdrive.734499794\":\"グーグルドライブと連携\",\"src.components.molecules.EarthEditor.DatasetPane.DatasetModal.Gdrive.1359825936\":\"Re:Earthは、GoogleスプレッドシートやCSVファイルに対応しています。\",\"src.components.molecules.EarthEditor.Earth.FovSlider.3017293479\":\"狭い\",\"src.components.molecules.EarthEditor.Earth.FovSlider.3291465140\":\"角度\",\"src.components.molecules.EarthEditor.Earth.FovSlider.3723856417\":\"広い\",\"src.components.molecules.EarthEditor.ExportPane.3590336714\":\"エクスポート\",\"src.components.molecules.EarthEditor.ExportPane.3977973714\":\"ファイル形式\",\"src.components.molecules.EarthEditor.Header.1458938618\":\"更新する\",\"src.components.molecules.EarthEditor.Header.1547167026\":\"公開\",\"src.components.molecules.EarthEditor.Header.2237014112\":\"非公開にする\",\"src.components.molecules.EarthEditor.Header.3637715635\":\"プレビュー\",\"src.components.molecules.EarthEditor.InfoBox.InfoBox.3037025019\":\"+をクリックしてコンテンツを追加\",\"src.components.molecules.EarthEditor.LayerMultipleSelectionModal.1115770113\":\"保存\",\"src.components.molecules.EarthEditor.LayerMultipleSelectionModal.2221959784\":\"選択可能なレイヤー\",\"src.components.molecules.EarthEditor.LayerMultipleSelectionModal.2703758654\":\"削除\",\"src.components.molecules.EarthEditor.LayerMultipleSelectionModal.3096288057\":\"ストーリー\",\"src.components.molecules.EarthEditor.LayerMultipleSelectionModal.3099331554\":\"追加\",\"src.components.molecules.EarthEditor.LayerMultipleSelectionModal.3528672691\":\"キャンセル\",\"src.components.molecules.EarthEditor.LayerMultipleSelectionModal.4258523167\":\"レイヤーを選択\",\"src.components.molecules.EarthEditor.LayerSelectionModal.1115770113\":\"保存\",\"src.components.molecules.EarthEditor.LayerSelectionModal.3528672691\":\"キャンセル\",\"src.components.molecules.EarthEditor.LayerSelectionModal.4258523167\":\"レイヤー選択\",\"src.components.molecules.EarthEditor.LayerTreeViewItem.LayerActions.219790765\":\"新規フォルダ作成\",\"src.components.molecules.EarthEditor.LayerTreeViewItem.LayerActions.649072858\":\"選択中のレイヤーを削除\",\"src.components.molecules.EarthEditor.LayerTreeViewItem.LayerActions.3062135486\":\"レイヤーを追加\",\"src.components.molecules.EarthEditor.OutlinePane.1538011248\":\"シーン\",\"src.components.molecules.EarthEditor.OutlinePane.1835798571\":\"レイヤー\",\"src.components.molecules.EarthEditor.OutlinePane.2793623359\":\"ウィジェット\",\"src.components.molecules.EarthEditor.PropertyPane.3453457092\":\"インフォボックス作成\",\"src.components.molecules.EarthEditor.PropertyPane.3833270271\":\"データセット\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.129313613\":\"設定済み\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.323753263\":\"設定済み\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.1096873652\":\"未設定\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.1843776221\":\"ロール\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.1956102114\":\"編集\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.2095247710\":\"経度\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.2222144661\":\"緯度\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.2299790601\":\"ピッチ\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.2468683988\":\"ヘッド\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.2671930823\":\"確認\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.3067266584\":\"高度\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.3528672691\":\"キャンセル\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.3553425520\":\"ジャンプ\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.3821373974\":\"編集\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.CameraField.4211710217\":\"キャプチャ\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.ColorField.1115770113\":\"保存\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.ColorField.1533357798\":\"未設定\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.ColorField.3528672691\":\"キャンセル\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.LocationField.2222144661\":\"緯度\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.LocationField.3067266584\":\"高度\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.LocationField.4252415638\":\"経度\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.NonEditableField.1777212703\":\"この値は{datasetField}にリンクされています\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.NonEditableField.3724530840\":\"この値は現在変更できません\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.PropertyTitle.PropertyLinkPanel.70866805\":\"データセットからリンクする\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.PropertyTitle.PropertyLinkPanel.579507252\":\"\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.PropertyTitle.PropertyLinkPanel.773082751\":\"設定をリセット\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.PropertyTitle.PropertyLinkPanel.910188724\":\"選択可能なアイテムがありません\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.PropertyTitle.PropertyLinkPanel.1518809512\":\"\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.PropertyTitle.PropertyLinkPanel.1592005573\":\"設定を上書き\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.PropertyTitle.PropertyLinkPanel.3068746276\":\"設定をリセット\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.PropertyTitle.PropertyLinkPanel.3457675054\":\"未リンク\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.PropertyTitle.PropertyLinkPanel.3889579101\":\"リンク先\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.TypographyField.FontFamilyField.3834040466\":\"フォント\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.TypographyField.FontSizeField.3704724012\":\"サイズ\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyField.URLField.1533357798\":\"未設定\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyItem.367293545\":\"インフォボックスとその内容を削除します。本当によろしいですか？\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyItem.660592555\":\"確認\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyItem.2719744159\":\"テンプレート\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyItem.3528672691\":\"キャンセル\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyItem.3645414921\":\"削除\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyItem.3682158234\":\"インフォボックス\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyItem.3908299371\":\"テンプレート\",\"src.components.molecules.EarthEditor.PropertyPane.PropertyList.179601186\":\"リスト\",\"src.components.molecules.EarthEditor.PropertyPane.WidgetToggleSwitch.2224658704\":\"有効化\",\"src.components.molecules.EarthEditor.PublicationModal.383867403\":\"コピー\",\"src.components.molecules.EarthEditor.PublicationModal.562103780\":\"**Warning**このプロジェクトを埋め込んだWebサイトへ影響を及ぼす可能性があります。\",\"src.components.molecules.EarthEditor.PublicationModal.660270439\":\"プロジェクトが公開されました。\",\"src.components.molecules.EarthEditor.PublicationModal.951834708\":\"公開されたプロジェクトが更新されます。公開されているプロジェクトへ現在の内容が上書きされます。\",\"src.components.molecules.EarthEditor.PublicationModal.1267684353\":\"プロジェクトを公開する\",\"src.components.molecules.EarthEditor.PublicationModal.1458938618\":\"更新する\",\"src.components.molecules.EarthEditor.PublicationModal.1545651299\":\"プロジェクトを非公開にする\",\"src.components.molecules.EarthEditor.PublicationModal.1547167026\":\"公開\",\"src.components.molecules.EarthEditor.PublicationModal.1848511752\":\"公開URL\",\"src.components.molecules.EarthEditor.PublicationModal.2051262815\":\"検索可能にする\",\"src.components.molecules.EarthEditor.PublicationModal.2324218928\":\"閉じる\",\"src.components.molecules.EarthEditor.PublicationModal.2837536782\":\"その他のWebサイトでこのプロジェクトを埋め込む場合は、こちらのコードを使用してください\",\"src.components.molecules.EarthEditor.PublicationModal.3017637822\":\"*　このリンクを知っているインターネット上の全員が閲覧できます\",\"src.components.molecules.EarthEditor.PublicationModal.3185451863\":\"\",\"src.components.molecules.EarthEditor.PublicationModal.3528672691\":\"キャンセル\",\"src.components.molecules.EarthEditor.PublicationModal.3575955052\":\"プロジェクトが公開されます。URLを知っている人は誰でもこのプロジェクトを見ることができるようになります。\",\"src.components.molecules.EarthEditor.PublicationModal.3577703060\":\"\",\"src.components.molecules.EarthEditor.PublicationModal.3640052215\":\"非公開にする\",\"src.components.molecules.EarthEditor.PublicationModal.3701940701\":\"その他の設定\",\"src.components.molecules.EarthEditor.PublicationModal.3733220817\":\"URLを知っている人もこのプロジェクトを見ることができなくなります。\",\"src.components.molecules.EarthEditor.PublicationModal.3869801582\":\"埋め込み用コード\",\"src.components.molecules.EarthEditor.PublicationModal.4062044511\":\"プロジェクトを更新する\",\"src.components.molecules.Settings.Account.AccountSection.819371392\":\"ライトテーマ\",\"src.components.molecules.Settings.Account.AccountSection.1049124733\":\"言語設定\",\"src.components.molecules.Settings.Account.AccountSection.1658146436\":\"カラーテーマ\",\"src.components.molecules.Settings.Account.AccountSection.1766832403\":\"Emailアドレス\",\"src.components.molecules.Settings.Account.AccountSection.1840107345\":\"ダークテーマ\",\"src.components.molecules.Settings.Account.AccountSection.2237029987\":\"パスワード\",\"src.components.molecules.Settings.Account.AccountSection.3198092477\":\"アカウント\",\"src.components.molecules.Settings.Account.AccountSection.3923994153\":\"ライトテーマはまだベータ版です。サポートされていない機能があります。(例：ライトテーマで公開版プロジェクトは作成できません)\",\"src.components.molecules.Settings.Account.PasswordModal.539787951\":\"現在のパスワード\",\"src.components.molecules.Settings.Account.PasswordModal.740918511\":\"新しいパスワード\",\"src.components.molecules.Settings.Account.PasswordModal.1000887516\":\"アカウント保護のためパスワードを確認:\",\"src.components.molecules.Settings.Account.PasswordModal.1068339636\":\"パスワードを変更\",\"src.components.molecules.Settings.Account.PasswordModal.1515529938\":\"8文字以上です\",\"src.components.molecules.Settings.Account.PasswordModal.2039038750\":\"新しいパスワード\",\"src.components.molecules.Settings.Account.PasswordModal.2521568990\":\"パスワードを変更\",\"src.components.molecules.Settings.Account.PasswordModal.3546326308\":\"大文字小文字を使用できます\",\"src.components.molecules.Settings.Account.PasswordModal.3850603475\":\"古いパスワード\",\"src.components.molecules.Settings.Account.PasswordModal.4270021428\":\"最低2種類の数字が必要です\",\"src.components.molecules.Settings.Account.ProfileSection.636461959\":\"名前\",\"src.components.molecules.Settings.Account.ProfileSection.1534468327\":\"プロフィール\",\"src.components.molecules.Settings.Account.ProfileSection.2131015997\":\"プロフィール画像\",\"src.components.molecules.Settings.Navigation.165162143\":\"アセット\",\"src.components.molecules.Settings.Navigation.541301752\":\"ワークスペース一覧\",\"src.components.molecules.Settings.Navigation.2057458630\":\"プラグイン\",\"src.components.molecules.Settings.Navigation.3135366329\":\"公開設定\",\"src.components.molecules.Settings.Navigation.3198092477\":\"アカウント\",\"src.components.molecules.Settings.Navigation.3336263640\":\"プロジェクト一覧\",\"src.components.molecules.Settings.Navigation.3833270271\":\"データセット\",\"src.components.molecules.Settings.Project.ArchivedMessage.1250737101\":\"プロジェクトをアーカイブ化すると、削除とアーカイブ化解除以外の編集は行えません。再度編集可能な状態にするには、プロジェクトのアーカイブ化を解除してください。\",\"src.components.molecules.Settings.Project.ArchivedMessage.1354606874\":\"通知\",\"src.components.molecules.Settings.Project.BasicAuthSection.256145410\":\"ベーシック認証を有効化する\",\"src.components.molecules.Settings.Project.BasicAuthSection.2237029987\":\"パスワード\",\"src.components.molecules.Settings.Project.BasicAuthSection.2663586870\":\"ユーザーネーム\",\"src.components.molecules.Settings.Project.BasicAuthSection.3076470241\":\"ベーシック認証\",\"src.components.molecules.Settings.Project.ChangeSiteNameModal.551846905\":\"プロジェクト公開ページのサイト名を変更します。アルファベットとハイフン(-)のみ利用可能です。\",\"src.components.molecules.Settings.Project.ChangeSiteNameModal.1115770113\":\"保存\",\"src.components.molecules.Settings.Project.ChangeSiteNameModal.2397004844\":\"サイト名を変更\",\"src.components.molecules.Settings.Project.ChangeSiteNameModal.3528672691\":\"キャンセル\",\"src.components.molecules.Settings.Project.DangerSection.16496977\":\"この操作をすると、プロジェクトの設定などができなくなります。\",\"src.components.molecules.Settings.Project.DangerSection.181468144\":\"この操作は取り消すことができません。\",\"src.components.molecules.Settings.Project.DangerSection.325391901\":\"確認のためこのプロジェクトの名前と入力してください\",\"src.components.molecules.Settings.Project.DangerSection.636677879\":\"重要操作\",\"src.components.molecules.Settings.Project.DangerSection.703292905\":\"プロジェクトをアーカイブ\",\"src.components.molecules.Settings.Project.DangerSection.1432074936\":\"本当にアーカイブを解除してもよろしいですか？\",\"src.components.molecules.Settings.Project.DangerSection.1692420285\":\"本当にプロジェクトを削除してもよろしいですか。\",\"src.components.molecules.Settings.Project.DangerSection.2368081840\":\"アーカイブを解除\",\"src.components.molecules.Settings.Project.DangerSection.2747023189\":\"アーカイブを解除すると、チームの書き込み権限を持つユーザーによってプロジェクトの編集、設定変更が可能になります。\",\"src.components.molecules.Settings.Project.DangerSection.2901501812\":\"アーカイブを解除\",\"src.components.molecules.Settings.Project.DangerSection.3084110538\":\"このプロジェクトを削除します。\",\"src.components.molecules.Settings.Project.DangerSection.3221869035\":\"本当にアーカイブしてもよいですか？\",\"src.components.molecules.Settings.Project.DangerSection.3314090612\":\"プロジェクトをアーカイブ\",\"src.components.molecules.Settings.Project.DangerSection.3536297264\":\"プロジェクトを削除すると復元はできません。慎重に行ってください。\",\"src.components.molecules.Settings.Project.DangerSection.3557712431\":\"プロジェクト削除\",\"src.components.molecules.Settings.Project.DangerSection.3912825707\":\"プロジェクトをアーカイブしても、いつでも元に戻すことができます。\",\"src.components.molecules.Settings.Project.DangerSection.4078297214\":\"プロジェクトをアーカイブ\",\"src.components.molecules.Settings.Project.DangerSection.4235968010\":\"プロジェクトを回復\",\"src.components.molecules.Settings.Project.DangerSection.4258544441\":\"プロジェクトを削除\",\"src.components.molecules.Settings.Project.Dataset.DatasetItem.2065124393\":\"このデータセットを削除\",\"src.components.molecules.Settings.Project.Dataset.DatasetItem.3112669357\":\"本当に削除してよろしいですか？\",\"src.components.molecules.Settings.Project.Dataset.DatasetItem.3528672691\":\"キャンセル\",\"src.components.molecules.Settings.Project.Dataset.DatasetItem.3645414921\":\"削除\",\"src.components.molecules.Settings.Project.Dataset.DatasetSection.293739158\":\"データセットを追加\",\"src.components.molecules.Settings.Project.Dataset.DatasetSection.3833270271\":\"データセット\",\"src.components.molecules.Settings.Project.Plugin.PluginAccordion.PluginAccordionItem.31593394\":\"アンインストール\",\"src.components.molecules.Settings.Project.Plugin.PluginAccordion.PluginAccordionItem.730907263\":\"インストール済み\",\"src.components.molecules.Settings.Project.Plugin.PluginAccordion.PluginAccordionItem.2073226243\":\"アンインストールする前に確認してください。\",\"src.components.molecules.Settings.Project.Plugin.PluginAccordion.PluginAccordionItem.2892316131\":\"選択中のプラグインをアンインストールします。このプラグインに紐付いたデータも削除されます。よろしいですか？\",\"src.components.molecules.Settings.Project.Plugin.PluginAccordion.PluginAccordionItem.3480550112\":\"インストール\",\"src.components.molecules.Settings.Project.Plugin.PluginSection.PluginInstall.1113831405\":\"インストール済みプラグイン\",\"src.components.molecules.Settings.Project.Plugin.PluginSection.PluginInstall.1361263844\":\"GitHubパブリックレポジトリ\",\"src.components.molecules.Settings.Project.Plugin.PluginSection.PluginInstall.3129492077\":\"PCからZipファイルをアップロード\",\"src.components.molecules.Settings.Project.Plugin.PluginSection.PluginInstall.PublicRepo.470394436\":\"GitHubレポジトリからインポート\",\"src.components.molecules.Settings.Project.Plugin.PluginSection.PluginInstall.PublicRepo.3528672691\":\"キャンセル\",\"src.components.molecules.Settings.Project.Plugin.PluginSection.PluginInstall.PublicRepo.3640052215\":\"次へ\",\"src.components.molecules.Settings.Project.Plugin.PluginSection.PluginInstall.PublicRepo.4215513768\":\"レポジトリURL:\",\"src.components.molecules.Settings.Project.Plugin.PluginSection.PluginList.1933254449\":\"開発者向けオプション\",\"src.components.molecules.Settings.Project.ProfileSection.636461959\":\"プロジェクト名\",\"src.components.molecules.Settings.Project.ProfileSection.1513791786\":\"プロジェクト情報\",\"src.components.molecules.Settings.Project.ProfileSection.2015762758\":\"サムネイル画像\",\"src.components.molecules.Settings.Project.ProfileSection.3374163063\":\"プロジェクト概要\",\"src.components.molecules.Settings.Project.PublicSection.1124600214\":\"ページタイトル\",\"src.components.molecules.Settings.Project.PublicSection.2015762758\":\"サムネイル\",\"src.components.molecules.Settings.Project.PublicSection.2966836163\":\"これらのフィールドは、SNS等に共有する際や公開プロジェクトの検索等に利用されます。\",\"src.components.molecules.Settings.Project.PublicSection.3374163063\":\"ページ概要\",\"src.components.molecules.Settings.Project.PublicSection.3825437586\":\"公開詳細設定\",\"src.components.molecules.Settings.Project.PublishSection.653686109\":\"編集画面からプロジェクトが公開されると、URLの詳細がここに表示されます。\",\"src.components.molecules.Settings.Project.PublishSection.784802132\":\"サイト名\",\"src.components.molecules.Settings.Project.PublishSection.3352828776\":\"\",\"src.components.molecules.Settings.Project.PublishSection.3572249962\":\"\",\"src.components.molecules.Settings.Project.StatusSection.2025719264\":\"このプロジェクトは、検索エンジンのインデックスを無効にした状態で公開されています。\",\"src.components.molecules.Settings.Project.StatusSection.3306960224\":\"このプロジェクトは、非公開です。\",\"src.components.molecules.Settings.Project.StatusSection.4019421471\":\"このプロジェクトは、検索エンジンのインデックスを有効にした状態で公開されています。\",\"src.components.molecules.Settings.ProjectList.ProjectCell.3038786653\":\"プロジェクト名未設定\",\"src.components.molecules.Settings.ProjectList.ProjectCell.4204406466\":\"プロジェクト概要未設定\",\"src.components.molecules.Settings.ProjectList.ProjectList.899189507\":\"現在のプロジェクト\",\"src.components.molecules.Settings.ProjectList.ProjectList.1355637676\":\"アーカイブ済みプロジェクト\",\"src.components.molecules.Settings.ProjectList.ProjectList.4146466746\":\"新規プロジェクト\",\"src.components.molecules.Settings.SettingsHeader.893550186\":\"(パーソナルワークスペース)\",\"src.components.molecules.Settings.Workspace.AddMemberModal.2509478264\":\"メンバーを追加\",\"src.components.molecules.Settings.Workspace.AddMemberModal.2914740708\":\"メールアドレスもしくはユーザー名を入力\",\"src.components.molecules.Settings.Workspace.AddMemberModal.3099331554\":\"追加\",\"src.components.molecules.Settings.Workspace.AddMemberModal.3528672691\":\"キャンセル\",\"src.components.molecules.Settings.Workspace.DangerSection.181468144\":\"この操作は取り消すことができません。\",\"src.components.molecules.Settings.Workspace.DangerSection.636677879\":\"Danger Zone\",\"src.components.molecules.Settings.Workspace.DangerSection.904076184\":\"ワークスペースを削除すると復元することはできません。よくお確かめください。\",\"src.components.molecules.Settings.Workspace.DangerSection.2478692658\":\"ワークスペースを削除\",\"src.components.molecules.Settings.Workspace.DangerSection.3240562240\":\"ワークスペース削除\",\"src.components.molecules.Settings.Workspace.DangerSection.3321682164\":\"この操作をすると、このワークスペース及び関連するすべてのプロジェクト・アセット・データセットが永久に削除されます。\",\"src.components.molecules.Settings.Workspace.DangerSection.3399326760\":\"ワークスペースを削除します。\",\"src.components.molecules.Settings.Workspace.DangerSection.4086722238\":\"操作を続行するにはこのワークスペース名を入力してください。\",\"src.components.molecules.Settings.Workspace.MemberListItem.1068157859\":\"編集\",\"src.components.molecules.Settings.Workspace.MemberListItem.1954432048\":\"閲覧\",\"src.components.molecules.Settings.Workspace.MemberListItem.3470351671\":\"オーナー\",\"src.components.molecules.Settings.Workspace.MembersSection.721495104\":\"新規メンバー\",\"src.components.molecules.Settings.Workspace.MembersSection.2734377620\":\"メンバー\",\"src.components.molecules.Settings.Workspace.ProfileSection.2999985900\":\"ワークスペース名\",\"src.components.molecules.Settings.WorkspaceList.WorkspaceCell.808766300\":\"無題のワークスペース\",\"src.components.molecules.Settings.WorkspaceList.WorkspaceCell.974692228\":\"これはあなたのパーソナルワークスペースです。あなたのプロジェクトやリソースはこのワークスペースで管理されます。\",\"src.components.molecules.Settings.WorkspaceList.WorkspaceCell.3230245813\":\"メンバーズ\",\"src.components.molecules.Settings.WorkspaceList.WorkspaceList.3435539653\":\"すべてのワークスペース\",\"src.components.molecules.Settings.WorkspaceList.WorkspaceList.3828443189\":\"新規ワークスペース\",\"src.components.molecules.TopPage.1405865627\":\"サインイン\",\"src.components.organisms.EarthEditor.LeftMenu.3127270027\":\"アウトライン\",\"src.components.organisms.EarthEditor.LeftMenu.3833270271\":\"データセット\",\"src.components.organisms.EarthEditor.OutlinePane.24000205\":\"新規フォルダ\",\"src.components.organisms.EarthEditor.RightMenu.422058490\":\"レイヤー\",\"src.components.organisms.EarthEditor.RightMenu.1538011248\":\"シーン\",\"src.components.organisms.EarthEditor.RightMenu.1676374721\":\"ウィジェット\",\"src.components.organisms.EarthEditor.RightMenu.1884622259\":\"インフォボックス\",\"src.components.organisms.EarthEditor.RightMenu.3590336714\":\"エクスポート\",\"src.components.organisms.Settings.Account.3198092477\":\"アカウント\",\"src.components.organisms.Settings.Project.Dataset.3833270271\":\"データセット\",\"src.components.organisms.Settings.Project.Plugin.2057458630\":\"プラグイン\",\"src.components.organisms.Settings.Project.Public.3135366329\":\"公開設定\",\"src.components.organisms.Settings.ProjectList.3336263640\":\"プロジェクト一覧\",\"src.components.organisms.Settings.Workspace.Asset.165162143\":\"アセット\",\"src.components.organisms.Settings.WorkspaceList.541301752\":\"ワークスペース一覧\",\"src.components.pages.TopPage.802859307\":\"ログインエラー\"}","var map = {\n\t\"./components/atoms/Accordion/index.stories.tsx\": 51707,\n\t\"./components/atoms/AdditionButton/index.stories.tsx\": 52233,\n\t\"./components/atoms/Balloon/index.stories.tsx\": 53529,\n\t\"./components/atoms/Box/index.stories.tsx\": 55141,\n\t\"./components/atoms/Button/index.stories.tsx\": 82987,\n\t\"./components/atoms/Check/index.stories.tsx\": 69593,\n\t\"./components/atoms/CheckBox/index.stories.tsx\": 97188,\n\t\"./components/atoms/CheckGroup/index.stories.tsx\": 93070,\n\t\"./components/atoms/ConfirmationModal/index.stories.tsx\": 52246,\n\t\"./components/atoms/ContentPicker/index.stories.tsx\": 21554,\n\t\"./components/atoms/Divider/index.stories.tsx\": 94753,\n\t\"./components/atoms/Dropdown/index.stories.tsx\": 21578,\n\t\"./components/atoms/Flex/index.stories.tsx\": 58690,\n\t\"./components/atoms/HelpButton/index.stories.tsx\": 50416,\n\t\"./components/atoms/Icon/index.stories.tsx\": 61698,\n\t\"./components/atoms/Loading/index.stories.tsx\": 57490,\n\t\"./components/atoms/Markdown/index.stories.tsx\": 76480,\n\t\"./components/atoms/Modal/ModalFrame/index.stories.tsx\": 18068,\n\t\"./components/atoms/NotFound/index.stories.tsx\": 25505,\n\t\"./components/atoms/NotificationBar/index.stories.tsx\": 76481,\n\t\"./components/atoms/Overlay/index.stories.tsx\": 29754,\n\t\"./components/atoms/Plugin/IFrame/index.stories.tsx\": 9714,\n\t\"./components/atoms/Plugin/index.stories.tsx\": 32093,\n\t\"./components/atoms/PropertyGroup/index.stories.tsx\": 60276,\n\t\"./components/atoms/PropertyPane/index.stories.tsx\": 89614,\n\t\"./components/atoms/PublicationStatus/index.stories.tsx\": 67310,\n\t\"./components/atoms/Radio/index.stories.tsx\": 70378,\n\t\"./components/atoms/RadioButton/index.stories.tsx\": 46699,\n\t\"./components/atoms/RadioGroup/index.stories.tsx\": 66910,\n\t\"./components/atoms/RadioLabel/index.stories.tsx\": 85995,\n\t\"./components/atoms/RadioLabelGroup/index.stories.tsx\": 25568,\n\t\"./components/atoms/Resizable/index.stories.tsx\": 72810,\n\t\"./components/atoms/Scroll/index.stories.tsx\": 94528,\n\t\"./components/atoms/SearchBar/index.stories.tsx\": 58744,\n\t\"./components/atoms/Select/index.stories.tsx\": 67150,\n\t\"./components/atoms/SelectBox/index.stories.tsx\": 94493,\n\t\"./components/atoms/SelectOption/index.stories.tsx\": 90082,\n\t\"./components/atoms/Slide/index.stories.tsx\": 39946,\n\t\"./components/atoms/Slider/index.stories.tsx\": 68502,\n\t\"./components/atoms/Text/index.stories.tsx\": 93586,\n\t\"./components/atoms/TextBox/index.stories.tsx\": 61548,\n\t\"./components/atoms/ToggleButton/index.stories.tsx\": 68333,\n\t\"./components/atoms/TreeView/index.stories.tsx\": 67317,\n\t\"./components/molecules/Common/AssetModal/AssetCard/index.stories.tsx\": 87298,\n\t\"./components/molecules/Common/AssetModal/AssetListItem/index.stories.tsx\": 50392,\n\t\"./components/molecules/Common/AssetModal/AssetSelect/index.stories.tsx\": 72733,\n\t\"./components/molecules/Common/AssetModal/index.stories.tsx\": 62774,\n\t\"./components/molecules/Common/Header/index.stories.tsx\": 39553,\n\t\"./components/molecules/Common/ProjectCreationModal/index.stories.tsx\": 5524,\n\t\"./components/molecules/Common/WorkspaceCreationModal/index.stories.tsx\": 70259,\n\t\"./components/molecules/EarthEditor/DatasetPane/DatasetHeader/index.stories.tsx\": 61611,\n\t\"./components/molecules/EarthEditor/DatasetPane/DatasetModal/index.stories.tsx\": 49391,\n\t\"./components/molecules/EarthEditor/DatasetPane/DatasetSchemaCell/index.stories.tsx\": 38121,\n\t\"./components/molecules/EarthEditor/Header/index.stories.tsx\": 63597,\n\t\"./components/molecules/EarthEditor/LayerMultipleSelectionModal/index.stories.tsx\": 65094,\n\t\"./components/molecules/EarthEditor/LayerSelectionModal/index.stories.tsx\": 18303,\n\t\"./components/molecules/EarthEditor/OutlinePane/index.stories.tsx\": 29646,\n\t\"./components/molecules/EarthEditor/PrimitiveHeader/PrimitiveCell/index.stories.tsx\": 87913,\n\t\"./components/molecules/EarthEditor/PrimitiveHeader/index.stories.tsx\": 10179,\n\t\"./components/molecules/EarthEditor/PropertyPane/PropertyField/CameraField/index.stories.tsx\": 21490,\n\t\"./components/molecules/EarthEditor/PropertyPane/PropertyField/ColorField/index.stories.tsx\": 65509,\n\t\"./components/molecules/EarthEditor/PropertyPane/PropertyField/LayerField/index.stories.tsx\": 24519,\n\t\"./components/molecules/EarthEditor/PropertyPane/PropertyField/LocationField/index.stories.tsx\": 34172,\n\t\"./components/molecules/EarthEditor/PropertyPane/PropertyField/PropertyTitle/PropertyLinkPanel/index.stories.tsx\": 46041,\n\t\"./components/molecules/EarthEditor/PropertyPane/PropertyField/PropertyTitle/index.stories.tsx\": 33141,\n\t\"./components/molecules/EarthEditor/PropertyPane/PropertyField/RadioField/index.stories.tsx\": 21698,\n\t\"./components/molecules/EarthEditor/PropertyPane/PropertyField/SelectField/index.stories.tsx\": 82418,\n\t\"./components/molecules/EarthEditor/PropertyPane/PropertyField/SwitchField/index.stories.tsx\": 92651,\n\t\"./components/molecules/EarthEditor/PropertyPane/PropertyField/TextField/index.stories.tsx\": 17769,\n\t\"./components/molecules/EarthEditor/PropertyPane/PropertyField/TypographyField/FontFamilyField/index.stories.tsx\": 56481,\n\t\"./components/molecules/EarthEditor/PropertyPane/PropertyField/TypographyField/FontFormatField/index.stories.tsx\": 27013,\n\t\"./components/molecules/EarthEditor/PropertyPane/PropertyField/TypographyField/FontSizeField/index.stories.tsx\": 1619,\n\t\"./components/molecules/EarthEditor/PropertyPane/PropertyField/TypographyField/index.stories.tsx\": 38243,\n\t\"./components/molecules/EarthEditor/PropertyPane/PropertyField/index.stories.tsx\": 22415,\n\t\"./components/molecules/EarthEditor/PropertyPane/PropertyItem/index.stories.tsx\": 37262,\n\t\"./components/molecules/EarthEditor/PropertyPane/PropertyList/index.stories.tsx\": 64098,\n\t\"./components/molecules/EarthEditor/PropertyPane/WidgetToggleSwitch/index.stories.tsx\": 35079,\n\t\"./components/molecules/EarthEditor/PublicationModal/RadioLabelField/index.stories.tsx\": 21946,\n\t\"./components/molecules/EarthEditor/PublicationModal/index.stories.tsx\": 65900,\n\t\"./components/molecules/Published/Error/index.stories.tsx\": 72141,\n\t\"./components/molecules/Settings/Avatar/index.stories.tsx\": 47937,\n\t\"./components/molecules/Settings/Project/Dataset/DatasetList/index.stories.tsx\": 12399,\n\t\"./components/molecules/Settings/Project/Plugin/PluginAccordion/index.stories.tsx\": 7943,\n\t\"./components/molecules/Settings/ProjectList/ProjectCell/index.stories.tsx\": 49062,\n\t\"./components/molecules/Settings/ProjectList/ProjectList/index.stories.tsx\": 89807,\n\t\"./components/molecules/Settings/SelectField/index.stories.tsx\": 7328,\n\t\"./components/molecules/Visualizer/Block/DataList/index.stories.tsx\": 85422,\n\t\"./components/molecules/Visualizer/Block/Image/index.stories.tsx\": 96622,\n\t\"./components/molecules/Visualizer/Block/Location/index.stories.tsx\": 84112,\n\t\"./components/molecules/Visualizer/Block/Text/index.stories.tsx\": 13543,\n\t\"./components/molecules/Visualizer/Block/Video/index.stories.tsx\": 59613,\n\t\"./components/molecules/Visualizer/Block/index.stories.tsx\": 13148,\n\t\"./components/molecules/Visualizer/Engine/Cesium/Ellipsoid/index.stories.tsx\": 13730,\n\t\"./components/molecules/Visualizer/Engine/Cesium/Marker/index.stories.tsx\": 26607,\n\t\"./components/molecules/Visualizer/Engine/Cesium/Model/index.stories.tsx\": 86569,\n\t\"./components/molecules/Visualizer/Engine/Cesium/PhotoOverlay/index.stories.tsx\": 42716,\n\t\"./components/molecules/Visualizer/Engine/Cesium/Polygon/index.stories.tsx\": 53669,\n\t\"./components/molecules/Visualizer/Engine/Cesium/Polyline/index.stories.tsx\": 2328,\n\t\"./components/molecules/Visualizer/Engine/Cesium/Rect/index.stories.tsx\": 50946,\n\t\"./components/molecules/Visualizer/Engine/Cesium/Resource/index.stories.tsx\": 46378,\n\t\"./components/molecules/Visualizer/Engine/Cesium/TIleset/index.stories.tsx\": 60676,\n\t\"./components/molecules/Visualizer/Engine/Cesium/index.stories.tsx\": 8868,\n\t\"./components/molecules/Visualizer/Infobox/Field/index.stories.tsx\": 78002,\n\t\"./components/molecules/Visualizer/Infobox/Frame/index.stories.tsx\": 51390,\n\t\"./components/molecules/Visualizer/Infobox/index.stories.tsx\": 50558,\n\t\"./components/molecules/Visualizer/Plugin/index.stories.tsx\": 13471,\n\t\"./components/molecules/Visualizer/Widget/Menu/index.stories.tsx\": 60017,\n\t\"./components/molecules/Visualizer/Widget/SplashScreen/index.stories.tsx\": 93324,\n\t\"./components/molecules/Visualizer/Widget/Storytelling/index.stories.tsx\": 1540,\n\t\"./components/molecules/Visualizer/Widget/index.stories.tsx\": 7002,\n\t\"./components/molecules/Visualizer/index.stories.tsx\": 61544\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 87345;","module.exports = Cesium;"],"names":["___CSS_LOADER_EXPORT___","push","module","id","require","configure","locales","locale","navigator","language","split","defaultLocale","includes","messages","en","ja","cache","createIntlCache","createIntl","Provider","children","isAuthenticated","useAuth","data","useLanguageQuery","skip","me","lang","mockClient","ApolloClient","link","ApolloLink","Observable","observer","complete","InMemoryCache","parameters","layout","controls","expanded","decorators","storyFn","ApolloProvider","client","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","apply","_defineProperty","obj","key","value","defineProperty","configurable","writable","config","forEach","logger","JSON","stringify","decorator","addDecorator","loader","addLoader","addParameters","_objectSpread","target","i","arguments","length","source","getOwnPropertyDescriptors","defineProperties","enhancer","addArgTypesEnhancer","addArgsEnhancer","setGlobalRender","v","console","log","title","component","Component","SampleHeading","style","color","background","SampleContent","padding","Default","args","items","heading","content","storySource","AdditionButton","img","imagePath","process","alt","storiesOf","locationsMap","add","description","Margin","m","Padding","p","Border","border","Bg","bg","Button","PrimarySmall","buttonType","text","PrimaryLarge","large","SecondarySmall","SecondaryLarge","DangerSmall","DangerLarge","Disabled","icon","disabled","WithIcon","WithIconRight","iconRight","Check","CheckBox","checked","onChange","Wrapper","StyledInput","type","e","currentTarget","styled","action","label","CheckGroup","values","map","ConfirmationModal","useState","isOpen","setOpen","onClose","onCancel","onClick","body","onProceed","ContentPicker","className","onSelect","onClickAway","ref","useRef","useClickAway","ContentsList","item","ContentItem","ContentButton","StyledIcon","size","ButtonText","name","Array","fill","undefined","_","GhostButton","props","theme","infoBox","mainText","deepBg","main","select","Text","Icon","Divider","width","height","Dropdown","DirectionRight","direction","ExampleDiv","SpaceBetween","GapChildren","DirectionVertical","justify","gap","descriptionTitle","Image","Svg","Loading","actions","argTypesRegex","backgroundColor","Modal","isVisible","NotFound","intl","useIntl","formatMessage","defaultMessage","NotificationBar","Info","Error","Warning","modal","overlayBg","show","zIndexes","base","Container","position","Overlay","Show","Hide","argTypes","onLoad","onMessage","postMessage","current","foo","Date","toISOString","autoResize","visible","html","cb","src","canBeVisible","exposed","staticExposed","reearth","on","ui","render","message","HiddenIFrame","SourceCode","sourceCode","PropertyGroup","PropertyPane","properties","PublicationStatus","Published","status","Limited","Unpublished","Radio","RadioButton","Checked","RadioGroup","RadioLabel","RadioLabelGroup","selectedValue","gutter","initialSize","minSize","maxSize","isResizing","setIsResizing","setSize","x","y","setPosition","onResizeStart","useCallback","getPositionFromEvent","nativeEvent","MouseEvent","clientX","clientY","which","TouchEvent","touch","touches","onResize","deltaX","deltaY","delta","getDelta","getSize","unbind","onResizeEnd","bindEventListeners","window","addEventListener","unbindEventListeners","removeEventListener","useEffect","gutterProps","useMemo","onMouseDown","onTouchStart","Resizable","useHooks","showRightGutter","showBottomGutter","showLeftGutter","TopGutter","HorizontalGutter","RightGutter","VerticalGutter","BottomGutter","LeftGutter","StyledResizable","deepestBg","Gutter","display","Pane","flex","Content","Vertical","flexDirection","Horizontal","t","iconPos","placeHolder","Select","selected","Option","Page","Slide","pos","setPos","Slider","frame","StyledSlider","css","RCSlider","slider","handle","track","min","max","Frame","LBold","weight","MParagraph","isParagraph","MRegularRed","MRegularRedBgBlue","otherProperties","control","borderColor","floatedTextColor","Basic","placeholder","prefix","suffix","multiline","throttle","throttleTimeout","ToggleButton","draggable","droppable","selectable","expandable","droppableIntoChildren","ItemInnerComponent","depth","onExpand","canDrop","isDropping","dropType","shown","marginLeft","userSelect","borderWidth","borderStyle","top","bottom","topOfChildren","bottomOfChildren","ItemComponent","forwardRef","item2","setItem","renderItem","onDrop","dest","srcIndex","index","parent","splice","slice","dragItemType","multiple","DefaultMedium","MediumChecked","SmallChecked","LargeCheckedAndSelected","cardSize","url","imageAsset","teamId","contentType","File","CheckedAndSelected","asset","assets","open","Selected","Video","fileType","defaultProps","user","currentTeam","teams","onBack","onForward","onSignOut","Header","WithNoTeams","NoLogin","initialValues","imageUrl","ProjectCreationModal","onSubmit","createAssets","openAssets","setOpenAssets","formik","useFormik","handleClose","isSubmitting","resetForm","handleSelect","setFieldValue","handleCreate","submitForm","useTheme","button1","button2","overlay","margin","NewProjectForm","handleSubmit","FormInputWrapper","getFieldProps","onBlur","handleBlur","StyledTextArea","rows","Thumbnail","AssetModal","onCreateAsset","fonts","defaultProjectImage","WorkSpaceCreationModal","DatasetHeader","host","HostName","layers","leftMenu","Card","iconSize","subtext","StyledContainer","lighterBg","assetCard","highlight","onSheetSelect","isLoading","setIsLoading","pickerApiLoaded","setPickerApiLoaded","pickedFile","setPickedFile","pickedFileSheets","setPickedFileSheets","selectedSheet","setSelectedSheet","accessToken","setAccessToken","pickerCallback","google","picker","Response","ACTION","Action","PICKED","docs","gapi","sheets","spreadsheets","get","spreadsheetId","then","response","result","googleApiKey","REEARTH_CONFIG","PickerBuilder","addView","ViewId","SPREADSHEETS","setOAuthToken","setDeveloperKey","setCallback","build","setVisible","handleClientLoad","googleClientId","load","init","apiKey","clientId","scope","discoveryDocs","auth2","getAuthInstance","isSignedIn","signOut","handleSheetSelect","sheet","fileId","sheetName","gDriveScript","document","createElement","async","onload","appendChild","removeChild","handleAuthClick","Promise","resolve","signIn","updateSigninStatus","currentUser","getAuthResponse","access_token","GdriveIcon","metricsSizes","AssetList","Flex","AssetWrapper","Gdrive","onReturn","syncLoading","align","strongText","AssetCard","onCheck","wrap","sheetItem","AssetListItem","sheetId","weakText","marginBottom","DatasetModal","handleDatasetAdd","handleGoogleSheetDatasetAdd","onNotify","onUrlChange","csv","changeCsv","changeSheet","dataType","setDataType","setDisabled","handleImport","onSelectCsvFile","useFileInput","files","file","accept","handleClick","primaryButtonText","InputSection","Subtitle","textAlign","ConnectSection","paleBg","useDrag","dropper","layerId","DatasetSchemaCell","onRemove","totalCount","handleRemove","confirm","Name","Count","RemoveButton","hoverBg","ProjectMenu","currentProject","noHoverStyle","centered","hasIcon","openOnClick","DropdownInner","MenuList","linkTo","Spacer","currentProjectStatus","onPublishmentStatusClick","onPreviewOpen","dropDownRef","publicationButtonText","disableUnpublish","center","right","RightArea","ChildrenWrapper","Section","recentProjects","group","active","convertLayers","layer","childrenCount","showChildrenCount","linked","visibilityChangeable","renamable","droppableExternals","OutlinePane","rootLayerId","selectedLayerId","selectedWidgetId","selectedType","widgets","sceneDescription","onLayerRename","onLayerVisibilityChange","onLayerRemove","onLayerSelect","onSceneSelect","onWidgetSelect","onLayerMove","onLayerImport","onLayerGroupCreate","loading","setSelected","ids","arrayEquals","drop","destItem","_index","destIndex","Math","dropExternals","removeLayer","sceneTitle","widgetTitle","layerTitle","sceneWidgetsItem","w","deactivated","enabled","layersItem","showLayerActions","underlined","layerTreeViewItemOnRename","layerTreeViewItemOnLayerVisibilityChange","visibility","TreeViewItem","useLayerTreeViewItem","onRename","onVisibilityChange","onImport","onGroupCreate","newState","OutlineItemsWrapper","TreeView","acceptedDragItemTypes","LayersItemWrapper","onDropExternals","layersState","setLayers","s","deepFind","l","d","newLayers","findIndex","PrimitiveCell","PrimitiveHeader","primitives","metrics","primitiveHeader","CameraField","HasNoCamera","HasCamera","lat","lng","pitch","roll","fov","OnlyPose","onlyPose","ColorField","overridden","location","LocationField","datasetSchemas","datasets","fields","PropertyLinkPanel","DatasetLinkable","onClear","onLink","isLinkable","ChildLinked","linkedDataset","schema","dataset","field","linkableType","ChildOverridden","isOverridden","NotLinkable","PropertyTitle","Linked","isLinked","Overridden","RadioField","itemsWithIcon","SelectField","LinkedAndDisabled","OverriddenAndDisabled","LinkedAndOverridden","LinkedAndOverriddenAndDisabled","SwitchField","TextField","Inactive","Multiline","FontFamilyField","colors","TypographyField","choices","camera","PropertyField","Bool","Number","String","LatLng","Url","BoolWithValue","NumberWithValue","StringWithValue","LatLngWithValue","UrlWithValue","Color","Selection","Buttons","defaultValue","Camera","Typography","Polygon","LayerRef","LinkedPartially","fieldName","PropertyItem","isTemplate","mode","defaultItemName","onItemAdd","onItemMove","onItemRemove","onItemsUpdate","onRemovePane","partitionObject","eventProps","otherProps","openModal","setModal","isList","layerMode","nameField","sf","schemaFields","find","f","groups","selectedItem","propertyListItems","nameSchemaField","choice","c","valueToString","g","events","mapValues","schemaGroup","f2","condf","only","condsf","condv","mergedValue","zeroValues","schemaField","hidden","handleItemMove","from","to","handleItemRemove","handleItemUpdate","useBind","handleItemAdd","handleDelete","StyledPropertyList","selectedIndex","onItemSelect","StyledButton","TrashIcon","marginTop","PropertyList","alert","toString","List","NamedList","LayerMode","WidgetToggleButton","ToggleWrapper","RadioLabelField","inlineChildren","InputField","subMessage","actioned","onButtonClick1","onButtonClick2","InputContent","URL","href","rel","InputURL","readOnly","InputLinkButton","SubMessage","weak","accent","highlighted","generateRandomString","len","crypto","getRandomValues","Uint8Array","n","join","toLowerCase","PublicationModal","onSearchIndexChange","searchIndex","publishing","publicationStatus","onPublish","projectAlias","validAlias","onAliasValidate","validatingAlias","defaultAlias","copiedKey","setCopiedKey","alias","changeAlias","validation","changeValidation","statusChanged","setStatusChange","showOptions","setOptions","resetCopiedWithDelay","timerID","setTimeout","prevState","clearTimeout","handleCopyToClipBoard","clipboard","writeText","validate","a","test","onAliasChange","generateAlias","str","purl","replace","embedCode","publishDisabled","handlePublish","modalTitleText","updateDescriptionText","PublishLink","UrlText","OptionsToggle","ArrowIcon","HideableSection","warning","Template","bind","avatar","Avatar","Preview","Actions","Meta","DatasetItem","removeDatasetSchema","isHover","setHover","setIsVisible","handleRemoveDatasetSchema","onMouseEnter","onMouseLeave","DatasetList","PluginAccordionItemBody","markdownTypographyStyle","Box","ph","Markdown","pluginList","styles","DeleteModal","danger","mt","PluginAccordionItemHeader","thumbnail","isInstalled","onUninstall","isModalOpen","setIsModalOpen","hovered","setHovered","borderRadius","mh","handleMouseEnter","handleMouseLeave","xl","PluginAccordion","uninstallPlugin","Accordion","allowMultipleExpanded","itemBgColor","pluginId","bodyMarkdown","thumbnailUrl","author","project","ProjectCell","ProjectListContainner","StyledFlex","projectCell","divider","ProjectList","projects","archived","onProjectSelect","onCreationButtonClick","visualizations","selectedKey","fullWidth","some","StyledSelect","OptionCheck","OptionIcon","DataList","item_title","item_datastr","item_datatype","item_datanum","block","property","Title","default","typography","fontSize","NoItems","isEditable","isSelected","Editable","Built","isBuilt","image","NoImage","FullSize","fullSize","Cover","imageSize","Contain","Position","imagePositionX","imagePositionY","Location","NoLocation","markdownText","markdown","NoText","NoVideo","extensionId","Plugin","context","pluginBaseUrl","Ellipsoid","V","primitive","radius","fillColor","Marker","Point","pointColor","pointSize","PointWithLabelAndExcluded","extrude","labelText","PointWithRightLabel","labelPosition","labelTypography","bold","italic","fontFamily","PointWithTopLabel","PointWithBottomLabel","ImageWithShadow","imageShadow","ImageWithCropAndShadow","imageCrop","ImageWithColor","imageColor","ImageWithRightLabel","sceneProperty","timeline","animation","scale","model","Appearance","atmosphere","enable_shadows","appearance","shadows","colorBlend","colorBlendAmount","silhouette","silhouetteColor","silhouetteSize","PhotoOverlay","photoOverlayImage","CesiumMath","stroke","strokeColor","strokeWidth","polygon","Polyline","coordinates","Rect","api","rect","west","east","north","south","extrudedHeight","outlineColor","outlineWidth","Resource","lookAt","range","tileset","onCameraChange","onPrimitiveSelect","small","ready","selectedPrimitiveId","terrain","terrainExaggeration","bgcolor","skybox","tiles","tile_type","enable_lighting","enable_sun","sky_atmosphere","ground_atmosphere","point","pixelSize","Cartesian3","DefaultCamera","InitialCamera","Field","LongTitle","LongCJKTitle","blocks","propertyId","selectedBlockId","infoboxKey","Large","Headless","Menu","widget","buttons","buttonTitle","buttonPosition","buttonStyle","buttonLink","buttonBgcolor","buttonCamera","buttonIcon","menu","menuTitle","menuType","menuCamera","menuLink","SplashScreen","overlayEnabled","overlayDuration","overlayTransitionDuration","overlayDelay","overlayImage","overlayImageW","overlayImageH","overlayBgcolor","cameraPosition","cameraDelay","cameraDuration","stories","AutoStart","autoStart","Widget","DropHolder","DraggableView","DragMessage","dropDown","options","consolelog","error","consolerror","version","getPrimitives","selectPrimitive","showPrimitive","hidePrimitive","hide","visualizer","getVisualizer","engine","flyTo","zoomIn","amount","zoomOut","engineType","isPublished","outerSelectedPrimitiveId","outerSelectedBlockId","onBlockSelect","engineRef","wrapperRef","useDrop","_item","loc","getLocationFromScreenXY","dropRef","isDroppable","usePrimitiveSelection","innerSelectPrimitive","primitiveSelectionReason","setSelectionReason","primitiveOverridenInfobox","setPrimitiveOverridenInfobox","selectedPrimitive","reason","overriddenInfobox","overridenInfoboxBlocks","isArray","infobox","infoboxEditable","useInnerState","innerState","innerSetState","setState","newValue","selectBlock","requestRender","innerCamera","setInnerCamera","updateCamera","hiddenPrimitivesSet","Set","hiddenPrimitives","setHiddenPrimitives","googleAnalytics","enableGA","trackingId","ReactGA","pathname","visualizerContext","useVisualizerContext","pluginAPI","getCamera","engines","cesium","Cesium","Engine","PrimitiveComponent","isHidden","ctx","Builtin","builtin","builtinPrimitives","Visualizer","renderInfoboxInsertionPopUp","onBlockChange","onBlockDelete","onBlockMove","onBlockInsert","pluginProperty","Infobox","renderInsertionPopUp","initialSourceCode","trim","temporalSourceCode","setTemporalSourceCode","setSourceCode","temporalMode","setTemporalMode","setMode","args2","__REEARTH_SOURCECODE","alignItems","useAuth0","loginWithRedirect","logout","REEARTH_E2E_ACCESS_TOKEN","login","returnTo","origin","encodeURIComponent","AccordionItem","data-testid","StyledAccordionItemButton","AccordionItemButton","allowZeroExpanded","referenceElement","popperElement","usePopper","placement","strategy","modifiers","scroll","resize","attributes","updatePopper","update","InsertArea","Line","popper","zIndex","Balloon","TitleWrapper","onlyTitle","StyledImage","descriptionBalloon","textColor","shadowColor","styleProps","mv","mb","mr","ml","pv","pt","pb","pr","pl","hasText","iSize","WrappedIcon","IconWrapper","customColor","buttonDanger","buttonSecondary","buttonPrimary","bgHover","colorHover","inactive","pale","contentsText","selectedValues","checks","React","isValidElement","check","spaceOnly","StyledDivider","useImperativeHandle","close","Parent","noHover","Label","o","Child","header","childTransform","justifyContent","flexWrap","flexBasis","basis","flexGrow","grow","flexShrink","shrink","HelpArea","BalloonWrapper","BalloonArrow","HelpButton","balloonDirection","referenceRef","popperRef","arrowRef","element","offset","isMouseEnter","setIsMouseEnter","timer","arrow","data-placement","outline","Layer","layerAdd","LayerAdd","marker","PrimMarker","photooverlay","PrimPhotoOverlay","resource","PrimResource","ellipsoid","PrimSphere","PrimRect","PrimModel","PrimTileset","Widgets","WidgetMenu","storytelling","WidgetStory","storytellingMenu","splashscreen","WidgetSplash","workspaces","workspaceAdd","memberAdd","Dataset","datasetAdd","googleDrive","GoogleDriveIcon","sheetFile","SheetFileIcon","computer","PcIcon","assetGrid","assetGridSmall","assetList","filterName","filterNameReverse","filterSize","filterSizeReverse","filterTime","filterTimeReverse","scene","Scene","dashboard","Dashboard","earthEditor","EarthEditor","settings","export","Export","InfoText","video","InfoVideo","InfoLocation","arrowLong","arrowLongLeft","arrowLongRight","arrowToggle","arrowSelect","arrowUp","arrowDown","arrowLeft","arrowRight","arrowUpDown","alignLeft","TextLeft","alignRight","TextRight","alignCenter","TextCenter","alignJustify","TextJustify","TextItalic","TextBold","underline","TextUnderline","Visible","NotVisible","Logout","edit","Edit","help","Help","question","QuestionMark","Alert","folder","Folder","folderAdd","FolderAdd","bin","Bin","dl","InfoTable","checkCircle","plus","plusSquare","cancel","upload","capture","CameraCapture","Link","publish","unpublish","search","logo","Logo","newProject","newWorkspace","preview","copyCode","fieldLinked","fieldClear","noProjects","moon","sun","topPage","install","uploadZipPlugin","privateGitHubRepo","publicGitHubRepo","menuForDevice","sizeStr","Icons","StyledSvg","StyledImg","SVG","wrapper","memo","LoadingWrapper","fixed","portal","RingLoader","plugins","gfm","onDoubleClick","dark","isDark","linkTarget","typographyStyles","hex","alpha","tinycolor","toRgb","nr","floor","r","ng","nb","b","transparentBg","fullScreenModal","state","InnerWrapper","CloseButton","useTransition","mountOnEnter","unmountOnExit","useKeyPressEvent","ButtonWrapper","StyledNotificationBar","notification","errorBg","warningBg","successBg","infoBg","notificationBar","CloseBtn","changeVisibility","IFrame","iFrameProps","useHook","autoResizeMessageKey","loaded","iFrameRef","iFrameSize","setIFrameSize","pendingMesages","contentWindow","ev","onIframeLoad","win","doc","contentDocument","head","querySelector","textContent","innerHTML","querySelectorAll","oldScript","newScript","attr","setAttribute","createTextNode","innerText","parentNode","replaceChild","msg","onIFrameLoad","frameBorder","scrolling","srcDoc","minWidth","defaultIsMarshalable","getPrototypeOf","Function","prototype","defaultOnError","err","renderPlaceholder","isMarshalable","iframeCanBeVisible","onError","arena","eventLoop","setLoaded","iFrameHtml","iFrameOptions","setIFrameState","evalCode","code","eventLoopCb","executePendingJobs","vm","hasPendingJob","iFrameApi","parse","staticExpose","expose","getQuickJS","createVm","Arena","dispose","exposer","entries","k","fetch","iFrameVisible","Portal","node","setNode","useLayoutEffect","ReactDOM","PropertyWrapper","PropertyFields","StyledStatus","StatusCircle","publishStatus","published","unpublished","building","toggleButton","toggle","RadioInput","RadioIcon","handleChange","radioLabels","radio","browser","detect","Scroll","dragScrollSpead","dragScrollZoneHeight","setScroll","handleDragOver","h","getBoundingClientRect","handleDragLeave","requestAnimationFrame","scrollBy","cancelAnimationFrame","onDragOver","onDragLeave","SearchBar","focusedValue","setFocusedValue","listRef","mergedRef","useMergeRefs","fallbackPlacements","labels","fromEntries","selectedLabel","openList","focus","closeList","toggleList","handleKeyDown","indexOf","preventDefault","handleListKeyDown","stopPropagation","nextValue","previousValue","handleListItemClick","handleListItemMouseEnter","onKeyDown","tabIndex","SelectWrapper","StyledDownArrow","OptionList","option","focused","selectList","Inner","child","defaultColor","typographyBySize","paragraph","regular","TextBox","doesChangeEveryTime","isDirty","innerValue","setInnerValue","setRows","textAreaRef","handleChangeTextArea","lines","handleKeyPress","timeout","FormWrapper","FloatedText","StyledTextarea","onKeyPress","focusBorder","contentsFloatText","Switch","TopSlider","activeBgBorder","bgBorder","activeBg","activeToggle","Item","selectedIds","expandedIds","parentItem","canDropAtChildren","nextItemDroppable","handleExpand","canDrag","collect","monitor","isDragging","dragRef","setDropType","setCanDrop","isOver","shallow","isAncestor","calcPosition","getDropType","getDestIndex","hover","_i","isDnDItem","Items","childSelected","has","siblings","selectedItems","Map","expandedItems","useSet","selectedIdsActions","expandedIdsActions","remove","set","clear","reset","expand","useShallowCompareEffect","searchItems","getClientOffset","wrapperOffset","left","xr","yr","expandedAndHasChildren","every","isSameParent","index2","ancestor","sourceIndex","sourceIndex2","bellow","ImgWrapper","PreviewImage","FileName","other","black","textHover","ListItem","ListItemName","ListItemSize","parseFloat","toFixed","AssetSelect","setHidden","StyledText","Options","ItemText","TabularModal","tabs","tabLabels","currentTab","setCurrentTab","Tabs","Tab","innerBg","bodyBg","AssetDeleteModal","Message","AssetContainer","isMultipleSelectable","initialAsset","selectedAssets","selectAsset","isHeightFixed","layoutType","setLayoutType","currentSaved","setCurrentSaved","reverse","setReverse","searchResults","setSearchResults","filterSelected","selectFilter","filteredAssets","setAssets","deleteModalVisible","setDeleteModalVisible","iconChoice","handleFilterChange","newArray","sort","a2","localeCompare","handleFileSelect","handleUploadToAsset","handleReverse","handleSearch","handleAssetsSelect","filterOptions","NavBar","LayoutButtons","TemplateText","TextContainer","StyledTextField","showURL","selectedTab","selectTab","textUrl","setTextUrl","handleSetUrl","handleTextUrlChange","resetValues","handleModalClose","match","TeamMenu","onChangeTeam","handleTeamChange","team","TeamStatus","TeamStatusIcon","isActive","LabelWrapper","LabelLeft","LabelRight","LabelUserName","LabelTeamName","HeaderProfile","StyledDropdown","itemStyle","LeftArea","CenterArea","StyledLink","onCreateTeam","modalShown","onNotificationClose","WorkspaceCreationModal","MenuListItemLabel","MenuItemWrapper","StyledLabel","StyledLinkButton","MenuListItem","convert","filterLayers","flattenLayers","reduce","LayerMultipleSelectionModal","selectedLeftLayers","selectedRightLayers","selectedLeftLayerIds","selectLeftLayerIds","selectedRightLayerIds","selectRightLayerIds","convertedLayers","rightLayers","setRightLayers","leftLayers","clearSelectedLeftLayers","clearSelectedRightLayers","selectLeftLayers","selectRightLayers","ok","addLayers","uniqBy","removeLayers","dropRightLayer","_src","arrayMove","root","Main","TreeViewTitle","StyledTreeView","CenterPane","InnerTreeView","LayerSelectionModal","groupSelectable","multipleSelectable","selectedLayer","selectLayer","LayerTreeViewItem","useDoubleClick","LayerActions","importLayer","extension","lastIndexOf","format","ActionWrapper","allSiblingsDoesNotHaveChildren","editing","setEditing","editingName","setEditingName","toggleHover","editingNameRef","showHelp","setShowHelp","handleVisibilityChange","event","startEditing","finishEditing","resetEditing","inputRef","handleDoubleClick","ArrowIconWrapper","LayerIconWrapper","LayerIcon","selectedTextColor","disableTextColor","Input","LayerName","LayerCount","Visibility","LayerActionsWrapper","bottomBorder","Children","InnerLayerTreeViewItem","onDelete","isCapturing","onIsCapturingChange","cameraState","cameraValue","openPopup","closePopup","cameraWrapperRef","startCapture","finishCapture","cancelCapture","submitCapture","handleLatChange","handleLngChange","updateAltitude","handleAltitudeChange","handleHeadingChange","handlePitchChange","handleRollChange","handleClickCancelButton","handleClickSubmitButton","isAwayTarget","contains","jump","round","data-camera-popup","CameraWrapper","Popup","FormGroup","FormIcon","FormFieldGroup","FormFieldRow","FloatText","step","FormButtonGroup","propertyFieldPopup","getHexString","getAlpha","toHexString","toHex8String","colorState","setColor","rgba","setRgba","pickerRef","newColor","handleRgbaInput","handleHexInput","handleSave","handleHexSave","handleClickOutside","InputWrapper","Layers","CheckedPattern","Swatch","PickerWrapper","RgbaInputWrapper","PickerText","layerStyle","LayerField","modalActive","setModalActive","handleOpen","LngLatMinMax","isAltitudeEnabled","isNaN","NumberField","isEditing","callChange","floatValue","isFinite","handleFocus","onFocus","selectableType","sType","visibleItems","Fragment","NoContent","linkedFieldName","fixedDatasetSchemaId","fixedDatasetId","onDatasetPickerOpen","visibleDatasetSchemas","selectedSchema","selectedDatasetPath","schemaName","datasetName","startDatasetSelection","finishDatasetSelection","proceed","back","FirstSlidePage","LinkedData","LinkedDataDetailContent","textDecoration","overflow","textOverflow","whiteSpace","SlidePage","PropertyLinkPanelWrapper","safeFontItems","Arial","displayName","Georgia","Tahoma","Verdana","YuGothic","StyledOption","formatItems","FontFormatField","sizeItems","FontSizeField","horizontalAlignItems","tColor","updateTypography","handleChangeFamily","handleChangeSize","handleChangeColor","handleChangeAlign","fontFormatValues","Boolean","handleChangeFormat","concat","difference","Row","FontHorizontalAlignField","URLField","isAssetModalOpen","setAssetModalOpen","openAssetModal","closeAssetModal","AssetButton","NonEditableField","linkedDatasetFieldName","smallText","datasetField","FormItemWrapper","StyledPropertyTitleWrapper","StyledPropertyFieldWrapper","onUploadFile","onRemoveFile","linkedDatasetSchemaId","linkedDatasetId","commonProps","PropertyListItem","marginRight","titleText","arrayDiff","oldList","newList","newIds","oldIds","added","differenceBy","removed","newAndRemoved","mergeArrays","array1","array2","element2","oldIndex","newIndex","oldIndex2","innerSelectedIndex","layerModalActive","setLayerModalActive","selectedLayers","addItem","moveItem","_dest","removeItem","closeLayerModal","handleLayerSelect","ops","itemId","treeViewItem","treeViewSelected","AddItemIcon","RemoveItemIcon","StyledWrapper","DescriptionWrapper","Desc","Public","shadow","lightTransparentBg","infoboxProperty","isHovered","Dl","Dt","Dd","accent2","ImageBlock","infoboxSize","defaultCenter","LocationBlock","zoom","onclick","latlng","attribution","ondragend","getLatLng","L","TextBlock","editingText","setEditingText","isSelectedPrev","nl2br","VideoBlock","videoUrl","player","getInternalPlayer","internal","getIframe","activeElement","playsinline","pip","preload","BlockComponent","editable","extensionType","hr","heightReference","raddi","material","toColor","radii","shadowMode","tag","pointOutlineColor","pointOutlineWidth","labelPos","labelBackground","horizontalOrigin","imageHorizontalOrigin","verticalOrigin","imageVerticalOrigin","crop","imageShadowColor","shadowBlur","imageShadowBlur","shadowOffsetX","imageShadowPositionX","shadowOffsetY","imageShadowPositionY","extrudePoints","useIcon","canvas","cesiumImageColor","pixelOffset","Cartesian2","ent","cesiumElement","hasProperty","addProperty","PropertyBag","positions","ho","vo","HorizontalOrigin","VerticalOrigin","font","toCSSFont","showBackground","Model","maximumScale","minimumPixelSize","lightColor","orientation","Transforms","HeadingPitchRoll","modelColor","modelLightColor","modelSilhouetteColor","uri","colorBlendMode","runAnimations","defaultFOV","durations","cameraExitDuration","fovDuration","fovExitDuration","photoDuration","photoExitDuration","useDelayedCount","prevMode","usePreviousDistinct","exit","advanceMode","startTransition","skipAnimation","next","duration","cameraRef","prevCamera","easing","EasingFunction","photoOverlayImageTransiton","exitPhotoOverlay","PhotoWrapper","transition","Photo","Description","imageClop","photoOverlayDescription","defaultImage","hierarchy","PolygonHierarchy","memoStrokeColor","memoFillColor","clampToGround","Rectangle","ImageMaterialProperty","types","kml","geojson","czml","comps","KmlDataSource","CzmlDataSource","GeoJsonDataSource","ext","actualType","Tileset","viewer","useCesium","styleUrl","Cesium3DTileStyle","__resium_primitive_id","onReady","_debugFlight","zoomTo","intervalDuring","callback","delay","interval","prev","raf","now","useImage","imgRef","setImg","crossOrigin","useCanvas","canvas1","canvas2","setCanvas","can","drawIcon","getContext","save","globalCompositeOperation","clearRect","drawImage","fillStyle","arc","PI","restore","baseline","globe","cartesian","pickEllipsoid","cartesianToCartographic","latitude","longitude","cesiumCamera","cancelFov","animateFOV","destination","easingFunction","cancelFlight","flyToBoundingSphere","BoundingSphere","HeadingPitchRange","frustum","PerspectiveFrustum","fromFov","tweenInterval","tweenEasing","isDestroyed","ColorBlendMode","mix","clamp","HeightReference","relative","ShadowMode","cast_only","receive_only","createWorldImagery","default_label","IonWorldImageryStyle","default_road","stamen_watercolor","OpenStreetMapImageryProvider","credit","stamen_toner","open_street_map","esri_world_topo","ArcGisMapServerImageryProvider","enablePickFeatures","black_marble","IonImageryProvider","assetId","japan_gsi_standard","UrlTemplateImageryProvider","ion","Ion","engineAPI","useEngineRef","imageryLayers","setImageryLayers","useDeepCompareEffect","newTiles","tile_url","tile_minLevel","tile_maxLevel","imagery","terrainProvider","createWorldTerrain","EllipsoidTerrainProvider","initialCameraFlight","onCameraMoveEnd","isEqual","entity","entities","getById","selectedEntity","selectViewerEntity","pick","Entity","Cesium3DTileFeature","primitiveId","getProperty","getPropertyNames","REEARTH_E2E_CESIUM_VIEWER","CameraFlyTo","fullscreenButton","homeButton","geocoder","imageryProvider","baseLayerPicker","navigationHelpButton","projectionPicker","sceneModePicker","creditContainer","requestRenderMode","maximumRenderTimeChange","Infinity","shouldAnimate","useDefault","ScreenSpaceEventType","onMoveEnd","fog","density","fog_density","depthTestAgainstTerrain","enableLighting","showGroundAtmosphere","atmosphereSaturationShift","surturation_shift","atmosphereHueShift","hue_shift","atmosphereBrightnessShift","brightness_shift","terrainExaggerationRelativeHeight","im","minimumTerrainLevel","maximumTerrainLevel","boundingSphere","once","StyledAddButton","InsertLine","circleVisible","InsertionBar","onButtonClick","insertionPopUpPosition","dragDisabled","onMove","onInsert","isHoveredRef","previewRef","BlockWrapper","Handle","useBuffered","dep","bufferedState","FloatedPanel","onHover","onEnter","onEntered","onExit","onExited","bChildren","bStyles","InfoBox","noContent","isSmallWindow","useMedia","ref2","scrollLeft","scrollTop","wrapperStyles","StyledFloatedPanel","floated","TitleFlex","TitleText","setInsertionPopUpPosition","onInsertionButtonClick","onInsertionPopUpClose","handleBlockInsert","bi","isReadyToRender","setIsReadyToRender","NoContentInfo","EventTarget","callbacks","getEventCallback","ecbs","ecb","detail","off","deleteEventCallback","dispatchEvent","CustomEvent","eventFn","reearthEvents","emitReearthEvent","handleError","handleMessage","plugin","cloneDeep","button","menuItems","visibleMenuButton","setVisibleMenuButton","splitLink","wrappperRef","MenuWrapper","MenuItem","buttonColor","buttonsByPosition","groupBy","buttonInvisible","splashScreen","transitionDuration","imageW","imageH","overlayTitle","cameraSequence","setCameraSequence","delayedCameraSequence","setDelayedCameraSequence","currentCamera","delayedCurrentCamera","setActive","useTimeoutFn","defaultCamera","ArrowButton","Current","MenuIcon","menuOpen","Storytelling","isExtraSmallWindow","storiesData","openMenu","story","selectAt","handleNext","handlePrev","noCameraFlight","isPhotoOverlay","layerCamera","layerDuration","layerRange","WidgetComponent","createContext","useContext","act","apiVersion","mock","LayerEncodingFormat","ListOperation","NodeType","PluginExtensionType","PropertySchemaFieldUi","PublishmentStatus","Role","SceneLockMode","TextAlign","Theme","ValueType","PropertyFieldLinkFragmentDoc","gql","PropertyItemFragmentFragmentDoc","PropertyFragmentWithoutSchemaFragmentDoc","PropertySchemaItemFragmentFragmentDoc","PropertyFragmentFragmentDoc","MergedPropertyGroupCommonFragmentFragmentDoc","MergedPropertyGroupFragmentFragmentDoc","MergedPropertyFragmentWithoutSchemaFragmentDoc","EarthLayerItemFragmentDoc","EarthLayerFragmentDoc","EarthLayer1FragmentDoc","EarthLayer2FragmentDoc","EarthLayer3FragmentDoc","EarthLayer4FragmentDoc","EarthLayer5FragmentDoc","LayerSystemLayerFragmentDoc","LayerSystemLayer1FragmentDoc","LayerSystemLayer2FragmentDoc","LayerSystemLayer3FragmentDoc","LayerSystemLayer4FragmentDoc","LayerSystemLayer5FragmentDoc","InfoboxFragmentFragmentDoc","MergedPropertyFragmentFragmentDoc","MergedInfoboxFragmentFragmentDoc","LayerFragmentFragmentDoc","Layer0FragmentFragmentDoc","Layer1FragmentFragmentDoc","Layer3FragmentFragmentDoc","TeamFragmentDoc","LanguageDocument","baseOptions","Apollo","ThemeDocument","useThemeQuery","endpoint","getAccessTokenSilently","authLink","setContext","headers","Authorization","uploadLink","createUploadLink","errorLink","graphQLErrors","networkError","store","localSlice","reportError","Sentry","sentryLink","SentryLink","possibleTypes","fragmentMatcher","typePolicies","LayerGroup","merge","connectToDevTools","createSlice","initialState","reducers","payload","reducer","configureStore","fontSizes","xs","normal","XLBold","XLRegular","LRegular","MBold","MRegular","SBold","SRegular","sizes","1","2","3","4","5","strong","weakest","primary","secondary","functional","success","attention","notice","white","light","general","transparent","transparentLight","transparentBlack","brand","ReearthBlue","ReearthRed","commonTheme","form","settingHeader","brandBlue","brandRed","itemBg","projectName","projectDescription","heroButtonText","heroButtonTextHover","headerBg","enabledBg","disabledBg","assetsContainer","tabArea","selectedBg","statusText","container","input","GlobalStyle","Global","lightTheme","darkTheme","headerHeight","primitiveHeaderHeight","MenuIconBarWidth","layerIconAndArrowWidth","layerSidePadding","propertyMenuMinWidth","propertyMenuMaxWidth","propertyTextInputHeight","propertyTextareaHeight","dashboardWorkspaceMinWidth","dashboardQuickMinWidth","dashboardContentHeight","dashboardContentSmallHeight","rawStyled","ThemeContext","array","res","isPresent","end","getDropResult","useDndDrag","calcContext","isNotDroppable","useDndDrop","canDrop2","DndProvider","backend","HTML5Backend","GQLValueType","ff","getCSSFontFamily","fontWeight","parseInt","repeat","withAlpha","toTextDecoration","bool","string","exports","webpackContext","req","webpackContextResolve","__webpack_require__","webpackContextKeys"],"sourceRoot":""}